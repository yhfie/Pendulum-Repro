var unsafe.$heap: $heap_type;

var unsafe.$intArrayType: javaType;

var unsafe.$charArrayType: javaType;

var unsafe.$boolArrayType: javaType;

var unsafe.$byteArrayType: javaType;

var unsafe.$longArrayType: javaType;

var unsafe.$arrSizeHeap: [ref]int;

var unsafe.$stringSizeHeap: [ref]int;

var unsafe.$boolArrHeap: boolArrHeap_type;

var unsafe.$refArrHeap: refArrHeap_type;

var unsafe.$realArrHeap: realArrHeap_type;

var unsafe.$intArrHeap: intArrHeap_type;

var unsafe.$objIndex: int;

var unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336: ref;

var unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259: ref;

var unsafe.java.lang.String$java.lang.StringBuilder$value470: Field ref;

var unsafe.char$lp$$rp$$java.lang.String$chars471: Field ref;

var unsafe.boolean$java.lang.Boolean$value0: Field int;

const unique unsafe.$type: Field javaType;

const unique unsafe.$alloc: Field bool;

const unique unsafe.$null: ref;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Object: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.org.openmrs.util.Security: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.io.Serializable: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Comparable: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.CharSequence: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.org.openmrs.api.APIException: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Throwable: javaType extends unique unsafe.java.lang.Object, unsafe.java.io.Serializable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Exception: javaType extends unique unsafe.java.lang.Throwable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.RuntimeException: javaType extends unique unsafe.java.lang.Exception complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.ClassCastException: javaType extends unique unsafe.java.lang.RuntimeException complete;

const unique unsafe.$StringConst0: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Appendable: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.AbstractStringBuilder: javaType extends unique unsafe.java.lang.Object, unsafe.java.lang.Appendable, unsafe.java.lang.CharSequence complete;

const unique unsafe.$StringConst1: ref extends complete;

const unique unsafe.$StringConst2: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.MessageDigestSpi: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.MessageDigest: javaType extends unique unsafe.java.security.MessageDigestSpi complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.GeneralSecurityException: javaType extends unique unsafe.java.lang.Exception complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.NoSuchAlgorithmException: javaType extends unique unsafe.java.security.GeneralSecurityException complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.org.slf4j.Logger: javaType extends complete;

const unique unsafe.$StringConst3: ref extends complete;

const unique unsafe.$StringConst4: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.IndexOutOfBoundsException: javaType extends unique unsafe.java.lang.RuntimeException complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.ArrayIndexOutOfBoundsException: javaType extends unique unsafe.java.lang.IndexOutOfBoundsException complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.NullPointerException: javaType extends unique unsafe.java.lang.RuntimeException complete;

const unique unsafe.$StringConst5: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Number: javaType extends unique unsafe.java.lang.Object, unsafe.java.io.Serializable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Integer: javaType extends unique unsafe.java.lang.Number, unsafe.java.lang.Comparable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.util.Random: javaType extends unique unsafe.java.lang.Object, unsafe.java.io.Serializable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.System: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Long: javaType extends unique unsafe.java.lang.Number, unsafe.java.lang.Comparable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.spec.AlgorithmParameterSpec: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.javax.crypto.spec.IvParameterSpec: javaType extends unique unsafe.java.lang.Object, unsafe.java.security.spec.AlgorithmParameterSpec complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.spec.KeySpec: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.Key: javaType extends unsafe.java.io.Serializable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.javax.security.auth.Destroyable: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.javax.crypto.SecretKey: javaType extends unsafe.java.security.Key, unsafe.javax.security.auth.Destroyable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.javax.crypto.spec.SecretKeySpec: javaType extends unique unsafe.java.lang.Object, unsafe.java.security.spec.KeySpec, unsafe.javax.crypto.SecretKey complete;

const unique unsafe.$StringConst6: ref extends complete;

const unique unsafe.$StringConst7: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.javax.crypto.Cipher: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.javax.crypto.NoSuchPaddingException: javaType extends unique unsafe.java.security.GeneralSecurityException complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.InvalidAlgorithmParameterException: javaType extends unique unsafe.java.security.GeneralSecurityException complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.javax.crypto.BadPaddingException: javaType extends unique unsafe.java.security.GeneralSecurityException complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.util.Base64: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.util.Base64$Encoder: javaType extends unique unsafe.java.lang.Object complete;

const unique unsafe.$StringConst8: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.util.Base64$Decoder: javaType extends unique unsafe.java.lang.Object complete;

const unique unsafe.$StringConst9: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.org.openmrs.api.context.Context: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.util.Dictionary: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.util.Map: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Cloneable: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.util.Hashtable: javaType extends unique unsafe.java.util.Dictionary, unsafe.java.util.Map, unsafe.java.lang.Cloneable, unsafe.java.io.Serializable complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.util.Properties: javaType extends unique unsafe.java.util.Hashtable complete;

const unique unsafe.$StringConst10: ref extends complete;

const unique unsafe.$StringConst11: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.org.springframework.util.StringUtils: javaType extends complete;

const unique unsafe.$StringConst12: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.security.SecureRandom: javaType extends unique unsafe.java.util.Random complete;

const unique unsafe.$StringConst13: ref extends complete;

const unique unsafe.$StringConst14: ref extends complete;

const unique unsafe.$StringConst15: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.javax.crypto.KeyGenerator: javaType extends unique unsafe.java.lang.Object complete;

const unique unsafe.$StringConst16: ref extends complete;

const unique unsafe.CC$org$_$openmrs$_$util$_$Security: ref extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.org.slf4j.LoggerFactory: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.reflect.AnnotatedElement: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.reflect.GenericDeclaration: javaType extends unsafe.java.lang.reflect.AnnotatedElement complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.reflect.Type: javaType extends complete;

const {:sourceloc "Security.java", -1, -1, -1, -1} unique unsafe.java.lang.Class: javaType extends unique unsafe.java.lang.Object, unsafe.java.io.Serializable, unsafe.java.lang.reflect.GenericDeclaration, unsafe.java.lang.reflect.Type, unsafe.java.lang.reflect.AnnotatedElement complete;

const {:sourceloc "Charset.java", -1, -1, -1, -1} unique unsafe.java.nio.charset.Charset: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unique unsafe.java.lang.StringBuilder: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unique unsafe.java.lang.String: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unique unsafe.java.lang.Character: javaType extends unique unsafe.java.lang.Object, unsafe.java.io.Serializable, unsafe.java.lang.Comparable complete;

const {:sourceloc "String.java", -1, -1, -1, -1} unique unsafe.java.util.Arrays: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "Boolean.java", -1, -1, -1, -1} unique unsafe.java.lang.Boolean: javaType extends unique unsafe.java.lang.Object complete;

function unsafe.$arrayType(t: javaType) : javaType;

function unsafe.$intToReal(x: int) : real;

function unsafe.$intToBool(x: int) : bool;

function unsafe.$refToBool(x: ref) : bool;

function unsafe.$boolToInt(x: bool) : int;

function unsafe.$cmpBool(x: bool, y: bool) : int;

function unsafe.$cmpRef(x: ref, y: ref) : int;

function unsafe.$cmpReal(x: real, y: real) : int;

function unsafe.$cmpInt(x: int, y: int) : int;

function unsafe.$bitOr(x: int, y: int) : int;

function unsafe.$bitAnd(x: int, y: int) : int;

function unsafe.$xorInt(x: int, y: int) : int;

function unsafe.$shlInt(x: int, y: int) : int;

function unsafe.$ushrInt(x: int, y: int) : int;

function unsafe.$shrInt(x: int, y: int) : int;

function unsafe.$mulInt(x: int, y: int) : int;

function unsafe.$divInt(x: int, y: int) : int;

function unsafe.$modInt(x: int, y: int) : int;

function unsafe.$intToRef(id: int) : ref;

axiom (forall x: int :: 
  { unsafe.$intToBool(x): bool } 
  unsafe.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { unsafe.$refToBool(x): bool } 
  unsafe.$refToBool(x): bool <==> (if x == unsafe.$null then false else true));

axiom (forall x: bool :: 
  { unsafe.$boolToInt(x): int } 
  unsafe.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { unsafe.$cmpReal(x, y): int } 
  unsafe.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { unsafe.$cmpInt(x, y): int } 
  unsafe.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: unsafe.$intToRef(index) != unsafe.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> unsafe.$intToRef(i1) == unsafe.$intToRef(i2));

procedure {:prefix "unsafe"} unsafe.$new(obj_type: javaType) returns ($obj: ref);
  modifies unsafe.$objIndex, unsafe.$heap;
  free ensures !old(unsafe.$heap[$obj, unsafe.$alloc]);
  free ensures $obj == unsafe.$intToRef(old(unsafe.$objIndex));
  free ensures unsafe.$heap
   == old(unsafe.$heap)[$obj, unsafe.$alloc := true][$obj, unsafe.$type := obj_type];
  free ensures $obj != unsafe.$null;
  free ensures unsafe.$objIndex == old(unsafe.$objIndex) + 1;



procedure {:prefix "unsafe"} unsafe.java.lang.Object$java.lang.Object$clone$43($this: ref) returns ($other: ref);
  free ensures unsafe.$heap[$other, unsafe.$type] == unsafe.$heap[$this, unsafe.$type];
  free ensures $other != unsafe.$null;
  free ensures unsafe.$heap[$other, unsafe.$alloc] <==> true;



procedure {:prefix "unsafe"} unsafe.int$java.lang.String$compareTo$87($this: ref, $other: ref) returns ($return: int);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$hashMatches$java.lang.String_java.lang.String($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$heap, unsafe.$intArrHeap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$($this: ref, $in_parameter__0: ref, $in_parameter__1: ref)
   returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$encodeString$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$heap, unsafe.$intArrHeap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$encodeStringSHA1$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$heap, unsafe.$intArrHeap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$stringSizeHeap, unsafe.$arrSizeHeap, unsafe.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.java.security.MessageDigest$getInstance$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.org.slf4j.Logger$error$java.lang.String_java.lang.Throwable($this: ref, $in_parameter__0: ref, $in_parameter__1: ref)
   returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable($this: ref, $in_parameter__0: ref, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.java.security.MessageDigest$digest$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$hexString$byte$lp$$rp$($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$intArrHeap, unsafe.$heap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.Integer$toHexString$int($in_parameter__0: int) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$getRandomToken$() returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$heap, unsafe.$intArrHeap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.java.util.Random$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.System$currentTimeMillis$() returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.Long$toString$long($in_parameter__0: int) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.util.Random$nextLong$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$arrSizeHeap, unsafe.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.javax.crypto.spec.IvParameterSpec$$la$init$ra$$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.javax.crypto.spec.SecretKeySpec$$la$init$ra$$byte$lp$$rp$_java.lang.String($this: ref, $in_parameter__0: ref, $in_parameter__1: ref)
   returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.javax.crypto.Cipher$getInstance$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.javax.crypto.Cipher$init$int_java.security.Key_java.security.spec.AlgorithmParameterSpec($this: ref, $in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.javax.crypto.Cipher$doFinal$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.util.Base64$getEncoder$() returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.util.Base64$Encoder$encode$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$encrypt$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$arrSizeHeap, unsafe.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$getSavedInitVector$() returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$getSavedSecretKey$() returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$arrSizeHeap, unsafe.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.java.util.Base64$getDecoder$() returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.util.Base64$Decoder$decode$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$decrypt$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$arrSizeHeap, unsafe.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.api.context.Context$getRuntimeProperties$() returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.util.Properties$getProperty$java.lang.String_java.lang.String($this: ref, $in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.org.springframework.util.StringUtils$hasText$java.lang.String($in_parameter__0: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$generateNewInitVector$() returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.security.SecureRandom$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.java.security.SecureRandom$nextBytes$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$generateNewSecretKey$() returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.javax.crypto.KeyGenerator$getInstance$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.javax.crypto.KeyGenerator$init$int($this: ref, $in_parameter__0: int) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.javax.crypto.KeyGenerator$generateKey$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.security.Key$getEncoded$($this: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.org.openmrs.util.Security$$la$clinit$ra$$() returns ($exception: ref);
  modifies unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259;



procedure {:prefix "unsafe"} unsafe.org.slf4j.LoggerFactory$getLogger$java.lang.Class($in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.nio.charset.Charset$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$$la$init$ra$$($this: ref) returns ($exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$append$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$append$char($this: ref, $in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$intArrHeap, unsafe.$heap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref);
  modifies unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$append$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$intArrHeap, unsafe.$heap, unsafe.$stringSizeHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.Character$charValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$toString$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$toCharArray$($this: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset($this: ref, $in_parameter__0: ref, $in_parameter__1: ref)
   returns ($exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$heap, unsafe.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$$la$init$ra$$java.lang.StringBuilder($this: ref, $in_parameter__0: ref) returns ($exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$getBytes$($this: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$intArrHeap, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$getBytes$java.nio.charset.Charset($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$arrSizeHeap, unsafe.$intArrHeap, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$toCharArray$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.String$toCharArray$java.nio.charset.Charset($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.String$hashCode$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.util.Arrays$hashCode$char$lp$$rp$($in_parameter__0: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.String$equals$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Object$getClass$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref);
  modifies unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref);



implementation unsafe.org.openmrs.util.Security$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Security.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.org.openmrs.util.Security;
    assume {:sourceloc "Security.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Security.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Security.java", 38, -1, -1, -1} true;
    goto block1;

  block1:
    return;
}



implementation unsafe.org.openmrs.util.Security$hashMatches$java.lang.String_java.lang.String($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var $z0: int;
  var $z3: int;
  var r0: ref;
  var $z1: int;
  var $z2: int;
  var $r6: ref;
  var r7: ref;
  var $fakelocal_2: ref;
  var r8: ref;
  var $fakelocal_1: ref;
  var $r5: ref;
  var r1: ref;
  var $fakelocal_0: ref;
  var $r3: ref;
  var $r4: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r7: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r6: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r13: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r8: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r10: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r3: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$intArrHeap: intArrHeap_type;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$b3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$i4: int;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$3$r0: ref;
  var inline$java.lang.StringBuilder$toString$$3$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$3$$this: ref;
  var inline$java.lang.StringBuilder$toString$$3$$return: ref;
  var inline$java.lang.StringBuilder$toString$$3$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$intArrHeap: intArrHeap_type;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$0$r1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$0$c0: int;
  var inline$java.lang.StringBuilder$append$char$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$0$r0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$this: ref;
  var inline$java.lang.StringBuilder$append$char$0$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$0$$return: ref;
  var inline$java.lang.StringBuilder$append$char$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$4$r0: ref;
  var inline$java.lang.StringBuilder$toString$$4$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$4$$this: ref;
  var inline$java.lang.StringBuilder$toString$$4$$return: ref;
  var inline$java.lang.StringBuilder$toString$$4$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$5$r0: ref;
  var inline$java.lang.StringBuilder$toString$$5$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$5$$this: ref;
  var inline$java.lang.StringBuilder$toString$$5$$return: ref;
  var inline$java.lang.StringBuilder$toString$$5$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$1$r1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$1$c0: int;
  var inline$java.lang.StringBuilder$append$char$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$1$r0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$this: ref;
  var inline$java.lang.StringBuilder$append$char$1$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$1$$return: ref;
  var inline$java.lang.StringBuilder$append$char$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$6$r0: ref;
  var inline$java.lang.StringBuilder$toString$$6$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$6$$this: ref;
  var inline$java.lang.StringBuilder$toString$$6$$return: ref;
  var inline$java.lang.StringBuilder$toString$$6$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$7$r0: ref;
  var inline$java.lang.StringBuilder$toString$$7$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$7$$this: ref;
  var inline$java.lang.StringBuilder$toString$$7$$return: ref;
  var inline$java.lang.StringBuilder$toString$$7$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$8$r0: ref;
  var inline$java.lang.StringBuilder$toString$$8$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$8$$this: ref;
  var inline$java.lang.StringBuilder$toString$$8$$return: ref;
  var inline$java.lang.StringBuilder$toString$$8$$exception: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$r7: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$r6: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$r8: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$r2: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$i0: int;
  var inline$java.lang.String$equals$java.lang.Object$0$$r3: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$r4: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$i5: int;
  var inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_5: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$r9: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_4: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$c3: int;
  var inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$r5: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$c4: int;
  var inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_1: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$r1: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_2: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$i2: int;
  var inline$java.lang.String$equals$java.lang.Object$0$r0: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$i1: int;
  var inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_3: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$this: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$return: int;
  var inline$java.lang.String$equals$java.lang.Object$0$$exception: ref;
  var inline$java.lang.String$equals$java.lang.Object$0$$objIndex: int;
  var inline$java.lang.String$equals$java.lang.Object$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r6: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r4: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r1: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r2: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r13: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r10: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r7: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r12: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r3: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r8: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r9: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$intArrHeap: intArrHeap_type;
  var inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$1$$r4: ref;
  var inline$java.lang.String$getBytes$$1$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$1$$c2: int;
  var inline$java.lang.String$getBytes$$1$$b3: int;
  var inline$java.lang.String$getBytes$$1$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$1$r0: ref;
  var inline$java.lang.String$getBytes$$1$i4: int;
  var inline$java.lang.String$getBytes$$1$$i0: int;
  var inline$java.lang.String$getBytes$$1$$r3: ref;
  var inline$java.lang.String$getBytes$$1$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$1$r1: ref;
  var inline$java.lang.String$getBytes$$1$$i1: int;
  var inline$java.lang.String$getBytes$$1$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$1$$r2: ref;
  var inline$java.lang.String$getBytes$$1$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$1$$this: ref;
  var inline$java.lang.String$getBytes$$1$$return: ref;
  var inline$java.lang.String$getBytes$$1$$exception: ref;
  var inline$java.lang.String$getBytes$$1$$objIndex: int;
  var inline$java.lang.String$getBytes$$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$1$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r5: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$r0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r4: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$return: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$objIndex: int;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$11$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$12$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$12$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$9$r0: ref;
  var inline$java.lang.StringBuilder$toString$$9$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$9$$this: ref;
  var inline$java.lang.StringBuilder$toString$$9$$return: ref;
  var inline$java.lang.StringBuilder$toString$$9$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$13$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$13$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$10$r0: ref;
  var inline$java.lang.StringBuilder$toString$$10$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$10$$this: ref;
  var inline$java.lang.StringBuilder$toString$$10$$return: ref;
  var inline$java.lang.StringBuilder$toString$$10$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$7$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$12$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$12$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$12$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$12$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$12$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$12$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$12$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$14$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$14$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$11$r0: ref;
  var inline$java.lang.StringBuilder$toString$$11$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$11$$this: ref;
  var inline$java.lang.StringBuilder$toString$$11$$return: ref;
  var inline$java.lang.StringBuilder$toString$$11$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$12$r0: ref;
  var inline$java.lang.StringBuilder$toString$$12$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$12$$this: ref;
  var inline$java.lang.StringBuilder$toString$$12$$return: ref;
  var inline$java.lang.StringBuilder$toString$$12$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$s4: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_15: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_16: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_7: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_8: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_12: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_18: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b1: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$c6: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_13: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i2: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_20: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$s0: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_10: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_19: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_22: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_14: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_23: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b3: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$c5: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_21: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_17: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_9: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_11: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$objIndex: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$intArrHeap: intArrHeap_type;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$13$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$13$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$13$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$13$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$13$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$13$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$13$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$15$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$15$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$2$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$2$r1: ref;
  var inline$java.lang.StringBuilder$append$char$2$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$2$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$2$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$2$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$2$c0: int;
  var inline$java.lang.StringBuilder$append$char$2$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$2$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$2$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$2$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$2$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$2$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$2$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$2$r0: ref;
  var inline$java.lang.StringBuilder$append$char$2$$this: ref;
  var inline$java.lang.StringBuilder$append$char$2$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$2$$return: ref;
  var inline$java.lang.StringBuilder$append$char$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$2$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$2$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$2$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$14$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$14$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$14$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$14$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$14$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$14$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$14$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$16$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$16$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$8$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$15$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$15$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$15$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$15$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$15$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$15$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$15$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$17$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$17$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$13$r0: ref;
  var inline$java.lang.StringBuilder$toString$$13$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$13$$this: ref;
  var inline$java.lang.StringBuilder$toString$$13$$return: ref;
  var inline$java.lang.StringBuilder$toString$$13$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$18$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$18$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$14$r0: ref;
  var inline$java.lang.StringBuilder$toString$$14$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$14$$this: ref;
  var inline$java.lang.StringBuilder$toString$$14$$return: ref;
  var inline$java.lang.StringBuilder$toString$$14$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$3$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$3$r1: ref;
  var inline$java.lang.StringBuilder$append$char$3$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$3$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$3$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$3$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$3$c0: int;
  var inline$java.lang.StringBuilder$append$char$3$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$3$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$3$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$3$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$3$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$3$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$3$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$3$r0: ref;
  var inline$java.lang.StringBuilder$append$char$3$$this: ref;
  var inline$java.lang.StringBuilder$append$char$3$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$3$$return: ref;
  var inline$java.lang.StringBuilder$append$char$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$3$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$3$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$3$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$16$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$16$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$16$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$16$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$16$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$16$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$16$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$19$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$19$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$9$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$17$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$17$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$17$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$17$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$17$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$17$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$17$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$20$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$20$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$15$r0: ref;
  var inline$java.lang.StringBuilder$toString$$15$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$15$$this: ref;
  var inline$java.lang.StringBuilder$toString$$15$$return: ref;
  var inline$java.lang.StringBuilder$toString$$15$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$21$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$21$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$16$r0: ref;
  var inline$java.lang.StringBuilder$toString$$16$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$16$$this: ref;
  var inline$java.lang.StringBuilder$toString$$16$$return: ref;
  var inline$java.lang.StringBuilder$toString$$16$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$17$r0: ref;
  var inline$java.lang.StringBuilder$toString$$17$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$17$$this: ref;
  var inline$java.lang.StringBuilder$toString$$17$$return: ref;
  var inline$java.lang.StringBuilder$toString$$17$$exception: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$r7: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$r6: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$r8: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$r2: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$i0: int;
  var inline$java.lang.String$equals$java.lang.Object$1$$r3: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$r4: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$i5: int;
  var inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_5: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$r9: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_4: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$c3: int;
  var inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$r5: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$c4: int;
  var inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_1: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$r1: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_2: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$i2: int;
  var inline$java.lang.String$equals$java.lang.Object$1$r0: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$i1: int;
  var inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_3: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$this: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$return: int;
  var inline$java.lang.String$equals$java.lang.Object$1$$exception: ref;
  var inline$java.lang.String$equals$java.lang.Object$1$$objIndex: int;
  var inline$java.lang.String$equals$java.lang.Object$1$$heap: $heap_type;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r2: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r7: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r9: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r8: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r1: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r12: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r3: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r10: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r6: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r13: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r4: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$2$$r4: ref;
  var inline$java.lang.String$getBytes$$2$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$2$$c2: int;
  var inline$java.lang.String$getBytes$$2$$b3: int;
  var inline$java.lang.String$getBytes$$2$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$2$r0: ref;
  var inline$java.lang.String$getBytes$$2$i4: int;
  var inline$java.lang.String$getBytes$$2$$i0: int;
  var inline$java.lang.String$getBytes$$2$$r3: ref;
  var inline$java.lang.String$getBytes$$2$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$2$r1: ref;
  var inline$java.lang.String$getBytes$$2$$i1: int;
  var inline$java.lang.String$getBytes$$2$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$2$$r2: ref;
  var inline$java.lang.String$getBytes$$2$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$2$$this: ref;
  var inline$java.lang.String$getBytes$$2$$return: ref;
  var inline$java.lang.String$getBytes$$2$$exception: ref;
  var inline$java.lang.String$getBytes$$2$$objIndex: int;
  var inline$java.lang.String$getBytes$$2$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$2$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$2$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r5: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$r0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r4: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$return: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$objIndex: int;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$18$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$18$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$18$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$18$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$18$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$18$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$18$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$22$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$22$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$10$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$19$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$19$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$19$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$19$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$19$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$19$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$19$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$23$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$23$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$18$r0: ref;
  var inline$java.lang.StringBuilder$toString$$18$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$18$$this: ref;
  var inline$java.lang.StringBuilder$toString$$18$$return: ref;
  var inline$java.lang.StringBuilder$toString$$18$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$11$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$20$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$20$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$20$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$20$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$20$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$20$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$20$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$24$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$24$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$19$r0: ref;
  var inline$java.lang.StringBuilder$toString$$19$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$19$$this: ref;
  var inline$java.lang.StringBuilder$toString$$19$$return: ref;
  var inline$java.lang.StringBuilder$toString$$19$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$12$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$21$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$21$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$21$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$21$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$21$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$21$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$21$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$25$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$25$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$20$r0: ref;
  var inline$java.lang.StringBuilder$toString$$20$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$20$$this: ref;
  var inline$java.lang.StringBuilder$toString$$20$$return: ref;
  var inline$java.lang.StringBuilder$toString$$20$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$21$r0: ref;
  var inline$java.lang.StringBuilder$toString$$21$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$21$$this: ref;
  var inline$java.lang.StringBuilder$toString$$21$$return: ref;
  var inline$java.lang.StringBuilder$toString$$21$$exception: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$s3: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$b1: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r5: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$22$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$22$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$22$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$22$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$22$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$22$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$22$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$26$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$26$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$13$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$23$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$23$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$23$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$23$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$23$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$23$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$23$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$27$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$27$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$22$r0: ref;
  var inline$java.lang.StringBuilder$toString$$22$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$22$$this: ref;
  var inline$java.lang.StringBuilder$toString$$22$$return: ref;
  var inline$java.lang.StringBuilder$toString$$22$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$28$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$28$$exception: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$r0: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$r2: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$this: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$return: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$exception: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$toCharArray$$0$$heap: $heap_type;
  var inline$java.lang.String$toCharArray$$0$r0: ref;
  var inline$java.lang.String$toCharArray$$0$$r1: ref;
  var inline$java.lang.String$toCharArray$$0$$this: ref;
  var inline$java.lang.String$toCharArray$$0$$return: ref;
  var inline$java.lang.String$toCharArray$$0$$exception: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$r7: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$r6: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$r8: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$r2: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$i0: int;
  var inline$java.lang.String$equals$java.lang.Object$2$$r3: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$r4: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$i5: int;
  var inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_5: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$r9: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_4: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$c3: int;
  var inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_0: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$r5: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$c4: int;
  var inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_1: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$r1: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_2: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$i2: int;
  var inline$java.lang.String$equals$java.lang.Object$2$r0: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$i1: int;
  var inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_3: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$this: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$in_parameter__0: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$return: int;
  var inline$java.lang.String$equals$java.lang.Object$2$$exception: ref;
  var inline$java.lang.String$equals$java.lang.Object$2$$objIndex: int;
  var inline$java.lang.String$equals$java.lang.Object$2$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$in_parameter__1, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Security.java", 61, -1, -1, -1} true;
    goto anon32_Then, anon32_Else;

  anon32_Then:
    assume {:partition} r0 == unsafe.$null;
    assert {:sourceloc "Security.java", 61, -1, -1, -1} {:comment "thenblock"} true;
    goto block2;

  anon32_Else:
    assume {:partition} r0 != unsafe.$null;
    assert {:sourceloc "Security.java", 61, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Security.java", 62, -1, -1, -1} true;
    goto anon33_Then, anon33_Else;

  anon33_Then:
    assume {:partition} r1 != unsafe.$null;
    assert {:sourceloc "Security.java", 62, -1, -1, -1} {:comment "thenblock"} true;
    goto block3;

  anon33_Else:
    assume {:partition} r1 == unsafe.$null;
    assert {:sourceloc "Security.java", 62, -1, -1, -1} {:comment "elseblock"} true;
    goto block2;

  block2:
    assert {:sourceloc "Security.java", 62, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r7 := $fakelocal_0;
    assert {:sourceloc "Security.java", 62, -1, -1, -1} true;
    goto anon34_Then, anon34_Else;

  anon34_Then:
    assume {:partition} unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object);
    $exception := $exception;
    goto anon8;

  anon34_Else:
    assume {:partition} !(unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object));
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_1;
    return;

  anon8:
    $r3 := unsafe.$null;
    assert {:sourceloc "Security.java", 62, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$(r7, unsafe.$StringConst0, $r3);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon35_Then, anon35_Else;

  anon35_Then:
    assume {:partition} unsafe.$heap[r7, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon11;

  anon35_Else:
    assume {:partition} !(unsafe.$heap[r7, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_2;
    return;

  anon11:
    r8 := r7;
    assert {:sourceloc "Security.java", 62, -1, -1, -1} true;
    $exception := r8;
    goto block7;

  block3:
    assert {:sourceloc "Security.java", 65, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$in_parameter__0 := r1;
    havoc inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r7, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r6, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r13, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r8, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_4, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r10, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_5, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r3, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r5, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$intArrHeap := unsafe.$intArrHeap;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 89, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0 := 7];
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block9;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block9:
    assert {:sourceloc "Security.java", 93, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.java.security.MessageDigest$getInstance$java.lang.String(inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1);
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon20_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon20_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon20_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon21_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon21_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon21_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon21_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon4;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon20_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon4;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon4:
    assert {:sourceloc "Security.java", 94, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r5 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 94, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon22_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon22_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon22_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon7;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon22_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon7:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r5;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$b3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$i4, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := 0;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block70;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b3 := inline$java.lang.String$getBytes$$0$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block71;

  inline$java.lang.String$getBytes$$0$block71:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r3 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon7$1;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon7$1:
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon23_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon23_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon23_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon24_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon24_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon24_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon24_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block11;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon23_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block11;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block11:
    assert {:sourceloc "Security.java", 100, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block12;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r8 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    assert {:sourceloc "Security.java", 96, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r8;
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9 := unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259;
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1;
    havoc inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := unsafe.$StringConst1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0 := unsafe.$StringConst2;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$2$$r3, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$2$$r2, inline$java.lang.StringBuilder$append$java.lang.String$2$r0, inline$java.lang.StringBuilder$append$java.lang.String$2$$r6, inline$java.lang.StringBuilder$append$java.lang.String$2$$r5, inline$java.lang.StringBuilder$append$java.lang.String$2$r1, inline$java.lang.StringBuilder$append$java.lang.String$2$$r4, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$2$$return, inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r0 := inline$java.lang.StringBuilder$append$java.lang.String$2$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r1 := inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$3$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$$la$init$ra$$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r5;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r6 := inline$java.lang.StringBuilder$toString$$2$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$2$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := inline$java.lang.StringBuilder$append$java.lang.String$2$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$2$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4 := inline$java.lang.StringBuilder$append$java.lang.String$2$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$3$Entry;

  inline$java.lang.StringBuilder$toString$$3$Entry:
    inline$java.lang.StringBuilder$toString$$3$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4;
    havoc inline$java.lang.StringBuilder$toString$$3$r0, inline$java.lang.StringBuilder$toString$$3$$r1, inline$java.lang.StringBuilder$toString$$3$$return, inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$toString$$3$anon0;

  inline$java.lang.StringBuilder$toString$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$r0 := inline$java.lang.StringBuilder$toString$$3$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$return := inline$java.lang.StringBuilder$toString$$3$$r1;
    goto inline$java.lang.StringBuilder$toString$$3$block61;

  inline$java.lang.StringBuilder$toString$$3$block61:
    goto inline$java.lang.StringBuilder$toString$$3$Return;

  inline$java.lang.StringBuilder$toString$$3$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5 := inline$java.lang.StringBuilder$toString$$3$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8:
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r10 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10$1;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10$1:
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon25_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon25_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon25_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon13;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon25_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon13:
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.org.slf4j.Logger$error$java.lang.String_java.lang.Throwable(inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r10, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4);
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_3;
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12, unsafe.$StringConst3, unsafe.$null, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon26_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon26_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon26_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon16;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon26_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon16:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r13 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12;
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r13;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block13;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block12:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon27_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon27_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon27_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon19;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon27_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon19:
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r6, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.java.security.MessageDigest$digest$byte$lp$$rp$(inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r3);
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Entry;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Entry:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r6;
    havoc inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$4$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$$la$init$ra$$$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0$1:
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1 := 16];
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Then:
    assume {:partition} 0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon3;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Else:
    assume {:partition} !(0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][0 := 48]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Then:
    assume {:partition} 1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon6;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Else:
    assume {:partition} !(1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon6:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][1 := 49]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Then:
    assume {:partition} 2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 2 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon9;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Else:
    assume {:partition} !(2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 2 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon9:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][2 := 50]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Then:
    assume {:partition} 3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 3 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon12;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Else:
    assume {:partition} !(3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 3 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon12:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][3 := 51]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Then:
    assume {:partition} 4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 4 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon15;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Else:
    assume {:partition} !(4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 4 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][4 := 52]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Then:
    assume {:partition} 5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 5 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon18;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Else:
    assume {:partition} !(5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 5 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon18:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][5 := 53]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Then:
    assume {:partition} 6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 6 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Else:
    assume {:partition} !(6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 6 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon21:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][6 := 54]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Then:
    assume {:partition} 7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon24;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Else:
    assume {:partition} !(7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon24:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][7 := 55]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Then:
    assume {:partition} 8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 8 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon27;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Else:
    assume {:partition} !(8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 8 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon27:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][8 := 56]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Then:
    assume {:partition} 9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 9 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon30;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Else:
    assume {:partition} !(9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 9 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon30:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][9 := 57]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Then:
    assume {:partition} 10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 10 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon33;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Else:
    assume {:partition} !(10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 10 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon33:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][10 := 97]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Then:
    assume {:partition} 11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 11 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon36;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Else:
    assume {:partition} !(11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 11 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon36:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][11 := 98]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Then:
    assume {:partition} 12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 12 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon39;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Else:
    assume {:partition} !(12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 12 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon39:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][12 := 99]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Then:
    assume {:partition} 13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 13 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon42;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Else:
    assume {:partition} !(13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 13 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon42:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][13 := 100]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Then:
    assume {:partition} 14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 14 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon45;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Else:
    assume {:partition} !(14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 14 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon45:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][14 := 101]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Then:
    assume {:partition} 15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 15 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon48;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Else:
    assume {:partition} !(15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 15 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon48:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][15 := 102]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 != unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon51;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 == unsafe.$null;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon51:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3];
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 := 0;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
   >= inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2
   > inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon54;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon54:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon57;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon57:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7];
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, 240);
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 := unsafe.$shrInt(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4, 4);
    assert {:sourceloc "Security.java", 141, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, 15);
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0];
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$Entry;

  inline$java.lang.StringBuilder$append$char$0$Entry:
    inline$java.lang.StringBuilder$append$char$0$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$char$0$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5;
    havoc inline$java.lang.StringBuilder$append$char$0$$r4, inline$java.lang.StringBuilder$append$char$0$r1, inline$java.lang.StringBuilder$append$char$0$$r6, inline$java.lang.StringBuilder$append$char$0$$r8, inline$java.lang.StringBuilder$append$char$0$$fakelocal_2, inline$java.lang.StringBuilder$append$char$0$$r2, inline$java.lang.StringBuilder$append$char$0$c0, inline$java.lang.StringBuilder$append$char$0$$r5, inline$java.lang.StringBuilder$append$char$0$$fakelocal_4, inline$java.lang.StringBuilder$append$char$0$$fakelocal_3, inline$java.lang.StringBuilder$append$char$0$$fakelocal_0, inline$java.lang.StringBuilder$append$char$0$$fakelocal_1, inline$java.lang.StringBuilder$append$char$0$$fakelocal_5, inline$java.lang.StringBuilder$append$char$0$$r7, inline$java.lang.StringBuilder$append$char$0$$r3, inline$java.lang.StringBuilder$append$char$0$r0, inline$java.lang.StringBuilder$append$char$0$$return, inline$java.lang.StringBuilder$append$char$0$$exception;
    inline$java.lang.StringBuilder$append$char$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$0$anon0;

  inline$java.lang.StringBuilder$append$char$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r0 := inline$java.lang.StringBuilder$append$char$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$c0 := inline$java.lang.StringBuilder$append$char$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$0$$r2 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon10_Then, inline$java.lang.StringBuilder$append$char$0$anon10_Else;

  inline$java.lang.StringBuilder$append$char$0$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3;

  inline$java.lang.StringBuilder$append$char$0$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2][0 := inline$java.lang.StringBuilder$append$char$0$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r1 := inline$java.lang.StringBuilder$append$char$0$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$0$$r3 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$5$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$$la$init$ra$$$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$1;

  inline$java.lang.StringBuilder$append$char$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$3$$r3, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$3$$r2, inline$java.lang.StringBuilder$append$java.lang.String$3$r0, inline$java.lang.StringBuilder$append$java.lang.String$3$$r6, inline$java.lang.StringBuilder$append$java.lang.String$3$$r5, inline$java.lang.StringBuilder$append$java.lang.String$3$r1, inline$java.lang.StringBuilder$append$java.lang.String$3$$r4, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$3$$return, inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r0 := inline$java.lang.StringBuilder$append$java.lang.String$3$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r1 := inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$6$r0, inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$6$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$6$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.StringBuilder$$la$init$ra$$$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6:
    goto inline$java.lang.StringBuilder$toString$$4$Entry;

  inline$java.lang.StringBuilder$toString$$4$Entry:
    inline$java.lang.StringBuilder$toString$$4$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r5;
    havoc inline$java.lang.StringBuilder$toString$$4$r0, inline$java.lang.StringBuilder$toString$$4$$r1, inline$java.lang.StringBuilder$toString$$4$$return, inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$toString$$4$anon0;

  inline$java.lang.StringBuilder$toString$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$r0 := inline$java.lang.StringBuilder$toString$$4$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$return := inline$java.lang.StringBuilder$toString$$4$$r1;
    goto inline$java.lang.StringBuilder$toString$$4$block61;

  inline$java.lang.StringBuilder$toString$$4$block61:
    goto inline$java.lang.StringBuilder$toString$$4$Return;

  inline$java.lang.StringBuilder$toString$$4$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r6 := inline$java.lang.StringBuilder$toString$$4$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$3$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := inline$java.lang.StringBuilder$append$java.lang.String$3$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$3$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Return:
    inline$java.lang.StringBuilder$append$char$0$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$3$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$2;

  inline$java.lang.StringBuilder$append$char$0$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$0$$r6 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := inline$java.lang.StringBuilder$append$char$0$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$3;

  inline$java.lang.StringBuilder$append$char$0$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon11_Then, inline$java.lang.StringBuilder$append$char$0$anon11_Else;

  inline$java.lang.StringBuilder$append$char$0$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6;

  inline$java.lang.StringBuilder$append$char$0$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$this := inline$java.lang.StringBuilder$append$char$0$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$0$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6$1;

  inline$java.lang.StringBuilder$append$char$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon12_Then, inline$java.lang.StringBuilder$append$char$0$anon12_Else;

  inline$java.lang.StringBuilder$append$char$0$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9;

  inline$java.lang.StringBuilder$append$char$0$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$5$Entry;

  inline$java.lang.StringBuilder$toString$$5$Entry:
    inline$java.lang.StringBuilder$toString$$5$$this := inline$java.lang.StringBuilder$append$char$0$$r7;
    havoc inline$java.lang.StringBuilder$toString$$5$r0, inline$java.lang.StringBuilder$toString$$5$$r1, inline$java.lang.StringBuilder$toString$$5$$return, inline$java.lang.StringBuilder$toString$$5$$exception;
    goto inline$java.lang.StringBuilder$toString$$5$anon0;

  inline$java.lang.StringBuilder$toString$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$r0 := inline$java.lang.StringBuilder$toString$$5$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$$return := inline$java.lang.StringBuilder$toString$$5$$r1;
    goto inline$java.lang.StringBuilder$toString$$5$block61;

  inline$java.lang.StringBuilder$toString$$5$block61:
    goto inline$java.lang.StringBuilder$toString$$5$Return;

  inline$java.lang.StringBuilder$toString$$5$Return:
    inline$java.lang.StringBuilder$append$char$0$$r8 := inline$java.lang.StringBuilder$toString$$5$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$toString$$5$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9$1;

  inline$java.lang.StringBuilder$append$char$0$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$0$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$return := inline$java.lang.StringBuilder$append$char$0$r0;
    goto inline$java.lang.StringBuilder$append$char$0$block59;

  inline$java.lang.StringBuilder$append$char$0$block59:
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21 := inline$java.lang.StringBuilder$append$char$0$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60$1:
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1];
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$Entry;

  inline$java.lang.StringBuilder$append$char$1$Entry:
    inline$java.lang.StringBuilder$append$char$1$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$char$1$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6;
    havoc inline$java.lang.StringBuilder$append$char$1$$r4, inline$java.lang.StringBuilder$append$char$1$r1, inline$java.lang.StringBuilder$append$char$1$$r6, inline$java.lang.StringBuilder$append$char$1$$r8, inline$java.lang.StringBuilder$append$char$1$$fakelocal_2, inline$java.lang.StringBuilder$append$char$1$$r2, inline$java.lang.StringBuilder$append$char$1$c0, inline$java.lang.StringBuilder$append$char$1$$r5, inline$java.lang.StringBuilder$append$char$1$$fakelocal_4, inline$java.lang.StringBuilder$append$char$1$$fakelocal_3, inline$java.lang.StringBuilder$append$char$1$$fakelocal_0, inline$java.lang.StringBuilder$append$char$1$$fakelocal_1, inline$java.lang.StringBuilder$append$char$1$$fakelocal_5, inline$java.lang.StringBuilder$append$char$1$$r7, inline$java.lang.StringBuilder$append$char$1$$r3, inline$java.lang.StringBuilder$append$char$1$r0, inline$java.lang.StringBuilder$append$char$1$$return, inline$java.lang.StringBuilder$append$char$1$$exception;
    inline$java.lang.StringBuilder$append$char$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$1$anon0;

  inline$java.lang.StringBuilder$append$char$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r0 := inline$java.lang.StringBuilder$append$char$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$c0 := inline$java.lang.StringBuilder$append$char$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$1$$r2 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon10_Then, inline$java.lang.StringBuilder$append$char$1$anon10_Else;

  inline$java.lang.StringBuilder$append$char$1$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3;

  inline$java.lang.StringBuilder$append$char$1$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2][0 := inline$java.lang.StringBuilder$append$char$1$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r1 := inline$java.lang.StringBuilder$append$char$1$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$1$$r3 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$7$r0, inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$7$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$7$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.lang.StringBuilder$$la$init$ra$$$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$1;

  inline$java.lang.StringBuilder$append$char$1$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$4$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$4$$r3, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$4$$r2, inline$java.lang.StringBuilder$append$java.lang.String$4$r0, inline$java.lang.StringBuilder$append$java.lang.String$4$$r6, inline$java.lang.StringBuilder$append$java.lang.String$4$$r5, inline$java.lang.StringBuilder$append$java.lang.String$4$r1, inline$java.lang.StringBuilder$append$java.lang.String$4$$r4, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$4$$return, inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$r0 := inline$java.lang.StringBuilder$append$java.lang.String$4$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$r1 := inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$this := inline$java.lang.StringBuilder$append$java.lang.String$4$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$8$r0, inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$8$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$8$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.lang.StringBuilder$$la$init$ra$$$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon6:
    goto inline$java.lang.StringBuilder$toString$$6$Entry;

  inline$java.lang.StringBuilder$toString$$6$Entry:
    inline$java.lang.StringBuilder$toString$$6$$this := inline$java.lang.StringBuilder$append$java.lang.String$4$$r5;
    havoc inline$java.lang.StringBuilder$toString$$6$r0, inline$java.lang.StringBuilder$toString$$6$$r1, inline$java.lang.StringBuilder$toString$$6$$return, inline$java.lang.StringBuilder$toString$$6$$exception;
    goto inline$java.lang.StringBuilder$toString$$6$anon0;

  inline$java.lang.StringBuilder$toString$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$r0 := inline$java.lang.StringBuilder$toString$$6$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$$return := inline$java.lang.StringBuilder$toString$$6$$r1;
    goto inline$java.lang.StringBuilder$toString$$6$block61;

  inline$java.lang.StringBuilder$toString$$6$block61:
    goto inline$java.lang.StringBuilder$toString$$6$Return;

  inline$java.lang.StringBuilder$toString$$6$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r6 := inline$java.lang.StringBuilder$toString$$6$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$toString$$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$4$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := inline$java.lang.StringBuilder$append$java.lang.String$4$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$4$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$Return:
    inline$java.lang.StringBuilder$append$char$1$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$4$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$2;

  inline$java.lang.StringBuilder$append$char$1$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$1$$r6 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this := inline$java.lang.StringBuilder$append$char$1$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$3;

  inline$java.lang.StringBuilder$append$char$1$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon11_Then, inline$java.lang.StringBuilder$append$char$1$anon11_Else;

  inline$java.lang.StringBuilder$append$char$1$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6;

  inline$java.lang.StringBuilder$append$char$1$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$this := inline$java.lang.StringBuilder$append$char$1$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$1$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6$1;

  inline$java.lang.StringBuilder$append$char$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon12_Then, inline$java.lang.StringBuilder$append$char$1$anon12_Else;

  inline$java.lang.StringBuilder$append$char$1$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9;

  inline$java.lang.StringBuilder$append$char$1$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon9:
    goto inline$java.lang.StringBuilder$toString$$7$Entry;

  inline$java.lang.StringBuilder$toString$$7$Entry:
    inline$java.lang.StringBuilder$toString$$7$$this := inline$java.lang.StringBuilder$append$char$1$$r7;
    havoc inline$java.lang.StringBuilder$toString$$7$r0, inline$java.lang.StringBuilder$toString$$7$$r1, inline$java.lang.StringBuilder$toString$$7$$return, inline$java.lang.StringBuilder$toString$$7$$exception;
    goto inline$java.lang.StringBuilder$toString$$7$anon0;

  inline$java.lang.StringBuilder$toString$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$r0 := inline$java.lang.StringBuilder$toString$$7$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$$return := inline$java.lang.StringBuilder$toString$$7$$r1;
    goto inline$java.lang.StringBuilder$toString$$7$block61;

  inline$java.lang.StringBuilder$toString$$7$block61:
    goto inline$java.lang.StringBuilder$toString$$7$Return;

  inline$java.lang.StringBuilder$toString$$7$Return:
    inline$java.lang.StringBuilder$append$char$1$$r8 := inline$java.lang.StringBuilder$toString$$7$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$toString$$7$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9$1;

  inline$java.lang.StringBuilder$append$char$1$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$1$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$return := inline$java.lang.StringBuilder$append$char$1$r0;
    goto inline$java.lang.StringBuilder$append$char$1$block59;

  inline$java.lang.StringBuilder$append$char$1$block59:
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23 := inline$java.lang.StringBuilder$append$char$1$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63$1:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 + 1;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toString$$8$Entry;

  inline$java.lang.StringBuilder$toString$$8$Entry:
    inline$java.lang.StringBuilder$toString$$8$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    havoc inline$java.lang.StringBuilder$toString$$8$r0, inline$java.lang.StringBuilder$toString$$8$$r1, inline$java.lang.StringBuilder$toString$$8$$return, inline$java.lang.StringBuilder$toString$$8$$exception;
    goto inline$java.lang.StringBuilder$toString$$8$anon0;

  inline$java.lang.StringBuilder$toString$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$r0 := inline$java.lang.StringBuilder$toString$$8$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$$return := inline$java.lang.StringBuilder$toString$$8$$r1;
    goto inline$java.lang.StringBuilder$toString$$8$block61;

  inline$java.lang.StringBuilder$toString$$8$block61:
    goto inline$java.lang.StringBuilder$toString$$8$Return;

  inline$java.lang.StringBuilder$toString$$8$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6 := inline$java.lang.StringBuilder$toString$$8$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$toString$$8$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20$1:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block21:
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon19$1;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon19$1:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r7;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block13;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block13:
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return:
    $r4 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return;
    $exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto block3$1;

  block3$1:
    goto anon36_Then, anon36_Else;

  anon36_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon37_Then, anon37_Else;

  anon37_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type] <: unsafe.org.openmrs.api.APIException;
    $return := 0;
    return;

  anon37_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type] <: unsafe.org.openmrs.api.APIException);
    assert {:clone} true;
    goto anon15;

  anon36_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon15;

  anon15:
    assert {:sourceloc "Security.java", 65, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$Entry;

  inline$java.lang.String$equals$java.lang.Object$0$Entry:
    inline$java.lang.String$equals$java.lang.Object$0$$this := r0;
    inline$java.lang.String$equals$java.lang.Object$0$$in_parameter__0 := $r4;
    havoc inline$java.lang.String$equals$java.lang.Object$0$$r7, inline$java.lang.String$equals$java.lang.Object$0$$r6, inline$java.lang.String$equals$java.lang.Object$0$$r8, inline$java.lang.String$equals$java.lang.Object$0$r2, inline$java.lang.String$equals$java.lang.Object$0$$i0, inline$java.lang.String$equals$java.lang.Object$0$$r3, inline$java.lang.String$equals$java.lang.Object$0$$r4, inline$java.lang.String$equals$java.lang.Object$0$i5, inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_5, inline$java.lang.String$equals$java.lang.Object$0$$r9, inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_4, inline$java.lang.String$equals$java.lang.Object$0$$c3, inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_0, inline$java.lang.String$equals$java.lang.Object$0$$r5, inline$java.lang.String$equals$java.lang.Object$0$$c4, inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_1, inline$java.lang.String$equals$java.lang.Object$0$r1, inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_2, inline$java.lang.String$equals$java.lang.Object$0$$i2, inline$java.lang.String$equals$java.lang.Object$0$r0, inline$java.lang.String$equals$java.lang.Object$0$$i1, inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_3, inline$java.lang.String$equals$java.lang.Object$0$$return, inline$java.lang.String$equals$java.lang.Object$0$$exception;
    inline$java.lang.String$equals$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$equals$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon0;

  inline$java.lang.String$equals$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$equals$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$r0 := inline$java.lang.String$equals$java.lang.Object$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$r1 := inline$java.lang.String$equals$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "String.java", 69, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon37_Then, inline$java.lang.String$equals$java.lang.Object$0$anon37_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon37_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$r0
   != inline$java.lang.String$equals$java.lang.Object$0$r1;
    assert {:sourceloc "String.java", 69, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$block76;

  inline$java.lang.String$equals$java.lang.Object$0$anon37_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$r0
   == inline$java.lang.String$equals$java.lang.Object$0$r1;
    assert {:sourceloc "String.java", 69, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon3;

  inline$java.lang.String$equals$java.lang.Object$0$anon3:
    assert {:sourceloc "String.java", 70, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$return := 1;
    goto inline$java.lang.String$equals$java.lang.Object$0$block83;

  inline$java.lang.String$equals$java.lang.Object$0$block76:
    assert {:sourceloc "String.java", 71, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon38_Then, inline$java.lang.String$equals$java.lang.Object$0$anon38_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon38_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$r1 != unsafe.$null;
    assert {:sourceloc "String.java", 71, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$block77;

  inline$java.lang.String$equals$java.lang.Object$0$anon38_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$r1 == unsafe.$null;
    assert {:sourceloc "String.java", 71, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon6;

  inline$java.lang.String$equals$java.lang.Object$0$anon6:
    assert {:sourceloc "String.java", 72, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$0$block83;

  inline$java.lang.String$equals$java.lang.Object$0$block77:
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    call inline$java.lang.String$equals$java.lang.Object$0$$r3, inline$java.lang.String$equals$java.lang.Object$0$$exception := unsafe.java.lang.Object$getClass$(inline$java.lang.String$equals$java.lang.Object$0$r0);
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    call inline$java.lang.String$equals$java.lang.Object$0$$r4, inline$java.lang.String$equals$java.lang.Object$0$$exception := unsafe.java.lang.Object$getClass$(inline$java.lang.String$equals$java.lang.Object$0$r1);
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon39_Then, inline$java.lang.String$equals$java.lang.Object$0$anon39_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon39_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$r3
   == inline$java.lang.String$equals$java.lang.Object$0$$r4;
    assert {:sourceloc "String.java", 73, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$block78;

  inline$java.lang.String$equals$java.lang.Object$0$anon39_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$r3
   != inline$java.lang.String$equals$java.lang.Object$0$$r4;
    assert {:sourceloc "String.java", 73, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon9;

  inline$java.lang.String$equals$java.lang.Object$0$anon9:
    assert {:sourceloc "String.java", 74, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$0$block83;

  inline$java.lang.String$equals$java.lang.Object$0$block78:
    assert {:sourceloc "String.java", 75, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon40_Then, inline$java.lang.String$equals$java.lang.Object$0$anon40_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon40_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon12;

  inline$java.lang.String$equals$java.lang.Object$0$anon40_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.String);
    call inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_0;
    goto inline$java.lang.String$equals$java.lang.Object$0$Return;

  inline$java.lang.String$equals$java.lang.Object$0$anon12:
    inline$java.lang.String$equals$java.lang.Object$0$r2 := inline$java.lang.String$equals$java.lang.Object$0$r1;
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$r5 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon41_Then, inline$java.lang.String$equals$java.lang.Object$0$anon41_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon41_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$r5 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon15;

  inline$java.lang.String$equals$java.lang.Object$0$anon41_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$r5 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_1;
    goto inline$java.lang.String$equals$java.lang.Object$0$Return;

  inline$java.lang.String$equals$java.lang.Object$0$anon15:
    inline$java.lang.String$equals$java.lang.Object$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$0$$r5];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$r6 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$r2, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon42_Then, inline$java.lang.String$equals$java.lang.Object$0$anon42_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon42_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$r6 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon18;

  inline$java.lang.String$equals$java.lang.Object$0$anon42_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$r6 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_2;
    goto inline$java.lang.String$equals$java.lang.Object$0$Return;

  inline$java.lang.String$equals$java.lang.Object$0$anon18:
    inline$java.lang.String$equals$java.lang.Object$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$0$$r6];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon43_Then, inline$java.lang.String$equals$java.lang.Object$0$anon43_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon43_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$i1
   == inline$java.lang.String$equals$java.lang.Object$0$$i0;
    assert {:sourceloc "String.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$block79;

  inline$java.lang.String$equals$java.lang.Object$0$anon43_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$i1
   != inline$java.lang.String$equals$java.lang.Object$0$$i0;
    assert {:sourceloc "String.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon21;

  inline$java.lang.String$equals$java.lang.Object$0$anon21:
    assert {:sourceloc "String.java", 78, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$0$block83;

  inline$java.lang.String$equals$java.lang.Object$0$block79:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$i5 := 0;
    goto inline$java.lang.String$equals$java.lang.Object$0$block80;

  inline$java.lang.String$equals$java.lang.Object$0$block80:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$r7 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon44_Then, inline$java.lang.String$equals$java.lang.Object$0$anon44_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon44_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$r7 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon24;

  inline$java.lang.String$equals$java.lang.Object$0$anon44_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$r7 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_3;
    goto inline$java.lang.String$equals$java.lang.Object$0$Return;

  inline$java.lang.String$equals$java.lang.Object$0$anon24:
    inline$java.lang.String$equals$java.lang.Object$0$$i2 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$0$$r7];
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon45_Then, inline$java.lang.String$equals$java.lang.Object$0$anon45_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon45_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$i5
   >= inline$java.lang.String$equals$java.lang.Object$0$$i2;
    assert {:sourceloc "String.java", 80, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$block81;

  inline$java.lang.String$equals$java.lang.Object$0$anon45_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$i2
   > inline$java.lang.String$equals$java.lang.Object$0$i5;
    assert {:sourceloc "String.java", 80, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon27;

  inline$java.lang.String$equals$java.lang.Object$0$anon27:
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$r8 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon46_Then, inline$java.lang.String$equals$java.lang.Object$0$anon46_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon46_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$0$$r8]
   && inline$java.lang.String$equals$java.lang.Object$0$i5 >= 0;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon30;

  inline$java.lang.String$equals$java.lang.Object$0$anon46_Else:
    assume {:partition} !(inline$java.lang.String$equals$java.lang.Object$0$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$0$$r8]
   && inline$java.lang.String$equals$java.lang.Object$0$i5 >= 0);
    call inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_4;
    goto inline$java.lang.String$equals$java.lang.Object$0$Return;

  inline$java.lang.String$equals$java.lang.Object$0$anon30:
    inline$java.lang.String$equals$java.lang.Object$0$$c4 := unsafe.$intArrHeap[inline$java.lang.String$equals$java.lang.Object$0$$r8][inline$java.lang.String$equals$java.lang.Object$0$i5];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$r9 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$0$r2, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon47_Then, inline$java.lang.String$equals$java.lang.Object$0$anon47_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon47_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$0$$r9]
   && inline$java.lang.String$equals$java.lang.Object$0$i5 >= 0;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon33;

  inline$java.lang.String$equals$java.lang.Object$0$anon47_Else:
    assume {:partition} !(inline$java.lang.String$equals$java.lang.Object$0$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$0$$r9]
   && inline$java.lang.String$equals$java.lang.Object$0$i5 >= 0);
    call inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$0$$exception := inline$java.lang.String$equals$java.lang.Object$0$$fakelocal_5;
    goto inline$java.lang.String$equals$java.lang.Object$0$Return;

  inline$java.lang.String$equals$java.lang.Object$0$anon33:
    inline$java.lang.String$equals$java.lang.Object$0$$c3 := unsafe.$intArrHeap[inline$java.lang.String$equals$java.lang.Object$0$$r9][inline$java.lang.String$equals$java.lang.Object$0$i5];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon48_Then, inline$java.lang.String$equals$java.lang.Object$0$anon48_Else;

  inline$java.lang.String$equals$java.lang.Object$0$anon48_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$c4
   == inline$java.lang.String$equals$java.lang.Object$0$$c3;
    assert {:sourceloc "String.java", 81, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$block82;

  inline$java.lang.String$equals$java.lang.Object$0$anon48_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$0$$c4
   != inline$java.lang.String$equals$java.lang.Object$0$$c3;
    assert {:sourceloc "String.java", 81, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$anon36;

  inline$java.lang.String$equals$java.lang.Object$0$anon36:
    assert {:sourceloc "String.java", 82, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$0$block83;

  inline$java.lang.String$equals$java.lang.Object$0$block82:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$i5 := inline$java.lang.String$equals$java.lang.Object$0$i5 + 1;
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$0$block80;

  inline$java.lang.String$equals$java.lang.Object$0$block81:
    assert {:sourceloc "String.java", 85, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$0$$return := 1;
    goto inline$java.lang.String$equals$java.lang.Object$0$block83;

  inline$java.lang.String$equals$java.lang.Object$0$block83:
    goto inline$java.lang.String$equals$java.lang.Object$0$Return;

  inline$java.lang.String$equals$java.lang.Object$0$Return:
    $z0 := inline$java.lang.String$equals$java.lang.Object$0$$return;
    $exception := inline$java.lang.String$equals$java.lang.Object$0$$exception;
    goto anon15$1;

  anon15$1:
    assert {:sourceloc "Security.java", 65, -1, -1, -1} true;
    goto anon38_Then, anon38_Else;

  anon38_Then:
    assume {:partition} $z0 != 0;
    assert {:sourceloc "Security.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto block4;

  anon38_Else:
    assume {:partition} $z0 == 0;
    assert {:sourceloc "Security.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto anon18;

  anon18:
    assert {:sourceloc "Security.java", 66, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$in_parameter__0 := r1;
    havoc inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r6, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r4, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r1, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_4, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_5, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r5, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r13, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r0, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r10, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r7, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r12, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r3, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r8, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r9, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$intArrHeap := unsafe.$intArrHeap;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r0 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 112, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_0 := 4];
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r1 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block14;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block14:
    assert {:sourceloc "Security.java", 116, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := unsafe.java.security.MessageDigest$getInstance$java.lang.String(inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r1);
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon20_Then, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon20_Else;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon20_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon21_Then, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon21_Else;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon21_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block15;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon21_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon4;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon20_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon4;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon4:
    assert {:sourceloc "Security.java", 117, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r5 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 117, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon22_Then, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon22_Else;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon22_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r0
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon7;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon22_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r0
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon7:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$1$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$1$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$this := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$in_parameter__0 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r5;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$1$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$1$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$1$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$Entry;

  inline$java.lang.String$getBytes$$1$Entry:
    inline$java.lang.String$getBytes$$1$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$1$r0;
    havoc inline$java.lang.String$getBytes$$1$$r4, inline$java.lang.String$getBytes$$1$$fakelocal_2, inline$java.lang.String$getBytes$$1$$c2, inline$java.lang.String$getBytes$$1$$b3, inline$java.lang.String$getBytes$$1$$fakelocal_4, inline$java.lang.String$getBytes$$1$r0, inline$java.lang.String$getBytes$$1$i4, inline$java.lang.String$getBytes$$1$$i0, inline$java.lang.String$getBytes$$1$$r3, inline$java.lang.String$getBytes$$1$$fakelocal_3, inline$java.lang.String$getBytes$$1$r1, inline$java.lang.String$getBytes$$1$$i1, inline$java.lang.String$getBytes$$1$$fakelocal_0, inline$java.lang.String$getBytes$$1$$r2, inline$java.lang.String$getBytes$$1$$fakelocal_1, inline$java.lang.String$getBytes$$1$$return, inline$java.lang.String$getBytes$$1$$exception;
    inline$java.lang.String$getBytes$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$1$anon0;

  inline$java.lang.String$getBytes$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$1$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$r0 := inline$java.lang.String$getBytes$$1$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon16_Then, inline$java.lang.String$getBytes$$1$anon16_Else;

  inline$java.lang.String$getBytes$$1$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon3;

  inline$java.lang.String$getBytes$$1$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$1$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon3:
    inline$java.lang.String$getBytes$$1$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$1$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$fakelocal_1 := inline$java.lang.String$getBytes$$1$$i0];
    inline$java.lang.String$getBytes$$1$r1 := inline$java.lang.String$getBytes$$1$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$i4 := 0;
    goto inline$java.lang.String$getBytes$$1$block69;

  inline$java.lang.String$getBytes$$1$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon17_Then, inline$java.lang.String$getBytes$$1$anon17_Else;

  inline$java.lang.String$getBytes$$1$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon6;

  inline$java.lang.String$getBytes$$1$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$1$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon6:
    inline$java.lang.String$getBytes$$1$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon18_Then, inline$java.lang.String$getBytes$$1$anon18_Else;

  inline$java.lang.String$getBytes$$1$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i4
   >= inline$java.lang.String$getBytes$$1$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$1$block70;

  inline$java.lang.String$getBytes$$1$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$i1 > inline$java.lang.String$getBytes$$1$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$1$anon9;

  inline$java.lang.String$getBytes$$1$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon19_Then, inline$java.lang.String$getBytes$$1$anon19_Else;

  inline$java.lang.String$getBytes$$1$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r4]
   && inline$java.lang.String$getBytes$$1$i4 >= 0;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon12;

  inline$java.lang.String$getBytes$$1$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$1$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r4]
   && inline$java.lang.String$getBytes$$1$i4 >= 0);
    call inline$java.lang.String$getBytes$$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$1$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon12:
    inline$java.lang.String$getBytes$$1$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$1$$r4][inline$java.lang.String$getBytes$$1$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$b3 := inline$java.lang.String$getBytes$$1$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon20_Then, inline$java.lang.String$getBytes$$1$anon20_Else;

  inline$java.lang.String$getBytes$$1$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$1$r1]
   && inline$java.lang.String$getBytes$$1$i4 >= 0;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon15;

  inline$java.lang.String$getBytes$$1$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$1$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$1$r1]
   && inline$java.lang.String$getBytes$$1$i4 >= 0);
    call inline$java.lang.String$getBytes$$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$1$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$1$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$1$r1][inline$java.lang.String$getBytes$$1$i4 := inline$java.lang.String$getBytes$$1$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$i4 := inline$java.lang.String$getBytes$$1$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$block69;

  inline$java.lang.String$getBytes$$1$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$return := inline$java.lang.String$getBytes$$1$r1;
    goto inline$java.lang.String$getBytes$$1$block71;

  inline$java.lang.String$getBytes$$1$block71:
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$r2 := inline$java.lang.String$getBytes$$1$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$1$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$1$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$1$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$1$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$1$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$1$Return:
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r3 := inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$return;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$1$$exception;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon7$1;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon7$1:
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon23_Then, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon23_Else;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon23_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon24_Then, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon24_Else;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon24_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block15;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon24_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block16;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon23_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block16;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block16:
    assert {:sourceloc "Security.java", 123, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block17;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block15:
    assert {:sourceloc "Security.java", 125, -1, -1, -1} true;
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r8 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception;
    assert {:sourceloc "Security.java", 119, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r4 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r8;
    assert {:sourceloc "Security.java", 121, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r9 := unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259;
    assert {:sourceloc "Security.java", 121, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$Entry;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$Entry:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$in_parameter__0 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r1;
    havoc inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r5, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$r0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r4, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$return, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon0;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$r0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r1 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r1;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$9$r0, inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$9$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$9$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$9$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$11$Entry;

  inline$java.lang.Object$$la$init$ra$$$11$Entry:
    inline$java.lang.Object$$la$init$ra$$$11$$this := inline$java.lang.StringBuilder$$la$init$ra$$$9$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$11$anon0;

  inline$java.lang.Object$$la$init$ra$$$11$anon0:
    inline$java.lang.Object$$la$init$ra$$$11$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$11$Return;

  inline$java.lang.Object$$la$init$ra$$$11$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception := inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$9$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon0$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon0$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$5$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$5$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$in_parameter__0 := unsafe.$StringConst1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$5$$r3, inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$5$$r2, inline$java.lang.StringBuilder$append$java.lang.String$5$r0, inline$java.lang.StringBuilder$append$java.lang.String$5$$r6, inline$java.lang.StringBuilder$append$java.lang.String$5$$r5, inline$java.lang.StringBuilder$append$java.lang.String$5$r1, inline$java.lang.StringBuilder$append$java.lang.String$5$$r4, inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$5$$return, inline$java.lang.StringBuilder$append$java.lang.String$5$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$5$r0 := inline$java.lang.StringBuilder$append$java.lang.String$5$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$5$r1 := inline$java.lang.StringBuilder$append$java.lang.String$5$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$5$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$this := inline$java.lang.StringBuilder$append$java.lang.String$5$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$10$r0, inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$10$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$10$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$10$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$12$Entry;

  inline$java.lang.Object$$la$init$ra$$$12$Entry:
    inline$java.lang.Object$$la$init$ra$$$12$$this := inline$java.lang.StringBuilder$$la$init$ra$$$10$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$12$anon0;

  inline$java.lang.Object$$la$init$ra$$$12$anon0:
    inline$java.lang.Object$$la$init$ra$$$12$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$12$Return;

  inline$java.lang.Object$$la$init$ra$$$12$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception := inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$10$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$5$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$5$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$5$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$5$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$5$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$5$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$5$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$5$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon6:
    goto inline$java.lang.StringBuilder$toString$$9$Entry;

  inline$java.lang.StringBuilder$toString$$9$Entry:
    inline$java.lang.StringBuilder$toString$$9$$this := inline$java.lang.StringBuilder$append$java.lang.String$5$$r5;
    havoc inline$java.lang.StringBuilder$toString$$9$r0, inline$java.lang.StringBuilder$toString$$9$$r1, inline$java.lang.StringBuilder$toString$$9$$return, inline$java.lang.StringBuilder$toString$$9$$exception;
    goto inline$java.lang.StringBuilder$toString$$9$anon0;

  inline$java.lang.StringBuilder$toString$$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$9$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$9$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$9$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$9$r0 := inline$java.lang.StringBuilder$toString$$9$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$9$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$9$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$9$$return := inline$java.lang.StringBuilder$toString$$9$$r1;
    goto inline$java.lang.StringBuilder$toString$$9$block61;

  inline$java.lang.StringBuilder$toString$$9$block61:
    goto inline$java.lang.StringBuilder$toString$$9$Return;

  inline$java.lang.StringBuilder$toString$$9$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$5$$r6 := inline$java.lang.StringBuilder$toString$$9$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$toString$$9$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$5$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$return := inline$java.lang.StringBuilder$append$java.lang.String$5$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$5$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$5$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$5$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon0$2;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon0$2:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon10_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon10_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon10_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon3;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon10_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$6$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$6$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r2;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$in_parameter__0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$6$$r3, inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$6$$r2, inline$java.lang.StringBuilder$append$java.lang.String$6$r0, inline$java.lang.StringBuilder$append$java.lang.String$6$$r6, inline$java.lang.StringBuilder$append$java.lang.String$6$$r5, inline$java.lang.StringBuilder$append$java.lang.String$6$r1, inline$java.lang.StringBuilder$append$java.lang.String$6$$r4, inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$6$$return, inline$java.lang.StringBuilder$append$java.lang.String$6$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$6$r0 := inline$java.lang.StringBuilder$append$java.lang.String$6$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$6$r1 := inline$java.lang.StringBuilder$append$java.lang.String$6$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$6$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$this := inline$java.lang.StringBuilder$append$java.lang.String$6$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$11$r0, inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$11$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$11$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$11$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$13$Entry;

  inline$java.lang.Object$$la$init$ra$$$13$Entry:
    inline$java.lang.Object$$la$init$ra$$$13$$this := inline$java.lang.StringBuilder$$la$init$ra$$$11$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$13$anon0;

  inline$java.lang.Object$$la$init$ra$$$13$anon0:
    inline$java.lang.Object$$la$init$ra$$$13$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$13$Return;

  inline$java.lang.Object$$la$init$ra$$$13$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception := inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$11$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$6$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$6$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$6$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$6$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$6$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$6$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$6$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$6$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon6:
    goto inline$java.lang.StringBuilder$toString$$10$Entry;

  inline$java.lang.StringBuilder$toString$$10$Entry:
    inline$java.lang.StringBuilder$toString$$10$$this := inline$java.lang.StringBuilder$append$java.lang.String$6$$r5;
    havoc inline$java.lang.StringBuilder$toString$$10$r0, inline$java.lang.StringBuilder$toString$$10$$r1, inline$java.lang.StringBuilder$toString$$10$$return, inline$java.lang.StringBuilder$toString$$10$$exception;
    goto inline$java.lang.StringBuilder$toString$$10$anon0;

  inline$java.lang.StringBuilder$toString$$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$10$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$10$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$10$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$10$r0 := inline$java.lang.StringBuilder$toString$$10$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$10$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$10$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$10$$return := inline$java.lang.StringBuilder$toString$$10$$r1;
    goto inline$java.lang.StringBuilder$toString$$10$block61;

  inline$java.lang.StringBuilder$toString$$10$block61:
    goto inline$java.lang.StringBuilder$toString$$10$Return;

  inline$java.lang.StringBuilder$toString$$10$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$6$$r6 := inline$java.lang.StringBuilder$toString$$10$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$toString$$10$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$6$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$return := inline$java.lang.StringBuilder$append$java.lang.String$6$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$6$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$6$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r3 := inline$java.lang.StringBuilder$append$java.lang.String$6$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon3$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon3$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon11_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon11_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon11_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r3
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon6;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon11_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r3
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_2;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$7$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$7$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$in_parameter__0 := unsafe.$StringConst2;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$7$$r3, inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$7$$r2, inline$java.lang.StringBuilder$append$java.lang.String$7$r0, inline$java.lang.StringBuilder$append$java.lang.String$7$$r6, inline$java.lang.StringBuilder$append$java.lang.String$7$$r5, inline$java.lang.StringBuilder$append$java.lang.String$7$r1, inline$java.lang.StringBuilder$append$java.lang.String$7$$r4, inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$7$$return, inline$java.lang.StringBuilder$append$java.lang.String$7$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$7$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$7$r0 := inline$java.lang.StringBuilder$append$java.lang.String$7$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$7$r1 := inline$java.lang.StringBuilder$append$java.lang.String$7$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$7$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$12$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$12$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$12$$this := inline$java.lang.StringBuilder$append$java.lang.String$7$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$12$r0, inline$java.lang.StringBuilder$$la$init$ra$$$12$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$12$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$12$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$12$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$12$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$12$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$12$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$12$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$12$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$12$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$12$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$14$Entry;

  inline$java.lang.Object$$la$init$ra$$$14$Entry:
    inline$java.lang.Object$$la$init$ra$$$14$$this := inline$java.lang.StringBuilder$$la$init$ra$$$12$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$14$anon0;

  inline$java.lang.Object$$la$init$ra$$$14$anon0:
    inline$java.lang.Object$$la$init$ra$$$14$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$14$Return;

  inline$java.lang.Object$$la$init$ra$$$14$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$12$$exception := inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$12$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$12$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$12$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$12$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$12$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$12$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$12$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$12$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$12$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$12$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$7$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$12$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$7$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$7$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$exception := inline$java.lang.StringBuilder$append$java.lang.String$7$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$7$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$7$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$exception := inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$7$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$7$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$exception := inline$java.lang.StringBuilder$append$java.lang.String$7$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$7$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$7$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$exception := inline$java.lang.StringBuilder$append$java.lang.String$7$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon6:
    goto inline$java.lang.StringBuilder$toString$$11$Entry;

  inline$java.lang.StringBuilder$toString$$11$Entry:
    inline$java.lang.StringBuilder$toString$$11$$this := inline$java.lang.StringBuilder$append$java.lang.String$7$$r5;
    havoc inline$java.lang.StringBuilder$toString$$11$r0, inline$java.lang.StringBuilder$toString$$11$$r1, inline$java.lang.StringBuilder$toString$$11$$return, inline$java.lang.StringBuilder$toString$$11$$exception;
    goto inline$java.lang.StringBuilder$toString$$11$anon0;

  inline$java.lang.StringBuilder$toString$$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$11$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$11$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$11$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$11$r0 := inline$java.lang.StringBuilder$toString$$11$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$11$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$11$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$11$$return := inline$java.lang.StringBuilder$toString$$11$$r1;
    goto inline$java.lang.StringBuilder$toString$$11$block61;

  inline$java.lang.StringBuilder$toString$$11$block61:
    goto inline$java.lang.StringBuilder$toString$$11$Return;

  inline$java.lang.StringBuilder$toString$$11$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$7$$r6 := inline$java.lang.StringBuilder$toString$$11$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$exception := inline$java.lang.StringBuilder$toString$$11$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$7$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$7$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$7$$return := inline$java.lang.StringBuilder$append$java.lang.String$7$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$7$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$7$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$7$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r4 := inline$java.lang.StringBuilder$append$java.lang.String$7$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$7$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon6$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon6$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon12_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon12_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon12_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r4
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon9;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon12_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r4
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon9:
    goto inline$java.lang.StringBuilder$toString$$12$Entry;

  inline$java.lang.StringBuilder$toString$$12$Entry:
    inline$java.lang.StringBuilder$toString$$12$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r4;
    havoc inline$java.lang.StringBuilder$toString$$12$r0, inline$java.lang.StringBuilder$toString$$12$$r1, inline$java.lang.StringBuilder$toString$$12$$return, inline$java.lang.StringBuilder$toString$$12$$exception;
    goto inline$java.lang.StringBuilder$toString$$12$anon0;

  inline$java.lang.StringBuilder$toString$$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$12$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$12$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$12$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$12$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$12$r0 := inline$java.lang.StringBuilder$toString$$12$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$12$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$12$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$12$$return := inline$java.lang.StringBuilder$toString$$12$$r1;
    goto inline$java.lang.StringBuilder$toString$$12$block61;

  inline$java.lang.StringBuilder$toString$$12$block61:
    goto inline$java.lang.StringBuilder$toString$$12$Return;

  inline$java.lang.StringBuilder$toString$$12$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r5 := inline$java.lang.StringBuilder$toString$$12$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$12$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon9$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$anon9$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$return := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$r5;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$block8;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$block8:
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$Return:
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r10 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$return;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$1$$exception;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block15$1;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block15$1:
    assert {:sourceloc "Security.java", 121, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon25_Then, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon25_Else;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon25_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r9
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon13;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon25_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r9
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon13:
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := unsafe.org.slf4j.Logger$error$java.lang.String_java.lang.Throwable(inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r9, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r10, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r4);
    assert {:sourceloc "Security.java", 122, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r12 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_3;
    assert {:sourceloc "Security.java", 122, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r12, unsafe.$StringConst4, unsafe.$null, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r4);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon26_Then, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon26_Else;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon26_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r12, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon16;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon26_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r12, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon16:
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r13 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r12;
    assert {:sourceloc "Security.java", 122, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r13;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block18;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block17:
    assert {:sourceloc "Security.java", 125, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon27_Then, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon27_Else;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon27_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon19;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon27_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon19:
    call inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r6, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := unsafe.java.security.MessageDigest$digest$byte$lp$$rp$(inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$r3);
    assert {:sourceloc "Security.java", 125, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Entry;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Entry:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$in_parameter__0 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r6;
    havoc inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$s4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_15, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_16, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_8, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_12, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_18, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$c6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_13, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_20, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$s0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_10, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_19, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_22, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_14, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_23, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$c5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_21, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_17, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_9, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_11, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$intArrHeap := unsafe.$intArrHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon0;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r4 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$13$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$13$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$13$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r4;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$13$r0, inline$java.lang.StringBuilder$$la$init$ra$$$13$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$13$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$13$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$13$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$13$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$13$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$13$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$13$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$13$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$13$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$13$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$15$Entry;

  inline$java.lang.Object$$la$init$ra$$$15$Entry:
    inline$java.lang.Object$$la$init$ra$$$15$$this := inline$java.lang.StringBuilder$$la$init$ra$$$13$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$15$anon0;

  inline$java.lang.Object$$la$init$ra$$$15$anon0:
    inline$java.lang.Object$$la$init$ra$$$15$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$15$Return;

  inline$java.lang.Object$$la$init$ra$$$15$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$13$$exception := inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$13$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$13$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$13$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$13$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$13$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$13$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$13$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$13$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$13$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$13$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$13$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon0$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon0$1:
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r1 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r4;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_1 := 16];
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_1;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon64_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon64_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon64_Then:
    assume {:partition} 0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon3;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon64_Else:
    assume {:partition} !(0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_2;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][0 := 48]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon65_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon65_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon65_Then:
    assume {:partition} 1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon6;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon65_Else:
    assume {:partition} !(1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_3;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon6:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][1 := 49]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon66_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon66_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon66_Then:
    assume {:partition} 2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 2 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon9;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon66_Else:
    assume {:partition} !(2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 2 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_4;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon9:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][2 := 50]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon67_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon67_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon67_Then:
    assume {:partition} 3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 3 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon12;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon67_Else:
    assume {:partition} !(3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 3 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_5;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon12:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][3 := 51]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon68_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon68_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon68_Then:
    assume {:partition} 4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 4 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon15;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon68_Else:
    assume {:partition} !(4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 4 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][4 := 52]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon69_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon69_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon69_Then:
    assume {:partition} 5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 5 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon18;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon69_Else:
    assume {:partition} !(5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 5 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_7 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_7;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon18:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][5 := 53]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon70_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon70_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon70_Then:
    assume {:partition} 6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 6 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon70_Else:
    assume {:partition} !(6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 6 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_8 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_8;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon21:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][6 := 54]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon71_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon71_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon71_Then:
    assume {:partition} 7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon24;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon71_Else:
    assume {:partition} !(7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_9 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_9;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon24:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][7 := 55]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon72_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon72_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon72_Then:
    assume {:partition} 8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 8 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon27;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon72_Else:
    assume {:partition} !(8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 8 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_10 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_10;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon27:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][8 := 56]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon73_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon73_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon73_Then:
    assume {:partition} 9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 9 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon30;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon73_Else:
    assume {:partition} !(9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 9 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_11 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_11;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon30:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][9 := 57]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon74_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon74_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon74_Then:
    assume {:partition} 10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 10 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon33;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon74_Else:
    assume {:partition} !(10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 10 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_12 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_12;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon33:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][10 := 97]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon75_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon75_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon75_Then:
    assume {:partition} 11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 11 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon36;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon75_Else:
    assume {:partition} !(11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 11 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_13 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_13;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon36:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][11 := 98]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon76_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon76_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon76_Then:
    assume {:partition} 12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 12 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon39;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon76_Else:
    assume {:partition} !(12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 12 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_14 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_14;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon39:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][12 := 99]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon77_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon77_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon77_Then:
    assume {:partition} 13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 13 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon42;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon77_Else:
    assume {:partition} !(13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 13 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_15 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_15;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon42:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][13 := 100]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon78_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon78_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon78_Then:
    assume {:partition} 14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 14 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon45;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon78_Else:
    assume {:partition} !(14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 14 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_16 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_16;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon45:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][14 := 101]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon79_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon79_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon79_Then:
    assume {:partition} 15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 15 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon48;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon79_Else:
    assume {:partition} !(15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5]
   && 15 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_17 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_17;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon48:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5][15 := 102]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r5;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r0;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon80_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon80_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon80_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3 != unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon51;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon80_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3 == unsafe.$null;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_18 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_18;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon51:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i2 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3];
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7 := 0;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block19:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon81_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon81_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon81_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7
   >= inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i2;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block20;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon81_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i2
   > inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon54;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon54:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon82_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon82_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon82_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon57;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon82_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_19 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_19;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon57:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b3 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r3][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7];
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$s4 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b3, 240);
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$s0 := unsafe.$shrInt(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$s4, 4);
    assert {:sourceloc "Security.java", 141, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b1 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b3, 15);
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon83_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon83_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon83_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$s0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon60;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon83_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$s0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_20 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_20;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon60:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$c5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$s0];
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$2$Entry;

  inline$java.lang.StringBuilder$append$char$2$Entry:
    inline$java.lang.StringBuilder$append$char$2$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r1;
    inline$java.lang.StringBuilder$append$char$2$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$c5;
    havoc inline$java.lang.StringBuilder$append$char$2$$r4, inline$java.lang.StringBuilder$append$char$2$r1, inline$java.lang.StringBuilder$append$char$2$$r6, inline$java.lang.StringBuilder$append$char$2$$r8, inline$java.lang.StringBuilder$append$char$2$$fakelocal_2, inline$java.lang.StringBuilder$append$char$2$$r2, inline$java.lang.StringBuilder$append$char$2$c0, inline$java.lang.StringBuilder$append$char$2$$r5, inline$java.lang.StringBuilder$append$char$2$$fakelocal_4, inline$java.lang.StringBuilder$append$char$2$$fakelocal_3, inline$java.lang.StringBuilder$append$char$2$$fakelocal_0, inline$java.lang.StringBuilder$append$char$2$$fakelocal_1, inline$java.lang.StringBuilder$append$char$2$$fakelocal_5, inline$java.lang.StringBuilder$append$char$2$$r7, inline$java.lang.StringBuilder$append$char$2$$r3, inline$java.lang.StringBuilder$append$char$2$r0, inline$java.lang.StringBuilder$append$char$2$$return, inline$java.lang.StringBuilder$append$char$2$$exception;
    inline$java.lang.StringBuilder$append$char$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$2$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$2$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$2$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$2$anon0;

  inline$java.lang.StringBuilder$append$char$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$2$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$2$r0 := inline$java.lang.StringBuilder$append$char$2$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$2$c0 := inline$java.lang.StringBuilder$append$char$2$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$2$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$2$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$2$$r2 := inline$java.lang.StringBuilder$append$char$2$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$2$anon10_Then, inline$java.lang.StringBuilder$append$char$2$anon10_Else;

  inline$java.lang.StringBuilder$append$char$2$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$2$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$append$char$2$$exception;
    goto inline$java.lang.StringBuilder$append$char$2$anon3;

  inline$java.lang.StringBuilder$append$char$2$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$2$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$append$char$2$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$2$Return;

  inline$java.lang.StringBuilder$append$char$2$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$2$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$2$$r2][0 := inline$java.lang.StringBuilder$append$char$2$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$2$r1 := inline$java.lang.StringBuilder$append$char$2$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$2$$r3 := inline$java.lang.StringBuilder$append$char$2$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$14$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$14$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$14$$this := inline$java.lang.StringBuilder$append$char$2$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$14$r0, inline$java.lang.StringBuilder$$la$init$ra$$$14$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$14$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$14$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$14$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$14$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$14$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$14$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$14$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$14$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$14$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$14$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$16$Entry;

  inline$java.lang.Object$$la$init$ra$$$16$Entry:
    inline$java.lang.Object$$la$init$ra$$$16$$this := inline$java.lang.StringBuilder$$la$init$ra$$$14$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$16$anon0;

  inline$java.lang.Object$$la$init$ra$$$16$anon0:
    inline$java.lang.Object$$la$init$ra$$$16$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$16$Return;

  inline$java.lang.Object$$la$init$ra$$$16$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$14$$exception := inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$14$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$14$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$14$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$14$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$14$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$14$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$14$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$14$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$14$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$14$Return:
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$14$$exception;
    goto inline$java.lang.StringBuilder$append$char$2$anon3$1;

  inline$java.lang.StringBuilder$append$char$2$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$2$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$8$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$8$$this := inline$java.lang.StringBuilder$append$char$2$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$2$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$8$$r3, inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$8$$r2, inline$java.lang.StringBuilder$append$java.lang.String$8$r0, inline$java.lang.StringBuilder$append$java.lang.String$8$$r6, inline$java.lang.StringBuilder$append$java.lang.String$8$$r5, inline$java.lang.StringBuilder$append$java.lang.String$8$r1, inline$java.lang.StringBuilder$append$java.lang.String$8$$r4, inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$8$$return, inline$java.lang.StringBuilder$append$java.lang.String$8$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$8$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$8$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$8$r0 := inline$java.lang.StringBuilder$append$java.lang.String$8$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$8$r1 := inline$java.lang.StringBuilder$append$java.lang.String$8$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$8$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$15$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$15$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$15$$this := inline$java.lang.StringBuilder$append$java.lang.String$8$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$15$r0, inline$java.lang.StringBuilder$$la$init$ra$$$15$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$15$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$15$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$15$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$15$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$15$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$15$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$15$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$15$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$15$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$15$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$17$Entry;

  inline$java.lang.Object$$la$init$ra$$$17$Entry:
    inline$java.lang.Object$$la$init$ra$$$17$$this := inline$java.lang.StringBuilder$$la$init$ra$$$15$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$17$anon0;

  inline$java.lang.Object$$la$init$ra$$$17$anon0:
    inline$java.lang.Object$$la$init$ra$$$17$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$17$Return;

  inline$java.lang.Object$$la$init$ra$$$17$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$15$$exception := inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$15$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$15$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$15$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$15$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$15$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$15$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$15$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$15$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$15$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$15$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$8$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$15$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$8$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$8$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$exception := inline$java.lang.StringBuilder$append$java.lang.String$8$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$8$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$8$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$exception := inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$8$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$8$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$exception := inline$java.lang.StringBuilder$append$java.lang.String$8$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$8$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$8$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$exception := inline$java.lang.StringBuilder$append$java.lang.String$8$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon6:
    goto inline$java.lang.StringBuilder$toString$$13$Entry;

  inline$java.lang.StringBuilder$toString$$13$Entry:
    inline$java.lang.StringBuilder$toString$$13$$this := inline$java.lang.StringBuilder$append$java.lang.String$8$$r5;
    havoc inline$java.lang.StringBuilder$toString$$13$r0, inline$java.lang.StringBuilder$toString$$13$$r1, inline$java.lang.StringBuilder$toString$$13$$return, inline$java.lang.StringBuilder$toString$$13$$exception;
    goto inline$java.lang.StringBuilder$toString$$13$anon0;

  inline$java.lang.StringBuilder$toString$$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$13$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$13$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$13$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$13$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$13$r0 := inline$java.lang.StringBuilder$toString$$13$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$13$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$13$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$13$$return := inline$java.lang.StringBuilder$toString$$13$$r1;
    goto inline$java.lang.StringBuilder$toString$$13$block61;

  inline$java.lang.StringBuilder$toString$$13$block61:
    goto inline$java.lang.StringBuilder$toString$$13$Return;

  inline$java.lang.StringBuilder$toString$$13$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$8$$r6 := inline$java.lang.StringBuilder$toString$$13$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$exception := inline$java.lang.StringBuilder$toString$$13$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$8$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$8$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$8$$return := inline$java.lang.StringBuilder$append$java.lang.String$8$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$8$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$8$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$8$Return:
    inline$java.lang.StringBuilder$append$char$2$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$8$$return;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$8$$exception;
    goto inline$java.lang.StringBuilder$append$char$2$anon3$2;

  inline$java.lang.StringBuilder$append$char$2$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$2$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$2$$r6 := inline$java.lang.StringBuilder$append$char$2$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$this := inline$java.lang.StringBuilder$append$char$2$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$2$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$18$Entry;

  inline$java.lang.Object$$la$init$ra$$$18$Entry:
    inline$java.lang.Object$$la$init$ra$$$18$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$18$anon0;

  inline$java.lang.Object$$la$init$ra$$$18$anon0:
    inline$java.lang.Object$$la$init$ra$$$18$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$18$Return;

  inline$java.lang.Object$$la$init$ra$$$18$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$exception := inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$Return:
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$2$$exception;
    goto inline$java.lang.StringBuilder$append$char$2$anon3$3;

  inline$java.lang.StringBuilder$append$char$2$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$2$anon11_Then, inline$java.lang.StringBuilder$append$char$2$anon11_Else;

  inline$java.lang.StringBuilder$append$char$2$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$2$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$append$char$2$$exception;
    goto inline$java.lang.StringBuilder$append$char$2$anon6;

  inline$java.lang.StringBuilder$append$char$2$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$2$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$2$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$append$char$2$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$2$Return;

  inline$java.lang.StringBuilder$append$char$2$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$this := inline$java.lang.StringBuilder$append$char$2$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$2$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$2$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$2$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$2$r0, inline$java.lang.StringBuilder$append$java.lang.Object$2$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$2$r1, inline$java.lang.StringBuilder$append$java.lang.Object$2$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$2$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$2$$return, inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$2$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$2$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$2$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$2$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$2$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$2$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$2$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$2$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$2$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$2$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$2$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$2$$return := inline$java.lang.StringBuilder$append$java.lang.Object$2$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$2$Return:
    inline$java.lang.StringBuilder$append$char$2$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$2$$return;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$2$$exception;
    goto inline$java.lang.StringBuilder$append$char$2$anon6$1;

  inline$java.lang.StringBuilder$append$char$2$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$2$anon12_Then, inline$java.lang.StringBuilder$append$char$2$anon12_Else;

  inline$java.lang.StringBuilder$append$char$2$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$2$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$append$char$2$$exception;
    goto inline$java.lang.StringBuilder$append$char$2$anon9;

  inline$java.lang.StringBuilder$append$char$2$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$2$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$2$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$append$char$2$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$2$Return;

  inline$java.lang.StringBuilder$append$char$2$anon9:
    goto inline$java.lang.StringBuilder$toString$$14$Entry;

  inline$java.lang.StringBuilder$toString$$14$Entry:
    inline$java.lang.StringBuilder$toString$$14$$this := inline$java.lang.StringBuilder$append$char$2$$r7;
    havoc inline$java.lang.StringBuilder$toString$$14$r0, inline$java.lang.StringBuilder$toString$$14$$r1, inline$java.lang.StringBuilder$toString$$14$$return, inline$java.lang.StringBuilder$toString$$14$$exception;
    goto inline$java.lang.StringBuilder$toString$$14$anon0;

  inline$java.lang.StringBuilder$toString$$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$14$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$14$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$14$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$14$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$14$r0 := inline$java.lang.StringBuilder$toString$$14$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$14$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$14$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$14$$return := inline$java.lang.StringBuilder$toString$$14$$r1;
    goto inline$java.lang.StringBuilder$toString$$14$block61;

  inline$java.lang.StringBuilder$toString$$14$block61:
    goto inline$java.lang.StringBuilder$toString$$14$Return;

  inline$java.lang.StringBuilder$toString$$14$Return:
    inline$java.lang.StringBuilder$append$char$2$$r8 := inline$java.lang.StringBuilder$toString$$14$$return;
    inline$java.lang.StringBuilder$append$char$2$$exception := inline$java.lang.StringBuilder$toString$$14$$exception;
    goto inline$java.lang.StringBuilder$append$char$2$anon9$1;

  inline$java.lang.StringBuilder$append$char$2$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$2$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$2$$return := inline$java.lang.StringBuilder$append$char$2$r0;
    goto inline$java.lang.StringBuilder$append$char$2$block59;

  inline$java.lang.StringBuilder$append$char$2$block59:
    goto inline$java.lang.StringBuilder$append$char$2$Return;

  inline$java.lang.StringBuilder$append$char$2$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_21 := inline$java.lang.StringBuilder$append$char$2$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$java.lang.StringBuilder$append$char$2$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon60$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon60$1:
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon84_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon84_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon84_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon63;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon84_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_22 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_22;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon63:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$c6 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$b1];
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$3$Entry;

  inline$java.lang.StringBuilder$append$char$3$Entry:
    inline$java.lang.StringBuilder$append$char$3$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r1;
    inline$java.lang.StringBuilder$append$char$3$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$c6;
    havoc inline$java.lang.StringBuilder$append$char$3$$r4, inline$java.lang.StringBuilder$append$char$3$r1, inline$java.lang.StringBuilder$append$char$3$$r6, inline$java.lang.StringBuilder$append$char$3$$r8, inline$java.lang.StringBuilder$append$char$3$$fakelocal_2, inline$java.lang.StringBuilder$append$char$3$$r2, inline$java.lang.StringBuilder$append$char$3$c0, inline$java.lang.StringBuilder$append$char$3$$r5, inline$java.lang.StringBuilder$append$char$3$$fakelocal_4, inline$java.lang.StringBuilder$append$char$3$$fakelocal_3, inline$java.lang.StringBuilder$append$char$3$$fakelocal_0, inline$java.lang.StringBuilder$append$char$3$$fakelocal_1, inline$java.lang.StringBuilder$append$char$3$$fakelocal_5, inline$java.lang.StringBuilder$append$char$3$$r7, inline$java.lang.StringBuilder$append$char$3$$r3, inline$java.lang.StringBuilder$append$char$3$r0, inline$java.lang.StringBuilder$append$char$3$$return, inline$java.lang.StringBuilder$append$char$3$$exception;
    inline$java.lang.StringBuilder$append$char$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$3$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$3$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$3$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$3$anon0;

  inline$java.lang.StringBuilder$append$char$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$3$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$3$r0 := inline$java.lang.StringBuilder$append$char$3$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$3$c0 := inline$java.lang.StringBuilder$append$char$3$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$3$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$3$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$3$$r2 := inline$java.lang.StringBuilder$append$char$3$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$3$anon10_Then, inline$java.lang.StringBuilder$append$char$3$anon10_Else;

  inline$java.lang.StringBuilder$append$char$3$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$3$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$append$char$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$3$anon3;

  inline$java.lang.StringBuilder$append$char$3$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$3$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$append$char$3$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$3$Return;

  inline$java.lang.StringBuilder$append$char$3$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$3$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$3$$r2][0 := inline$java.lang.StringBuilder$append$char$3$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$3$r1 := inline$java.lang.StringBuilder$append$char$3$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$3$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$3$$r3 := inline$java.lang.StringBuilder$append$char$3$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$16$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$16$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$16$$this := inline$java.lang.StringBuilder$append$char$3$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$16$r0, inline$java.lang.StringBuilder$$la$init$ra$$$16$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$16$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$16$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$16$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$16$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$16$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$16$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$16$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$16$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$16$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$16$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$19$Entry;

  inline$java.lang.Object$$la$init$ra$$$19$Entry:
    inline$java.lang.Object$$la$init$ra$$$19$$this := inline$java.lang.StringBuilder$$la$init$ra$$$16$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$19$anon0;

  inline$java.lang.Object$$la$init$ra$$$19$anon0:
    inline$java.lang.Object$$la$init$ra$$$19$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$19$Return;

  inline$java.lang.Object$$la$init$ra$$$19$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$16$$exception := inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$16$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$16$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$16$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$16$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$16$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$16$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$16$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$16$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$16$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$16$Return:
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$16$$exception;
    goto inline$java.lang.StringBuilder$append$char$3$anon3$1;

  inline$java.lang.StringBuilder$append$char$3$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$3$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$9$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$9$$this := inline$java.lang.StringBuilder$append$char$3$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$3$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$9$$r3, inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$9$$r2, inline$java.lang.StringBuilder$append$java.lang.String$9$r0, inline$java.lang.StringBuilder$append$java.lang.String$9$$r6, inline$java.lang.StringBuilder$append$java.lang.String$9$$r5, inline$java.lang.StringBuilder$append$java.lang.String$9$r1, inline$java.lang.StringBuilder$append$java.lang.String$9$$r4, inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$9$$return, inline$java.lang.StringBuilder$append$java.lang.String$9$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$9$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$9$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$9$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$9$r0 := inline$java.lang.StringBuilder$append$java.lang.String$9$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$9$r1 := inline$java.lang.StringBuilder$append$java.lang.String$9$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$9$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$17$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$17$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$17$$this := inline$java.lang.StringBuilder$append$java.lang.String$9$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$17$r0, inline$java.lang.StringBuilder$$la$init$ra$$$17$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$17$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$17$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$17$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$17$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$17$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$17$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$17$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$17$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$17$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$17$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$17$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$20$Entry;

  inline$java.lang.Object$$la$init$ra$$$20$Entry:
    inline$java.lang.Object$$la$init$ra$$$20$$this := inline$java.lang.StringBuilder$$la$init$ra$$$17$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$20$anon0;

  inline$java.lang.Object$$la$init$ra$$$20$anon0:
    inline$java.lang.Object$$la$init$ra$$$20$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$20$Return;

  inline$java.lang.Object$$la$init$ra$$$20$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$17$$exception := inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$17$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$17$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$17$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$17$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$17$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$17$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$17$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$17$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$17$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$17$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$9$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$17$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$9$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$9$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$9$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$exception := inline$java.lang.StringBuilder$append$java.lang.String$9$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$9$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$9$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$exception := inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$9$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$9$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$exception := inline$java.lang.StringBuilder$append$java.lang.String$9$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$9$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$9$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$exception := inline$java.lang.StringBuilder$append$java.lang.String$9$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon6:
    goto inline$java.lang.StringBuilder$toString$$15$Entry;

  inline$java.lang.StringBuilder$toString$$15$Entry:
    inline$java.lang.StringBuilder$toString$$15$$this := inline$java.lang.StringBuilder$append$java.lang.String$9$$r5;
    havoc inline$java.lang.StringBuilder$toString$$15$r0, inline$java.lang.StringBuilder$toString$$15$$r1, inline$java.lang.StringBuilder$toString$$15$$return, inline$java.lang.StringBuilder$toString$$15$$exception;
    goto inline$java.lang.StringBuilder$toString$$15$anon0;

  inline$java.lang.StringBuilder$toString$$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$15$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$15$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$15$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$15$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$15$r0 := inline$java.lang.StringBuilder$toString$$15$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$15$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$15$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$15$$return := inline$java.lang.StringBuilder$toString$$15$$r1;
    goto inline$java.lang.StringBuilder$toString$$15$block61;

  inline$java.lang.StringBuilder$toString$$15$block61:
    goto inline$java.lang.StringBuilder$toString$$15$Return;

  inline$java.lang.StringBuilder$toString$$15$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$9$$r6 := inline$java.lang.StringBuilder$toString$$15$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$exception := inline$java.lang.StringBuilder$toString$$15$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$9$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$9$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$9$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$9$$return := inline$java.lang.StringBuilder$append$java.lang.String$9$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$9$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$9$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$9$Return:
    inline$java.lang.StringBuilder$append$char$3$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$9$$return;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$9$$exception;
    goto inline$java.lang.StringBuilder$append$char$3$anon3$2;

  inline$java.lang.StringBuilder$append$char$3$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$3$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$3$$r6 := inline$java.lang.StringBuilder$append$char$3$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$this := inline$java.lang.StringBuilder$append$char$3$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$3$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$21$Entry;

  inline$java.lang.Object$$la$init$ra$$$21$Entry:
    inline$java.lang.Object$$la$init$ra$$$21$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$21$anon0;

  inline$java.lang.Object$$la$init$ra$$$21$anon0:
    inline$java.lang.Object$$la$init$ra$$$21$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$21$Return;

  inline$java.lang.Object$$la$init$ra$$$21$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$exception := inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$Return:
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$3$anon3$3;

  inline$java.lang.StringBuilder$append$char$3$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$3$anon11_Then, inline$java.lang.StringBuilder$append$char$3$anon11_Else;

  inline$java.lang.StringBuilder$append$char$3$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$3$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$append$char$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$3$anon6;

  inline$java.lang.StringBuilder$append$char$3$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$3$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$3$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$append$char$3$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$3$Return;

  inline$java.lang.StringBuilder$append$char$3$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$this := inline$java.lang.StringBuilder$append$char$3$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$3$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$3$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$3$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$3$r0, inline$java.lang.StringBuilder$append$java.lang.Object$3$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$3$r1, inline$java.lang.StringBuilder$append$java.lang.Object$3$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$3$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$3$$return, inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$3$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$3$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$3$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$3$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$3$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$3$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$3$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$3$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$3$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$3$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$3$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$3$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$3$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$3$$return := inline$java.lang.StringBuilder$append$java.lang.Object$3$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$3$Return:
    inline$java.lang.StringBuilder$append$char$3$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$3$$return;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$3$anon6$1;

  inline$java.lang.StringBuilder$append$char$3$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$3$anon12_Then, inline$java.lang.StringBuilder$append$char$3$anon12_Else;

  inline$java.lang.StringBuilder$append$char$3$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$3$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$append$char$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$3$anon9;

  inline$java.lang.StringBuilder$append$char$3$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$3$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$3$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$append$char$3$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$3$Return;

  inline$java.lang.StringBuilder$append$char$3$anon9:
    goto inline$java.lang.StringBuilder$toString$$16$Entry;

  inline$java.lang.StringBuilder$toString$$16$Entry:
    inline$java.lang.StringBuilder$toString$$16$$this := inline$java.lang.StringBuilder$append$char$3$$r7;
    havoc inline$java.lang.StringBuilder$toString$$16$r0, inline$java.lang.StringBuilder$toString$$16$$r1, inline$java.lang.StringBuilder$toString$$16$$return, inline$java.lang.StringBuilder$toString$$16$$exception;
    goto inline$java.lang.StringBuilder$toString$$16$anon0;

  inline$java.lang.StringBuilder$toString$$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$16$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$16$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$16$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$16$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$16$r0 := inline$java.lang.StringBuilder$toString$$16$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$16$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$16$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$16$$return := inline$java.lang.StringBuilder$toString$$16$$r1;
    goto inline$java.lang.StringBuilder$toString$$16$block61;

  inline$java.lang.StringBuilder$toString$$16$block61:
    goto inline$java.lang.StringBuilder$toString$$16$Return;

  inline$java.lang.StringBuilder$toString$$16$Return:
    inline$java.lang.StringBuilder$append$char$3$$r8 := inline$java.lang.StringBuilder$toString$$16$$return;
    inline$java.lang.StringBuilder$append$char$3$$exception := inline$java.lang.StringBuilder$toString$$16$$exception;
    goto inline$java.lang.StringBuilder$append$char$3$anon9$1;

  inline$java.lang.StringBuilder$append$char$3$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$3$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$3$$return := inline$java.lang.StringBuilder$append$char$3$r0;
    goto inline$java.lang.StringBuilder$append$char$3$block59;

  inline$java.lang.StringBuilder$append$char$3$block59:
    goto inline$java.lang.StringBuilder$append$char$3$Return;

  inline$java.lang.StringBuilder$append$char$3$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$fakelocal_23 := inline$java.lang.StringBuilder$append$char$3$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$java.lang.StringBuilder$append$char$3$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon63$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$anon63$1:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$i7 + 1;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block20:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toString$$17$Entry;

  inline$java.lang.StringBuilder$toString$$17$Entry:
    inline$java.lang.StringBuilder$toString$$17$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$r1;
    havoc inline$java.lang.StringBuilder$toString$$17$r0, inline$java.lang.StringBuilder$toString$$17$$r1, inline$java.lang.StringBuilder$toString$$17$$return, inline$java.lang.StringBuilder$toString$$17$$exception;
    goto inline$java.lang.StringBuilder$toString$$17$anon0;

  inline$java.lang.StringBuilder$toString$$17$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$17$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$17$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$17$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$17$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$17$r0 := inline$java.lang.StringBuilder$toString$$17$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$17$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$17$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$17$$return := inline$java.lang.StringBuilder$toString$$17$$r1;
    goto inline$java.lang.StringBuilder$toString$$17$block61;

  inline$java.lang.StringBuilder$toString$$17$block61:
    goto inline$java.lang.StringBuilder$toString$$17$Return;

  inline$java.lang.StringBuilder$toString$$17$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r6 := inline$java.lang.StringBuilder$toString$$17$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception := inline$java.lang.StringBuilder$toString$$17$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block20$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block20$1:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$r6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$block21:
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$Return:
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$return;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$1$$exception;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon19$1;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$anon19$1:
    assert {:sourceloc "Security.java", 125, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$r7;
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block18;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$block18:
    goto inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$Return:
    $r5 := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$return;
    $exception := inline$org.openmrs.util.Security$encodeStringSHA1$java.lang.String$0$$exception;
    goto anon18$1;

  anon18$1:
    goto anon39_Then, anon39_Else;

  anon39_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon40_Then, anon40_Else;

  anon40_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type] <: unsafe.org.openmrs.api.APIException;
    $return := 0;
    return;

  anon40_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type] <: unsafe.org.openmrs.api.APIException);
    assert {:clone} true;
    goto anon22;

  anon39_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon22;

  anon22:
    assert {:sourceloc "Security.java", 66, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$Entry;

  inline$java.lang.String$equals$java.lang.Object$1$Entry:
    inline$java.lang.String$equals$java.lang.Object$1$$this := r0;
    inline$java.lang.String$equals$java.lang.Object$1$$in_parameter__0 := $r5;
    havoc inline$java.lang.String$equals$java.lang.Object$1$$r7, inline$java.lang.String$equals$java.lang.Object$1$$r6, inline$java.lang.String$equals$java.lang.Object$1$$r8, inline$java.lang.String$equals$java.lang.Object$1$r2, inline$java.lang.String$equals$java.lang.Object$1$$i0, inline$java.lang.String$equals$java.lang.Object$1$$r3, inline$java.lang.String$equals$java.lang.Object$1$$r4, inline$java.lang.String$equals$java.lang.Object$1$i5, inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_5, inline$java.lang.String$equals$java.lang.Object$1$$r9, inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_4, inline$java.lang.String$equals$java.lang.Object$1$$c3, inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_0, inline$java.lang.String$equals$java.lang.Object$1$$r5, inline$java.lang.String$equals$java.lang.Object$1$$c4, inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_1, inline$java.lang.String$equals$java.lang.Object$1$r1, inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_2, inline$java.lang.String$equals$java.lang.Object$1$$i2, inline$java.lang.String$equals$java.lang.Object$1$r0, inline$java.lang.String$equals$java.lang.Object$1$$i1, inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_3, inline$java.lang.String$equals$java.lang.Object$1$$return, inline$java.lang.String$equals$java.lang.Object$1$$exception;
    inline$java.lang.String$equals$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$equals$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon0;

  inline$java.lang.String$equals$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$equals$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$r0 := inline$java.lang.String$equals$java.lang.Object$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$r1 := inline$java.lang.String$equals$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "String.java", 69, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon37_Then, inline$java.lang.String$equals$java.lang.Object$1$anon37_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon37_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$r0
   != inline$java.lang.String$equals$java.lang.Object$1$r1;
    assert {:sourceloc "String.java", 69, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$block76;

  inline$java.lang.String$equals$java.lang.Object$1$anon37_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$r0
   == inline$java.lang.String$equals$java.lang.Object$1$r1;
    assert {:sourceloc "String.java", 69, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon3;

  inline$java.lang.String$equals$java.lang.Object$1$anon3:
    assert {:sourceloc "String.java", 70, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$return := 1;
    goto inline$java.lang.String$equals$java.lang.Object$1$block83;

  inline$java.lang.String$equals$java.lang.Object$1$block76:
    assert {:sourceloc "String.java", 71, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon38_Then, inline$java.lang.String$equals$java.lang.Object$1$anon38_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon38_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$r1 != unsafe.$null;
    assert {:sourceloc "String.java", 71, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$block77;

  inline$java.lang.String$equals$java.lang.Object$1$anon38_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$r1 == unsafe.$null;
    assert {:sourceloc "String.java", 71, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon6;

  inline$java.lang.String$equals$java.lang.Object$1$anon6:
    assert {:sourceloc "String.java", 72, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$1$block83;

  inline$java.lang.String$equals$java.lang.Object$1$block77:
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    call inline$java.lang.String$equals$java.lang.Object$1$$r3, inline$java.lang.String$equals$java.lang.Object$1$$exception := unsafe.java.lang.Object$getClass$(inline$java.lang.String$equals$java.lang.Object$1$r0);
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    call inline$java.lang.String$equals$java.lang.Object$1$$r4, inline$java.lang.String$equals$java.lang.Object$1$$exception := unsafe.java.lang.Object$getClass$(inline$java.lang.String$equals$java.lang.Object$1$r1);
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon39_Then, inline$java.lang.String$equals$java.lang.Object$1$anon39_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon39_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$r3
   == inline$java.lang.String$equals$java.lang.Object$1$$r4;
    assert {:sourceloc "String.java", 73, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$block78;

  inline$java.lang.String$equals$java.lang.Object$1$anon39_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$r3
   != inline$java.lang.String$equals$java.lang.Object$1$$r4;
    assert {:sourceloc "String.java", 73, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon9;

  inline$java.lang.String$equals$java.lang.Object$1$anon9:
    assert {:sourceloc "String.java", 74, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$1$block83;

  inline$java.lang.String$equals$java.lang.Object$1$block78:
    assert {:sourceloc "String.java", 75, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon40_Then, inline$java.lang.String$equals$java.lang.Object$1$anon40_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon40_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon12;

  inline$java.lang.String$equals$java.lang.Object$1$anon40_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.String);
    call inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_0;
    goto inline$java.lang.String$equals$java.lang.Object$1$Return;

  inline$java.lang.String$equals$java.lang.Object$1$anon12:
    inline$java.lang.String$equals$java.lang.Object$1$r2 := inline$java.lang.String$equals$java.lang.Object$1$r1;
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$r5 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon41_Then, inline$java.lang.String$equals$java.lang.Object$1$anon41_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon41_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$r5 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon15;

  inline$java.lang.String$equals$java.lang.Object$1$anon41_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$r5 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_1;
    goto inline$java.lang.String$equals$java.lang.Object$1$Return;

  inline$java.lang.String$equals$java.lang.Object$1$anon15:
    inline$java.lang.String$equals$java.lang.Object$1$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$1$$r5];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$r6 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$r2, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon42_Then, inline$java.lang.String$equals$java.lang.Object$1$anon42_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon42_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$r6 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon18;

  inline$java.lang.String$equals$java.lang.Object$1$anon42_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$r6 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_2;
    goto inline$java.lang.String$equals$java.lang.Object$1$Return;

  inline$java.lang.String$equals$java.lang.Object$1$anon18:
    inline$java.lang.String$equals$java.lang.Object$1$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$1$$r6];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon43_Then, inline$java.lang.String$equals$java.lang.Object$1$anon43_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon43_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$i1
   == inline$java.lang.String$equals$java.lang.Object$1$$i0;
    assert {:sourceloc "String.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$block79;

  inline$java.lang.String$equals$java.lang.Object$1$anon43_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$i1
   != inline$java.lang.String$equals$java.lang.Object$1$$i0;
    assert {:sourceloc "String.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon21;

  inline$java.lang.String$equals$java.lang.Object$1$anon21:
    assert {:sourceloc "String.java", 78, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$1$block83;

  inline$java.lang.String$equals$java.lang.Object$1$block79:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$i5 := 0;
    goto inline$java.lang.String$equals$java.lang.Object$1$block80;

  inline$java.lang.String$equals$java.lang.Object$1$block80:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$r7 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon44_Then, inline$java.lang.String$equals$java.lang.Object$1$anon44_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon44_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$r7 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon24;

  inline$java.lang.String$equals$java.lang.Object$1$anon44_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$r7 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_3;
    goto inline$java.lang.String$equals$java.lang.Object$1$Return;

  inline$java.lang.String$equals$java.lang.Object$1$anon24:
    inline$java.lang.String$equals$java.lang.Object$1$$i2 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$1$$r7];
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon45_Then, inline$java.lang.String$equals$java.lang.Object$1$anon45_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon45_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$i5
   >= inline$java.lang.String$equals$java.lang.Object$1$$i2;
    assert {:sourceloc "String.java", 80, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$block81;

  inline$java.lang.String$equals$java.lang.Object$1$anon45_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$i2
   > inline$java.lang.String$equals$java.lang.Object$1$i5;
    assert {:sourceloc "String.java", 80, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon27;

  inline$java.lang.String$equals$java.lang.Object$1$anon27:
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$r8 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon46_Then, inline$java.lang.String$equals$java.lang.Object$1$anon46_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon46_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$1$$r8]
   && inline$java.lang.String$equals$java.lang.Object$1$i5 >= 0;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon30;

  inline$java.lang.String$equals$java.lang.Object$1$anon46_Else:
    assume {:partition} !(inline$java.lang.String$equals$java.lang.Object$1$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$1$$r8]
   && inline$java.lang.String$equals$java.lang.Object$1$i5 >= 0);
    call inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_4;
    goto inline$java.lang.String$equals$java.lang.Object$1$Return;

  inline$java.lang.String$equals$java.lang.Object$1$anon30:
    inline$java.lang.String$equals$java.lang.Object$1$$c4 := unsafe.$intArrHeap[inline$java.lang.String$equals$java.lang.Object$1$$r8][inline$java.lang.String$equals$java.lang.Object$1$i5];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$r9 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$1$r2, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon47_Then, inline$java.lang.String$equals$java.lang.Object$1$anon47_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon47_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$1$$r9]
   && inline$java.lang.String$equals$java.lang.Object$1$i5 >= 0;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon33;

  inline$java.lang.String$equals$java.lang.Object$1$anon47_Else:
    assume {:partition} !(inline$java.lang.String$equals$java.lang.Object$1$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$1$$r9]
   && inline$java.lang.String$equals$java.lang.Object$1$i5 >= 0);
    call inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$1$$exception := inline$java.lang.String$equals$java.lang.Object$1$$fakelocal_5;
    goto inline$java.lang.String$equals$java.lang.Object$1$Return;

  inline$java.lang.String$equals$java.lang.Object$1$anon33:
    inline$java.lang.String$equals$java.lang.Object$1$$c3 := unsafe.$intArrHeap[inline$java.lang.String$equals$java.lang.Object$1$$r9][inline$java.lang.String$equals$java.lang.Object$1$i5];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon48_Then, inline$java.lang.String$equals$java.lang.Object$1$anon48_Else;

  inline$java.lang.String$equals$java.lang.Object$1$anon48_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$c4
   == inline$java.lang.String$equals$java.lang.Object$1$$c3;
    assert {:sourceloc "String.java", 81, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$block82;

  inline$java.lang.String$equals$java.lang.Object$1$anon48_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$1$$c4
   != inline$java.lang.String$equals$java.lang.Object$1$$c3;
    assert {:sourceloc "String.java", 81, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$anon36;

  inline$java.lang.String$equals$java.lang.Object$1$anon36:
    assert {:sourceloc "String.java", 82, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$1$block83;

  inline$java.lang.String$equals$java.lang.Object$1$block82:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$i5 := inline$java.lang.String$equals$java.lang.Object$1$i5 + 1;
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$1$block80;

  inline$java.lang.String$equals$java.lang.Object$1$block81:
    assert {:sourceloc "String.java", 85, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$1$$return := 1;
    goto inline$java.lang.String$equals$java.lang.Object$1$block83;

  inline$java.lang.String$equals$java.lang.Object$1$block83:
    goto inline$java.lang.String$equals$java.lang.Object$1$Return;

  inline$java.lang.String$equals$java.lang.Object$1$Return:
    $z1 := inline$java.lang.String$equals$java.lang.Object$1$$return;
    $exception := inline$java.lang.String$equals$java.lang.Object$1$$exception;
    goto anon22$1;

  anon22$1:
    assert {:sourceloc "Security.java", 66, -1, -1, -1} true;
    goto anon41_Then, anon41_Else;

  anon41_Then:
    assume {:partition} $z1 != 0;
    assert {:sourceloc "Security.java", 66, -1, -1, -1} {:comment "thenblock"} true;
    goto block4;

  anon41_Else:
    assume {:partition} $z1 == 0;
    assert {:sourceloc "Security.java", 66, -1, -1, -1} {:comment "elseblock"} true;
    goto anon25;

  anon25:
    assert {:sourceloc "Security.java", 67, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$in_parameter__0 := r1;
    havoc inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r5, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r7, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r9, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_4, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r8, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r1, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_5, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r12, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r3, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r10, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r6, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r13, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r4, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r0, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r0 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 157, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_0 := 4];
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r1 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block22;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block22:
    assert {:sourceloc "Security.java", 161, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := unsafe.java.security.MessageDigest$getInstance$java.lang.String(inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r1);
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon20_Then, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon20_Else;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon20_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon21_Then, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon21_Else;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon21_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block23;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon21_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon4;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon20_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon4;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon4:
    assert {:sourceloc "Security.java", 162, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r5 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 162, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon22_Then, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon22_Else;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon22_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r0
   != unsafe.$null;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon7;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon22_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r0
   == unsafe.$null;
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon7:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$2$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$2$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$this := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$in_parameter__0 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r5;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$2$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$2$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$2$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$2$Entry;

  inline$java.lang.String$getBytes$$2$Entry:
    inline$java.lang.String$getBytes$$2$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$2$r0;
    havoc inline$java.lang.String$getBytes$$2$$r4, inline$java.lang.String$getBytes$$2$$fakelocal_2, inline$java.lang.String$getBytes$$2$$c2, inline$java.lang.String$getBytes$$2$$b3, inline$java.lang.String$getBytes$$2$$fakelocal_4, inline$java.lang.String$getBytes$$2$r0, inline$java.lang.String$getBytes$$2$i4, inline$java.lang.String$getBytes$$2$$i0, inline$java.lang.String$getBytes$$2$$r3, inline$java.lang.String$getBytes$$2$$fakelocal_3, inline$java.lang.String$getBytes$$2$r1, inline$java.lang.String$getBytes$$2$$i1, inline$java.lang.String$getBytes$$2$$fakelocal_0, inline$java.lang.String$getBytes$$2$$r2, inline$java.lang.String$getBytes$$2$$fakelocal_1, inline$java.lang.String$getBytes$$2$$return, inline$java.lang.String$getBytes$$2$$exception;
    inline$java.lang.String$getBytes$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$2$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$2$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$2$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$2$anon0;

  inline$java.lang.String$getBytes$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$2$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$2$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$2$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$2$r0 := inline$java.lang.String$getBytes$$2$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$2$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$2$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$2$anon16_Then, inline$java.lang.String$getBytes$$2$anon16_Else;

  inline$java.lang.String$getBytes$$2$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$2$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$2$$exception := inline$java.lang.String$getBytes$$2$$exception;
    goto inline$java.lang.String$getBytes$$2$anon3;

  inline$java.lang.String$getBytes$$2$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$2$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$2$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$2$$exception := inline$java.lang.String$getBytes$$2$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$2$Return;

  inline$java.lang.String$getBytes$$2$anon3:
    inline$java.lang.String$getBytes$$2$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$2$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$2$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$2$$fakelocal_1 := inline$java.lang.String$getBytes$$2$$i0];
    inline$java.lang.String$getBytes$$2$r1 := inline$java.lang.String$getBytes$$2$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$2$i4 := 0;
    goto inline$java.lang.String$getBytes$$2$block69;

  inline$java.lang.String$getBytes$$2$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$2$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$2$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$2$anon17_Then, inline$java.lang.String$getBytes$$2$anon17_Else;

  inline$java.lang.String$getBytes$$2$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$2$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$2$$exception := inline$java.lang.String$getBytes$$2$$exception;
    goto inline$java.lang.String$getBytes$$2$anon6;

  inline$java.lang.String$getBytes$$2$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$2$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$2$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$2$$exception := inline$java.lang.String$getBytes$$2$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$2$Return;

  inline$java.lang.String$getBytes$$2$anon6:
    inline$java.lang.String$getBytes$$2$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$2$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$2$anon18_Then, inline$java.lang.String$getBytes$$2$anon18_Else;

  inline$java.lang.String$getBytes$$2$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$2$i4
   >= inline$java.lang.String$getBytes$$2$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$2$block70;

  inline$java.lang.String$getBytes$$2$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$2$$i1 > inline$java.lang.String$getBytes$$2$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$2$anon9;

  inline$java.lang.String$getBytes$$2$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$2$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$2$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$2$anon19_Then, inline$java.lang.String$getBytes$$2$anon19_Else;

  inline$java.lang.String$getBytes$$2$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$2$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$2$$r4]
   && inline$java.lang.String$getBytes$$2$i4 >= 0;
    inline$java.lang.String$getBytes$$2$$exception := inline$java.lang.String$getBytes$$2$$exception;
    goto inline$java.lang.String$getBytes$$2$anon12;

  inline$java.lang.String$getBytes$$2$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$2$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$2$$r4]
   && inline$java.lang.String$getBytes$$2$i4 >= 0);
    call inline$java.lang.String$getBytes$$2$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$2$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$2$$exception := inline$java.lang.String$getBytes$$2$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$2$Return;

  inline$java.lang.String$getBytes$$2$anon12:
    inline$java.lang.String$getBytes$$2$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$2$$r4][inline$java.lang.String$getBytes$$2$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$2$$b3 := inline$java.lang.String$getBytes$$2$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$2$anon20_Then, inline$java.lang.String$getBytes$$2$anon20_Else;

  inline$java.lang.String$getBytes$$2$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$2$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$2$r1]
   && inline$java.lang.String$getBytes$$2$i4 >= 0;
    inline$java.lang.String$getBytes$$2$$exception := inline$java.lang.String$getBytes$$2$$exception;
    goto inline$java.lang.String$getBytes$$2$anon15;

  inline$java.lang.String$getBytes$$2$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$2$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$2$r1]
   && inline$java.lang.String$getBytes$$2$i4 >= 0);
    call inline$java.lang.String$getBytes$$2$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$2$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$2$$exception := inline$java.lang.String$getBytes$$2$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$2$Return;

  inline$java.lang.String$getBytes$$2$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$2$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$2$r1][inline$java.lang.String$getBytes$$2$i4 := inline$java.lang.String$getBytes$$2$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$2$i4 := inline$java.lang.String$getBytes$$2$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$2$block69;

  inline$java.lang.String$getBytes$$2$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$2$$return := inline$java.lang.String$getBytes$$2$r1;
    goto inline$java.lang.String$getBytes$$2$block71;

  inline$java.lang.String$getBytes$$2$block71:
    goto inline$java.lang.String$getBytes$$2$Return;

  inline$java.lang.String$getBytes$$2$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$r2 := inline$java.lang.String$getBytes$$2$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$exception := inline$java.lang.String$getBytes$$2$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$2$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$2$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$2$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$2$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$2$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$2$Return:
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r3 := inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$return;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$2$$exception;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon7$1;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon7$1:
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon23_Then, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon23_Else;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon23_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon24_Then, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon24_Else;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon24_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block23;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon24_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block24;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon23_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block24;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block24:
    assert {:sourceloc "Security.java", 168, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block25;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block23:
    assert {:sourceloc "Security.java", 170, -1, -1, -1} true;
    assume unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r8 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception;
    assert {:sourceloc "Security.java", 164, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r4 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r8;
    assert {:sourceloc "Security.java", 166, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r9 := unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259;
    assert {:sourceloc "Security.java", 166, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$Entry;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$Entry:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$in_parameter__0 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r1;
    havoc inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r5, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$r0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r4, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$return, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon0;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$r0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$in_parameter__0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r1 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$18$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$18$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$18$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r1;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$18$r0, inline$java.lang.StringBuilder$$la$init$ra$$$18$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$18$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$18$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$18$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$18$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$18$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$18$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$18$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$18$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$18$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$18$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$18$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$22$Entry;

  inline$java.lang.Object$$la$init$ra$$$22$Entry:
    inline$java.lang.Object$$la$init$ra$$$22$$this := inline$java.lang.StringBuilder$$la$init$ra$$$18$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$22$anon0;

  inline$java.lang.Object$$la$init$ra$$$22$anon0:
    inline$java.lang.Object$$la$init$ra$$$22$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$22$Return;

  inline$java.lang.Object$$la$init$ra$$$22$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$18$$exception := inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$18$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$18$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$18$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$18$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$18$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$18$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$18$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$18$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$18$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$18$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$18$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon0$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon0$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$10$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$10$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$in_parameter__0 := unsafe.$StringConst1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$10$$r3, inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$10$$r2, inline$java.lang.StringBuilder$append$java.lang.String$10$r0, inline$java.lang.StringBuilder$append$java.lang.String$10$$r6, inline$java.lang.StringBuilder$append$java.lang.String$10$$r5, inline$java.lang.StringBuilder$append$java.lang.String$10$r1, inline$java.lang.StringBuilder$append$java.lang.String$10$$r4, inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$10$$return, inline$java.lang.StringBuilder$append$java.lang.String$10$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$10$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$10$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$10$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$10$r0 := inline$java.lang.StringBuilder$append$java.lang.String$10$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$10$r1 := inline$java.lang.StringBuilder$append$java.lang.String$10$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$10$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$19$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$19$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$19$$this := inline$java.lang.StringBuilder$append$java.lang.String$10$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$19$r0, inline$java.lang.StringBuilder$$la$init$ra$$$19$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$19$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$19$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$19$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$19$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$19$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$19$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$19$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$19$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$19$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$19$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$19$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$23$Entry;

  inline$java.lang.Object$$la$init$ra$$$23$Entry:
    inline$java.lang.Object$$la$init$ra$$$23$$this := inline$java.lang.StringBuilder$$la$init$ra$$$19$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$23$anon0;

  inline$java.lang.Object$$la$init$ra$$$23$anon0:
    inline$java.lang.Object$$la$init$ra$$$23$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$23$Return;

  inline$java.lang.Object$$la$init$ra$$$23$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$19$$exception := inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$19$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$19$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$19$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$19$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$19$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$19$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$19$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$19$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$19$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$19$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$10$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$19$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$10$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$10$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$10$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$exception := inline$java.lang.StringBuilder$append$java.lang.String$10$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$10$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$10$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$exception := inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$10$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$10$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$exception := inline$java.lang.StringBuilder$append$java.lang.String$10$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$10$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$10$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$exception := inline$java.lang.StringBuilder$append$java.lang.String$10$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon6:
    goto inline$java.lang.StringBuilder$toString$$18$Entry;

  inline$java.lang.StringBuilder$toString$$18$Entry:
    inline$java.lang.StringBuilder$toString$$18$$this := inline$java.lang.StringBuilder$append$java.lang.String$10$$r5;
    havoc inline$java.lang.StringBuilder$toString$$18$r0, inline$java.lang.StringBuilder$toString$$18$$r1, inline$java.lang.StringBuilder$toString$$18$$return, inline$java.lang.StringBuilder$toString$$18$$exception;
    goto inline$java.lang.StringBuilder$toString$$18$anon0;

  inline$java.lang.StringBuilder$toString$$18$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$18$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$18$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$18$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$18$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$18$r0 := inline$java.lang.StringBuilder$toString$$18$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$18$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$18$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$18$$return := inline$java.lang.StringBuilder$toString$$18$$r1;
    goto inline$java.lang.StringBuilder$toString$$18$block61;

  inline$java.lang.StringBuilder$toString$$18$block61:
    goto inline$java.lang.StringBuilder$toString$$18$Return;

  inline$java.lang.StringBuilder$toString$$18$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$10$$r6 := inline$java.lang.StringBuilder$toString$$18$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$exception := inline$java.lang.StringBuilder$toString$$18$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$10$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$10$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$10$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$10$$return := inline$java.lang.StringBuilder$append$java.lang.String$10$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$10$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$10$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$10$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$10$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$10$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon0$2;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon0$2:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon10_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon10_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon10_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon3;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon10_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$11$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$11$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r2;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$in_parameter__0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$11$$r3, inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$11$$r2, inline$java.lang.StringBuilder$append$java.lang.String$11$r0, inline$java.lang.StringBuilder$append$java.lang.String$11$$r6, inline$java.lang.StringBuilder$append$java.lang.String$11$$r5, inline$java.lang.StringBuilder$append$java.lang.String$11$r1, inline$java.lang.StringBuilder$append$java.lang.String$11$$r4, inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$11$$return, inline$java.lang.StringBuilder$append$java.lang.String$11$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$11$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$11$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$11$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$11$r0 := inline$java.lang.StringBuilder$append$java.lang.String$11$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$11$r1 := inline$java.lang.StringBuilder$append$java.lang.String$11$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$11$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$20$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$20$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$20$$this := inline$java.lang.StringBuilder$append$java.lang.String$11$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$20$r0, inline$java.lang.StringBuilder$$la$init$ra$$$20$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$20$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$20$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$20$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$20$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$20$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$20$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$20$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$20$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$20$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$20$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$20$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$24$Entry;

  inline$java.lang.Object$$la$init$ra$$$24$Entry:
    inline$java.lang.Object$$la$init$ra$$$24$$this := inline$java.lang.StringBuilder$$la$init$ra$$$20$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$24$anon0;

  inline$java.lang.Object$$la$init$ra$$$24$anon0:
    inline$java.lang.Object$$la$init$ra$$$24$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$24$Return;

  inline$java.lang.Object$$la$init$ra$$$24$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$20$$exception := inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$20$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$20$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$20$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$20$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$20$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$20$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$20$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$20$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$20$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$20$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$11$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$20$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$11$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$11$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$11$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$exception := inline$java.lang.StringBuilder$append$java.lang.String$11$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$11$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$11$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$exception := inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$11$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$11$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$exception := inline$java.lang.StringBuilder$append$java.lang.String$11$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$11$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$11$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$exception := inline$java.lang.StringBuilder$append$java.lang.String$11$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon6:
    goto inline$java.lang.StringBuilder$toString$$19$Entry;

  inline$java.lang.StringBuilder$toString$$19$Entry:
    inline$java.lang.StringBuilder$toString$$19$$this := inline$java.lang.StringBuilder$append$java.lang.String$11$$r5;
    havoc inline$java.lang.StringBuilder$toString$$19$r0, inline$java.lang.StringBuilder$toString$$19$$r1, inline$java.lang.StringBuilder$toString$$19$$return, inline$java.lang.StringBuilder$toString$$19$$exception;
    goto inline$java.lang.StringBuilder$toString$$19$anon0;

  inline$java.lang.StringBuilder$toString$$19$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$19$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$19$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$19$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$19$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$19$r0 := inline$java.lang.StringBuilder$toString$$19$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$19$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$19$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$19$$return := inline$java.lang.StringBuilder$toString$$19$$r1;
    goto inline$java.lang.StringBuilder$toString$$19$block61;

  inline$java.lang.StringBuilder$toString$$19$block61:
    goto inline$java.lang.StringBuilder$toString$$19$Return;

  inline$java.lang.StringBuilder$toString$$19$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$11$$r6 := inline$java.lang.StringBuilder$toString$$19$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$exception := inline$java.lang.StringBuilder$toString$$19$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$11$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$11$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$11$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$11$$return := inline$java.lang.StringBuilder$append$java.lang.String$11$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$11$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$11$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$11$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r3 := inline$java.lang.StringBuilder$append$java.lang.String$11$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$11$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon3$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon3$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon11_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon11_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon11_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r3
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon6;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon11_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r3
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_2;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$12$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$12$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$in_parameter__0 := unsafe.$StringConst2;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$12$$r3, inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$12$$r2, inline$java.lang.StringBuilder$append$java.lang.String$12$r0, inline$java.lang.StringBuilder$append$java.lang.String$12$$r6, inline$java.lang.StringBuilder$append$java.lang.String$12$$r5, inline$java.lang.StringBuilder$append$java.lang.String$12$r1, inline$java.lang.StringBuilder$append$java.lang.String$12$$r4, inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$12$$return, inline$java.lang.StringBuilder$append$java.lang.String$12$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$12$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$12$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$12$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$12$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$12$r0 := inline$java.lang.StringBuilder$append$java.lang.String$12$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$12$r1 := inline$java.lang.StringBuilder$append$java.lang.String$12$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$12$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$21$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$21$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$21$$this := inline$java.lang.StringBuilder$append$java.lang.String$12$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$21$r0, inline$java.lang.StringBuilder$$la$init$ra$$$21$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$21$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$21$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$21$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$21$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$21$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$21$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$21$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$21$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$21$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$21$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$21$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$25$Entry;

  inline$java.lang.Object$$la$init$ra$$$25$Entry:
    inline$java.lang.Object$$la$init$ra$$$25$$this := inline$java.lang.StringBuilder$$la$init$ra$$$21$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$25$anon0;

  inline$java.lang.Object$$la$init$ra$$$25$anon0:
    inline$java.lang.Object$$la$init$ra$$$25$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$25$Return;

  inline$java.lang.Object$$la$init$ra$$$25$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$21$$exception := inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$21$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$21$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$21$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$21$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$21$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$21$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$21$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$21$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$21$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$21$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$12$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$21$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$12$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$12$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$12$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$exception := inline$java.lang.StringBuilder$append$java.lang.String$12$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$12$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$12$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$exception := inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$12$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$12$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$exception := inline$java.lang.StringBuilder$append$java.lang.String$12$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$12$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$12$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$exception := inline$java.lang.StringBuilder$append$java.lang.String$12$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon6:
    goto inline$java.lang.StringBuilder$toString$$20$Entry;

  inline$java.lang.StringBuilder$toString$$20$Entry:
    inline$java.lang.StringBuilder$toString$$20$$this := inline$java.lang.StringBuilder$append$java.lang.String$12$$r5;
    havoc inline$java.lang.StringBuilder$toString$$20$r0, inline$java.lang.StringBuilder$toString$$20$$r1, inline$java.lang.StringBuilder$toString$$20$$return, inline$java.lang.StringBuilder$toString$$20$$exception;
    goto inline$java.lang.StringBuilder$toString$$20$anon0;

  inline$java.lang.StringBuilder$toString$$20$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$20$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$20$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$20$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$20$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$20$r0 := inline$java.lang.StringBuilder$toString$$20$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$20$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$20$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$20$$return := inline$java.lang.StringBuilder$toString$$20$$r1;
    goto inline$java.lang.StringBuilder$toString$$20$block61;

  inline$java.lang.StringBuilder$toString$$20$block61:
    goto inline$java.lang.StringBuilder$toString$$20$Return;

  inline$java.lang.StringBuilder$toString$$20$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$12$$r6 := inline$java.lang.StringBuilder$toString$$20$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$exception := inline$java.lang.StringBuilder$toString$$20$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$12$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$12$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$12$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$12$$return := inline$java.lang.StringBuilder$append$java.lang.String$12$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$12$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$12$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$12$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r4 := inline$java.lang.StringBuilder$append$java.lang.String$12$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$12$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon6$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon6$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon12_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon12_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon12_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r4
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon9;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon12_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r4
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon9:
    goto inline$java.lang.StringBuilder$toString$$21$Entry;

  inline$java.lang.StringBuilder$toString$$21$Entry:
    inline$java.lang.StringBuilder$toString$$21$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r4;
    havoc inline$java.lang.StringBuilder$toString$$21$r0, inline$java.lang.StringBuilder$toString$$21$$r1, inline$java.lang.StringBuilder$toString$$21$$return, inline$java.lang.StringBuilder$toString$$21$$exception;
    goto inline$java.lang.StringBuilder$toString$$21$anon0;

  inline$java.lang.StringBuilder$toString$$21$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$21$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$21$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$21$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$21$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$21$r0 := inline$java.lang.StringBuilder$toString$$21$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$21$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$21$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$21$$return := inline$java.lang.StringBuilder$toString$$21$$r1;
    goto inline$java.lang.StringBuilder$toString$$21$block61;

  inline$java.lang.StringBuilder$toString$$21$block61:
    goto inline$java.lang.StringBuilder$toString$$21$Return;

  inline$java.lang.StringBuilder$toString$$21$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r5 := inline$java.lang.StringBuilder$toString$$21$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception := inline$java.lang.StringBuilder$toString$$21$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon9$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$anon9$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$return := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$r5;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$block8;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$block8:
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$Return:
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r10 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$return;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block23$1;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block23$1:
    assert {:sourceloc "Security.java", 166, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon25_Then, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon25_Else;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon25_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r9
   != unsafe.$null;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon13;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon25_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r9
   == unsafe.$null;
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon13:
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := unsafe.org.slf4j.Logger$error$java.lang.String_java.lang.Throwable(inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r9, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r10, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r4);
    assert {:sourceloc "Security.java", 167, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r12 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_3;
    assert {:sourceloc "Security.java", 167, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r12, unsafe.$StringConst4, unsafe.$null, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r4);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon26_Then, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon26_Else;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon26_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r12, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon16;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon26_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r12, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon16:
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r13 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r12;
    assert {:sourceloc "Security.java", 167, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r13;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block26;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block25:
    assert {:sourceloc "Security.java", 170, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon27_Then, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon27_Else;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon27_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon19;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon27_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon19:
    call inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r6, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := unsafe.java.security.MessageDigest$digest$byte$lp$$rp$(inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$r3);
    assert {:sourceloc "Security.java", 170, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Entry;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Entry:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$in_parameter__0 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r6;
    havoc inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$s3, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$b1, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_0, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r5, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_4, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_3, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_2, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_1, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_5, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon0;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon18_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon18_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon18_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0
   == unsafe.$null;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block27;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon18_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0
   != unsafe.$null;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon3;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon3:
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon19_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon19_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon19_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0
   != unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon6;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon19_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0
   == unsafe.$null;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon6:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0];
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon20_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon20_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon20_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2 >= 1;
    assert {:sourceloc "Security.java", 185, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block28;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon20_Else:
    assume {:partition} 1 > inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2;
    assert {:sourceloc "Security.java", 185, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block27;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block27:
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := unsafe.$StringConst5;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block31;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block28:
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$22$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$22$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$22$$this := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$22$r0, inline$java.lang.StringBuilder$$la$init$ra$$$22$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$22$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$22$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$22$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$22$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$22$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$22$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$22$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$22$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$22$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$22$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$22$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$26$Entry;

  inline$java.lang.Object$$la$init$ra$$$26$Entry:
    inline$java.lang.Object$$la$init$ra$$$26$$this := inline$java.lang.StringBuilder$$la$init$ra$$$22$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$26$anon0;

  inline$java.lang.Object$$la$init$ra$$$26$anon0:
    inline$java.lang.Object$$la$init$ra$$$26$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$26$Return;

  inline$java.lang.Object$$la$init$ra$$$26$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$22$$exception := inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$22$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$22$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$22$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$22$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$22$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$22$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$22$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$22$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$22$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$22$Return:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$22$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block28$1;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block28$1:
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon21_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon21_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon21_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon11;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon21_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon11:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2];
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 := 0;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block29;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block29:
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon22_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon22_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon22_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4
   >= inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block30;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon22_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0
   > inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon14;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon14:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon23_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon23_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon23_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 >= 0;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon17;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon23_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 >= 0);
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon17:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$b1 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4];
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$s3 := unsafe.$bitAnd(inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$b1, 255);
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r5, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := unsafe.java.lang.Integer$toHexString$int(inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$s3);
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$13$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$13$$this := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$in_parameter__0 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r5;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$13$$r3, inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$13$$r2, inline$java.lang.StringBuilder$append$java.lang.String$13$r0, inline$java.lang.StringBuilder$append$java.lang.String$13$$r6, inline$java.lang.StringBuilder$append$java.lang.String$13$$r5, inline$java.lang.StringBuilder$append$java.lang.String$13$r1, inline$java.lang.StringBuilder$append$java.lang.String$13$$r4, inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$13$$return, inline$java.lang.StringBuilder$append$java.lang.String$13$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$13$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$13$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$13$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$13$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$13$r0 := inline$java.lang.StringBuilder$append$java.lang.String$13$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$13$r1 := inline$java.lang.StringBuilder$append$java.lang.String$13$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$13$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$23$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$23$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$23$$this := inline$java.lang.StringBuilder$append$java.lang.String$13$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$23$r0, inline$java.lang.StringBuilder$$la$init$ra$$$23$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$23$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$23$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$23$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$23$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$23$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$23$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$23$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$23$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$23$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$23$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$23$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$27$Entry;

  inline$java.lang.Object$$la$init$ra$$$27$Entry:
    inline$java.lang.Object$$la$init$ra$$$27$$this := inline$java.lang.StringBuilder$$la$init$ra$$$23$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$27$anon0;

  inline$java.lang.Object$$la$init$ra$$$27$anon0:
    inline$java.lang.Object$$la$init$ra$$$27$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$27$Return;

  inline$java.lang.Object$$la$init$ra$$$27$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$23$$exception := inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$23$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$23$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$23$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$23$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$23$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$23$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$23$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$23$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$23$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$23$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$13$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$23$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$13$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$13$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$13$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$exception := inline$java.lang.StringBuilder$append$java.lang.String$13$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$13$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$13$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$exception := inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$13$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$13$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$exception := inline$java.lang.StringBuilder$append$java.lang.String$13$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$13$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$13$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$exception := inline$java.lang.StringBuilder$append$java.lang.String$13$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon6:
    goto inline$java.lang.StringBuilder$toString$$22$Entry;

  inline$java.lang.StringBuilder$toString$$22$Entry:
    inline$java.lang.StringBuilder$toString$$22$$this := inline$java.lang.StringBuilder$append$java.lang.String$13$$r5;
    havoc inline$java.lang.StringBuilder$toString$$22$r0, inline$java.lang.StringBuilder$toString$$22$$r1, inline$java.lang.StringBuilder$toString$$22$$return, inline$java.lang.StringBuilder$toString$$22$$exception;
    goto inline$java.lang.StringBuilder$toString$$22$anon0;

  inline$java.lang.StringBuilder$toString$$22$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$22$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$22$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$22$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$22$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$22$r0 := inline$java.lang.StringBuilder$toString$$22$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$22$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$22$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$22$$return := inline$java.lang.StringBuilder$toString$$22$$r1;
    goto inline$java.lang.StringBuilder$toString$$22$block61;

  inline$java.lang.StringBuilder$toString$$22$block61:
    goto inline$java.lang.StringBuilder$toString$$22$Return;

  inline$java.lang.StringBuilder$toString$$22$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$13$$r6 := inline$java.lang.StringBuilder$toString$$22$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$exception := inline$java.lang.StringBuilder$toString$$22$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$13$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$13$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$13$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$13$$return := inline$java.lang.StringBuilder$append$java.lang.String$13$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$13$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$13$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$13$Return:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_4 := inline$java.lang.StringBuilder$append$java.lang.String$13$$return;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$13$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon17$1;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon17$1:
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 + 1;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block29;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block30:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.String);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_5;
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Entry;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Entry:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$28$Entry;

  inline$java.lang.Object$$la$init$ra$$$28$Entry:
    inline$java.lang.Object$$la$init$ra$$$28$$this := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$28$anon0;

  inline$java.lang.Object$$la$init$ra$$$28$anon0:
    inline$java.lang.Object$$la$init$ra$$$28$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$28$Return;

  inline$java.lang.Object$$la$init$ra$$$28$Return:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0$1:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Then, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Else;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3:
    goto inline$java.lang.StringBuilder$toCharArray$$0$Entry;

  inline$java.lang.StringBuilder$toCharArray$$0$Entry:
    inline$java.lang.StringBuilder$toCharArray$$0$$this := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1;
    havoc inline$java.lang.StringBuilder$toCharArray$$0$r0, inline$java.lang.StringBuilder$toCharArray$$0$$r1, inline$java.lang.StringBuilder$toCharArray$$0$$r2, inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0, inline$java.lang.StringBuilder$toCharArray$$0$$return, inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    inline$java.lang.StringBuilder$toCharArray$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$toCharArray$$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon0;

  inline$java.lang.StringBuilder$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$r0 := inline$java.lang.StringBuilder$toCharArray$$0$$this;
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toCharArray$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon4_Then, inline$java.lang.StringBuilder$toCharArray$$0$anon4_Else;

  inline$java.lang.StringBuilder$toCharArray$$0$anon4_Then:
    assume {:partition} inline$java.lang.StringBuilder$toCharArray$$0$$r1 != unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon3;

  inline$java.lang.StringBuilder$toCharArray$$0$anon4_Else:
    assume {:partition} inline$java.lang.StringBuilder$toCharArray$$0$$r1 == unsafe.$null;
    call inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$toCharArray$$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$toCharArray$$0$Return;

  inline$java.lang.StringBuilder$toCharArray$$0$anon3:
    goto inline$java.lang.String$toCharArray$$0$Entry;

  inline$java.lang.String$toCharArray$$0$Entry:
    inline$java.lang.String$toCharArray$$0$$this := inline$java.lang.StringBuilder$toCharArray$$0$$r1;
    havoc inline$java.lang.String$toCharArray$$0$r0, inline$java.lang.String$toCharArray$$0$$r1, inline$java.lang.String$toCharArray$$0$$return, inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.String$toCharArray$$0$anon0;

  inline$java.lang.String$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.String$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$r0 := inline$java.lang.String$toCharArray$$0$$this;
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.String$toCharArray$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$return := inline$java.lang.String$toCharArray$$0$$r1;
    goto inline$java.lang.String$toCharArray$$0$block73;

  inline$java.lang.String$toCharArray$$0$block73:
    goto inline$java.lang.String$toCharArray$$0$Return;

  inline$java.lang.String$toCharArray$$0$Return:
    inline$java.lang.StringBuilder$toCharArray$$0$$r2 := inline$java.lang.String$toCharArray$$0$$return;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon3$1;

  inline$java.lang.StringBuilder$toCharArray$$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$$return := inline$java.lang.StringBuilder$toCharArray$$0$$r2;
    goto inline$java.lang.StringBuilder$toCharArray$$0$block62;

  inline$java.lang.StringBuilder$toCharArray$$0$block62:
    goto inline$java.lang.StringBuilder$toCharArray$$0$Return;

  inline$java.lang.StringBuilder$toCharArray$$0$Return:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2 := inline$java.lang.StringBuilder$toCharArray$$0$$return;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3$1;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3$1:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2];
    assert {:sourceloc "String.java", 33, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$block67;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$block67:
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block30$1;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block30$1:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block31;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block31:
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return:
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r7 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon19$1;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$anon19$1:
    assert {:sourceloc "Security.java", 170, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$r7;
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block26;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$block26:
    goto inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$Return:
    $r6 := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$return;
    $exception := inline$org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String$0$$exception;
    goto anon25$1;

  anon25$1:
    goto anon42_Then, anon42_Else;

  anon42_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon43_Then, anon43_Else;

  anon43_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type] <: unsafe.org.openmrs.api.APIException;
    $return := 0;
    return;

  anon43_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type] <: unsafe.org.openmrs.api.APIException);
    assert {:clone} true;
    goto anon29;

  anon42_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon29;

  anon29:
    assert {:sourceloc "Security.java", 67, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$Entry;

  inline$java.lang.String$equals$java.lang.Object$2$Entry:
    inline$java.lang.String$equals$java.lang.Object$2$$this := r0;
    inline$java.lang.String$equals$java.lang.Object$2$$in_parameter__0 := $r6;
    havoc inline$java.lang.String$equals$java.lang.Object$2$$r7, inline$java.lang.String$equals$java.lang.Object$2$$r6, inline$java.lang.String$equals$java.lang.Object$2$$r8, inline$java.lang.String$equals$java.lang.Object$2$r2, inline$java.lang.String$equals$java.lang.Object$2$$i0, inline$java.lang.String$equals$java.lang.Object$2$$r3, inline$java.lang.String$equals$java.lang.Object$2$$r4, inline$java.lang.String$equals$java.lang.Object$2$i5, inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_5, inline$java.lang.String$equals$java.lang.Object$2$$r9, inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_4, inline$java.lang.String$equals$java.lang.Object$2$$c3, inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_0, inline$java.lang.String$equals$java.lang.Object$2$$r5, inline$java.lang.String$equals$java.lang.Object$2$$c4, inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_1, inline$java.lang.String$equals$java.lang.Object$2$r1, inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_2, inline$java.lang.String$equals$java.lang.Object$2$$i2, inline$java.lang.String$equals$java.lang.Object$2$r0, inline$java.lang.String$equals$java.lang.Object$2$$i1, inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_3, inline$java.lang.String$equals$java.lang.Object$2$$return, inline$java.lang.String$equals$java.lang.Object$2$$exception;
    inline$java.lang.String$equals$java.lang.Object$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$equals$java.lang.Object$2$$heap := unsafe.$heap;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon0;

  inline$java.lang.String$equals$java.lang.Object$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$equals$java.lang.Object$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$r0 := inline$java.lang.String$equals$java.lang.Object$2$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$r1 := inline$java.lang.String$equals$java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "String.java", 69, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon37_Then, inline$java.lang.String$equals$java.lang.Object$2$anon37_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon37_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$r0
   != inline$java.lang.String$equals$java.lang.Object$2$r1;
    assert {:sourceloc "String.java", 69, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$block76;

  inline$java.lang.String$equals$java.lang.Object$2$anon37_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$r0
   == inline$java.lang.String$equals$java.lang.Object$2$r1;
    assert {:sourceloc "String.java", 69, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon3;

  inline$java.lang.String$equals$java.lang.Object$2$anon3:
    assert {:sourceloc "String.java", 70, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$return := 1;
    goto inline$java.lang.String$equals$java.lang.Object$2$block83;

  inline$java.lang.String$equals$java.lang.Object$2$block76:
    assert {:sourceloc "String.java", 71, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon38_Then, inline$java.lang.String$equals$java.lang.Object$2$anon38_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon38_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$r1 != unsafe.$null;
    assert {:sourceloc "String.java", 71, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$block77;

  inline$java.lang.String$equals$java.lang.Object$2$anon38_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$r1 == unsafe.$null;
    assert {:sourceloc "String.java", 71, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon6;

  inline$java.lang.String$equals$java.lang.Object$2$anon6:
    assert {:sourceloc "String.java", 72, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$2$block83;

  inline$java.lang.String$equals$java.lang.Object$2$block77:
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    call inline$java.lang.String$equals$java.lang.Object$2$$r3, inline$java.lang.String$equals$java.lang.Object$2$$exception := unsafe.java.lang.Object$getClass$(inline$java.lang.String$equals$java.lang.Object$2$r0);
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    call inline$java.lang.String$equals$java.lang.Object$2$$r4, inline$java.lang.String$equals$java.lang.Object$2$$exception := unsafe.java.lang.Object$getClass$(inline$java.lang.String$equals$java.lang.Object$2$r1);
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon39_Then, inline$java.lang.String$equals$java.lang.Object$2$anon39_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon39_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$r3
   == inline$java.lang.String$equals$java.lang.Object$2$$r4;
    assert {:sourceloc "String.java", 73, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$block78;

  inline$java.lang.String$equals$java.lang.Object$2$anon39_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$r3
   != inline$java.lang.String$equals$java.lang.Object$2$$r4;
    assert {:sourceloc "String.java", 73, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon9;

  inline$java.lang.String$equals$java.lang.Object$2$anon9:
    assert {:sourceloc "String.java", 74, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$2$block83;

  inline$java.lang.String$equals$java.lang.Object$2$block78:
    assert {:sourceloc "String.java", 75, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon40_Then, inline$java.lang.String$equals$java.lang.Object$2$anon40_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon40_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon12;

  inline$java.lang.String$equals$java.lang.Object$2$anon40_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.lang.String);
    call inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_0;
    goto inline$java.lang.String$equals$java.lang.Object$2$Return;

  inline$java.lang.String$equals$java.lang.Object$2$anon12:
    inline$java.lang.String$equals$java.lang.Object$2$r2 := inline$java.lang.String$equals$java.lang.Object$2$r1;
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$r5 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon41_Then, inline$java.lang.String$equals$java.lang.Object$2$anon41_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon41_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$r5 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon15;

  inline$java.lang.String$equals$java.lang.Object$2$anon41_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$r5 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_1;
    goto inline$java.lang.String$equals$java.lang.Object$2$Return;

  inline$java.lang.String$equals$java.lang.Object$2$anon15:
    inline$java.lang.String$equals$java.lang.Object$2$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$2$$r5];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$r6 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$r2, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon42_Then, inline$java.lang.String$equals$java.lang.Object$2$anon42_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon42_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$r6 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon18;

  inline$java.lang.String$equals$java.lang.Object$2$anon42_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$r6 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_2;
    goto inline$java.lang.String$equals$java.lang.Object$2$Return;

  inline$java.lang.String$equals$java.lang.Object$2$anon18:
    inline$java.lang.String$equals$java.lang.Object$2$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$2$$r6];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon43_Then, inline$java.lang.String$equals$java.lang.Object$2$anon43_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon43_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$i1
   == inline$java.lang.String$equals$java.lang.Object$2$$i0;
    assert {:sourceloc "String.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$block79;

  inline$java.lang.String$equals$java.lang.Object$2$anon43_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$i1
   != inline$java.lang.String$equals$java.lang.Object$2$$i0;
    assert {:sourceloc "String.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon21;

  inline$java.lang.String$equals$java.lang.Object$2$anon21:
    assert {:sourceloc "String.java", 78, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$2$block83;

  inline$java.lang.String$equals$java.lang.Object$2$block79:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$i5 := 0;
    goto inline$java.lang.String$equals$java.lang.Object$2$block80;

  inline$java.lang.String$equals$java.lang.Object$2$block80:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$r7 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon44_Then, inline$java.lang.String$equals$java.lang.Object$2$anon44_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon44_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$r7 != unsafe.$null;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon24;

  inline$java.lang.String$equals$java.lang.Object$2$anon44_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$r7 == unsafe.$null;
    call inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_3 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_3;
    goto inline$java.lang.String$equals$java.lang.Object$2$Return;

  inline$java.lang.String$equals$java.lang.Object$2$anon24:
    inline$java.lang.String$equals$java.lang.Object$2$$i2 := unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$2$$r7];
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon45_Then, inline$java.lang.String$equals$java.lang.Object$2$anon45_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon45_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$i5
   >= inline$java.lang.String$equals$java.lang.Object$2$$i2;
    assert {:sourceloc "String.java", 80, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$block81;

  inline$java.lang.String$equals$java.lang.Object$2$anon45_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$i2
   > inline$java.lang.String$equals$java.lang.Object$2$i5;
    assert {:sourceloc "String.java", 80, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon27;

  inline$java.lang.String$equals$java.lang.Object$2$anon27:
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$r8 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon46_Then, inline$java.lang.String$equals$java.lang.Object$2$anon46_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon46_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$2$$r8]
   && inline$java.lang.String$equals$java.lang.Object$2$i5 >= 0;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon30;

  inline$java.lang.String$equals$java.lang.Object$2$anon46_Else:
    assume {:partition} !(inline$java.lang.String$equals$java.lang.Object$2$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$2$$r8]
   && inline$java.lang.String$equals$java.lang.Object$2$i5 >= 0);
    call inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_4;
    goto inline$java.lang.String$equals$java.lang.Object$2$Return;

  inline$java.lang.String$equals$java.lang.Object$2$anon30:
    inline$java.lang.String$equals$java.lang.Object$2$$c4 := unsafe.$intArrHeap[inline$java.lang.String$equals$java.lang.Object$2$$r8][inline$java.lang.String$equals$java.lang.Object$2$i5];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$r9 := unsafe.$heap[inline$java.lang.String$equals$java.lang.Object$2$r2, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon47_Then, inline$java.lang.String$equals$java.lang.Object$2$anon47_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon47_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$2$$r9]
   && inline$java.lang.String$equals$java.lang.Object$2$i5 >= 0;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$exception;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon33;

  inline$java.lang.String$equals$java.lang.Object$2$anon47_Else:
    assume {:partition} !(inline$java.lang.String$equals$java.lang.Object$2$i5
     < unsafe.$arrSizeHeap[inline$java.lang.String$equals$java.lang.Object$2$$r9]
   && inline$java.lang.String$equals$java.lang.Object$2$i5 >= 0);
    call inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    inline$java.lang.String$equals$java.lang.Object$2$$exception := inline$java.lang.String$equals$java.lang.Object$2$$fakelocal_5;
    goto inline$java.lang.String$equals$java.lang.Object$2$Return;

  inline$java.lang.String$equals$java.lang.Object$2$anon33:
    inline$java.lang.String$equals$java.lang.Object$2$$c3 := unsafe.$intArrHeap[inline$java.lang.String$equals$java.lang.Object$2$$r9][inline$java.lang.String$equals$java.lang.Object$2$i5];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon48_Then, inline$java.lang.String$equals$java.lang.Object$2$anon48_Else;

  inline$java.lang.String$equals$java.lang.Object$2$anon48_Then:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$c4
   == inline$java.lang.String$equals$java.lang.Object$2$$c3;
    assert {:sourceloc "String.java", 81, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$block82;

  inline$java.lang.String$equals$java.lang.Object$2$anon48_Else:
    assume {:partition} inline$java.lang.String$equals$java.lang.Object$2$$c4
   != inline$java.lang.String$equals$java.lang.Object$2$$c3;
    assert {:sourceloc "String.java", 81, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$anon36;

  inline$java.lang.String$equals$java.lang.Object$2$anon36:
    assert {:sourceloc "String.java", 82, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$return := 0;
    goto inline$java.lang.String$equals$java.lang.Object$2$block83;

  inline$java.lang.String$equals$java.lang.Object$2$block82:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$i5 := inline$java.lang.String$equals$java.lang.Object$2$i5 + 1;
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto inline$java.lang.String$equals$java.lang.Object$2$block80;

  inline$java.lang.String$equals$java.lang.Object$2$block81:
    assert {:sourceloc "String.java", 85, -1, -1, -1} true;
    inline$java.lang.String$equals$java.lang.Object$2$$return := 1;
    goto inline$java.lang.String$equals$java.lang.Object$2$block83;

  inline$java.lang.String$equals$java.lang.Object$2$block83:
    goto inline$java.lang.String$equals$java.lang.Object$2$Return;

  inline$java.lang.String$equals$java.lang.Object$2$Return:
    $z2 := inline$java.lang.String$equals$java.lang.Object$2$$return;
    $exception := inline$java.lang.String$equals$java.lang.Object$2$$exception;
    goto anon29$1;

  anon29$1:
    assert {:sourceloc "Security.java", 67, -1, -1, -1} true;
    goto anon44_Then, anon44_Else;

  anon44_Then:
    assume {:partition} $z2 == 0;
    assert {:sourceloc "Security.java", 67, -1, -1, -1} {:comment "thenblock"} true;
    goto block5;

  anon44_Else:
    assume {:partition} $z2 != 0;
    assert {:sourceloc "Security.java", 67, -1, -1, -1} {:comment "elseblock"} true;
    goto block4;

  block4:
    assert {:sourceloc "Security.java", 65, -1, -1, -1} true;
    $z3 := 1;
    assert {:sourceloc "Security.java", 65, -1, -1, -1} true;
    goto block6;

  block5:
    assert {:sourceloc "Security.java", 65, -1, -1, -1} true;
    $z3 := 0;
    goto block6;

  block6:
    assert {:sourceloc "Security.java", 65, -1, -1, -1} true;
    $return := $z3;
    goto block7;

  block7:
    return;
}



implementation unsafe.org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r1: ref;
  var $r5: ref;
  var $r2: ref;
  var $fakelocal_0: ref;
  var $fakelocal_1: ref;
  var $fakelocal_2: ref;
  var r0: ref;
  var $r3: ref;
  var $r4: ref;
  var $fakelocal_3: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$3$r0: ref;
  var inline$java.lang.StringBuilder$toString$$3$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$3$$this: ref;
  var inline$java.lang.StringBuilder$toString$$3$$return: ref;
  var inline$java.lang.StringBuilder$toString$$3$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    $r1 := $fakelocal_0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := $r1;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := $r1;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := unsafe.$StringConst1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    $r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto anon10_Then, anon10_Else;

  anon10_Then:
    assume {:partition} $r2 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon10_Else:
    assume {:partition} $r2 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := $r2;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    $r3 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto anon11_Then, anon11_Else;

  anon11_Then:
    assume {:partition} $r3 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon11_Else:
    assume {:partition} $r3 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$this := $r3;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0 := unsafe.$StringConst2;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$2$$r3, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$2$$r2, inline$java.lang.StringBuilder$append$java.lang.String$2$r0, inline$java.lang.StringBuilder$append$java.lang.String$2$$r6, inline$java.lang.StringBuilder$append$java.lang.String$2$$r5, inline$java.lang.StringBuilder$append$java.lang.String$2$r1, inline$java.lang.StringBuilder$append$java.lang.String$2$$r4, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$2$$return, inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r0 := inline$java.lang.StringBuilder$append$java.lang.String$2$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r1 := inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$3$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$$la$init$ra$$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r5;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r6 := inline$java.lang.StringBuilder$toString$$2$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$2$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := inline$java.lang.StringBuilder$append$java.lang.String$2$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$2$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Return:
    $r4 := inline$java.lang.StringBuilder$append$java.lang.String$2$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto anon12_Then, anon12_Else;

  anon12_Then:
    assume {:partition} $r4 != unsafe.$null;
    $exception := $exception;
    goto anon9;

  anon12_Else:
    assume {:partition} $r4 == unsafe.$null;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon9:
    goto inline$java.lang.StringBuilder$toString$$3$Entry;

  inline$java.lang.StringBuilder$toString$$3$Entry:
    inline$java.lang.StringBuilder$toString$$3$$this := $r4;
    havoc inline$java.lang.StringBuilder$toString$$3$r0, inline$java.lang.StringBuilder$toString$$3$$r1, inline$java.lang.StringBuilder$toString$$3$$return, inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$toString$$3$anon0;

  inline$java.lang.StringBuilder$toString$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$r0 := inline$java.lang.StringBuilder$toString$$3$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$return := inline$java.lang.StringBuilder$toString$$3$$r1;
    goto inline$java.lang.StringBuilder$toString$$3$block61;

  inline$java.lang.StringBuilder$toString$$3$block61:
    goto inline$java.lang.StringBuilder$toString$$3$Return;

  inline$java.lang.StringBuilder$toString$$3$Return:
    $r5 := inline$java.lang.StringBuilder$toString$$3$$return;
    $exception := inline$java.lang.StringBuilder$toString$$3$$exception;
    goto anon9$1;

  anon9$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    $return := $r5;
    goto block8;

  block8:
    return;
}



implementation unsafe.org.openmrs.util.Security$encodeString$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r7: ref;
  var $r6: ref;
  var r13: ref;
  var $r8: ref;
  var r12: ref;
  var $fakelocal_0: ref;
  var $fakelocal_4: ref;
  var r2: ref;
  var $r10: ref;
  var $fakelocal_5: ref;
  var r4: ref;
  var $fakelocal_2: ref;
  var r3: ref;
  var r1: ref;
  var $fakelocal_1: ref;
  var $r9: ref;
  var $r5: ref;
  var r0: ref;
  var $fakelocal_3: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$b3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$i4: int;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$3$r0: ref;
  var inline$java.lang.StringBuilder$toString$$3$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$3$$this: ref;
  var inline$java.lang.StringBuilder$toString$$3$$return: ref;
  var inline$java.lang.StringBuilder$toString$$3$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$intArrHeap: intArrHeap_type;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$0$r1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$0$c0: int;
  var inline$java.lang.StringBuilder$append$char$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$0$r0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$this: ref;
  var inline$java.lang.StringBuilder$append$char$0$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$0$$return: ref;
  var inline$java.lang.StringBuilder$append$char$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$4$r0: ref;
  var inline$java.lang.StringBuilder$toString$$4$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$4$$this: ref;
  var inline$java.lang.StringBuilder$toString$$4$$return: ref;
  var inline$java.lang.StringBuilder$toString$$4$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$5$r0: ref;
  var inline$java.lang.StringBuilder$toString$$5$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$5$$this: ref;
  var inline$java.lang.StringBuilder$toString$$5$$return: ref;
  var inline$java.lang.StringBuilder$toString$$5$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$1$r1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$1$c0: int;
  var inline$java.lang.StringBuilder$append$char$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$1$r0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$this: ref;
  var inline$java.lang.StringBuilder$append$char$1$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$1$$return: ref;
  var inline$java.lang.StringBuilder$append$char$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$6$r0: ref;
  var inline$java.lang.StringBuilder$toString$$6$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$6$$this: ref;
  var inline$java.lang.StringBuilder$toString$$6$$return: ref;
  var inline$java.lang.StringBuilder$toString$$6$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$7$r0: ref;
  var inline$java.lang.StringBuilder$toString$$7$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$7$$this: ref;
  var inline$java.lang.StringBuilder$toString$$7$$return: ref;
  var inline$java.lang.StringBuilder$toString$$7$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$8$r0: ref;
  var inline$java.lang.StringBuilder$toString$$8$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$8$$this: ref;
  var inline$java.lang.StringBuilder$toString$$8$$return: ref;
  var inline$java.lang.StringBuilder$toString$$8$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", 89, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[$fakelocal_0 := 7];
    r1 := $fakelocal_0;
    goto block9;

  block9:
    assert {:sourceloc "Security.java", 93, -1, -1, -1} true;
    call r2, $exception := unsafe.java.security.MessageDigest$getInstance$java.lang.String(r1);
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon21_Then, anon21_Else;

  anon21_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    $return := unsafe.$null;
    goto block10;

  anon21_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto anon4;

  anon20_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "Security.java", 94, -1, -1, -1} true;
    $r5 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 94, -1, -1, -1} true;
    goto anon22_Then, anon22_Else;

  anon22_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon7;

  anon22_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon7:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this := r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0 := $r5;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$b3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$i4, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := 0;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block70;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b3 := inline$java.lang.String$getBytes$$0$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block71;

  inline$java.lang.String$getBytes$$0$block71:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return:
    r3 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return;
    $exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    goto anon7$1;

  anon7$1:
    goto anon23_Then, anon23_Else;

  anon23_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon24_Then, anon24_Else;

  anon24_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    goto block10;

  anon24_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto block11;

  anon23_Else:
    assume {:partition} $exception == unsafe.$null;
    goto block11;

  block11:
    assert {:sourceloc "Security.java", 100, -1, -1, -1} true;
    goto block12;

  block10:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    assume unsafe.$heap[$exception, unsafe.$type] <: unsafe.java.lang.Throwable;
    $r8 := $exception;
    assert {:sourceloc "Security.java", 96, -1, -1, -1} true;
    r4 := $r8;
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    $r9 := unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259;
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0 := r1;
    havoc inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := unsafe.$StringConst1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0 := unsafe.$StringConst2;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$2$$r3, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$2$$r2, inline$java.lang.StringBuilder$append$java.lang.String$2$r0, inline$java.lang.StringBuilder$append$java.lang.String$2$$r6, inline$java.lang.StringBuilder$append$java.lang.String$2$$r5, inline$java.lang.StringBuilder$append$java.lang.String$2$r1, inline$java.lang.StringBuilder$append$java.lang.String$2$$r4, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$2$$return, inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r0 := inline$java.lang.StringBuilder$append$java.lang.String$2$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r1 := inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$3$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$$la$init$ra$$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r5;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r6 := inline$java.lang.StringBuilder$toString$$2$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$2$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := inline$java.lang.StringBuilder$append$java.lang.String$2$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$2$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4 := inline$java.lang.StringBuilder$append$java.lang.String$2$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$3$Entry;

  inline$java.lang.StringBuilder$toString$$3$Entry:
    inline$java.lang.StringBuilder$toString$$3$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4;
    havoc inline$java.lang.StringBuilder$toString$$3$r0, inline$java.lang.StringBuilder$toString$$3$$r1, inline$java.lang.StringBuilder$toString$$3$$return, inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$toString$$3$anon0;

  inline$java.lang.StringBuilder$toString$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$r0 := inline$java.lang.StringBuilder$toString$$3$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$return := inline$java.lang.StringBuilder$toString$$3$$r1;
    goto inline$java.lang.StringBuilder$toString$$3$block61;

  inline$java.lang.StringBuilder$toString$$3$block61:
    goto inline$java.lang.StringBuilder$toString$$3$Return;

  inline$java.lang.StringBuilder$toString$$3$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5 := inline$java.lang.StringBuilder$toString$$3$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8:
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return:
    $r10 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return;
    $exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto block10$1;

  block10$1:
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    goto anon25_Then, anon25_Else;

  anon25_Then:
    assume {:partition} $r9 != unsafe.$null;
    $exception := $exception;
    goto anon13;

  anon25_Else:
    assume {:partition} $r9 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon13:
    call $exception := unsafe.org.slf4j.Logger$error$java.lang.String_java.lang.Throwable($r9, $r10, r4);
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    call $fakelocal_3 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r12 := $fakelocal_3;
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(r12, unsafe.$StringConst3, unsafe.$null, r4);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon26_Then, anon26_Else;

  anon26_Then:
    assume {:partition} unsafe.$heap[r12, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon16;

  anon26_Else:
    assume {:partition} !(unsafe.$heap[r12, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon16:
    r13 := r12;
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    $exception := r13;
    goto block13;

  block12:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    goto anon27_Then, anon27_Else;

  anon27_Then:
    assume {:partition} r2 != unsafe.$null;
    $exception := $exception;
    goto anon19;

  anon27_Else:
    assume {:partition} r2 == unsafe.$null;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon19:
    call $r6, $exception := unsafe.java.security.MessageDigest$digest$byte$lp$$rp$(r2, r3);
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Entry;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Entry:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0 := $r6;
    havoc inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$4$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$$la$init$ra$$$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0$1:
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1 := 16];
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Then:
    assume {:partition} 0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon3;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Else:
    assume {:partition} !(0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][0 := 48]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Then:
    assume {:partition} 1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon6;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Else:
    assume {:partition} !(1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon6:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][1 := 49]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Then:
    assume {:partition} 2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 2 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon9;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Else:
    assume {:partition} !(2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 2 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon9:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][2 := 50]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Then:
    assume {:partition} 3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 3 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon12;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Else:
    assume {:partition} !(3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 3 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon12:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][3 := 51]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Then:
    assume {:partition} 4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 4 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon15;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Else:
    assume {:partition} !(4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 4 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][4 := 52]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Then:
    assume {:partition} 5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 5 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon18;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Else:
    assume {:partition} !(5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 5 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon18:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][5 := 53]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Then:
    assume {:partition} 6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 6 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Else:
    assume {:partition} !(6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 6 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon21:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][6 := 54]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Then:
    assume {:partition} 7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon24;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Else:
    assume {:partition} !(7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon24:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][7 := 55]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Then:
    assume {:partition} 8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 8 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon27;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Else:
    assume {:partition} !(8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 8 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon27:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][8 := 56]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Then:
    assume {:partition} 9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 9 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon30;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Else:
    assume {:partition} !(9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 9 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon30:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][9 := 57]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Then:
    assume {:partition} 10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 10 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon33;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Else:
    assume {:partition} !(10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 10 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon33:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][10 := 97]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Then:
    assume {:partition} 11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 11 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon36;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Else:
    assume {:partition} !(11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 11 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon36:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][11 := 98]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Then:
    assume {:partition} 12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 12 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon39;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Else:
    assume {:partition} !(12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 12 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon39:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][12 := 99]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Then:
    assume {:partition} 13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 13 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon42;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Else:
    assume {:partition} !(13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 13 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon42:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][13 := 100]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Then:
    assume {:partition} 14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 14 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon45;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Else:
    assume {:partition} !(14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 14 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon45:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][14 := 101]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Then:
    assume {:partition} 15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 15 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon48;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Else:
    assume {:partition} !(15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 15 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon48:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][15 := 102]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 != unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon51;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 == unsafe.$null;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon51:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3];
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 := 0;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
   >= inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2
   > inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon54;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon54:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon57;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon57:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7];
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, 240);
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 := unsafe.$shrInt(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4, 4);
    assert {:sourceloc "Security.java", 141, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, 15);
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0];
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$Entry;

  inline$java.lang.StringBuilder$append$char$0$Entry:
    inline$java.lang.StringBuilder$append$char$0$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$char$0$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5;
    havoc inline$java.lang.StringBuilder$append$char$0$$r4, inline$java.lang.StringBuilder$append$char$0$r1, inline$java.lang.StringBuilder$append$char$0$$r6, inline$java.lang.StringBuilder$append$char$0$$r8, inline$java.lang.StringBuilder$append$char$0$$fakelocal_2, inline$java.lang.StringBuilder$append$char$0$$r2, inline$java.lang.StringBuilder$append$char$0$c0, inline$java.lang.StringBuilder$append$char$0$$r5, inline$java.lang.StringBuilder$append$char$0$$fakelocal_4, inline$java.lang.StringBuilder$append$char$0$$fakelocal_3, inline$java.lang.StringBuilder$append$char$0$$fakelocal_0, inline$java.lang.StringBuilder$append$char$0$$fakelocal_1, inline$java.lang.StringBuilder$append$char$0$$fakelocal_5, inline$java.lang.StringBuilder$append$char$0$$r7, inline$java.lang.StringBuilder$append$char$0$$r3, inline$java.lang.StringBuilder$append$char$0$r0, inline$java.lang.StringBuilder$append$char$0$$return, inline$java.lang.StringBuilder$append$char$0$$exception;
    inline$java.lang.StringBuilder$append$char$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$0$anon0;

  inline$java.lang.StringBuilder$append$char$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r0 := inline$java.lang.StringBuilder$append$char$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$c0 := inline$java.lang.StringBuilder$append$char$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$0$$r2 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon10_Then, inline$java.lang.StringBuilder$append$char$0$anon10_Else;

  inline$java.lang.StringBuilder$append$char$0$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3;

  inline$java.lang.StringBuilder$append$char$0$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2][0 := inline$java.lang.StringBuilder$append$char$0$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r1 := inline$java.lang.StringBuilder$append$char$0$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$0$$r3 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$5$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$$la$init$ra$$$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$1;

  inline$java.lang.StringBuilder$append$char$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$3$$r3, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$3$$r2, inline$java.lang.StringBuilder$append$java.lang.String$3$r0, inline$java.lang.StringBuilder$append$java.lang.String$3$$r6, inline$java.lang.StringBuilder$append$java.lang.String$3$$r5, inline$java.lang.StringBuilder$append$java.lang.String$3$r1, inline$java.lang.StringBuilder$append$java.lang.String$3$$r4, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$3$$return, inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r0 := inline$java.lang.StringBuilder$append$java.lang.String$3$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r1 := inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$6$r0, inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$6$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$6$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.StringBuilder$$la$init$ra$$$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6:
    goto inline$java.lang.StringBuilder$toString$$4$Entry;

  inline$java.lang.StringBuilder$toString$$4$Entry:
    inline$java.lang.StringBuilder$toString$$4$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r5;
    havoc inline$java.lang.StringBuilder$toString$$4$r0, inline$java.lang.StringBuilder$toString$$4$$r1, inline$java.lang.StringBuilder$toString$$4$$return, inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$toString$$4$anon0;

  inline$java.lang.StringBuilder$toString$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$r0 := inline$java.lang.StringBuilder$toString$$4$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$return := inline$java.lang.StringBuilder$toString$$4$$r1;
    goto inline$java.lang.StringBuilder$toString$$4$block61;

  inline$java.lang.StringBuilder$toString$$4$block61:
    goto inline$java.lang.StringBuilder$toString$$4$Return;

  inline$java.lang.StringBuilder$toString$$4$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r6 := inline$java.lang.StringBuilder$toString$$4$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$3$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := inline$java.lang.StringBuilder$append$java.lang.String$3$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$3$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Return:
    inline$java.lang.StringBuilder$append$char$0$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$3$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$2;

  inline$java.lang.StringBuilder$append$char$0$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$0$$r6 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := inline$java.lang.StringBuilder$append$char$0$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$3;

  inline$java.lang.StringBuilder$append$char$0$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon11_Then, inline$java.lang.StringBuilder$append$char$0$anon11_Else;

  inline$java.lang.StringBuilder$append$char$0$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6;

  inline$java.lang.StringBuilder$append$char$0$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$this := inline$java.lang.StringBuilder$append$char$0$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$0$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6$1;

  inline$java.lang.StringBuilder$append$char$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon12_Then, inline$java.lang.StringBuilder$append$char$0$anon12_Else;

  inline$java.lang.StringBuilder$append$char$0$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9;

  inline$java.lang.StringBuilder$append$char$0$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$5$Entry;

  inline$java.lang.StringBuilder$toString$$5$Entry:
    inline$java.lang.StringBuilder$toString$$5$$this := inline$java.lang.StringBuilder$append$char$0$$r7;
    havoc inline$java.lang.StringBuilder$toString$$5$r0, inline$java.lang.StringBuilder$toString$$5$$r1, inline$java.lang.StringBuilder$toString$$5$$return, inline$java.lang.StringBuilder$toString$$5$$exception;
    goto inline$java.lang.StringBuilder$toString$$5$anon0;

  inline$java.lang.StringBuilder$toString$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$r0 := inline$java.lang.StringBuilder$toString$$5$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$$return := inline$java.lang.StringBuilder$toString$$5$$r1;
    goto inline$java.lang.StringBuilder$toString$$5$block61;

  inline$java.lang.StringBuilder$toString$$5$block61:
    goto inline$java.lang.StringBuilder$toString$$5$Return;

  inline$java.lang.StringBuilder$toString$$5$Return:
    inline$java.lang.StringBuilder$append$char$0$$r8 := inline$java.lang.StringBuilder$toString$$5$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$toString$$5$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9$1;

  inline$java.lang.StringBuilder$append$char$0$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$0$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$return := inline$java.lang.StringBuilder$append$char$0$r0;
    goto inline$java.lang.StringBuilder$append$char$0$block59;

  inline$java.lang.StringBuilder$append$char$0$block59:
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21 := inline$java.lang.StringBuilder$append$char$0$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60$1:
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1];
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$Entry;

  inline$java.lang.StringBuilder$append$char$1$Entry:
    inline$java.lang.StringBuilder$append$char$1$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$char$1$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6;
    havoc inline$java.lang.StringBuilder$append$char$1$$r4, inline$java.lang.StringBuilder$append$char$1$r1, inline$java.lang.StringBuilder$append$char$1$$r6, inline$java.lang.StringBuilder$append$char$1$$r8, inline$java.lang.StringBuilder$append$char$1$$fakelocal_2, inline$java.lang.StringBuilder$append$char$1$$r2, inline$java.lang.StringBuilder$append$char$1$c0, inline$java.lang.StringBuilder$append$char$1$$r5, inline$java.lang.StringBuilder$append$char$1$$fakelocal_4, inline$java.lang.StringBuilder$append$char$1$$fakelocal_3, inline$java.lang.StringBuilder$append$char$1$$fakelocal_0, inline$java.lang.StringBuilder$append$char$1$$fakelocal_1, inline$java.lang.StringBuilder$append$char$1$$fakelocal_5, inline$java.lang.StringBuilder$append$char$1$$r7, inline$java.lang.StringBuilder$append$char$1$$r3, inline$java.lang.StringBuilder$append$char$1$r0, inline$java.lang.StringBuilder$append$char$1$$return, inline$java.lang.StringBuilder$append$char$1$$exception;
    inline$java.lang.StringBuilder$append$char$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$1$anon0;

  inline$java.lang.StringBuilder$append$char$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r0 := inline$java.lang.StringBuilder$append$char$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$c0 := inline$java.lang.StringBuilder$append$char$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$1$$r2 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon10_Then, inline$java.lang.StringBuilder$append$char$1$anon10_Else;

  inline$java.lang.StringBuilder$append$char$1$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3;

  inline$java.lang.StringBuilder$append$char$1$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2][0 := inline$java.lang.StringBuilder$append$char$1$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r1 := inline$java.lang.StringBuilder$append$char$1$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$1$$r3 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$7$r0, inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$7$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$7$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.lang.StringBuilder$$la$init$ra$$$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$1;

  inline$java.lang.StringBuilder$append$char$1$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$4$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$4$$r3, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$4$$r2, inline$java.lang.StringBuilder$append$java.lang.String$4$r0, inline$java.lang.StringBuilder$append$java.lang.String$4$$r6, inline$java.lang.StringBuilder$append$java.lang.String$4$$r5, inline$java.lang.StringBuilder$append$java.lang.String$4$r1, inline$java.lang.StringBuilder$append$java.lang.String$4$$r4, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$4$$return, inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$r0 := inline$java.lang.StringBuilder$append$java.lang.String$4$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$r1 := inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$this := inline$java.lang.StringBuilder$append$java.lang.String$4$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$8$r0, inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$8$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$8$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.lang.StringBuilder$$la$init$ra$$$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon6:
    goto inline$java.lang.StringBuilder$toString$$6$Entry;

  inline$java.lang.StringBuilder$toString$$6$Entry:
    inline$java.lang.StringBuilder$toString$$6$$this := inline$java.lang.StringBuilder$append$java.lang.String$4$$r5;
    havoc inline$java.lang.StringBuilder$toString$$6$r0, inline$java.lang.StringBuilder$toString$$6$$r1, inline$java.lang.StringBuilder$toString$$6$$return, inline$java.lang.StringBuilder$toString$$6$$exception;
    goto inline$java.lang.StringBuilder$toString$$6$anon0;

  inline$java.lang.StringBuilder$toString$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$r0 := inline$java.lang.StringBuilder$toString$$6$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$$return := inline$java.lang.StringBuilder$toString$$6$$r1;
    goto inline$java.lang.StringBuilder$toString$$6$block61;

  inline$java.lang.StringBuilder$toString$$6$block61:
    goto inline$java.lang.StringBuilder$toString$$6$Return;

  inline$java.lang.StringBuilder$toString$$6$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r6 := inline$java.lang.StringBuilder$toString$$6$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$toString$$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$4$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := inline$java.lang.StringBuilder$append$java.lang.String$4$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$4$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$Return:
    inline$java.lang.StringBuilder$append$char$1$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$4$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$2;

  inline$java.lang.StringBuilder$append$char$1$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$1$$r6 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this := inline$java.lang.StringBuilder$append$char$1$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$3;

  inline$java.lang.StringBuilder$append$char$1$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon11_Then, inline$java.lang.StringBuilder$append$char$1$anon11_Else;

  inline$java.lang.StringBuilder$append$char$1$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6;

  inline$java.lang.StringBuilder$append$char$1$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$this := inline$java.lang.StringBuilder$append$char$1$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$1$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6$1;

  inline$java.lang.StringBuilder$append$char$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon12_Then, inline$java.lang.StringBuilder$append$char$1$anon12_Else;

  inline$java.lang.StringBuilder$append$char$1$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9;

  inline$java.lang.StringBuilder$append$char$1$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon9:
    goto inline$java.lang.StringBuilder$toString$$7$Entry;

  inline$java.lang.StringBuilder$toString$$7$Entry:
    inline$java.lang.StringBuilder$toString$$7$$this := inline$java.lang.StringBuilder$append$char$1$$r7;
    havoc inline$java.lang.StringBuilder$toString$$7$r0, inline$java.lang.StringBuilder$toString$$7$$r1, inline$java.lang.StringBuilder$toString$$7$$return, inline$java.lang.StringBuilder$toString$$7$$exception;
    goto inline$java.lang.StringBuilder$toString$$7$anon0;

  inline$java.lang.StringBuilder$toString$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$r0 := inline$java.lang.StringBuilder$toString$$7$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$$return := inline$java.lang.StringBuilder$toString$$7$$r1;
    goto inline$java.lang.StringBuilder$toString$$7$block61;

  inline$java.lang.StringBuilder$toString$$7$block61:
    goto inline$java.lang.StringBuilder$toString$$7$Return;

  inline$java.lang.StringBuilder$toString$$7$Return:
    inline$java.lang.StringBuilder$append$char$1$$r8 := inline$java.lang.StringBuilder$toString$$7$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$toString$$7$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9$1;

  inline$java.lang.StringBuilder$append$char$1$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$1$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$return := inline$java.lang.StringBuilder$append$char$1$r0;
    goto inline$java.lang.StringBuilder$append$char$1$block59;

  inline$java.lang.StringBuilder$append$char$1$block59:
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23 := inline$java.lang.StringBuilder$append$char$1$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63$1:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 + 1;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toString$$8$Entry;

  inline$java.lang.StringBuilder$toString$$8$Entry:
    inline$java.lang.StringBuilder$toString$$8$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    havoc inline$java.lang.StringBuilder$toString$$8$r0, inline$java.lang.StringBuilder$toString$$8$$r1, inline$java.lang.StringBuilder$toString$$8$$return, inline$java.lang.StringBuilder$toString$$8$$exception;
    goto inline$java.lang.StringBuilder$toString$$8$anon0;

  inline$java.lang.StringBuilder$toString$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$r0 := inline$java.lang.StringBuilder$toString$$8$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$$return := inline$java.lang.StringBuilder$toString$$8$$r1;
    goto inline$java.lang.StringBuilder$toString$$8$block61;

  inline$java.lang.StringBuilder$toString$$8$block61:
    goto inline$java.lang.StringBuilder$toString$$8$Return;

  inline$java.lang.StringBuilder$toString$$8$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6 := inline$java.lang.StringBuilder$toString$$8$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$toString$$8$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20$1:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block21:
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return:
    $r7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return;
    $exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto anon19$1;

  anon19$1:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    $return := $r7;
    goto block13;

  block13:
    return;
}



implementation unsafe.org.openmrs.util.Security$encodeStringSHA1$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r6: ref;
  var r4: ref;
  var $fakelocal_2: ref;
  var r1: ref;
  var r2: ref;
  var $fakelocal_4: ref;
  var $fakelocal_5: ref;
  var $r5: ref;
  var r13: ref;
  var r0: ref;
  var $r10: ref;
  var $fakelocal_1: ref;
  var $r7: ref;
  var $fakelocal_0: ref;
  var r12: ref;
  var r3: ref;
  var $r8: ref;
  var $r9: ref;
  var $fakelocal_3: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$b3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$i4: int;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$3$r0: ref;
  var inline$java.lang.StringBuilder$toString$$3$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$3$$this: ref;
  var inline$java.lang.StringBuilder$toString$$3$$return: ref;
  var inline$java.lang.StringBuilder$toString$$3$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$intArrHeap: intArrHeap_type;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$0$r1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$0$c0: int;
  var inline$java.lang.StringBuilder$append$char$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$0$r0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$this: ref;
  var inline$java.lang.StringBuilder$append$char$0$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$0$$return: ref;
  var inline$java.lang.StringBuilder$append$char$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$4$r0: ref;
  var inline$java.lang.StringBuilder$toString$$4$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$4$$this: ref;
  var inline$java.lang.StringBuilder$toString$$4$$return: ref;
  var inline$java.lang.StringBuilder$toString$$4$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$5$r0: ref;
  var inline$java.lang.StringBuilder$toString$$5$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$5$$this: ref;
  var inline$java.lang.StringBuilder$toString$$5$$return: ref;
  var inline$java.lang.StringBuilder$toString$$5$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$1$r1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$1$c0: int;
  var inline$java.lang.StringBuilder$append$char$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$1$r0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$this: ref;
  var inline$java.lang.StringBuilder$append$char$1$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$1$$return: ref;
  var inline$java.lang.StringBuilder$append$char$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$6$r0: ref;
  var inline$java.lang.StringBuilder$toString$$6$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$6$$this: ref;
  var inline$java.lang.StringBuilder$toString$$6$$return: ref;
  var inline$java.lang.StringBuilder$toString$$6$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$7$r0: ref;
  var inline$java.lang.StringBuilder$toString$$7$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$7$$this: ref;
  var inline$java.lang.StringBuilder$toString$$7$$return: ref;
  var inline$java.lang.StringBuilder$toString$$7$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$8$r0: ref;
  var inline$java.lang.StringBuilder$toString$$8$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$8$$this: ref;
  var inline$java.lang.StringBuilder$toString$$8$$return: ref;
  var inline$java.lang.StringBuilder$toString$$8$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", 112, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[$fakelocal_0 := 4];
    r1 := $fakelocal_0;
    goto block14;

  block14:
    assert {:sourceloc "Security.java", 116, -1, -1, -1} true;
    call r2, $exception := unsafe.java.security.MessageDigest$getInstance$java.lang.String(r1);
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon21_Then, anon21_Else;

  anon21_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    $return := unsafe.$null;
    goto block15;

  anon21_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto anon4;

  anon20_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "Security.java", 117, -1, -1, -1} true;
    $r5 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 117, -1, -1, -1} true;
    goto anon22_Then, anon22_Else;

  anon22_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon7;

  anon22_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon7:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this := r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0 := $r5;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$b3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$i4, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := 0;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block70;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b3 := inline$java.lang.String$getBytes$$0$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block71;

  inline$java.lang.String$getBytes$$0$block71:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return:
    r3 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return;
    $exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    goto anon7$1;

  anon7$1:
    goto anon23_Then, anon23_Else;

  anon23_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon24_Then, anon24_Else;

  anon24_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    goto block15;

  anon24_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto block16;

  anon23_Else:
    assume {:partition} $exception == unsafe.$null;
    goto block16;

  block16:
    assert {:sourceloc "Security.java", 123, -1, -1, -1} true;
    goto block17;

  block15:
    assert {:sourceloc "Security.java", 125, -1, -1, -1} true;
    assume unsafe.$heap[$exception, unsafe.$type] <: unsafe.java.lang.Throwable;
    $r8 := $exception;
    assert {:sourceloc "Security.java", 119, -1, -1, -1} true;
    r4 := $r8;
    assert {:sourceloc "Security.java", 121, -1, -1, -1} true;
    $r9 := unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259;
    assert {:sourceloc "Security.java", 121, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0 := r1;
    havoc inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := unsafe.$StringConst1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0 := unsafe.$StringConst2;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$2$$r3, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$2$$r2, inline$java.lang.StringBuilder$append$java.lang.String$2$r0, inline$java.lang.StringBuilder$append$java.lang.String$2$$r6, inline$java.lang.StringBuilder$append$java.lang.String$2$$r5, inline$java.lang.StringBuilder$append$java.lang.String$2$r1, inline$java.lang.StringBuilder$append$java.lang.String$2$$r4, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$2$$return, inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r0 := inline$java.lang.StringBuilder$append$java.lang.String$2$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r1 := inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$3$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$$la$init$ra$$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r5;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r6 := inline$java.lang.StringBuilder$toString$$2$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$2$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := inline$java.lang.StringBuilder$append$java.lang.String$2$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$2$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4 := inline$java.lang.StringBuilder$append$java.lang.String$2$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$3$Entry;

  inline$java.lang.StringBuilder$toString$$3$Entry:
    inline$java.lang.StringBuilder$toString$$3$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4;
    havoc inline$java.lang.StringBuilder$toString$$3$r0, inline$java.lang.StringBuilder$toString$$3$$r1, inline$java.lang.StringBuilder$toString$$3$$return, inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$toString$$3$anon0;

  inline$java.lang.StringBuilder$toString$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$r0 := inline$java.lang.StringBuilder$toString$$3$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$return := inline$java.lang.StringBuilder$toString$$3$$r1;
    goto inline$java.lang.StringBuilder$toString$$3$block61;

  inline$java.lang.StringBuilder$toString$$3$block61:
    goto inline$java.lang.StringBuilder$toString$$3$Return;

  inline$java.lang.StringBuilder$toString$$3$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5 := inline$java.lang.StringBuilder$toString$$3$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8:
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return:
    $r10 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return;
    $exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto block15$1;

  block15$1:
    assert {:sourceloc "Security.java", 121, -1, -1, -1} true;
    goto anon25_Then, anon25_Else;

  anon25_Then:
    assume {:partition} $r9 != unsafe.$null;
    $exception := $exception;
    goto anon13;

  anon25_Else:
    assume {:partition} $r9 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon13:
    call $exception := unsafe.org.slf4j.Logger$error$java.lang.String_java.lang.Throwable($r9, $r10, r4);
    assert {:sourceloc "Security.java", 122, -1, -1, -1} true;
    call $fakelocal_3 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r12 := $fakelocal_3;
    assert {:sourceloc "Security.java", 122, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(r12, unsafe.$StringConst4, unsafe.$null, r4);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon26_Then, anon26_Else;

  anon26_Then:
    assume {:partition} unsafe.$heap[r12, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon16;

  anon26_Else:
    assume {:partition} !(unsafe.$heap[r12, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon16:
    r13 := r12;
    assert {:sourceloc "Security.java", 122, -1, -1, -1} true;
    $exception := r13;
    goto block18;

  block17:
    assert {:sourceloc "Security.java", 125, -1, -1, -1} true;
    goto anon27_Then, anon27_Else;

  anon27_Then:
    assume {:partition} r2 != unsafe.$null;
    $exception := $exception;
    goto anon19;

  anon27_Else:
    assume {:partition} r2 == unsafe.$null;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon19:
    call $r6, $exception := unsafe.java.security.MessageDigest$digest$byte$lp$$rp$(r2, r3);
    assert {:sourceloc "Security.java", 125, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Entry;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Entry:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0 := $r6;
    havoc inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$4$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$$la$init$ra$$$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0$1:
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1 := 16];
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Then:
    assume {:partition} 0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon3;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Else:
    assume {:partition} !(0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][0 := 48]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Then:
    assume {:partition} 1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon6;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Else:
    assume {:partition} !(1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon6:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][1 := 49]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Then:
    assume {:partition} 2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 2 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon9;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Else:
    assume {:partition} !(2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 2 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon9:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][2 := 50]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Then:
    assume {:partition} 3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 3 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon12;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Else:
    assume {:partition} !(3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 3 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon12:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][3 := 51]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Then:
    assume {:partition} 4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 4 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon15;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Else:
    assume {:partition} !(4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 4 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][4 := 52]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Then:
    assume {:partition} 5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 5 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon18;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Else:
    assume {:partition} !(5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 5 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon18:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][5 := 53]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Then:
    assume {:partition} 6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 6 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Else:
    assume {:partition} !(6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 6 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon21:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][6 := 54]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Then:
    assume {:partition} 7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon24;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Else:
    assume {:partition} !(7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon24:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][7 := 55]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Then:
    assume {:partition} 8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 8 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon27;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Else:
    assume {:partition} !(8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 8 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon27:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][8 := 56]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Then:
    assume {:partition} 9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 9 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon30;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Else:
    assume {:partition} !(9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 9 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon30:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][9 := 57]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Then:
    assume {:partition} 10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 10 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon33;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Else:
    assume {:partition} !(10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 10 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon33:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][10 := 97]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Then:
    assume {:partition} 11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 11 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon36;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Else:
    assume {:partition} !(11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 11 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon36:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][11 := 98]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Then:
    assume {:partition} 12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 12 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon39;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Else:
    assume {:partition} !(12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 12 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon39:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][12 := 99]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Then:
    assume {:partition} 13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 13 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon42;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Else:
    assume {:partition} !(13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 13 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon42:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][13 := 100]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Then:
    assume {:partition} 14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 14 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon45;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Else:
    assume {:partition} !(14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 14 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon45:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][14 := 101]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Then:
    assume {:partition} 15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 15 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon48;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Else:
    assume {:partition} !(15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 15 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon48:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][15 := 102]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 != unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon51;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 == unsafe.$null;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon51:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3];
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 := 0;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
   >= inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2
   > inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon54;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon54:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon57;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon57:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7];
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, 240);
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 := unsafe.$shrInt(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4, 4);
    assert {:sourceloc "Security.java", 141, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, 15);
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0];
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$Entry;

  inline$java.lang.StringBuilder$append$char$0$Entry:
    inline$java.lang.StringBuilder$append$char$0$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$char$0$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5;
    havoc inline$java.lang.StringBuilder$append$char$0$$r4, inline$java.lang.StringBuilder$append$char$0$r1, inline$java.lang.StringBuilder$append$char$0$$r6, inline$java.lang.StringBuilder$append$char$0$$r8, inline$java.lang.StringBuilder$append$char$0$$fakelocal_2, inline$java.lang.StringBuilder$append$char$0$$r2, inline$java.lang.StringBuilder$append$char$0$c0, inline$java.lang.StringBuilder$append$char$0$$r5, inline$java.lang.StringBuilder$append$char$0$$fakelocal_4, inline$java.lang.StringBuilder$append$char$0$$fakelocal_3, inline$java.lang.StringBuilder$append$char$0$$fakelocal_0, inline$java.lang.StringBuilder$append$char$0$$fakelocal_1, inline$java.lang.StringBuilder$append$char$0$$fakelocal_5, inline$java.lang.StringBuilder$append$char$0$$r7, inline$java.lang.StringBuilder$append$char$0$$r3, inline$java.lang.StringBuilder$append$char$0$r0, inline$java.lang.StringBuilder$append$char$0$$return, inline$java.lang.StringBuilder$append$char$0$$exception;
    inline$java.lang.StringBuilder$append$char$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$0$anon0;

  inline$java.lang.StringBuilder$append$char$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r0 := inline$java.lang.StringBuilder$append$char$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$c0 := inline$java.lang.StringBuilder$append$char$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$0$$r2 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon10_Then, inline$java.lang.StringBuilder$append$char$0$anon10_Else;

  inline$java.lang.StringBuilder$append$char$0$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3;

  inline$java.lang.StringBuilder$append$char$0$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2][0 := inline$java.lang.StringBuilder$append$char$0$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r1 := inline$java.lang.StringBuilder$append$char$0$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$0$$r3 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$5$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$$la$init$ra$$$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$1;

  inline$java.lang.StringBuilder$append$char$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$3$$r3, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$3$$r2, inline$java.lang.StringBuilder$append$java.lang.String$3$r0, inline$java.lang.StringBuilder$append$java.lang.String$3$$r6, inline$java.lang.StringBuilder$append$java.lang.String$3$$r5, inline$java.lang.StringBuilder$append$java.lang.String$3$r1, inline$java.lang.StringBuilder$append$java.lang.String$3$$r4, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$3$$return, inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r0 := inline$java.lang.StringBuilder$append$java.lang.String$3$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r1 := inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$6$r0, inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$6$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$6$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.StringBuilder$$la$init$ra$$$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6:
    goto inline$java.lang.StringBuilder$toString$$4$Entry;

  inline$java.lang.StringBuilder$toString$$4$Entry:
    inline$java.lang.StringBuilder$toString$$4$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r5;
    havoc inline$java.lang.StringBuilder$toString$$4$r0, inline$java.lang.StringBuilder$toString$$4$$r1, inline$java.lang.StringBuilder$toString$$4$$return, inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$toString$$4$anon0;

  inline$java.lang.StringBuilder$toString$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$r0 := inline$java.lang.StringBuilder$toString$$4$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$return := inline$java.lang.StringBuilder$toString$$4$$r1;
    goto inline$java.lang.StringBuilder$toString$$4$block61;

  inline$java.lang.StringBuilder$toString$$4$block61:
    goto inline$java.lang.StringBuilder$toString$$4$Return;

  inline$java.lang.StringBuilder$toString$$4$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r6 := inline$java.lang.StringBuilder$toString$$4$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$3$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := inline$java.lang.StringBuilder$append$java.lang.String$3$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$3$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Return:
    inline$java.lang.StringBuilder$append$char$0$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$3$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$2;

  inline$java.lang.StringBuilder$append$char$0$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$0$$r6 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := inline$java.lang.StringBuilder$append$char$0$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$3;

  inline$java.lang.StringBuilder$append$char$0$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon11_Then, inline$java.lang.StringBuilder$append$char$0$anon11_Else;

  inline$java.lang.StringBuilder$append$char$0$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6;

  inline$java.lang.StringBuilder$append$char$0$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$this := inline$java.lang.StringBuilder$append$char$0$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$0$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6$1;

  inline$java.lang.StringBuilder$append$char$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon12_Then, inline$java.lang.StringBuilder$append$char$0$anon12_Else;

  inline$java.lang.StringBuilder$append$char$0$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9;

  inline$java.lang.StringBuilder$append$char$0$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$5$Entry;

  inline$java.lang.StringBuilder$toString$$5$Entry:
    inline$java.lang.StringBuilder$toString$$5$$this := inline$java.lang.StringBuilder$append$char$0$$r7;
    havoc inline$java.lang.StringBuilder$toString$$5$r0, inline$java.lang.StringBuilder$toString$$5$$r1, inline$java.lang.StringBuilder$toString$$5$$return, inline$java.lang.StringBuilder$toString$$5$$exception;
    goto inline$java.lang.StringBuilder$toString$$5$anon0;

  inline$java.lang.StringBuilder$toString$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$r0 := inline$java.lang.StringBuilder$toString$$5$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$$return := inline$java.lang.StringBuilder$toString$$5$$r1;
    goto inline$java.lang.StringBuilder$toString$$5$block61;

  inline$java.lang.StringBuilder$toString$$5$block61:
    goto inline$java.lang.StringBuilder$toString$$5$Return;

  inline$java.lang.StringBuilder$toString$$5$Return:
    inline$java.lang.StringBuilder$append$char$0$$r8 := inline$java.lang.StringBuilder$toString$$5$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$toString$$5$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9$1;

  inline$java.lang.StringBuilder$append$char$0$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$0$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$return := inline$java.lang.StringBuilder$append$char$0$r0;
    goto inline$java.lang.StringBuilder$append$char$0$block59;

  inline$java.lang.StringBuilder$append$char$0$block59:
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21 := inline$java.lang.StringBuilder$append$char$0$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60$1:
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1];
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$Entry;

  inline$java.lang.StringBuilder$append$char$1$Entry:
    inline$java.lang.StringBuilder$append$char$1$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$char$1$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6;
    havoc inline$java.lang.StringBuilder$append$char$1$$r4, inline$java.lang.StringBuilder$append$char$1$r1, inline$java.lang.StringBuilder$append$char$1$$r6, inline$java.lang.StringBuilder$append$char$1$$r8, inline$java.lang.StringBuilder$append$char$1$$fakelocal_2, inline$java.lang.StringBuilder$append$char$1$$r2, inline$java.lang.StringBuilder$append$char$1$c0, inline$java.lang.StringBuilder$append$char$1$$r5, inline$java.lang.StringBuilder$append$char$1$$fakelocal_4, inline$java.lang.StringBuilder$append$char$1$$fakelocal_3, inline$java.lang.StringBuilder$append$char$1$$fakelocal_0, inline$java.lang.StringBuilder$append$char$1$$fakelocal_1, inline$java.lang.StringBuilder$append$char$1$$fakelocal_5, inline$java.lang.StringBuilder$append$char$1$$r7, inline$java.lang.StringBuilder$append$char$1$$r3, inline$java.lang.StringBuilder$append$char$1$r0, inline$java.lang.StringBuilder$append$char$1$$return, inline$java.lang.StringBuilder$append$char$1$$exception;
    inline$java.lang.StringBuilder$append$char$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$1$anon0;

  inline$java.lang.StringBuilder$append$char$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r0 := inline$java.lang.StringBuilder$append$char$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$c0 := inline$java.lang.StringBuilder$append$char$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$1$$r2 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon10_Then, inline$java.lang.StringBuilder$append$char$1$anon10_Else;

  inline$java.lang.StringBuilder$append$char$1$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3;

  inline$java.lang.StringBuilder$append$char$1$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2][0 := inline$java.lang.StringBuilder$append$char$1$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r1 := inline$java.lang.StringBuilder$append$char$1$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$1$$r3 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$7$r0, inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$7$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$7$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.lang.StringBuilder$$la$init$ra$$$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$1;

  inline$java.lang.StringBuilder$append$char$1$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$4$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$4$$r3, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$4$$r2, inline$java.lang.StringBuilder$append$java.lang.String$4$r0, inline$java.lang.StringBuilder$append$java.lang.String$4$$r6, inline$java.lang.StringBuilder$append$java.lang.String$4$$r5, inline$java.lang.StringBuilder$append$java.lang.String$4$r1, inline$java.lang.StringBuilder$append$java.lang.String$4$$r4, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$4$$return, inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$r0 := inline$java.lang.StringBuilder$append$java.lang.String$4$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$r1 := inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$this := inline$java.lang.StringBuilder$append$java.lang.String$4$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$8$r0, inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$8$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$8$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.lang.StringBuilder$$la$init$ra$$$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon6:
    goto inline$java.lang.StringBuilder$toString$$6$Entry;

  inline$java.lang.StringBuilder$toString$$6$Entry:
    inline$java.lang.StringBuilder$toString$$6$$this := inline$java.lang.StringBuilder$append$java.lang.String$4$$r5;
    havoc inline$java.lang.StringBuilder$toString$$6$r0, inline$java.lang.StringBuilder$toString$$6$$r1, inline$java.lang.StringBuilder$toString$$6$$return, inline$java.lang.StringBuilder$toString$$6$$exception;
    goto inline$java.lang.StringBuilder$toString$$6$anon0;

  inline$java.lang.StringBuilder$toString$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$r0 := inline$java.lang.StringBuilder$toString$$6$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$$return := inline$java.lang.StringBuilder$toString$$6$$r1;
    goto inline$java.lang.StringBuilder$toString$$6$block61;

  inline$java.lang.StringBuilder$toString$$6$block61:
    goto inline$java.lang.StringBuilder$toString$$6$Return;

  inline$java.lang.StringBuilder$toString$$6$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r6 := inline$java.lang.StringBuilder$toString$$6$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$toString$$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$4$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := inline$java.lang.StringBuilder$append$java.lang.String$4$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$4$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$Return:
    inline$java.lang.StringBuilder$append$char$1$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$4$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$2;

  inline$java.lang.StringBuilder$append$char$1$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$1$$r6 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this := inline$java.lang.StringBuilder$append$char$1$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$3;

  inline$java.lang.StringBuilder$append$char$1$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon11_Then, inline$java.lang.StringBuilder$append$char$1$anon11_Else;

  inline$java.lang.StringBuilder$append$char$1$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6;

  inline$java.lang.StringBuilder$append$char$1$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$this := inline$java.lang.StringBuilder$append$char$1$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$1$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6$1;

  inline$java.lang.StringBuilder$append$char$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon12_Then, inline$java.lang.StringBuilder$append$char$1$anon12_Else;

  inline$java.lang.StringBuilder$append$char$1$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9;

  inline$java.lang.StringBuilder$append$char$1$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon9:
    goto inline$java.lang.StringBuilder$toString$$7$Entry;

  inline$java.lang.StringBuilder$toString$$7$Entry:
    inline$java.lang.StringBuilder$toString$$7$$this := inline$java.lang.StringBuilder$append$char$1$$r7;
    havoc inline$java.lang.StringBuilder$toString$$7$r0, inline$java.lang.StringBuilder$toString$$7$$r1, inline$java.lang.StringBuilder$toString$$7$$return, inline$java.lang.StringBuilder$toString$$7$$exception;
    goto inline$java.lang.StringBuilder$toString$$7$anon0;

  inline$java.lang.StringBuilder$toString$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$r0 := inline$java.lang.StringBuilder$toString$$7$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$$return := inline$java.lang.StringBuilder$toString$$7$$r1;
    goto inline$java.lang.StringBuilder$toString$$7$block61;

  inline$java.lang.StringBuilder$toString$$7$block61:
    goto inline$java.lang.StringBuilder$toString$$7$Return;

  inline$java.lang.StringBuilder$toString$$7$Return:
    inline$java.lang.StringBuilder$append$char$1$$r8 := inline$java.lang.StringBuilder$toString$$7$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$toString$$7$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9$1;

  inline$java.lang.StringBuilder$append$char$1$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$1$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$return := inline$java.lang.StringBuilder$append$char$1$r0;
    goto inline$java.lang.StringBuilder$append$char$1$block59;

  inline$java.lang.StringBuilder$append$char$1$block59:
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23 := inline$java.lang.StringBuilder$append$char$1$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63$1:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 + 1;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toString$$8$Entry;

  inline$java.lang.StringBuilder$toString$$8$Entry:
    inline$java.lang.StringBuilder$toString$$8$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    havoc inline$java.lang.StringBuilder$toString$$8$r0, inline$java.lang.StringBuilder$toString$$8$$r1, inline$java.lang.StringBuilder$toString$$8$$return, inline$java.lang.StringBuilder$toString$$8$$exception;
    goto inline$java.lang.StringBuilder$toString$$8$anon0;

  inline$java.lang.StringBuilder$toString$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$r0 := inline$java.lang.StringBuilder$toString$$8$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$$return := inline$java.lang.StringBuilder$toString$$8$$r1;
    goto inline$java.lang.StringBuilder$toString$$8$block61;

  inline$java.lang.StringBuilder$toString$$8$block61:
    goto inline$java.lang.StringBuilder$toString$$8$Return;

  inline$java.lang.StringBuilder$toString$$8$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6 := inline$java.lang.StringBuilder$toString$$8$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$toString$$8$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20$1:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block21:
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return:
    $r7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return;
    $exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto anon19$1;

  anon19$1:
    assert {:sourceloc "Security.java", 125, -1, -1, -1} true;
    $return := $r7;
    goto block18;

  block18:
    return;
}



implementation unsafe.org.openmrs.util.Security$hexString$byte$lp$$rp$($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $s4: int;
  var $fakelocal_15: ref;
  var $fakelocal_16: ref;
  var $fakelocal_0: ref;
  var $fakelocal_3: ref;
  var i7: int;
  var $fakelocal_6: ref;
  var $fakelocal_7: ref;
  var $fakelocal_8: ref;
  var $fakelocal_12: ref;
  var $fakelocal_18: ref;
  var b1: int;
  var $c6: int;
  var $fakelocal_4: ref;
  var $r4: ref;
  var $fakelocal_1: ref;
  var $fakelocal_13: ref;
  var i2: int;
  var $r6: ref;
  var $fakelocal_20: ref;
  var s0: int;
  var $fakelocal_10: ref;
  var $r5: ref;
  var $fakelocal_19: ref;
  var $fakelocal_22: ref;
  var $fakelocal_14: ref;
  var $fakelocal_23: ref;
  var $fakelocal_2: ref;
  var b3: int;
  var $c5: int;
  var r0: ref;
  var r1: ref;
  var r2: ref;
  var $fakelocal_5: ref;
  var $fakelocal_21: ref;
  var r3: ref;
  var $fakelocal_17: ref;
  var $fakelocal_9: ref;
  var $fakelocal_11: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$0$r1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$0$c0: int;
  var inline$java.lang.StringBuilder$append$char$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$0$r0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$this: ref;
  var inline$java.lang.StringBuilder$append$char$0$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$0$$return: ref;
  var inline$java.lang.StringBuilder$append$char$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$1$r1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$1$c0: int;
  var inline$java.lang.StringBuilder$append$char$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$1$r0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$this: ref;
  var inline$java.lang.StringBuilder$append$char$1$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$1$$return: ref;
  var inline$java.lang.StringBuilder$append$char$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$3$r0: ref;
  var inline$java.lang.StringBuilder$toString$$3$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$3$$this: ref;
  var inline$java.lang.StringBuilder$toString$$3$$return: ref;
  var inline$java.lang.StringBuilder$toString$$3$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$4$r0: ref;
  var inline$java.lang.StringBuilder$toString$$4$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$4$$this: ref;
  var inline$java.lang.StringBuilder$toString$$4$$return: ref;
  var inline$java.lang.StringBuilder$toString$$4$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    $r4 := $fakelocal_0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := $r4;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    r1 := $r4;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[$fakelocal_1 := 16];
    $r5 := $fakelocal_1;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon64_Then, anon64_Else;

  anon64_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[$r5] && 0 >= 0;
    $exception := $exception;
    goto anon3;

  anon64_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[$r5] && 0 >= 0);
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][0 := 48]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon65_Then, anon65_Else;

  anon65_Then:
    assume {:partition} 1 < unsafe.$arrSizeHeap[$r5] && 1 >= 0;
    $exception := $exception;
    goto anon6;

  anon65_Else:
    assume {:partition} !(1 < unsafe.$arrSizeHeap[$r5] && 1 >= 0);
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon6:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][1 := 49]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon66_Then, anon66_Else;

  anon66_Then:
    assume {:partition} 2 < unsafe.$arrSizeHeap[$r5] && 2 >= 0;
    $exception := $exception;
    goto anon9;

  anon66_Else:
    assume {:partition} !(2 < unsafe.$arrSizeHeap[$r5] && 2 >= 0);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon9:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][2 := 50]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon67_Then, anon67_Else;

  anon67_Then:
    assume {:partition} 3 < unsafe.$arrSizeHeap[$r5] && 3 >= 0;
    $exception := $exception;
    goto anon12;

  anon67_Else:
    assume {:partition} !(3 < unsafe.$arrSizeHeap[$r5] && 3 >= 0);
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon12:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][3 := 51]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon68_Then, anon68_Else;

  anon68_Then:
    assume {:partition} 4 < unsafe.$arrSizeHeap[$r5] && 4 >= 0;
    $exception := $exception;
    goto anon15;

  anon68_Else:
    assume {:partition} !(4 < unsafe.$arrSizeHeap[$r5] && 4 >= 0);
    call $fakelocal_6 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_6;
    return;

  anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][4 := 52]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon69_Then, anon69_Else;

  anon69_Then:
    assume {:partition} 5 < unsafe.$arrSizeHeap[$r5] && 5 >= 0;
    $exception := $exception;
    goto anon18;

  anon69_Else:
    assume {:partition} !(5 < unsafe.$arrSizeHeap[$r5] && 5 >= 0);
    call $fakelocal_7 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_7;
    return;

  anon18:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][5 := 53]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon70_Then, anon70_Else;

  anon70_Then:
    assume {:partition} 6 < unsafe.$arrSizeHeap[$r5] && 6 >= 0;
    $exception := $exception;
    goto anon21;

  anon70_Else:
    assume {:partition} !(6 < unsafe.$arrSizeHeap[$r5] && 6 >= 0);
    call $fakelocal_8 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_8;
    return;

  anon21:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][6 := 54]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon71_Then, anon71_Else;

  anon71_Then:
    assume {:partition} 7 < unsafe.$arrSizeHeap[$r5] && 7 >= 0;
    $exception := $exception;
    goto anon24;

  anon71_Else:
    assume {:partition} !(7 < unsafe.$arrSizeHeap[$r5] && 7 >= 0);
    call $fakelocal_9 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_9;
    return;

  anon24:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][7 := 55]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon72_Then, anon72_Else;

  anon72_Then:
    assume {:partition} 8 < unsafe.$arrSizeHeap[$r5] && 8 >= 0;
    $exception := $exception;
    goto anon27;

  anon72_Else:
    assume {:partition} !(8 < unsafe.$arrSizeHeap[$r5] && 8 >= 0);
    call $fakelocal_10 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_10;
    return;

  anon27:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][8 := 56]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon73_Then, anon73_Else;

  anon73_Then:
    assume {:partition} 9 < unsafe.$arrSizeHeap[$r5] && 9 >= 0;
    $exception := $exception;
    goto anon30;

  anon73_Else:
    assume {:partition} !(9 < unsafe.$arrSizeHeap[$r5] && 9 >= 0);
    call $fakelocal_11 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_11;
    return;

  anon30:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][9 := 57]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon74_Then, anon74_Else;

  anon74_Then:
    assume {:partition} 10 < unsafe.$arrSizeHeap[$r5] && 10 >= 0;
    $exception := $exception;
    goto anon33;

  anon74_Else:
    assume {:partition} !(10 < unsafe.$arrSizeHeap[$r5] && 10 >= 0);
    call $fakelocal_12 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_12;
    return;

  anon33:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][10 := 97]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon75_Then, anon75_Else;

  anon75_Then:
    assume {:partition} 11 < unsafe.$arrSizeHeap[$r5] && 11 >= 0;
    $exception := $exception;
    goto anon36;

  anon75_Else:
    assume {:partition} !(11 < unsafe.$arrSizeHeap[$r5] && 11 >= 0);
    call $fakelocal_13 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_13;
    return;

  anon36:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][11 := 98]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon76_Then, anon76_Else;

  anon76_Then:
    assume {:partition} 12 < unsafe.$arrSizeHeap[$r5] && 12 >= 0;
    $exception := $exception;
    goto anon39;

  anon76_Else:
    assume {:partition} !(12 < unsafe.$arrSizeHeap[$r5] && 12 >= 0);
    call $fakelocal_14 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_14;
    return;

  anon39:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][12 := 99]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon77_Then, anon77_Else;

  anon77_Then:
    assume {:partition} 13 < unsafe.$arrSizeHeap[$r5] && 13 >= 0;
    $exception := $exception;
    goto anon42;

  anon77_Else:
    assume {:partition} !(13 < unsafe.$arrSizeHeap[$r5] && 13 >= 0);
    call $fakelocal_15 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_15;
    return;

  anon42:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][13 := 100]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon78_Then, anon78_Else;

  anon78_Then:
    assume {:partition} 14 < unsafe.$arrSizeHeap[$r5] && 14 >= 0;
    $exception := $exception;
    goto anon45;

  anon78_Else:
    assume {:partition} !(14 < unsafe.$arrSizeHeap[$r5] && 14 >= 0);
    call $fakelocal_16 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_16;
    return;

  anon45:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][14 := 101]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto anon79_Then, anon79_Else;

  anon79_Then:
    assume {:partition} 15 < unsafe.$arrSizeHeap[$r5] && 15 >= 0;
    $exception := $exception;
    goto anon48;

  anon79_Else:
    assume {:partition} !(15 < unsafe.$arrSizeHeap[$r5] && 15 >= 0);
    call $fakelocal_17 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_17;
    return;

  anon48:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r5 := unsafe.$intArrHeap[$r5][15 := 102]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    r2 := $r5;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    r3 := r0;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto anon80_Then, anon80_Else;

  anon80_Then:
    assume {:partition} r3 != unsafe.$null;
    $exception := $exception;
    goto anon51;

  anon80_Else:
    assume {:partition} r3 == unsafe.$null;
    call $fakelocal_18 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_18;
    return;

  anon51:
    i2 := unsafe.$arrSizeHeap[r3];
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    i7 := 0;
    goto block19;

  block19:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto anon81_Then, anon81_Else;

  anon81_Then:
    assume {:partition} i7 >= i2;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "thenblock"} true;
    goto block20;

  anon81_Else:
    assume {:partition} i2 > i7;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "elseblock"} true;
    goto anon54;

  anon54:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto anon82_Then, anon82_Else;

  anon82_Then:
    assume {:partition} i7 < unsafe.$arrSizeHeap[r3] && i7 >= 0;
    $exception := $exception;
    goto anon57;

  anon82_Else:
    assume {:partition} !(i7 < unsafe.$arrSizeHeap[r3] && i7 >= 0);
    call $fakelocal_19 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_19;
    return;

  anon57:
    b3 := unsafe.$intArrHeap[r3][i7];
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    $s4 := unsafe.$bitAnd(b3, 240);
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    s0 := unsafe.$shrInt($s4, 4);
    assert {:sourceloc "Security.java", 141, -1, -1, -1} true;
    b1 := unsafe.$bitAnd(b3, 15);
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto anon83_Then, anon83_Else;

  anon83_Then:
    assume {:partition} s0 < unsafe.$arrSizeHeap[r2] && s0 >= 0;
    $exception := $exception;
    goto anon60;

  anon83_Else:
    assume {:partition} !(s0 < unsafe.$arrSizeHeap[r2] && s0 >= 0);
    call $fakelocal_20 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_20;
    return;

  anon60:
    $c5 := unsafe.$intArrHeap[r2][s0];
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$Entry;

  inline$java.lang.StringBuilder$append$char$0$Entry:
    inline$java.lang.StringBuilder$append$char$0$$this := r1;
    inline$java.lang.StringBuilder$append$char$0$$in_parameter__0 := $c5;
    havoc inline$java.lang.StringBuilder$append$char$0$$r4, inline$java.lang.StringBuilder$append$char$0$r1, inline$java.lang.StringBuilder$append$char$0$$r6, inline$java.lang.StringBuilder$append$char$0$$r8, inline$java.lang.StringBuilder$append$char$0$$fakelocal_2, inline$java.lang.StringBuilder$append$char$0$$r2, inline$java.lang.StringBuilder$append$char$0$c0, inline$java.lang.StringBuilder$append$char$0$$r5, inline$java.lang.StringBuilder$append$char$0$$fakelocal_4, inline$java.lang.StringBuilder$append$char$0$$fakelocal_3, inline$java.lang.StringBuilder$append$char$0$$fakelocal_0, inline$java.lang.StringBuilder$append$char$0$$fakelocal_1, inline$java.lang.StringBuilder$append$char$0$$fakelocal_5, inline$java.lang.StringBuilder$append$char$0$$r7, inline$java.lang.StringBuilder$append$char$0$$r3, inline$java.lang.StringBuilder$append$char$0$r0, inline$java.lang.StringBuilder$append$char$0$$return, inline$java.lang.StringBuilder$append$char$0$$exception;
    inline$java.lang.StringBuilder$append$char$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$0$anon0;

  inline$java.lang.StringBuilder$append$char$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r0 := inline$java.lang.StringBuilder$append$char$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$c0 := inline$java.lang.StringBuilder$append$char$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$0$$r2 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon10_Then, inline$java.lang.StringBuilder$append$char$0$anon10_Else;

  inline$java.lang.StringBuilder$append$char$0$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3;

  inline$java.lang.StringBuilder$append$char$0$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2][0 := inline$java.lang.StringBuilder$append$char$0$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r1 := inline$java.lang.StringBuilder$append$char$0$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$0$$r3 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$1;

  inline$java.lang.StringBuilder$append$char$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$2;

  inline$java.lang.StringBuilder$append$char$0$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$0$$r6 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := inline$java.lang.StringBuilder$append$char$0$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$3;

  inline$java.lang.StringBuilder$append$char$0$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon11_Then, inline$java.lang.StringBuilder$append$char$0$anon11_Else;

  inline$java.lang.StringBuilder$append$char$0$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6;

  inline$java.lang.StringBuilder$append$char$0$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$this := inline$java.lang.StringBuilder$append$char$0$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$0$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6$1;

  inline$java.lang.StringBuilder$append$char$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon12_Then, inline$java.lang.StringBuilder$append$char$0$anon12_Else;

  inline$java.lang.StringBuilder$append$char$0$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9;

  inline$java.lang.StringBuilder$append$char$0$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$char$0$$r7;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$char$0$$r8 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9$1;

  inline$java.lang.StringBuilder$append$char$0$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$0$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$return := inline$java.lang.StringBuilder$append$char$0$r0;
    goto inline$java.lang.StringBuilder$append$char$0$block59;

  inline$java.lang.StringBuilder$append$char$0$block59:
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$Return:
    $fakelocal_21 := inline$java.lang.StringBuilder$append$char$0$$return;
    $exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto anon60$1;

  anon60$1:
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto anon84_Then, anon84_Else;

  anon84_Then:
    assume {:partition} b1 < unsafe.$arrSizeHeap[r2] && b1 >= 0;
    $exception := $exception;
    goto anon63;

  anon84_Else:
    assume {:partition} !(b1 < unsafe.$arrSizeHeap[r2] && b1 >= 0);
    call $fakelocal_22 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_22;
    return;

  anon63:
    $c6 := unsafe.$intArrHeap[r2][b1];
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$Entry;

  inline$java.lang.StringBuilder$append$char$1$Entry:
    inline$java.lang.StringBuilder$append$char$1$$this := r1;
    inline$java.lang.StringBuilder$append$char$1$$in_parameter__0 := $c6;
    havoc inline$java.lang.StringBuilder$append$char$1$$r4, inline$java.lang.StringBuilder$append$char$1$r1, inline$java.lang.StringBuilder$append$char$1$$r6, inline$java.lang.StringBuilder$append$char$1$$r8, inline$java.lang.StringBuilder$append$char$1$$fakelocal_2, inline$java.lang.StringBuilder$append$char$1$$r2, inline$java.lang.StringBuilder$append$char$1$c0, inline$java.lang.StringBuilder$append$char$1$$r5, inline$java.lang.StringBuilder$append$char$1$$fakelocal_4, inline$java.lang.StringBuilder$append$char$1$$fakelocal_3, inline$java.lang.StringBuilder$append$char$1$$fakelocal_0, inline$java.lang.StringBuilder$append$char$1$$fakelocal_1, inline$java.lang.StringBuilder$append$char$1$$fakelocal_5, inline$java.lang.StringBuilder$append$char$1$$r7, inline$java.lang.StringBuilder$append$char$1$$r3, inline$java.lang.StringBuilder$append$char$1$r0, inline$java.lang.StringBuilder$append$char$1$$return, inline$java.lang.StringBuilder$append$char$1$$exception;
    inline$java.lang.StringBuilder$append$char$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$1$anon0;

  inline$java.lang.StringBuilder$append$char$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r0 := inline$java.lang.StringBuilder$append$char$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$c0 := inline$java.lang.StringBuilder$append$char$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$1$$r2 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon10_Then, inline$java.lang.StringBuilder$append$char$1$anon10_Else;

  inline$java.lang.StringBuilder$append$char$1$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3;

  inline$java.lang.StringBuilder$append$char$1$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2][0 := inline$java.lang.StringBuilder$append$char$1$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r1 := inline$java.lang.StringBuilder$append$char$1$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$1$$r3 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$3$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$$la$init$ra$$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$1;

  inline$java.lang.StringBuilder$append$char$1$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$4$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$$la$init$ra$$$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$2$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$2;

  inline$java.lang.StringBuilder$append$char$1$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$1$$r6 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this := inline$java.lang.StringBuilder$append$char$1$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$3;

  inline$java.lang.StringBuilder$append$char$1$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon11_Then, inline$java.lang.StringBuilder$append$char$1$anon11_Else;

  inline$java.lang.StringBuilder$append$char$1$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6;

  inline$java.lang.StringBuilder$append$char$1$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$this := inline$java.lang.StringBuilder$append$char$1$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$1$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6$1;

  inline$java.lang.StringBuilder$append$char$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon12_Then, inline$java.lang.StringBuilder$append$char$1$anon12_Else;

  inline$java.lang.StringBuilder$append$char$1$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9;

  inline$java.lang.StringBuilder$append$char$1$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon9:
    goto inline$java.lang.StringBuilder$toString$$3$Entry;

  inline$java.lang.StringBuilder$toString$$3$Entry:
    inline$java.lang.StringBuilder$toString$$3$$this := inline$java.lang.StringBuilder$append$char$1$$r7;
    havoc inline$java.lang.StringBuilder$toString$$3$r0, inline$java.lang.StringBuilder$toString$$3$$r1, inline$java.lang.StringBuilder$toString$$3$$return, inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$toString$$3$anon0;

  inline$java.lang.StringBuilder$toString$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$r0 := inline$java.lang.StringBuilder$toString$$3$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$return := inline$java.lang.StringBuilder$toString$$3$$r1;
    goto inline$java.lang.StringBuilder$toString$$3$block61;

  inline$java.lang.StringBuilder$toString$$3$block61:
    goto inline$java.lang.StringBuilder$toString$$3$Return;

  inline$java.lang.StringBuilder$toString$$3$Return:
    inline$java.lang.StringBuilder$append$char$1$$r8 := inline$java.lang.StringBuilder$toString$$3$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9$1;

  inline$java.lang.StringBuilder$append$char$1$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$1$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$return := inline$java.lang.StringBuilder$append$char$1$r0;
    goto inline$java.lang.StringBuilder$append$char$1$block59;

  inline$java.lang.StringBuilder$append$char$1$block59:
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$Return:
    $fakelocal_23 := inline$java.lang.StringBuilder$append$char$1$$return;
    $exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto anon63$1;

  anon63$1:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    i7 := i7 + 1;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto block19;

  block20:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toString$$4$Entry;

  inline$java.lang.StringBuilder$toString$$4$Entry:
    inline$java.lang.StringBuilder$toString$$4$$this := r1;
    havoc inline$java.lang.StringBuilder$toString$$4$r0, inline$java.lang.StringBuilder$toString$$4$$r1, inline$java.lang.StringBuilder$toString$$4$$return, inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$toString$$4$anon0;

  inline$java.lang.StringBuilder$toString$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$r0 := inline$java.lang.StringBuilder$toString$$4$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$return := inline$java.lang.StringBuilder$toString$$4$$r1;
    goto inline$java.lang.StringBuilder$toString$$4$block61;

  inline$java.lang.StringBuilder$toString$$4$block61:
    goto inline$java.lang.StringBuilder$toString$$4$Return;

  inline$java.lang.StringBuilder$toString$$4$Return:
    $r6 := inline$java.lang.StringBuilder$toString$$4$$return;
    $exception := inline$java.lang.StringBuilder$toString$$4$$exception;
    goto block20$1;

  block20$1:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    $return := $r6;
    goto block21;

  block21:
    return;
}



implementation unsafe.org.openmrs.util.Security$incorrectlyEncodeString$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r2: ref;
  var $r5: ref;
  var $r7: ref;
  var $r9: ref;
  var $fakelocal_0: ref;
  var $fakelocal_4: ref;
  var $r8: ref;
  var $fakelocal_1: ref;
  var r1: ref;
  var $fakelocal_5: ref;
  var $fakelocal_3: ref;
  var r12: ref;
  var r3: ref;
  var $r10: ref;
  var $r6: ref;
  var r13: ref;
  var r4: ref;
  var r0: ref;
  var $fakelocal_2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$b3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$i4: int;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$3$r0: ref;
  var inline$java.lang.StringBuilder$toString$$3$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$3$$this: ref;
  var inline$java.lang.StringBuilder$toString$$3$$return: ref;
  var inline$java.lang.StringBuilder$toString$$3$$exception: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$s3: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$b1: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r5: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception: ref;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$4$r0: ref;
  var inline$java.lang.StringBuilder$toString$$4$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$4$$this: ref;
  var inline$java.lang.StringBuilder$toString$$4$$return: ref;
  var inline$java.lang.StringBuilder$toString$$4$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$r0: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$r2: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$this: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$return: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$exception: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$toCharArray$$0$$heap: $heap_type;
  var inline$java.lang.String$toCharArray$$0$r0: ref;
  var inline$java.lang.String$toCharArray$$0$$r1: ref;
  var inline$java.lang.String$toCharArray$$0$$this: ref;
  var inline$java.lang.String$toCharArray$$0$$return: ref;
  var inline$java.lang.String$toCharArray$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", 157, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[$fakelocal_0 := 4];
    r1 := $fakelocal_0;
    goto block22;

  block22:
    assert {:sourceloc "Security.java", 161, -1, -1, -1} true;
    call r2, $exception := unsafe.java.security.MessageDigest$getInstance$java.lang.String(r1);
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon21_Then, anon21_Else;

  anon21_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    $return := unsafe.$null;
    goto block23;

  anon21_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto anon4;

  anon20_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "Security.java", 162, -1, -1, -1} true;
    $r5 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 162, -1, -1, -1} true;
    goto anon22_Then, anon22_Else;

  anon22_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon7;

  anon22_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon7:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this := r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0 := $r5;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$b3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$i4, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := 0;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block70;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b3 := inline$java.lang.String$getBytes$$0$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block71;

  inline$java.lang.String$getBytes$$0$block71:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return:
    r3 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return;
    $exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    goto anon7$1;

  anon7$1:
    goto anon23_Then, anon23_Else;

  anon23_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon24_Then, anon24_Else;

  anon24_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    goto block23;

  anon24_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto block24;

  anon23_Else:
    assume {:partition} $exception == unsafe.$null;
    goto block24;

  block24:
    assert {:sourceloc "Security.java", 168, -1, -1, -1} true;
    goto block25;

  block23:
    assert {:sourceloc "Security.java", 170, -1, -1, -1} true;
    assume unsafe.$heap[$exception, unsafe.$type] <: unsafe.java.lang.Throwable;
    $r8 := $exception;
    assert {:sourceloc "Security.java", 164, -1, -1, -1} true;
    r4 := $r8;
    assert {:sourceloc "Security.java", 166, -1, -1, -1} true;
    $r9 := unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259;
    assert {:sourceloc "Security.java", 166, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0 := r1;
    havoc inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := unsafe.$StringConst1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0 := unsafe.$StringConst2;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$2$$r3, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$2$$r2, inline$java.lang.StringBuilder$append$java.lang.String$2$r0, inline$java.lang.StringBuilder$append$java.lang.String$2$$r6, inline$java.lang.StringBuilder$append$java.lang.String$2$$r5, inline$java.lang.StringBuilder$append$java.lang.String$2$r1, inline$java.lang.StringBuilder$append$java.lang.String$2$$r4, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$2$$return, inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r0 := inline$java.lang.StringBuilder$append$java.lang.String$2$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r1 := inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$3$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$$la$init$ra$$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r5;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r6 := inline$java.lang.StringBuilder$toString$$2$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$2$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := inline$java.lang.StringBuilder$append$java.lang.String$2$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$2$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4 := inline$java.lang.StringBuilder$append$java.lang.String$2$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$3$Entry;

  inline$java.lang.StringBuilder$toString$$3$Entry:
    inline$java.lang.StringBuilder$toString$$3$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4;
    havoc inline$java.lang.StringBuilder$toString$$3$r0, inline$java.lang.StringBuilder$toString$$3$$r1, inline$java.lang.StringBuilder$toString$$3$$return, inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$toString$$3$anon0;

  inline$java.lang.StringBuilder$toString$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$r0 := inline$java.lang.StringBuilder$toString$$3$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$return := inline$java.lang.StringBuilder$toString$$3$$r1;
    goto inline$java.lang.StringBuilder$toString$$3$block61;

  inline$java.lang.StringBuilder$toString$$3$block61:
    goto inline$java.lang.StringBuilder$toString$$3$Return;

  inline$java.lang.StringBuilder$toString$$3$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5 := inline$java.lang.StringBuilder$toString$$3$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8:
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return:
    $r10 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return;
    $exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto block23$1;

  block23$1:
    assert {:sourceloc "Security.java", 166, -1, -1, -1} true;
    goto anon25_Then, anon25_Else;

  anon25_Then:
    assume {:partition} $r9 != unsafe.$null;
    $exception := $exception;
    goto anon13;

  anon25_Else:
    assume {:partition} $r9 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon13:
    call $exception := unsafe.org.slf4j.Logger$error$java.lang.String_java.lang.Throwable($r9, $r10, r4);
    assert {:sourceloc "Security.java", 167, -1, -1, -1} true;
    call $fakelocal_3 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r12 := $fakelocal_3;
    assert {:sourceloc "Security.java", 167, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(r12, unsafe.$StringConst4, unsafe.$null, r4);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon26_Then, anon26_Else;

  anon26_Then:
    assume {:partition} unsafe.$heap[r12, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon16;

  anon26_Else:
    assume {:partition} !(unsafe.$heap[r12, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon16:
    r13 := r12;
    assert {:sourceloc "Security.java", 167, -1, -1, -1} true;
    $exception := r13;
    goto block26;

  block25:
    assert {:sourceloc "Security.java", 170, -1, -1, -1} true;
    goto anon27_Then, anon27_Else;

  anon27_Then:
    assume {:partition} r2 != unsafe.$null;
    $exception := $exception;
    goto anon19;

  anon27_Else:
    assume {:partition} r2 == unsafe.$null;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon19:
    call $r6, $exception := unsafe.java.security.MessageDigest$digest$byte$lp$$rp$(r2, r3);
    assert {:sourceloc "Security.java", 170, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Entry;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Entry:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$in_parameter__0 := $r6;
    havoc inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$s3, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$b1, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_0, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r5, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_4, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_3, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_2, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_1, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_5, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon0;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon18_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon18_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon18_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0
   == unsafe.$null;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block27;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon18_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0
   != unsafe.$null;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon3;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon3:
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon19_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon19_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon19_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0
   != unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon6;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon19_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0
   == unsafe.$null;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon6:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0];
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon20_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon20_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon20_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2 >= 1;
    assert {:sourceloc "Security.java", 185, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block28;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon20_Else:
    assume {:partition} 1 > inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$i2;
    assert {:sourceloc "Security.java", 185, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block27;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block27:
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := unsafe.$StringConst5;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block31;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block28:
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$this := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$4$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$$la$init$ra$$$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Return:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block28$1;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block28$1:
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r3;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r0;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon21_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon21_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon21_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon11;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon21_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon11:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2];
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 := 0;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block29;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block29:
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon22_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon22_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon22_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4
   >= inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block30;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon22_Else:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i0
   > inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon14;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon14:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon23_Then, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon23_Else;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon23_Then:
    assume {:partition} inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 >= 0;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon17;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon23_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 >= 0);
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon17:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$b1 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4];
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$s3 := unsafe.$bitAnd(inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$b1, 255);
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r5, inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := unsafe.java.lang.Integer$toHexString$int(inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$s3);
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$this := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r5;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$3$$r3, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$3$$r2, inline$java.lang.StringBuilder$append$java.lang.String$3$r0, inline$java.lang.StringBuilder$append$java.lang.String$3$$r6, inline$java.lang.StringBuilder$append$java.lang.String$3$$r5, inline$java.lang.StringBuilder$append$java.lang.String$3$r1, inline$java.lang.StringBuilder$append$java.lang.String$3$$r4, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$3$$return, inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r0 := inline$java.lang.StringBuilder$append$java.lang.String$3$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r1 := inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$5$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$$la$init$ra$$$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6:
    goto inline$java.lang.StringBuilder$toString$$4$Entry;

  inline$java.lang.StringBuilder$toString$$4$Entry:
    inline$java.lang.StringBuilder$toString$$4$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r5;
    havoc inline$java.lang.StringBuilder$toString$$4$r0, inline$java.lang.StringBuilder$toString$$4$$r1, inline$java.lang.StringBuilder$toString$$4$$return, inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$toString$$4$anon0;

  inline$java.lang.StringBuilder$toString$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$r0 := inline$java.lang.StringBuilder$toString$$4$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$return := inline$java.lang.StringBuilder$toString$$4$$r1;
    goto inline$java.lang.StringBuilder$toString$$4$block61;

  inline$java.lang.StringBuilder$toString$$4$block61:
    goto inline$java.lang.StringBuilder$toString$$4$Return;

  inline$java.lang.StringBuilder$toString$$4$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r6 := inline$java.lang.StringBuilder$toString$$4$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$3$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := inline$java.lang.StringBuilder$append$java.lang.String$3$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$3$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Return:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_4 := inline$java.lang.StringBuilder$append$java.lang.String$3$$return;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon17$1;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$anon17$1:
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$i4 + 1;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block29;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block30:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.String);
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$fakelocal_5;
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Entry;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Entry:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0$1:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Then, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Else;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3:
    goto inline$java.lang.StringBuilder$toCharArray$$0$Entry;

  inline$java.lang.StringBuilder$toCharArray$$0$Entry:
    inline$java.lang.StringBuilder$toCharArray$$0$$this := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1;
    havoc inline$java.lang.StringBuilder$toCharArray$$0$r0, inline$java.lang.StringBuilder$toCharArray$$0$$r1, inline$java.lang.StringBuilder$toCharArray$$0$$r2, inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0, inline$java.lang.StringBuilder$toCharArray$$0$$return, inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    inline$java.lang.StringBuilder$toCharArray$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$toCharArray$$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon0;

  inline$java.lang.StringBuilder$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$r0 := inline$java.lang.StringBuilder$toCharArray$$0$$this;
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toCharArray$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon4_Then, inline$java.lang.StringBuilder$toCharArray$$0$anon4_Else;

  inline$java.lang.StringBuilder$toCharArray$$0$anon4_Then:
    assume {:partition} inline$java.lang.StringBuilder$toCharArray$$0$$r1 != unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon3;

  inline$java.lang.StringBuilder$toCharArray$$0$anon4_Else:
    assume {:partition} inline$java.lang.StringBuilder$toCharArray$$0$$r1 == unsafe.$null;
    call inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$toCharArray$$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$toCharArray$$0$Return;

  inline$java.lang.StringBuilder$toCharArray$$0$anon3:
    goto inline$java.lang.String$toCharArray$$0$Entry;

  inline$java.lang.String$toCharArray$$0$Entry:
    inline$java.lang.String$toCharArray$$0$$this := inline$java.lang.StringBuilder$toCharArray$$0$$r1;
    havoc inline$java.lang.String$toCharArray$$0$r0, inline$java.lang.String$toCharArray$$0$$r1, inline$java.lang.String$toCharArray$$0$$return, inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.String$toCharArray$$0$anon0;

  inline$java.lang.String$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.String$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$r0 := inline$java.lang.String$toCharArray$$0$$this;
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.String$toCharArray$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$return := inline$java.lang.String$toCharArray$$0$$r1;
    goto inline$java.lang.String$toCharArray$$0$block73;

  inline$java.lang.String$toCharArray$$0$block73:
    goto inline$java.lang.String$toCharArray$$0$Return;

  inline$java.lang.String$toCharArray$$0$Return:
    inline$java.lang.StringBuilder$toCharArray$$0$$r2 := inline$java.lang.String$toCharArray$$0$$return;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon3$1;

  inline$java.lang.StringBuilder$toCharArray$$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$$return := inline$java.lang.StringBuilder$toCharArray$$0$$r2;
    goto inline$java.lang.StringBuilder$toCharArray$$0$block62;

  inline$java.lang.StringBuilder$toCharArray$$0$block62:
    goto inline$java.lang.StringBuilder$toCharArray$$0$Return;

  inline$java.lang.StringBuilder$toCharArray$$0$Return:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2 := inline$java.lang.StringBuilder$toCharArray$$0$$return;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3$1;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3$1:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2];
    assert {:sourceloc "String.java", 33, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$block67;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$block67:
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return:
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block30$1;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block30$1:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$r4;
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block31;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$block31:
    goto inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$Return:
    $r7 := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$return;
    $exception := inline$org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$$0$$exception;
    goto anon19$1;

  anon19$1:
    assert {:sourceloc "Security.java", 170, -1, -1, -1} true;
    $return := $r7;
    goto block26;

  block26:
    return;
}



implementation unsafe.org.openmrs.util.Security$incorrectHexString$byte$lp$$rp$($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r4: ref;
  var r0: ref;
  var $s3: int;
  var b1: int;
  var $fakelocal_0: ref;
  var r2: ref;
  var $r5: ref;
  var r1: ref;
  var $fakelocal_4: ref;
  var $r3: ref;
  var $fakelocal_3: ref;
  var i4: int;
  var $i2: int;
  var $fakelocal_2: ref;
  var i0: int;
  var $fakelocal_1: ref;
  var $fakelocal_5: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$r0: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$r2: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$this: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$return: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$exception: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$toCharArray$$0$$heap: $heap_type;
  var inline$java.lang.String$toCharArray$$0$r0: ref;
  var inline$java.lang.String$toCharArray$$0$$r1: ref;
  var inline$java.lang.String$toCharArray$$0$$this: ref;
  var inline$java.lang.String$toCharArray$$0$$return: ref;
  var inline$java.lang.String$toCharArray$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} r0 == unsafe.$null;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} {:comment "thenblock"} true;
    goto block27;

  anon18_Else:
    assume {:partition} r0 != unsafe.$null;
    assert {:sourceloc "Security.java", 184, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon19_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon6:
    $i2 := unsafe.$arrSizeHeap[r0];
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} $i2 >= 1;
    assert {:sourceloc "Security.java", 185, -1, -1, -1} {:comment "thenblock"} true;
    goto block28;

  anon20_Else:
    assume {:partition} 1 > $i2;
    assert {:sourceloc "Security.java", 185, -1, -1, -1} {:comment "elseblock"} true;
    goto block27;

  block27:
    assert {:sourceloc "Security.java", 185, -1, -1, -1} true;
    $return := unsafe.$StringConst5;
    goto block31;

  block28:
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.StringBuilder);
    $r3 := $fakelocal_1;
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := $r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto block28$1;

  block28$1:
    assert {:sourceloc "Security.java", 187, -1, -1, -1} true;
    r1 := $r3;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    r2 := r0;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto anon21_Then, anon21_Else;

  anon21_Then:
    assume {:partition} r2 != unsafe.$null;
    $exception := $exception;
    goto anon11;

  anon21_Else:
    assume {:partition} r2 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon11:
    i0 := unsafe.$arrSizeHeap[r2];
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    i4 := 0;
    goto block29;

  block29:
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto anon22_Then, anon22_Else;

  anon22_Then:
    assume {:partition} i4 >= i0;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} {:comment "thenblock"} true;
    goto block30;

  anon22_Else:
    assume {:partition} i0 > i4;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} {:comment "elseblock"} true;
    goto anon14;

  anon14:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    goto anon23_Then, anon23_Else;

  anon23_Then:
    assume {:partition} i4 < unsafe.$arrSizeHeap[r2] && i4 >= 0;
    $exception := $exception;
    goto anon17;

  anon23_Else:
    assume {:partition} !(i4 < unsafe.$arrSizeHeap[r2] && i4 >= 0);
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon17:
    b1 := unsafe.$intArrHeap[r2][i4];
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    $s3 := unsafe.$bitAnd(b1, 255);
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    call $r5, $exception := unsafe.java.lang.Integer$toHexString$int($s3);
    assert {:sourceloc "Security.java", 189, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := r1;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := $r5;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    $fakelocal_4 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto anon17$1;

  anon17$1:
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    i4 := i4 + 1;
    assert {:sourceloc "Security.java", 188, -1, -1, -1} true;
    goto block29;

  block30:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.String);
    $r4 := $fakelocal_5;
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Entry;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Entry:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this := $r4;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0 := r1;
    havoc inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$in_parameter__0;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon0$1:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Then, inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Else;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon4_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3:
    goto inline$java.lang.StringBuilder$toCharArray$$0$Entry;

  inline$java.lang.StringBuilder$toCharArray$$0$Entry:
    inline$java.lang.StringBuilder$toCharArray$$0$$this := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r1;
    havoc inline$java.lang.StringBuilder$toCharArray$$0$r0, inline$java.lang.StringBuilder$toCharArray$$0$$r1, inline$java.lang.StringBuilder$toCharArray$$0$$r2, inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0, inline$java.lang.StringBuilder$toCharArray$$0$$return, inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    inline$java.lang.StringBuilder$toCharArray$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$toCharArray$$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon0;

  inline$java.lang.StringBuilder$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$r0 := inline$java.lang.StringBuilder$toCharArray$$0$$this;
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toCharArray$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon4_Then, inline$java.lang.StringBuilder$toCharArray$$0$anon4_Else;

  inline$java.lang.StringBuilder$toCharArray$$0$anon4_Then:
    assume {:partition} inline$java.lang.StringBuilder$toCharArray$$0$$r1 != unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon3;

  inline$java.lang.StringBuilder$toCharArray$$0$anon4_Else:
    assume {:partition} inline$java.lang.StringBuilder$toCharArray$$0$$r1 == unsafe.$null;
    call inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$toCharArray$$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$toCharArray$$0$Return;

  inline$java.lang.StringBuilder$toCharArray$$0$anon3:
    goto inline$java.lang.String$toCharArray$$0$Entry;

  inline$java.lang.String$toCharArray$$0$Entry:
    inline$java.lang.String$toCharArray$$0$$this := inline$java.lang.StringBuilder$toCharArray$$0$$r1;
    havoc inline$java.lang.String$toCharArray$$0$r0, inline$java.lang.String$toCharArray$$0$$r1, inline$java.lang.String$toCharArray$$0$$return, inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.String$toCharArray$$0$anon0;

  inline$java.lang.String$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.String$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$r0 := inline$java.lang.String$toCharArray$$0$$this;
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.String$toCharArray$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$return := inline$java.lang.String$toCharArray$$0$$r1;
    goto inline$java.lang.String$toCharArray$$0$block73;

  inline$java.lang.String$toCharArray$$0$block73:
    goto inline$java.lang.String$toCharArray$$0$Return;

  inline$java.lang.String$toCharArray$$0$Return:
    inline$java.lang.StringBuilder$toCharArray$$0$$r2 := inline$java.lang.String$toCharArray$$0$$return;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon3$1;

  inline$java.lang.StringBuilder$toCharArray$$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$$return := inline$java.lang.StringBuilder$toCharArray$$0$$r2;
    goto inline$java.lang.StringBuilder$toCharArray$$0$block62;

  inline$java.lang.StringBuilder$toCharArray$$0$block62:
    goto inline$java.lang.StringBuilder$toCharArray$$0$Return;

  inline$java.lang.StringBuilder$toCharArray$$0$Return:
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2 := inline$java.lang.StringBuilder$toCharArray$$0$$return;
    inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3$1;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$anon3$1:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$r2];
    assert {:sourceloc "String.java", 33, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$block67;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$block67:
    goto inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return;

  inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$java.lang.StringBuilder$0$$exception;
    goto block30$1;

  block30$1:
    assert {:sourceloc "Security.java", 191, -1, -1, -1} true;
    $return := $r4;
    goto block31;

  block31:
    return;
}



implementation unsafe.org.openmrs.util.Security$getRandomToken$() returns ($return: ref, $exception: ref)
{
  var $fakelocal_2: ref;
  var r0: ref;
  var $r5: ref;
  var $fakelocal_1: ref;
  var $r7: ref;
  var $l1: int;
  var $r2: ref;
  var $r1: ref;
  var $fakelocal_0: ref;
  var $r6: ref;
  var $r3: ref;
  var $l0: int;
  var $r4: ref;
  var $r8: ref;
  var $fakelocal_3: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r7: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r6: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r13: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r8: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r10: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r3: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$intArrHeap: intArrHeap_type;
  var inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$b3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$i4: int;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception: ref;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$3$r0: ref;
  var inline$java.lang.StringBuilder$toString$$3$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$3$$this: ref;
  var inline$java.lang.StringBuilder$toString$$3$$return: ref;
  var inline$java.lang.StringBuilder$toString$$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$4$r0: ref;
  var inline$java.lang.StringBuilder$toString$$4$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$4$$this: ref;
  var inline$java.lang.StringBuilder$toString$$4$$return: ref;
  var inline$java.lang.StringBuilder$toString$$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$4$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$6$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$5$r0: ref;
  var inline$java.lang.StringBuilder$toString$$5$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$5$$this: ref;
  var inline$java.lang.StringBuilder$toString$$5$$return: ref;
  var inline$java.lang.StringBuilder$toString$$5$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$6$r0: ref;
  var inline$java.lang.StringBuilder$toString$$6$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$6$$this: ref;
  var inline$java.lang.StringBuilder$toString$$6$$return: ref;
  var inline$java.lang.StringBuilder$toString$$6$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception: ref;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$intArrHeap: intArrHeap_type;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$7$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$0$r1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$0$c0: int;
  var inline$java.lang.StringBuilder$append$char$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$0$r0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$this: ref;
  var inline$java.lang.StringBuilder$append$char$0$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$0$$return: ref;
  var inline$java.lang.StringBuilder$append$char$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$8$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$5$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$9$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$7$r0: ref;
  var inline$java.lang.StringBuilder$toString$$7$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$7$$this: ref;
  var inline$java.lang.StringBuilder$toString$$7$$return: ref;
  var inline$java.lang.StringBuilder$toString$$7$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$8$r0: ref;
  var inline$java.lang.StringBuilder$toString$$8$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$8$$this: ref;
  var inline$java.lang.StringBuilder$toString$$8$$return: ref;
  var inline$java.lang.StringBuilder$toString$$8$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$1$r1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$1$c0: int;
  var inline$java.lang.StringBuilder$append$char$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$1$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$1$r0: ref;
  var inline$java.lang.StringBuilder$append$char$1$$this: ref;
  var inline$java.lang.StringBuilder$append$char$1$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$1$$return: ref;
  var inline$java.lang.StringBuilder$append$char$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$10$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$11$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$6$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$11$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$12$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$12$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$9$r0: ref;
  var inline$java.lang.StringBuilder$toString$$9$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$9$$this: ref;
  var inline$java.lang.StringBuilder$toString$$9$$return: ref;
  var inline$java.lang.StringBuilder$toString$$9$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$13$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$13$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$10$r0: ref;
  var inline$java.lang.StringBuilder$toString$$10$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$10$$this: ref;
  var inline$java.lang.StringBuilder$toString$$10$$return: ref;
  var inline$java.lang.StringBuilder$toString$$10$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$11$r0: ref;
  var inline$java.lang.StringBuilder$toString$$11$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$11$$this: ref;
  var inline$java.lang.StringBuilder$toString$$11$$return: ref;
  var inline$java.lang.StringBuilder$toString$$11$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", 200, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.util.Random);
    $r1 := $fakelocal_0;
    assert {:sourceloc "Security.java", 200, -1, -1, -1} true;
    call $exception := unsafe.java.util.Random$$la$init$ra$$($r1);
    assert {:sourceloc "Security.java", 200, -1, -1, -1} true;
    r0 := $r1;
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.StringBuilder);
    $r2 := $fakelocal_1;
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := $r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    call $l0, $exception := unsafe.java.lang.System$currentTimeMillis$();
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    call $r3, $exception := unsafe.java.lang.Long$toString$long($l0);
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := $r2;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := $r3;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    $r4 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    call $l1, $exception := unsafe.java.util.Random$nextLong$(r0);
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    call $r5, $exception := unsafe.java.lang.Long$toString$long($l1);
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    goto anon11_Then, anon11_Else;

  anon11_Then:
    assume {:partition} $r4 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon11_Else:
    assume {:partition} $r4 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := $r4;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := $r5;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    $r6 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    goto anon12_Then, anon12_Else;

  anon12_Then:
    assume {:partition} $r6 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon12_Else:
    assume {:partition} $r6 == unsafe.$null;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon6:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := $r6;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    $r7 := inline$java.lang.StringBuilder$toString$$2$$return;
    $exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$in_parameter__0 := $r7;
    havoc inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r7, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r6, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r13, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r8, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_4, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r10, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_5, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r3, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r5, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$intArrHeap := unsafe.$intArrHeap;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 89, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0 := 7];
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block9;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block9:
    assert {:sourceloc "Security.java", 93, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.java.security.MessageDigest$getInstance$java.lang.String(inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1);
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon20_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon20_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon20_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon21_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon21_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon21_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon21_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon4;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon20_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon4;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon4:
    assert {:sourceloc "Security.java", 94, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r5 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 94, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon22_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon22_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon22_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon7;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon22_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon7:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r5;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$b3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$i4, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := 0;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block70;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b3 := inline$java.lang.String$getBytes$$0$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block71;

  inline$java.lang.String$getBytes$$0$block71:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r3 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon7$1;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon7$1:
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon23_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon23_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon23_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon24_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon24_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon24_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon24_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block11;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon23_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block11;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block11:
    assert {:sourceloc "Security.java", 100, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block12;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    assume unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r8 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    assert {:sourceloc "Security.java", 96, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r8;
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9 := unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259;
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Entry:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r1;
    havoc inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$3$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$$la$init$ra$$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r1;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0 := unsafe.$StringConst1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$2$$r3, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$2$$r2, inline$java.lang.StringBuilder$append$java.lang.String$2$r0, inline$java.lang.StringBuilder$append$java.lang.String$2$$r6, inline$java.lang.StringBuilder$append$java.lang.String$2$$r5, inline$java.lang.StringBuilder$append$java.lang.String$2$r1, inline$java.lang.StringBuilder$append$java.lang.String$2$$r4, inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$2$$return, inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r0 := inline$java.lang.StringBuilder$append$java.lang.String$2$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$r1 := inline$java.lang.StringBuilder$append$java.lang.String$2$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$4$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$4$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$$la$init$ra$$$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$4$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$4$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$2$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6:
    goto inline$java.lang.StringBuilder$toString$$3$Entry;

  inline$java.lang.StringBuilder$toString$$3$Entry:
    inline$java.lang.StringBuilder$toString$$3$$this := inline$java.lang.StringBuilder$append$java.lang.String$2$$r5;
    havoc inline$java.lang.StringBuilder$toString$$3$r0, inline$java.lang.StringBuilder$toString$$3$$r1, inline$java.lang.StringBuilder$toString$$3$$return, inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$toString$$3$anon0;

  inline$java.lang.StringBuilder$toString$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$r0 := inline$java.lang.StringBuilder$toString$$3$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$return := inline$java.lang.StringBuilder$toString$$3$$r1;
    goto inline$java.lang.StringBuilder$toString$$3$block61;

  inline$java.lang.StringBuilder$toString$$3$block61:
    goto inline$java.lang.StringBuilder$toString$$3$Return;

  inline$java.lang.StringBuilder$toString$$3$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$2$$r6 := inline$java.lang.StringBuilder$toString$$3$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$exception := inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$2$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$2$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$2$$return := inline$java.lang.StringBuilder$append$java.lang.String$2$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$2$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$2$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$2$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$2$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$2$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon0$2:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon10_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r2;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$3$$r3, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$3$$r2, inline$java.lang.StringBuilder$append$java.lang.String$3$r0, inline$java.lang.StringBuilder$append$java.lang.String$3$$r6, inline$java.lang.StringBuilder$append$java.lang.String$3$$r5, inline$java.lang.StringBuilder$append$java.lang.String$3$r1, inline$java.lang.StringBuilder$append$java.lang.String$3$$r4, inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$3$$return, inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r0 := inline$java.lang.StringBuilder$append$java.lang.String$3$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$r1 := inline$java.lang.StringBuilder$append$java.lang.String$3$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$5$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$5$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.StringBuilder$$la$init$ra$$$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$5$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$5$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$5$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$5$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$3$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6:
    goto inline$java.lang.StringBuilder$toString$$4$Entry;

  inline$java.lang.StringBuilder$toString$$4$Entry:
    inline$java.lang.StringBuilder$toString$$4$$this := inline$java.lang.StringBuilder$append$java.lang.String$3$$r5;
    havoc inline$java.lang.StringBuilder$toString$$4$r0, inline$java.lang.StringBuilder$toString$$4$$r1, inline$java.lang.StringBuilder$toString$$4$$return, inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$toString$$4$anon0;

  inline$java.lang.StringBuilder$toString$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$r0 := inline$java.lang.StringBuilder$toString$$4$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$4$$return := inline$java.lang.StringBuilder$toString$$4$$r1;
    goto inline$java.lang.StringBuilder$toString$$4$block61;

  inline$java.lang.StringBuilder$toString$$4$block61:
    goto inline$java.lang.StringBuilder$toString$$4$Return;

  inline$java.lang.StringBuilder$toString$$4$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$3$$r6 := inline$java.lang.StringBuilder$toString$$4$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$exception := inline$java.lang.StringBuilder$toString$$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$3$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$3$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$3$$return := inline$java.lang.StringBuilder$append$java.lang.String$3$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$3$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$3$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$3$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3 := inline$java.lang.StringBuilder$append$java.lang.String$3$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$3$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon3$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon11_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$4$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0 := unsafe.$StringConst2;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$4$$r3, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$4$$r2, inline$java.lang.StringBuilder$append$java.lang.String$4$r0, inline$java.lang.StringBuilder$append$java.lang.String$4$$r6, inline$java.lang.StringBuilder$append$java.lang.String$4$$r5, inline$java.lang.StringBuilder$append$java.lang.String$4$r1, inline$java.lang.StringBuilder$append$java.lang.String$4$$r4, inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$4$$return, inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$r0 := inline$java.lang.StringBuilder$append$java.lang.String$4$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$r1 := inline$java.lang.StringBuilder$append$java.lang.String$4$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$this := inline$java.lang.StringBuilder$append$java.lang.String$4$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$6$r0, inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$6$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$6$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$6$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.StringBuilder$$la$init$ra$$$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$6$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$6$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$6$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$4$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon6:
    goto inline$java.lang.StringBuilder$toString$$5$Entry;

  inline$java.lang.StringBuilder$toString$$5$Entry:
    inline$java.lang.StringBuilder$toString$$5$$this := inline$java.lang.StringBuilder$append$java.lang.String$4$$r5;
    havoc inline$java.lang.StringBuilder$toString$$5$r0, inline$java.lang.StringBuilder$toString$$5$$r1, inline$java.lang.StringBuilder$toString$$5$$return, inline$java.lang.StringBuilder$toString$$5$$exception;
    goto inline$java.lang.StringBuilder$toString$$5$anon0;

  inline$java.lang.StringBuilder$toString$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$r0 := inline$java.lang.StringBuilder$toString$$5$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$5$$return := inline$java.lang.StringBuilder$toString$$5$$r1;
    goto inline$java.lang.StringBuilder$toString$$5$block61;

  inline$java.lang.StringBuilder$toString$$5$block61:
    goto inline$java.lang.StringBuilder$toString$$5$Return;

  inline$java.lang.StringBuilder$toString$$5$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$4$$r6 := inline$java.lang.StringBuilder$toString$$5$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$exception := inline$java.lang.StringBuilder$toString$$5$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$4$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$4$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$4$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$4$$return := inline$java.lang.StringBuilder$append$java.lang.String$4$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$4$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$4$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$4$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4 := inline$java.lang.StringBuilder$append$java.lang.String$4$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$4$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon6$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then, inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Then:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   != unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon12_Else:
    assume {:partition} inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4
   == unsafe.$null;
    call inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$6$Entry;

  inline$java.lang.StringBuilder$toString$$6$Entry:
    inline$java.lang.StringBuilder$toString$$6$$this := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r4;
    havoc inline$java.lang.StringBuilder$toString$$6$r0, inline$java.lang.StringBuilder$toString$$6$$r1, inline$java.lang.StringBuilder$toString$$6$$return, inline$java.lang.StringBuilder$toString$$6$$exception;
    goto inline$java.lang.StringBuilder$toString$$6$anon0;

  inline$java.lang.StringBuilder$toString$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$r0 := inline$java.lang.StringBuilder$toString$$6$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$6$$return := inline$java.lang.StringBuilder$toString$$6$$r1;
    goto inline$java.lang.StringBuilder$toString$$6$block61;

  inline$java.lang.StringBuilder$toString$$6$block61:
    goto inline$java.lang.StringBuilder$toString$$6$Return;

  inline$java.lang.StringBuilder$toString$$6$Return:
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5 := inline$java.lang.StringBuilder$toString$$6$$return;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$6$$exception;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$anon9$1:
    assert {:sourceloc "Security.java", 76, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$r5;
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$block8:
    goto inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$Return:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r10 := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$return;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$getPasswordEncodeFailMessage$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10$1;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block10$1:
    assert {:sourceloc "Security.java", 98, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon25_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon25_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon25_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon13;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon25_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon13:
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.org.slf4j.Logger$error$java.lang.String_java.lang.Throwable(inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r9, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r10, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4);
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_3 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_3;
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12, unsafe.$StringConst3, unsafe.$null, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r4);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon26_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon26_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon26_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon16;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon26_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon16:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r13 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r12;
    assert {:sourceloc "Security.java", 99, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r13;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block13;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block12:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon27_Then, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon27_Else;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon27_Then:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2
   != unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon19;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon27_Else:
    assume {:partition} inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon19:
    call inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r6, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := unsafe.java.security.MessageDigest$digest$byte$lp$$rp$(inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r2, inline$org.openmrs.util.Security$encodeString$java.lang.String$0$r3);
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Entry;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Entry:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r6;
    havoc inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$7$r0, inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$7$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$7$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$7$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.lang.StringBuilder$$la$init$ra$$$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$7$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$7$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$7$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$7$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon0$1:
    assert {:sourceloc "Security.java", 135, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r4;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1 := 16];
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Then:
    assume {:partition} 0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon3;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon64_Else:
    assume {:partition} !(0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][0 := 48]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Then:
    assume {:partition} 1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon6;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon65_Else:
    assume {:partition} !(1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon6:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][1 := 49]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Then:
    assume {:partition} 2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 2 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon9;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon66_Else:
    assume {:partition} !(2
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 2 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon9:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][2 := 50]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Then:
    assume {:partition} 3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 3 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon12;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon67_Else:
    assume {:partition} !(3
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 3 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon12:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][3 := 51]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Then:
    assume {:partition} 4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 4 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon15;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon68_Else:
    assume {:partition} !(4
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 4 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][4 := 52]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Then:
    assume {:partition} 5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 5 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon18;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon69_Else:
    assume {:partition} !(5
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 5 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_7;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon18:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][5 := 53]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Then:
    assume {:partition} 6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 6 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon70_Else:
    assume {:partition} !(6
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 6 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_8;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon21:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][6 := 54]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Then:
    assume {:partition} 7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon24;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon71_Else:
    assume {:partition} !(7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_9;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon24:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][7 := 55]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Then:
    assume {:partition} 8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 8 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon27;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon72_Else:
    assume {:partition} !(8
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 8 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_10;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon27:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][8 := 56]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Then:
    assume {:partition} 9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 9 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon30;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon73_Else:
    assume {:partition} !(9
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 9 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_11;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon30:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][9 := 57]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Then:
    assume {:partition} 10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 10 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon33;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon74_Else:
    assume {:partition} !(10
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 10 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_12;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon33:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][10 := 97]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Then:
    assume {:partition} 11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 11 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon36;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon75_Else:
    assume {:partition} !(11
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 11 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_13;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon36:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][11 := 98]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Then:
    assume {:partition} 12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 12 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon39;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon76_Else:
    assume {:partition} !(12
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 12 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_14;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon39:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][12 := 99]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Then:
    assume {:partition} 13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 13 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon42;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon77_Else:
    assume {:partition} !(13
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 13 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_15;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon42:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][13 := 100]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Then:
    assume {:partition} 14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 14 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon45;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon78_Else:
    assume {:partition} !(14
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 14 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_16;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon45:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][14 := 101]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Then:
    assume {:partition} 15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 15 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon48;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon79_Else:
    assume {:partition} !(15
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5]
   && 15 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_17;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon48:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5][15 := 102]];
    assert {:sourceloc "Security.java", 136, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r5;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r0;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 != unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon51;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon80_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3 == unsafe.$null;
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_18;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon51:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2 := unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3];
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 := 0;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
   >= inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon81_Else:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i2
   > inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon54;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon54:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon57;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon82_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_19;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon57:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r3][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7];
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, 240);
    assert {:sourceloc "Security.java", 140, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 := unsafe.$shrInt(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$s4, 4);
    assert {:sourceloc "Security.java", 141, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 := unsafe.$bitAnd(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b3, 15);
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon83_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_20;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$s0];
    assert {:sourceloc "Security.java", 142, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$Entry;

  inline$java.lang.StringBuilder$append$char$0$Entry:
    inline$java.lang.StringBuilder$append$char$0$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$char$0$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c5;
    havoc inline$java.lang.StringBuilder$append$char$0$$r4, inline$java.lang.StringBuilder$append$char$0$r1, inline$java.lang.StringBuilder$append$char$0$$r6, inline$java.lang.StringBuilder$append$char$0$$r8, inline$java.lang.StringBuilder$append$char$0$$fakelocal_2, inline$java.lang.StringBuilder$append$char$0$$r2, inline$java.lang.StringBuilder$append$char$0$c0, inline$java.lang.StringBuilder$append$char$0$$r5, inline$java.lang.StringBuilder$append$char$0$$fakelocal_4, inline$java.lang.StringBuilder$append$char$0$$fakelocal_3, inline$java.lang.StringBuilder$append$char$0$$fakelocal_0, inline$java.lang.StringBuilder$append$char$0$$fakelocal_1, inline$java.lang.StringBuilder$append$char$0$$fakelocal_5, inline$java.lang.StringBuilder$append$char$0$$r7, inline$java.lang.StringBuilder$append$char$0$$r3, inline$java.lang.StringBuilder$append$char$0$r0, inline$java.lang.StringBuilder$append$char$0$$return, inline$java.lang.StringBuilder$append$char$0$$exception;
    inline$java.lang.StringBuilder$append$char$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$0$anon0;

  inline$java.lang.StringBuilder$append$char$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r0 := inline$java.lang.StringBuilder$append$char$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$c0 := inline$java.lang.StringBuilder$append$char$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$0$$r2 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon10_Then, inline$java.lang.StringBuilder$append$char$0$anon10_Else;

  inline$java.lang.StringBuilder$append$char$0$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3;

  inline$java.lang.StringBuilder$append$char$0$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2][0 := inline$java.lang.StringBuilder$append$char$0$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r1 := inline$java.lang.StringBuilder$append$char$0$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$0$$r3 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$8$r0, inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$8$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$8$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$8$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.lang.StringBuilder$$la$init$ra$$$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$8$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$8$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$8$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$8$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$1;

  inline$java.lang.StringBuilder$append$char$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$5$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$5$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$5$$r3, inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$5$$r2, inline$java.lang.StringBuilder$append$java.lang.String$5$r0, inline$java.lang.StringBuilder$append$java.lang.String$5$$r6, inline$java.lang.StringBuilder$append$java.lang.String$5$$r5, inline$java.lang.StringBuilder$append$java.lang.String$5$r1, inline$java.lang.StringBuilder$append$java.lang.String$5$$r4, inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$5$$return, inline$java.lang.StringBuilder$append$java.lang.String$5$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$5$r0 := inline$java.lang.StringBuilder$append$java.lang.String$5$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$5$r1 := inline$java.lang.StringBuilder$append$java.lang.String$5$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$5$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$this := inline$java.lang.StringBuilder$append$java.lang.String$5$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$9$r0, inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$9$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$9$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$9$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$9$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.lang.StringBuilder$$la$init$ra$$$9$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$9$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$9$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$9$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$9$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$9$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$5$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$5$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$5$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$5$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$5$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$5$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$5$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$5$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon6:
    goto inline$java.lang.StringBuilder$toString$$7$Entry;

  inline$java.lang.StringBuilder$toString$$7$Entry:
    inline$java.lang.StringBuilder$toString$$7$$this := inline$java.lang.StringBuilder$append$java.lang.String$5$$r5;
    havoc inline$java.lang.StringBuilder$toString$$7$r0, inline$java.lang.StringBuilder$toString$$7$$r1, inline$java.lang.StringBuilder$toString$$7$$return, inline$java.lang.StringBuilder$toString$$7$$exception;
    goto inline$java.lang.StringBuilder$toString$$7$anon0;

  inline$java.lang.StringBuilder$toString$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$7$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$r0 := inline$java.lang.StringBuilder$toString$$7$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$7$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$7$$return := inline$java.lang.StringBuilder$toString$$7$$r1;
    goto inline$java.lang.StringBuilder$toString$$7$block61;

  inline$java.lang.StringBuilder$toString$$7$block61:
    goto inline$java.lang.StringBuilder$toString$$7$Return;

  inline$java.lang.StringBuilder$toString$$7$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$5$$r6 := inline$java.lang.StringBuilder$toString$$7$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$exception := inline$java.lang.StringBuilder$toString$$7$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$5$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$5$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$5$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$5$$return := inline$java.lang.StringBuilder$append$java.lang.String$5$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$5$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$5$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$5$Return:
    inline$java.lang.StringBuilder$append$char$0$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$5$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$5$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$2;

  inline$java.lang.StringBuilder$append$char$0$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$0$$r6 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := inline$java.lang.StringBuilder$append$char$0$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$3;

  inline$java.lang.StringBuilder$append$char$0$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon11_Then, inline$java.lang.StringBuilder$append$char$0$anon11_Else;

  inline$java.lang.StringBuilder$append$char$0$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6;

  inline$java.lang.StringBuilder$append$char$0$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$this := inline$java.lang.StringBuilder$append$char$0$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$0$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6$1;

  inline$java.lang.StringBuilder$append$char$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon12_Then, inline$java.lang.StringBuilder$append$char$0$anon12_Else;

  inline$java.lang.StringBuilder$append$char$0$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9;

  inline$java.lang.StringBuilder$append$char$0$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$8$Entry;

  inline$java.lang.StringBuilder$toString$$8$Entry:
    inline$java.lang.StringBuilder$toString$$8$$this := inline$java.lang.StringBuilder$append$char$0$$r7;
    havoc inline$java.lang.StringBuilder$toString$$8$r0, inline$java.lang.StringBuilder$toString$$8$$r1, inline$java.lang.StringBuilder$toString$$8$$return, inline$java.lang.StringBuilder$toString$$8$$exception;
    goto inline$java.lang.StringBuilder$toString$$8$anon0;

  inline$java.lang.StringBuilder$toString$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$8$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$r0 := inline$java.lang.StringBuilder$toString$$8$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$8$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$8$$return := inline$java.lang.StringBuilder$toString$$8$$r1;
    goto inline$java.lang.StringBuilder$toString$$8$block61;

  inline$java.lang.StringBuilder$toString$$8$block61:
    goto inline$java.lang.StringBuilder$toString$$8$Return;

  inline$java.lang.StringBuilder$toString$$8$Return:
    inline$java.lang.StringBuilder$append$char$0$$r8 := inline$java.lang.StringBuilder$toString$$8$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$toString$$8$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9$1;

  inline$java.lang.StringBuilder$append$char$0$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$0$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$return := inline$java.lang.StringBuilder$append$char$0$r0;
    goto inline$java.lang.StringBuilder$append$char$0$block59;

  inline$java.lang.StringBuilder$append$char$0$block59:
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_21 := inline$java.lang.StringBuilder$append$char$0$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon60$1:
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Then, inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Else;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Then:
    assume {:partition} inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 >= 0;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon84_Else:
    assume {:partition} !(inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1
     < unsafe.$arrSizeHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2]
   && inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1 >= 0);
    call inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_22;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6 := unsafe.$intArrHeap[inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r2][inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$b1];
    assert {:sourceloc "Security.java", 143, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$Entry;

  inline$java.lang.StringBuilder$append$char$1$Entry:
    inline$java.lang.StringBuilder$append$char$1$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    inline$java.lang.StringBuilder$append$char$1$$in_parameter__0 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$c6;
    havoc inline$java.lang.StringBuilder$append$char$1$$r4, inline$java.lang.StringBuilder$append$char$1$r1, inline$java.lang.StringBuilder$append$char$1$$r6, inline$java.lang.StringBuilder$append$char$1$$r8, inline$java.lang.StringBuilder$append$char$1$$fakelocal_2, inline$java.lang.StringBuilder$append$char$1$$r2, inline$java.lang.StringBuilder$append$char$1$c0, inline$java.lang.StringBuilder$append$char$1$$r5, inline$java.lang.StringBuilder$append$char$1$$fakelocal_4, inline$java.lang.StringBuilder$append$char$1$$fakelocal_3, inline$java.lang.StringBuilder$append$char$1$$fakelocal_0, inline$java.lang.StringBuilder$append$char$1$$fakelocal_1, inline$java.lang.StringBuilder$append$char$1$$fakelocal_5, inline$java.lang.StringBuilder$append$char$1$$r7, inline$java.lang.StringBuilder$append$char$1$$r3, inline$java.lang.StringBuilder$append$char$1$r0, inline$java.lang.StringBuilder$append$char$1$$return, inline$java.lang.StringBuilder$append$char$1$$exception;
    inline$java.lang.StringBuilder$append$char$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$1$anon0;

  inline$java.lang.StringBuilder$append$char$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r0 := inline$java.lang.StringBuilder$append$char$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$c0 := inline$java.lang.StringBuilder$append$char$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$1$$r2 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon10_Then, inline$java.lang.StringBuilder$append$char$1$anon10_Else;

  inline$java.lang.StringBuilder$append$char$1$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3;

  inline$java.lang.StringBuilder$append$char$1$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$1$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$1$$r2][0 := inline$java.lang.StringBuilder$append$char$1$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$r1 := inline$java.lang.StringBuilder$append$char$1$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$1$$r3 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$10$r0, inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$10$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$10$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$10$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$10$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$11$Entry;

  inline$java.lang.Object$$la$init$ra$$$11$Entry:
    inline$java.lang.Object$$la$init$ra$$$11$$this := inline$java.lang.StringBuilder$$la$init$ra$$$10$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$11$anon0;

  inline$java.lang.Object$$la$init$ra$$$11$anon0:
    inline$java.lang.Object$$la$init$ra$$$11$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$11$Return;

  inline$java.lang.Object$$la$init$ra$$$11$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception := inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$10$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$10$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$10$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$10$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$10$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$1;

  inline$java.lang.StringBuilder$append$char$1$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$6$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$6$$this := inline$java.lang.StringBuilder$append$char$1$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$6$$r3, inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$6$$r2, inline$java.lang.StringBuilder$append$java.lang.String$6$r0, inline$java.lang.StringBuilder$append$java.lang.String$6$$r6, inline$java.lang.StringBuilder$append$java.lang.String$6$$r5, inline$java.lang.StringBuilder$append$java.lang.String$6$r1, inline$java.lang.StringBuilder$append$java.lang.String$6$$r4, inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$6$$return, inline$java.lang.StringBuilder$append$java.lang.String$6$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$6$r0 := inline$java.lang.StringBuilder$append$java.lang.String$6$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$6$r1 := inline$java.lang.StringBuilder$append$java.lang.String$6$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$6$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$this := inline$java.lang.StringBuilder$append$java.lang.String$6$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$11$r0, inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$11$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$11$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$11$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$11$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$12$Entry;

  inline$java.lang.Object$$la$init$ra$$$12$Entry:
    inline$java.lang.Object$$la$init$ra$$$12$$this := inline$java.lang.StringBuilder$$la$init$ra$$$11$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$12$anon0;

  inline$java.lang.Object$$la$init$ra$$$12$anon0:
    inline$java.lang.Object$$la$init$ra$$$12$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$12$Return;

  inline$java.lang.Object$$la$init$ra$$$12$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception := inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$11$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$11$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$11$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$11$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$11$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$6$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$6$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$6$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$6$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$6$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$6$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$6$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$6$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon6:
    goto inline$java.lang.StringBuilder$toString$$9$Entry;

  inline$java.lang.StringBuilder$toString$$9$Entry:
    inline$java.lang.StringBuilder$toString$$9$$this := inline$java.lang.StringBuilder$append$java.lang.String$6$$r5;
    havoc inline$java.lang.StringBuilder$toString$$9$r0, inline$java.lang.StringBuilder$toString$$9$$r1, inline$java.lang.StringBuilder$toString$$9$$return, inline$java.lang.StringBuilder$toString$$9$$exception;
    goto inline$java.lang.StringBuilder$toString$$9$anon0;

  inline$java.lang.StringBuilder$toString$$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$9$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$9$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$9$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$9$r0 := inline$java.lang.StringBuilder$toString$$9$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$9$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$9$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$9$$return := inline$java.lang.StringBuilder$toString$$9$$r1;
    goto inline$java.lang.StringBuilder$toString$$9$block61;

  inline$java.lang.StringBuilder$toString$$9$block61:
    goto inline$java.lang.StringBuilder$toString$$9$Return;

  inline$java.lang.StringBuilder$toString$$9$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$6$$r6 := inline$java.lang.StringBuilder$toString$$9$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$exception := inline$java.lang.StringBuilder$toString$$9$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$6$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$6$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$6$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$6$$return := inline$java.lang.StringBuilder$append$java.lang.String$6$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$6$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$6$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$6$Return:
    inline$java.lang.StringBuilder$append$char$1$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$6$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$6$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$2;

  inline$java.lang.StringBuilder$append$char$1$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$1$$r6 := inline$java.lang.StringBuilder$append$char$1$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this := inline$java.lang.StringBuilder$append$char$1$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$13$Entry;

  inline$java.lang.Object$$la$init$ra$$$13$Entry:
    inline$java.lang.Object$$la$init$ra$$$13$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$13$anon0;

  inline$java.lang.Object$$la$init$ra$$$13$anon0:
    inline$java.lang.Object$$la$init$ra$$$13$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$13$Return;

  inline$java.lang.Object$$la$init$ra$$$13$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon3$3;

  inline$java.lang.StringBuilder$append$char$1$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon11_Then, inline$java.lang.StringBuilder$append$char$1$anon11_Else;

  inline$java.lang.StringBuilder$append$char$1$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6;

  inline$java.lang.StringBuilder$append$char$1$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$this := inline$java.lang.StringBuilder$append$char$1$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$1$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$1$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$1$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$1$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$1$$return := inline$java.lang.StringBuilder$append$java.lang.Object$1$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$1$Return:
    inline$java.lang.StringBuilder$append$char$1$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$1$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon6$1;

  inline$java.lang.StringBuilder$append$char$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$1$anon12_Then, inline$java.lang.StringBuilder$append$char$1$anon12_Else;

  inline$java.lang.StringBuilder$append$char$1$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9;

  inline$java.lang.StringBuilder$append$char$1$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$1$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$append$char$1$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$anon9:
    goto inline$java.lang.StringBuilder$toString$$10$Entry;

  inline$java.lang.StringBuilder$toString$$10$Entry:
    inline$java.lang.StringBuilder$toString$$10$$this := inline$java.lang.StringBuilder$append$char$1$$r7;
    havoc inline$java.lang.StringBuilder$toString$$10$r0, inline$java.lang.StringBuilder$toString$$10$$r1, inline$java.lang.StringBuilder$toString$$10$$return, inline$java.lang.StringBuilder$toString$$10$$exception;
    goto inline$java.lang.StringBuilder$toString$$10$anon0;

  inline$java.lang.StringBuilder$toString$$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$10$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$10$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$10$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$10$r0 := inline$java.lang.StringBuilder$toString$$10$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$10$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$10$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$10$$return := inline$java.lang.StringBuilder$toString$$10$$r1;
    goto inline$java.lang.StringBuilder$toString$$10$block61;

  inline$java.lang.StringBuilder$toString$$10$block61:
    goto inline$java.lang.StringBuilder$toString$$10$Return;

  inline$java.lang.StringBuilder$toString$$10$Return:
    inline$java.lang.StringBuilder$append$char$1$$r8 := inline$java.lang.StringBuilder$toString$$10$$return;
    inline$java.lang.StringBuilder$append$char$1$$exception := inline$java.lang.StringBuilder$toString$$10$$exception;
    goto inline$java.lang.StringBuilder$append$char$1$anon9$1;

  inline$java.lang.StringBuilder$append$char$1$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$1$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$1$$return := inline$java.lang.StringBuilder$append$char$1$r0;
    goto inline$java.lang.StringBuilder$append$char$1$block59;

  inline$java.lang.StringBuilder$append$char$1$block59:
    goto inline$java.lang.StringBuilder$append$char$1$Return;

  inline$java.lang.StringBuilder$append$char$1$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$fakelocal_23 := inline$java.lang.StringBuilder$append$char$1$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$append$char$1$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$anon63$1:
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$i7 + 1;
    assert {:sourceloc "Security.java", 139, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block19;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toString$$11$Entry;

  inline$java.lang.StringBuilder$toString$$11$Entry:
    inline$java.lang.StringBuilder$toString$$11$$this := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$r1;
    havoc inline$java.lang.StringBuilder$toString$$11$r0, inline$java.lang.StringBuilder$toString$$11$$r1, inline$java.lang.StringBuilder$toString$$11$$return, inline$java.lang.StringBuilder$toString$$11$$exception;
    goto inline$java.lang.StringBuilder$toString$$11$anon0;

  inline$java.lang.StringBuilder$toString$$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$11$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$11$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$11$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$11$r0 := inline$java.lang.StringBuilder$toString$$11$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$11$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$11$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$11$$return := inline$java.lang.StringBuilder$toString$$11$$r1;
    goto inline$java.lang.StringBuilder$toString$$11$block61;

  inline$java.lang.StringBuilder$toString$$11$block61:
    goto inline$java.lang.StringBuilder$toString$$11$Return;

  inline$java.lang.StringBuilder$toString$$11$Return:
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6 := inline$java.lang.StringBuilder$toString$$11$$return;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception := inline$java.lang.StringBuilder$toString$$11$$exception;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20$1;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block20$1:
    assert {:sourceloc "Security.java", 146, -1, -1, -1} true;
    inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$r6;
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block21;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$block21:
    goto inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$Return:
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r7 := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$return;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception := inline$org.openmrs.util.Security$hexString$byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon19$1;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$anon19$1:
    assert {:sourceloc "Security.java", 102, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$r7;
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block13;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$block13:
    goto inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return;

  inline$org.openmrs.util.Security$encodeString$java.lang.String$0$Return:
    $r8 := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$return;
    $exception := inline$org.openmrs.util.Security$encodeString$java.lang.String$0$$exception;
    goto anon6$2;

  anon6$2:
    goto anon13_Then, anon13_Else;

  anon13_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon14_Then, anon14_Else;

  anon14_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type] <: unsafe.org.openmrs.api.APIException;
    $return := unsafe.$null;
    return;

  anon14_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type] <: unsafe.org.openmrs.api.APIException);
    assert {:clone} true;
    goto anon10;

  anon13_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon10;

  anon10:
    assert {:sourceloc "Security.java", 201, -1, -1, -1} true;
    $return := $r8;
    goto block32;

  block32:
    return;
}



implementation unsafe.org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var r3: ref;
  var r5: ref;
  var r6: ref;
  var $r15: ref;
  var $fakelocal_5: ref;
  var r4: ref;
  var $fakelocal_6: ref;
  var $fakelocal_1: ref;
  var $r14: ref;
  var r18: ref;
  var r1: ref;
  var $r12: ref;
  var $fakelocal_2: ref;
  var $fakelocal_0: ref;
  var $r9: ref;
  var r21: ref;
  var $fakelocal_7: ref;
  var r20: ref;
  var r23: ref;
  var $fakelocal_3: ref;
  var r19: ref;
  var r2: ref;
  var $r13: ref;
  var r22: ref;
  var r17: ref;
  var $fakelocal_4: ref;
  var $r10: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$b3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$i4: int;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r2 := $in_parameter__2;
    assert {:sourceloc "Security.java", 217, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.javax.crypto.spec.IvParameterSpec);
    r19 := $fakelocal_0;
    assert {:sourceloc "Security.java", 217, -1, -1, -1} true;
    call $exception := unsafe.javax.crypto.spec.IvParameterSpec$$la$init$ra$$byte$lp$$rp$(r19, r1);
    assert {:sourceloc "Security.java", 217, -1, -1, -1} true;
    r3 := r19;
    assert {:sourceloc "Security.java", 218, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.javax.crypto.spec.SecretKeySpec);
    r20 := $fakelocal_1;
    assert {:sourceloc "Security.java", 218, -1, -1, -1} true;
    call $exception := unsafe.javax.crypto.spec.SecretKeySpec$$la$init$ra$$byte$lp$$rp$_java.lang.String(r20, r2, unsafe.$StringConst6);
    assert {:sourceloc "Security.java", 218, -1, -1, -1} true;
    r4 := r20;
    goto block33;

  block33:
    assert {:sourceloc "Security.java", 223, -1, -1, -1} true;
    call r17, $exception := unsafe.javax.crypto.Cipher$getInstance$java.lang.String(unsafe.$StringConst7);
    goto anon41_Then, anon41_Else;

  anon41_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon42_Then, anon42_Else;

  anon42_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.javax.crypto.NoSuchPaddingException;
    $return := unsafe.$null;
    goto block34;

  anon42_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.javax.crypto.NoSuchPaddingException);
    assert {:clone} true;
    goto anon4;

  anon41_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "Security.java", 224, -1, -1, -1} true;
    goto anon43_Then, anon43_Else;

  anon43_Then:
    assume {:partition} r17 != unsafe.$null;
    $exception := $exception;
    goto anon7;

  anon43_Else:
    assume {:partition} r17 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon7:
    call $exception := unsafe.javax.crypto.Cipher$init$int_java.security.Key_java.security.spec.AlgorithmParameterSpec(r17, 1, r4, r3);
    goto anon44_Then, anon44_Else;

  anon44_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon45_Then, anon45_Else;

  anon45_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.InvalidAlgorithmParameterException;
    $return := unsafe.$null;
    goto block34;

  anon45_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.InvalidAlgorithmParameterException);
    assert {:clone} true;
    goto anon11;

  anon44_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon11;

  anon11:
    assert {:sourceloc "Security.java", 225, -1, -1, -1} true;
    $r9 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 225, -1, -1, -1} true;
    goto anon46_Then, anon46_Else;

  anon46_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon14;

  anon46_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon14:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this := r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0 := $r9;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$b3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$i4, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := 0;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block70;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b3 := inline$java.lang.String$getBytes$$0$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block71;

  inline$java.lang.String$getBytes$$0$block71:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return:
    $r10 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return;
    $exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    goto anon14$1;

  anon14$1:
    goto anon47_Then, anon47_Else;

  anon47_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon48_Then, anon48_Else;

  anon48_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto block34;

  anon48_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto anon18;

  anon47_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon18;

  anon18:
    assert {:sourceloc "Security.java", 225, -1, -1, -1} true;
    call r5, $exception := unsafe.javax.crypto.Cipher$doFinal$byte$lp$$rp$(r17, $r10);
    goto anon49_Then, anon49_Else;

  anon49_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon50_Then, anon50_Else;

  anon50_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.javax.crypto.BadPaddingException;
    $return := unsafe.$null;
    goto block34;

  anon50_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.javax.crypto.BadPaddingException);
    assert {:clone} true;
    goto anon22;

  anon49_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon22;

  anon22:
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.String);
    r21 := $fakelocal_4;
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    call $r12, $exception := unsafe.java.util.Base64$getEncoder$();
    goto anon51_Then, anon51_Else;

  anon51_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon52_Then, anon52_Else;

  anon52_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto block34;

  anon52_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto anon26;

  anon51_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon26;

  anon26:
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    goto anon53_Then, anon53_Else;

  anon53_Then:
    assume {:partition} $r12 != unsafe.$null;
    $exception := $exception;
    goto anon29;

  anon53_Else:
    assume {:partition} $r12 == unsafe.$null;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon29:
    call $r13, $exception := unsafe.java.util.Base64$Encoder$encode$byte$lp$$rp$($r12, r5);
    goto anon54_Then, anon54_Else;

  anon54_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon55_Then, anon55_Else;

  anon55_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto block34;

  anon55_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto anon33;

  anon54_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon33;

  anon33:
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    $r14 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this := r21;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0 := $r13;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1 := $r14;
    havoc inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$heap := unsafe.$heap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1;
    assert {:sourceloc "String.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon3;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon3:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1];
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0];
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1;
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := 0;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon6;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon6:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
   >= inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block65;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1
   > inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon9;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon9:
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4 := unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon12;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon12:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2 := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2;
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon15;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4 := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3]];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
   + 1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block65:
    assert {:sourceloc "String.java", 29, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block66;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block66:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto anon33$1;

  anon33$1:
    goto anon56_Then, anon56_Else;

  anon56_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon57_Then, anon57_Else;

  anon57_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    r21 := unsafe.$null;
    goto block34;

  anon57_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto anon37;

  anon56_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon37;

  anon37:
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    r6 := r21;
    goto block35;

  block35:
    assert {:sourceloc "Security.java", 230, -1, -1, -1} true;
    goto block36;

  block34:
    assert {:sourceloc "Security.java", 232, -1, -1, -1} true;
    assume unsafe.$heap[$exception, unsafe.$type] <: unsafe.java.lang.Throwable;
    $r15 := $exception;
    assert {:sourceloc "Security.java", 228, -1, -1, -1} true;
    r18 := $r15;
    assert {:sourceloc "Security.java", 229, -1, -1, -1} true;
    call $fakelocal_6 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r22 := $fakelocal_6;
    assert {:sourceloc "Security.java", 229, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(r22, unsafe.$StringConst8, unsafe.$null, r18);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon58_Then, anon58_Else;

  anon58_Then:
    assume {:partition} unsafe.$heap[r22, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon40;

  anon58_Else:
    assume {:partition} !(unsafe.$heap[r22, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_7 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_7;
    return;

  anon40:
    r23 := r22;
    assert {:sourceloc "Security.java", 229, -1, -1, -1} true;
    $exception := r23;
    goto block37;

  block36:
    assert {:sourceloc "Security.java", 232, -1, -1, -1} true;
    $return := r6;
    goto block37;

  block37:
    return;
}



implementation unsafe.org.openmrs.util.Security$encrypt$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r3: ref;
  var $r1: ref;
  var r0: ref;
  var $r2: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0: int;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$r5: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$r0: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$r6: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$r3: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$r7: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$return: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r5: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0: int;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$r7: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r3: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r3: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r5: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r6: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r15: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r4: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r14: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r1: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r23: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r2: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r13: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r22: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r10: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__2: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception: ref;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$b3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$i4: int;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", 244, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Entry;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$Entry:
    havoc inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_1, inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_2, inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r5, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1, inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_3, inline$org.openmrs.util.Security$getSavedInitVector$$0$r0, inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_0, inline$org.openmrs.util.Security$getSavedInitVector$$0$r6, inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_4, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r3, inline$org.openmrs.util.Security$getSavedInitVector$$0$r7, inline$org.openmrs.util.Security$getSavedInitVector$$0$$return, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon0;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", 296, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.org.openmrs.api.context.Context$getRuntimeProperties$();
    assert {:sourceloc "Security.java", 296, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon16_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon16_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon16_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1 != unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon3;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon16_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1 == unsafe.$null;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon3:
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$r0, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.java.util.Properties$getProperty$java.lang.String_java.lang.String(inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1, unsafe.$StringConst10, unsafe.$StringConst11);
    assert {:sourceloc "Security.java", 299, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.org.springframework.util.StringUtils$hasText$java.lang.String(inline$org.openmrs.util.Security$getSavedInitVector$$0$r0);
    assert {:sourceloc "Security.java", 299, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon17_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon17_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon17_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0 == 0;
    assert {:sourceloc "Security.java", 299, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$block45;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon17_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0 != 0;
    assert {:sourceloc "Security.java", 299, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon6;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon6:
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.java.util.Base64$getDecoder$();
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon18_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon18_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon18_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4 != unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon9;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon18_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4 == unsafe.$null;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon9:
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$r5, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.java.util.Base64$Decoder$decode$java.lang.String(inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4, inline$org.openmrs.util.Security$getSavedInitVector$$0$r0);
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := inline$org.openmrs.util.Security$getSavedInitVector$$0$$r5;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$block46;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$block45:
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_2 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$r6 := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_2;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon19_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon19_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon19_Then:
    assume {:partition} unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon12;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon19_Else:
    assume {:partition} !(unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object));
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon12:
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$r3 := unsafe.$null;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$(inline$org.openmrs.util.Security$getSavedInitVector$$0$r6, unsafe.$StringConst12, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r3);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon20_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon20_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon20_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$getSavedInitVector$$0$r6, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon15;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon20_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$getSavedInitVector$$0$r6, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon15:
    inline$org.openmrs.util.Security$getSavedInitVector$$0$r7 := inline$org.openmrs.util.Security$getSavedInitVector$$0$r6;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$r7;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$block46;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$block46:
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$Return:
    $r1 := inline$org.openmrs.util.Security$getSavedInitVector$$0$$return;
    $exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Security.java", 244, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Entry;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$Entry:
    havoc inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_3, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r5, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_2, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_4, inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_1, inline$org.openmrs.util.Security$getSavedSecretKey$$0$r7, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r3, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon0;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", 328, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.org.openmrs.api.context.Context$getRuntimeProperties$();
    assert {:sourceloc "Security.java", 328, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon16_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon16_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon16_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1 != unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon3;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon16_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1 == unsafe.$null;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon3:
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.java.util.Properties$getProperty$java.lang.String_java.lang.String(inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1, unsafe.$StringConst13, unsafe.$StringConst14);
    assert {:sourceloc "Security.java", 331, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.org.springframework.util.StringUtils$hasText$java.lang.String(inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0);
    assert {:sourceloc "Security.java", 331, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon17_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon17_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon17_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0 == 0;
    assert {:sourceloc "Security.java", 331, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$block48;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon17_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0 != 0;
    assert {:sourceloc "Security.java", 331, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon6;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon6:
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.java.util.Base64$getDecoder$();
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon18_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon18_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon18_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4 != unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon9;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon18_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4 == unsafe.$null;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon9:
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r5, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.java.util.Base64$Decoder$decode$java.lang.String(inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4, inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0);
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r5;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$block49;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$block48:
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_2 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6 := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_2;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon19_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon19_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon19_Then:
    assume {:partition} unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon12;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon19_Else:
    assume {:partition} !(unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object));
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon12:
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r3 := unsafe.$null;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$(inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6, unsafe.$StringConst15, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r3);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon20_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon20_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon20_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon15;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon20_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon15:
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$r7 := inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$r7;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$block49;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$block49:
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return:
    $r2 := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return;
    $exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "Security.java", 244, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Entry;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Entry:
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0 := r0;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1 := $r1;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__2 := $r2;
    havoc inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r3, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r5, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r6, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r15, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r4, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r14, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r1, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r23, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r2, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r22, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r10, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$intArrHeap := unsafe.$intArrHeap;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon0;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r1 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r2 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__2;
    assert {:sourceloc "Security.java", 217, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0 := unsafe.$new(unsafe.javax.crypto.spec.IvParameterSpec);
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 217, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.spec.IvParameterSpec$$la$init$ra$$byte$lp$$rp$(inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r1);
    assert {:sourceloc "Security.java", 217, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r3 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19;
    assert {:sourceloc "Security.java", 218, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1 := unsafe.$new(unsafe.javax.crypto.spec.SecretKeySpec);
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "Security.java", 218, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.spec.SecretKeySpec$$la$init$ra$$byte$lp$$rp$_java.lang.String(inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r2, unsafe.$StringConst6);
    assert {:sourceloc "Security.java", 218, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r4 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block33;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block33:
    assert {:sourceloc "Security.java", 223, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.Cipher$getInstance$java.lang.String(unsafe.$StringConst7);
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon41_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon41_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon41_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon42_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon42_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon42_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.javax.crypto.NoSuchPaddingException;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block34;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon42_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.javax.crypto.NoSuchPaddingException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon4;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon41_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon4;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon4:
    assert {:sourceloc "Security.java", 224, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon43_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon43_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon43_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17
   != unsafe.$null;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon7;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon43_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon7:
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.Cipher$init$int_java.security.Key_java.security.spec.AlgorithmParameterSpec(inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17, 1, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r4, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r3);
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon44_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon44_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon44_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon45_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon45_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon45_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.InvalidAlgorithmParameterException;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block34;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon45_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.InvalidAlgorithmParameterException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon11;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon44_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon11;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon11:
    assert {:sourceloc "Security.java", 225, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 225, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon46_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon46_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon46_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0
   != unsafe.$null;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon14;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon46_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon14:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9;
    havoc inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return, inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r1 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$b3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$i4, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := 0;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block70;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b3 := inline$java.lang.String$getBytes$$0$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block71;

  inline$java.lang.String$getBytes$$0$block71:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$r2;
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$block72:
    goto inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return;

  inline$java.lang.String$getBytes$java.nio.charset.Charset$0$Return:
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r10 := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$return;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$java.lang.String$getBytes$java.nio.charset.Charset$0$$exception;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon14$1;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon14$1:
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon47_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon47_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon47_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon48_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon48_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon48_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block34;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon48_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon18;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon47_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon18;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon18:
    assert {:sourceloc "Security.java", 225, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r5, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.Cipher$doFinal$byte$lp$$rp$(inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r10);
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon49_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon49_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon49_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon50_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon50_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon50_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.javax.crypto.BadPaddingException;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block34;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon50_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.javax.crypto.BadPaddingException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon22;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon49_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon22;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon22:
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.String);
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4;
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.java.util.Base64$getEncoder$();
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon51_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon51_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon51_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon52_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon52_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon52_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block34;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon52_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon51_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon26:
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon53_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon53_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon53_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12
   != unsafe.$null;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon29;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon53_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12
   == unsafe.$null;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon29:
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.java.util.Base64$Encoder$encode$byte$lp$$rp$(inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r5);
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon54_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon54_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon54_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon55_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon55_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon55_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block34;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon55_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon33;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon54_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon33;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon33:
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r14 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r13;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r14;
    havoc inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$heap := unsafe.$heap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1;
    assert {:sourceloc "String.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon3;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon3:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1];
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0];
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1;
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := 0;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon6;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon6:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
   >= inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block65;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1
   > inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon9;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon9:
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4 := unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon12;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon12:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2 := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2;
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon15;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4 := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3]];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
   + 1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block65:
    assert {:sourceloc "String.java", 29, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block66;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block66:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return:
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon33$1;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon33$1:
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon56_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon56_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon56_Then:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon57_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon57_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon57_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21 := unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block34;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon57_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon37;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon56_Else:
    assume {:partition} inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon37;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon37:
    assert {:sourceloc "Security.java", 226, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r6 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block35;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block35:
    assert {:sourceloc "Security.java", 230, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block36;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block34:
    assert {:sourceloc "Security.java", 232, -1, -1, -1} true;
    assume unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r15 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    assert {:sourceloc "Security.java", 228, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r15;
    assert {:sourceloc "Security.java", 229, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r22 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6;
    assert {:sourceloc "Security.java", 229, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r22, unsafe.$StringConst8, unsafe.$null, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon58_Then, inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon58_Else;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon58_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r22, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon40;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon58_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r22, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon40:
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r23 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r22;
    assert {:sourceloc "Security.java", 229, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r23;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block37;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block36:
    assert {:sourceloc "Security.java", 232, -1, -1, -1} true;
    inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r6;
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block37;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block37:
    goto inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return:
    $r3 := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return;
    $exception := inline$org.openmrs.util.Security$encrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto anon0$3;

  anon0$3:
    assert {:sourceloc "Security.java", 244, -1, -1, -1} true;
    $return := $r3;
    goto block38;

  block38:
    return;
}



implementation unsafe.org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref)
{
  var r4: ref;
  var r20: ref;
  var r2: ref;
  var $fakelocal_2: ref;
  var r6: ref;
  var $r13: ref;
  var r17: ref;
  var $r9: ref;
  var r18: ref;
  var $fakelocal_5: ref;
  var r19: ref;
  var $fakelocal_1: ref;
  var $fakelocal_6: ref;
  var $r12: ref;
  var r16: ref;
  var r21: ref;
  var r1: ref;
  var $r10: ref;
  var r5: ref;
  var $fakelocal_0: ref;
  var $fakelocal_3: ref;
  var $fakelocal_4: ref;
  var r3: ref;
  var r0: ref;
  var r15: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r2 := $in_parameter__2;
    assert {:sourceloc "Security.java", 260, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.javax.crypto.spec.IvParameterSpec);
    r17 := $fakelocal_0;
    assert {:sourceloc "Security.java", 260, -1, -1, -1} true;
    call $exception := unsafe.javax.crypto.spec.IvParameterSpec$$la$init$ra$$byte$lp$$rp$(r17, r1);
    assert {:sourceloc "Security.java", 260, -1, -1, -1} true;
    r3 := r17;
    assert {:sourceloc "Security.java", 261, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.javax.crypto.spec.SecretKeySpec);
    r18 := $fakelocal_1;
    assert {:sourceloc "Security.java", 261, -1, -1, -1} true;
    call $exception := unsafe.javax.crypto.spec.SecretKeySpec$$la$init$ra$$byte$lp$$rp$_java.lang.String(r18, r2, unsafe.$StringConst6);
    assert {:sourceloc "Security.java", 261, -1, -1, -1} true;
    r4 := r18;
    goto block39;

  block39:
    assert {:sourceloc "Security.java", 265, -1, -1, -1} true;
    call r15, $exception := unsafe.javax.crypto.Cipher$getInstance$java.lang.String(unsafe.$StringConst7);
    goto anon34_Then, anon34_Else;

  anon34_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon35_Then, anon35_Else;

  anon35_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.javax.crypto.NoSuchPaddingException;
    $return := unsafe.$null;
    goto block40;

  anon35_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.javax.crypto.NoSuchPaddingException);
    assert {:clone} true;
    goto anon4;

  anon34_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "Security.java", 266, -1, -1, -1} true;
    goto anon36_Then, anon36_Else;

  anon36_Then:
    assume {:partition} r15 != unsafe.$null;
    $exception := $exception;
    goto anon7;

  anon36_Else:
    assume {:partition} r15 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon7:
    call $exception := unsafe.javax.crypto.Cipher$init$int_java.security.Key_java.security.spec.AlgorithmParameterSpec(r15, 2, r4, r3);
    goto anon37_Then, anon37_Else;

  anon37_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon38_Then, anon38_Else;

  anon38_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.InvalidAlgorithmParameterException;
    $return := unsafe.$null;
    goto block40;

  anon38_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.InvalidAlgorithmParameterException);
    assert {:clone} true;
    goto anon11;

  anon37_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon11;

  anon11:
    assert {:sourceloc "Security.java", 267, -1, -1, -1} true;
    call $r9, $exception := unsafe.java.util.Base64$getDecoder$();
    goto anon39_Then, anon39_Else;

  anon39_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon40_Then, anon40_Else;

  anon40_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto block40;

  anon40_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto anon15;

  anon39_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon15;

  anon15:
    assert {:sourceloc "Security.java", 267, -1, -1, -1} true;
    goto anon41_Then, anon41_Else;

  anon41_Then:
    assume {:partition} $r9 != unsafe.$null;
    $exception := $exception;
    goto anon18;

  anon41_Else:
    assume {:partition} $r9 == unsafe.$null;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon18:
    call $r10, $exception := unsafe.java.util.Base64$Decoder$decode$java.lang.String($r9, r0);
    goto anon42_Then, anon42_Else;

  anon42_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon43_Then, anon43_Else;

  anon43_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto block40;

  anon43_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto anon22;

  anon42_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon22;

  anon22:
    assert {:sourceloc "Security.java", 267, -1, -1, -1} true;
    call r6, $exception := unsafe.javax.crypto.Cipher$doFinal$byte$lp$$rp$(r15, $r10);
    goto anon44_Then, anon44_Else;

  anon44_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon45_Then, anon45_Else;

  anon45_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.javax.crypto.BadPaddingException;
    $return := unsafe.$null;
    goto block40;

  anon45_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.javax.crypto.BadPaddingException);
    assert {:clone} true;
    goto anon26;

  anon44_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon26;

  anon26:
    assert {:sourceloc "Security.java", 268, -1, -1, -1} true;
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.String);
    r19 := $fakelocal_4;
    assert {:sourceloc "Security.java", 268, -1, -1, -1} true;
    $r12 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 268, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this := r19;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0 := r6;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1 := $r12;
    havoc inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$heap := unsafe.$heap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1;
    assert {:sourceloc "String.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon3;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon3:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1];
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0];
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1;
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := 0;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon6;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon6:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
   >= inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block65;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1
   > inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon9;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon9:
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4 := unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon12;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon12:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2 := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2;
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon15;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4 := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3]];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
   + 1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block65:
    assert {:sourceloc "String.java", 29, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block66;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block66:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto anon26$1;

  anon26$1:
    goto anon46_Then, anon46_Else;

  anon46_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon47_Then, anon47_Else;

  anon47_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    r19 := unsafe.$null;
    goto block40;

  anon47_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto anon30;

  anon46_Else:
    assume {:partition} $exception == unsafe.$null;
    goto anon30;

  anon30:
    assert {:sourceloc "Security.java", 268, -1, -1, -1} true;
    r5 := r19;
    goto block41;

  block41:
    assert {:sourceloc "Security.java", 272, -1, -1, -1} true;
    goto block42;

  block40:
    assert {:sourceloc "Security.java", 274, -1, -1, -1} true;
    assume unsafe.$heap[$exception, unsafe.$type] <: unsafe.java.lang.Throwable;
    $r13 := $exception;
    assert {:sourceloc "Security.java", 270, -1, -1, -1} true;
    r16 := $r13;
    assert {:sourceloc "Security.java", 271, -1, -1, -1} true;
    call $fakelocal_5 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r20 := $fakelocal_5;
    assert {:sourceloc "Security.java", 271, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(r20, unsafe.$StringConst9, unsafe.$null, r16);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon48_Then, anon48_Else;

  anon48_Then:
    assume {:partition} unsafe.$heap[r20, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon33;

  anon48_Else:
    assume {:partition} !(unsafe.$heap[r20, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_6 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_6;
    return;

  anon33:
    r21 := r20;
    assert {:sourceloc "Security.java", 271, -1, -1, -1} true;
    $exception := r21;
    goto block43;

  block42:
    assert {:sourceloc "Security.java", 274, -1, -1, -1} true;
    $return := r5;
    goto block43;

  block43:
    return;
}



implementation unsafe.org.openmrs.util.Security$decrypt$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r1: ref;
  var $r3: ref;
  var r0: ref;
  var $r2: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0: int;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$r5: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$r0: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$r6: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$r3: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$r7: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$return: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception: ref;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getSavedInitVector$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r5: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0: int;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$r7: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r3: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception: ref;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$getSavedSecretKey$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r4: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r2: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r6: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r13: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r16: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r1: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r10: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r5: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r3: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r15: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__2: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception: ref;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$objIndex: int;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$heap: $heap_type;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$arrSizeHeap: [ref]int;
  var inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$heap: $heap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Security.java", 286, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Entry;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$Entry:
    havoc inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_1, inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_2, inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r5, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1, inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_3, inline$org.openmrs.util.Security$getSavedInitVector$$0$r0, inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_0, inline$org.openmrs.util.Security$getSavedInitVector$$0$r6, inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_4, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r3, inline$org.openmrs.util.Security$getSavedInitVector$$0$r7, inline$org.openmrs.util.Security$getSavedInitVector$$0$$return, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon0;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", 296, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.org.openmrs.api.context.Context$getRuntimeProperties$();
    assert {:sourceloc "Security.java", 296, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon16_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon16_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon16_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1 != unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon3;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon16_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1 == unsafe.$null;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon3:
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$r0, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.java.util.Properties$getProperty$java.lang.String_java.lang.String(inline$org.openmrs.util.Security$getSavedInitVector$$0$$r1, unsafe.$StringConst10, unsafe.$StringConst11);
    assert {:sourceloc "Security.java", 299, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.org.springframework.util.StringUtils$hasText$java.lang.String(inline$org.openmrs.util.Security$getSavedInitVector$$0$r0);
    assert {:sourceloc "Security.java", 299, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon17_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon17_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon17_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0 == 0;
    assert {:sourceloc "Security.java", 299, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$block45;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon17_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$z0 != 0;
    assert {:sourceloc "Security.java", 299, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon6;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon6:
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.java.util.Base64$getDecoder$();
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon18_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon18_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon18_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4 != unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon9;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon18_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4 == unsafe.$null;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon9:
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$r5, inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.java.util.Base64$Decoder$decode$java.lang.String(inline$org.openmrs.util.Security$getSavedInitVector$$0$$r4, inline$org.openmrs.util.Security$getSavedInitVector$$0$r0);
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := inline$org.openmrs.util.Security$getSavedInitVector$$0$$r5;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$block46;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$block45:
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_2 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$r6 := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_2;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon19_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon19_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon19_Then:
    assume {:partition} unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon12;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon19_Else:
    assume {:partition} !(unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object));
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon12:
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$r3 := unsafe.$null;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$(inline$org.openmrs.util.Security$getSavedInitVector$$0$r6, unsafe.$StringConst12, inline$org.openmrs.util.Security$getSavedInitVector$$0$$r3);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon20_Then, inline$org.openmrs.util.Security$getSavedInitVector$$0$anon20_Else;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon20_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$getSavedInitVector$$0$r6, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$anon15;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon20_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$getSavedInitVector$$0$r6, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$anon15:
    inline$org.openmrs.util.Security$getSavedInitVector$$0$r7 := inline$org.openmrs.util.Security$getSavedInitVector$$0$r6;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$r7;
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$block46;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$block46:
    goto inline$org.openmrs.util.Security$getSavedInitVector$$0$Return;

  inline$org.openmrs.util.Security$getSavedInitVector$$0$Return:
    $r1 := inline$org.openmrs.util.Security$getSavedInitVector$$0$$return;
    $exception := inline$org.openmrs.util.Security$getSavedInitVector$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Security.java", 286, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Entry;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$Entry:
    havoc inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_3, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r5, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_2, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_4, inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_1, inline$org.openmrs.util.Security$getSavedSecretKey$$0$r7, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r3, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$heap := unsafe.$heap;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon0;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", 328, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.org.openmrs.api.context.Context$getRuntimeProperties$();
    assert {:sourceloc "Security.java", 328, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon16_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon16_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon16_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1 != unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon3;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon16_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1 == unsafe.$null;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_0;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon3:
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.java.util.Properties$getProperty$java.lang.String_java.lang.String(inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r1, unsafe.$StringConst13, unsafe.$StringConst14);
    assert {:sourceloc "Security.java", 331, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.org.springframework.util.StringUtils$hasText$java.lang.String(inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0);
    assert {:sourceloc "Security.java", 331, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon17_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon17_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon17_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0 == 0;
    assert {:sourceloc "Security.java", 331, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$block48;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon17_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$z0 != 0;
    assert {:sourceloc "Security.java", 331, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon6;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon6:
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.java.util.Base64$getDecoder$();
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon18_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon18_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon18_Then:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4 != unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon9;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon18_Else:
    assume {:partition} inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4 == unsafe.$null;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_1;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon9:
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r5, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.java.util.Base64$Decoder$decode$java.lang.String(inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r4, inline$org.openmrs.util.Security$getSavedSecretKey$$0$r0);
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r5;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$block49;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$block48:
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_2 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6 := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_2;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon19_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon19_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon19_Then:
    assume {:partition} unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon12;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon19_Else:
    assume {:partition} !(unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object));
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon12:
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r3 := unsafe.$null;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$(inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6, unsafe.$StringConst15, inline$org.openmrs.util.Security$getSavedSecretKey$$0$$r3);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon20_Then, inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon20_Else;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon20_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon15;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon20_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$fakelocal_4;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$anon15:
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$r7 := inline$org.openmrs.util.Security$getSavedSecretKey$$0$r6;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$r7;
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$block49;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$block49:
    goto inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return;

  inline$org.openmrs.util.Security$getSavedSecretKey$$0$Return:
    $r2 := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$return;
    $exception := inline$org.openmrs.util.Security$getSavedSecretKey$$0$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "Security.java", 286, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Entry;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Entry:
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0 := r0;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1 := $r1;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__2 := $r2;
    havoc inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r4, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r2, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r6, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r16, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r1, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r10, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r5, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r3, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r15, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$objIndex := unsafe.$objIndex;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$heap := unsafe.$heap;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$intArrHeap := unsafe.$intArrHeap;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon0;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r1 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r2 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__2;
    assert {:sourceloc "Security.java", 260, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0 := unsafe.$new(unsafe.javax.crypto.spec.IvParameterSpec);
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0;
    assert {:sourceloc "Security.java", 260, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.spec.IvParameterSpec$$la$init$ra$$byte$lp$$rp$(inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r1);
    assert {:sourceloc "Security.java", 260, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r3 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r17;
    assert {:sourceloc "Security.java", 261, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1 := unsafe.$new(unsafe.javax.crypto.spec.SecretKeySpec);
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "Security.java", 261, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.spec.SecretKeySpec$$la$init$ra$$byte$lp$$rp$_java.lang.String(inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r2, unsafe.$StringConst6);
    assert {:sourceloc "Security.java", 261, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r4 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r18;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block39;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block39:
    assert {:sourceloc "Security.java", 265, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r15, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.Cipher$getInstance$java.lang.String(unsafe.$StringConst7);
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.javax.crypto.NoSuchPaddingException;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block40;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.javax.crypto.NoSuchPaddingException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon4;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon4;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon4:
    assert {:sourceloc "Security.java", 266, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r15
   != unsafe.$null;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon7;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r15
   == unsafe.$null;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon7:
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.Cipher$init$int_java.security.Key_java.security.spec.AlgorithmParameterSpec(inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r15, 2, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r4, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r3);
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.InvalidAlgorithmParameterException;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block40;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.InvalidAlgorithmParameterException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon11;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon11;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon11:
    assert {:sourceloc "Security.java", 267, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.java.util.Base64$getDecoder$();
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon40_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon40_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon40_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block40;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon40_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon15;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon15;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon15:
    assert {:sourceloc "Security.java", 267, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon41_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon41_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon41_Then:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9
   != unsafe.$null;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon18;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon41_Else:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9
   == unsafe.$null;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon18:
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r10, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.java.util.Base64$Decoder$decode$java.lang.String(inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r0);
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon42_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon42_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon42_Then:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon43_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon43_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon43_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block40;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon43_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon22;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon42_Else:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon22;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon22:
    assert {:sourceloc "Security.java", 267, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r6, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.javax.crypto.Cipher$doFinal$byte$lp$$rp$(inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r15, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r10);
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon44_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon44_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon44_Then:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon45_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon45_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon45_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.javax.crypto.BadPaddingException;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block40;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon45_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.javax.crypto.BadPaddingException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon44_Else:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon26:
    assert {:sourceloc "Security.java", 268, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.String);
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4;
    assert {:sourceloc "Security.java", 268, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12 := unsafe.java.nio.charset.Charset$java.nio.charset.StandardCharsets$UTF_8336;
    assert {:sourceloc "Security.java", 268, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r6;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r12;
    havoc inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$heap := unsafe.$heap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$intArrHeap := unsafe.$intArrHeap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1, unsafe.$type]
   <: unsafe.java.nio.charset.Charset;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$in_parameter__1;
    assert {:sourceloc "String.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon0$1:
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon3;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon16_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon3:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1];
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i0];
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_1;
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r3];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := 0;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon6;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1
   == unsafe.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_2;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon6:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
   >= inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block65;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$i1
   > inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon9;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon9:
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4 := unsafe.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon12;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_3;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon12:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2 := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$r1][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$b2;
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon15;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
     >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$fakelocal_4;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4 := unsafe.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$r4][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$c3]];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$i4
   + 1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block64;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block65:
    assert {:sourceloc "String.java", 29, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block66;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$block66:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$Return:
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset$0$$exception;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon26$1;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon26$1:
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon46_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon46_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon46_Then:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon47_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon47_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon47_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException;
    assert {:clone} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19 := unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block40;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon47_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.security.GeneralSecurityException);
    assert {:clone} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon30;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon46_Else:
    assume {:partition} inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == unsafe.$null;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon30;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon30:
    assert {:sourceloc "Security.java", 268, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r5 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r19;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block41;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block41:
    assert {:sourceloc "Security.java", 272, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block42;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block40:
    assert {:sourceloc "Security.java", 274, -1, -1, -1} true;
    assume unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r13 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    assert {:sourceloc "Security.java", 270, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r16 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$r13;
    assert {:sourceloc "Security.java", 271, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5;
    assert {:sourceloc "Security.java", 271, -1, -1, -1} true;
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20, unsafe.$StringConst9, unsafe.$null, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r16);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon48_Then, inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon48_Else;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon48_Then:
    assume {:partition} unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20, unsafe.$type]
   <: unsafe.java.lang.Throwable;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon33;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon48_Else:
    assume {:partition} !(unsafe.$heap[inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20, unsafe.$type]
   <: unsafe.java.lang.Throwable);
    call inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := unsafe.$null;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$anon33:
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r20;
    assert {:sourceloc "Security.java", 271, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r21;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block43;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block42:
    assert {:sourceloc "Security.java", 274, -1, -1, -1} true;
    inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$r5;
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block43;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$block43:
    goto inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$Return:
    $r3 := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$return;
    $exception := inline$org.openmrs.util.Security$decrypt$java.lang.String_byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto anon0$3;

  anon0$3:
    assert {:sourceloc "Security.java", 286, -1, -1, -1} true;
    $return := $r3;
    goto block44;

  block44:
    return;
}



implementation unsafe.org.openmrs.util.Security$getSavedInitVector$() returns ($return: ref, $exception: ref)
{
  var $fakelocal_1: ref;
  var $fakelocal_2: ref;
  var $z0: int;
  var $r4: ref;
  var $r5: ref;
  var $r1: ref;
  var $fakelocal_3: ref;
  var r0: ref;
  var $fakelocal_0: ref;
  var r6: ref;
  var $fakelocal_4: ref;
  var $r3: ref;
  var r7: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", 296, -1, -1, -1} true;
    call $r1, $exception := unsafe.org.openmrs.api.context.Context$getRuntimeProperties$();
    assert {:sourceloc "Security.java", 296, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Then:
    assume {:partition} $r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon16_Else:
    assume {:partition} $r1 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    call r0, $exception := unsafe.java.util.Properties$getProperty$java.lang.String_java.lang.String($r1, unsafe.$StringConst10, unsafe.$StringConst11);
    assert {:sourceloc "Security.java", 299, -1, -1, -1} true;
    call $z0, $exception := unsafe.org.springframework.util.StringUtils$hasText$java.lang.String(r0);
    assert {:sourceloc "Security.java", 299, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Then:
    assume {:partition} $z0 == 0;
    assert {:sourceloc "Security.java", 299, -1, -1, -1} {:comment "thenblock"} true;
    goto block45;

  anon17_Else:
    assume {:partition} $z0 != 0;
    assert {:sourceloc "Security.java", 299, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    call $r4, $exception := unsafe.java.util.Base64$getDecoder$();
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} $r4 != unsafe.$null;
    $exception := $exception;
    goto anon9;

  anon18_Else:
    assume {:partition} $r4 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon9:
    call $r5, $exception := unsafe.java.util.Base64$Decoder$decode$java.lang.String($r4, r0);
    assert {:sourceloc "Security.java", 300, -1, -1, -1} true;
    $return := $r5;
    goto block46;

  block45:
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    call $fakelocal_2 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r6 := $fakelocal_2;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object);
    $exception := $exception;
    goto anon12;

  anon19_Else:
    assume {:partition} !(unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object));
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon12:
    $r3 := unsafe.$null;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$(r6, unsafe.$StringConst12, $r3);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} unsafe.$heap[r6, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon15;

  anon20_Else:
    assume {:partition} !(unsafe.$heap[r6, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon15:
    r7 := r6;
    assert {:sourceloc "Security.java", 303, -1, -1, -1} true;
    $exception := r7;
    goto block46;

  block46:
    return;
}



implementation unsafe.org.openmrs.util.Security$generateNewInitVector$() returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var $fakelocal_1: ref;
  var $r1: ref;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", 315, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[$fakelocal_0 := 16];
    r0 := $fakelocal_0;
    assert {:sourceloc "Security.java", 316, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.java.security.SecureRandom);
    $r1 := $fakelocal_1;
    assert {:sourceloc "Security.java", 316, -1, -1, -1} true;
    call $exception := unsafe.java.security.SecureRandom$$la$init$ra$$($r1);
    assert {:sourceloc "Security.java", 316, -1, -1, -1} true;
    call $exception := unsafe.java.security.SecureRandom$nextBytes$byte$lp$$rp$($r1, r0);
    assert {:sourceloc "Security.java", 318, -1, -1, -1} true;
    $return := r0;
    goto block47;

  block47:
    return;
}



implementation unsafe.org.openmrs.util.Security$getSavedSecretKey$() returns ($return: ref, $exception: ref)
{
  var $fakelocal_3: ref;
  var $r4: ref;
  var $r5: ref;
  var $fakelocal_0: ref;
  var $fakelocal_2: ref;
  var $r1: ref;
  var $fakelocal_4: ref;
  var r0: ref;
  var r6: ref;
  var $z0: int;
  var $fakelocal_1: ref;
  var r7: ref;
  var $r3: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", 328, -1, -1, -1} true;
    call $r1, $exception := unsafe.org.openmrs.api.context.Context$getRuntimeProperties$();
    assert {:sourceloc "Security.java", 328, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Then:
    assume {:partition} $r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon16_Else:
    assume {:partition} $r1 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    call r0, $exception := unsafe.java.util.Properties$getProperty$java.lang.String_java.lang.String($r1, unsafe.$StringConst13, unsafe.$StringConst14);
    assert {:sourceloc "Security.java", 331, -1, -1, -1} true;
    call $z0, $exception := unsafe.org.springframework.util.StringUtils$hasText$java.lang.String(r0);
    assert {:sourceloc "Security.java", 331, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Then:
    assume {:partition} $z0 == 0;
    assert {:sourceloc "Security.java", 331, -1, -1, -1} {:comment "thenblock"} true;
    goto block48;

  anon17_Else:
    assume {:partition} $z0 != 0;
    assert {:sourceloc "Security.java", 331, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    call $r4, $exception := unsafe.java.util.Base64$getDecoder$();
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} $r4 != unsafe.$null;
    $exception := $exception;
    goto anon9;

  anon18_Else:
    assume {:partition} $r4 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon9:
    call $r5, $exception := unsafe.java.util.Base64$Decoder$decode$java.lang.String($r4, r0);
    assert {:sourceloc "Security.java", 332, -1, -1, -1} true;
    $return := $r5;
    goto block49;

  block48:
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    call $fakelocal_2 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r6 := $fakelocal_2;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object);
    $exception := $exception;
    goto anon12;

  anon19_Else:
    assume {:partition} !(unsafe.$heap[unsafe.$null, unsafe.$type]
   <: unsafe.$arrayType(unsafe.java.lang.Object));
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon12:
    $r3 := unsafe.$null;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$(r6, unsafe.$StringConst15, $r3);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} unsafe.$heap[r6, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon15;

  anon20_Else:
    assume {:partition} !(unsafe.$heap[r6, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon15:
    r7 := r6;
    assert {:sourceloc "Security.java", 335, -1, -1, -1} true;
    $exception := r7;
    goto block49;

  block49:
    return;
}



implementation unsafe.org.openmrs.util.Security$generateNewSecretKey$() returns ($return: ref, $exception: ref)
{
  var $r2: ref;
  var r7: ref;
  var r5: ref;
  var $fakelocal_0: ref;
  var r4: ref;
  var $r1: ref;
  var r6: ref;
  var $fakelocal_3: ref;
  var r0: ref;
  var $fakelocal_1: ref;
  var $fakelocal_2: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    $exception := unsafe.$null;
    goto block50;

  block50:
    assert {:sourceloc "Security.java", 349, -1, -1, -1} true;
    call r0, $exception := unsafe.javax.crypto.KeyGenerator$getInstance$java.lang.String(unsafe.$StringConst6);
    goto anon13_Then, anon13_Else;

  anon13_Then:
    assume {:partition} $exception != unsafe.$null;
    goto anon14_Then, anon14_Else;

  anon14_Then:
    assume {:partition} unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException;
    $return := unsafe.$null;
    goto block51;

  anon14_Else:
    assume {:partition} !(unsafe.$heap[$exception, unsafe.$type]
   <: unsafe.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto block52;

  anon13_Else:
    assume {:partition} $exception == unsafe.$null;
    goto block52;

  block52:
    assert {:sourceloc "Security.java", 353, -1, -1, -1} true;
    goto block53;

  block51:
    assert {:sourceloc "Security.java", 359, -1, -1, -1} true;
    assume unsafe.$heap[$exception, unsafe.$type] <: unsafe.java.lang.Throwable;
    $r2 := $exception;
    assert {:sourceloc "Security.java", 351, -1, -1, -1} true;
    r4 := $r2;
    assert {:sourceloc "Security.java", 352, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.org.openmrs.api.APIException);
    r6 := $fakelocal_0;
    assert {:sourceloc "Security.java", 352, -1, -1, -1} true;
    call $exception := unsafe.org.openmrs.api.APIException$$la$init$ra$$java.lang.String_java.lang.Object$lp$$rp$_java.lang.Throwable(r6, unsafe.$StringConst16, unsafe.$null, r4);
    assert {:sourceloc "Security.java", -1, -1, -1, -1} true;
    goto anon15_Then, anon15_Else;

  anon15_Then:
    assume {:partition} unsafe.$heap[r6, unsafe.$type] <: unsafe.java.lang.Throwable;
    $exception := $exception;
    goto anon6;

  anon15_Else:
    assume {:partition} !(unsafe.$heap[r6, unsafe.$type] <: unsafe.java.lang.Throwable);
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon6:
    r7 := r6;
    assert {:sourceloc "Security.java", 352, -1, -1, -1} true;
    $exception := r7;
    goto block54;

  block53:
    assert {:sourceloc "Security.java", 354, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon9;

  anon16_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon9:
    call $exception := unsafe.javax.crypto.KeyGenerator$init$int(r0, 128);
    assert {:sourceloc "Security.java", 357, -1, -1, -1} true;
    call r5, $exception := unsafe.javax.crypto.KeyGenerator$generateKey$(r0);
    assert {:sourceloc "Security.java", 359, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Then:
    assume {:partition} r5 != unsafe.$null;
    $exception := $exception;
    goto anon12;

  anon17_Else:
    assume {:partition} r5 == unsafe.$null;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon12:
    call $r1, $exception := unsafe.java.security.Key$getEncoded$(r5);
    assert {:sourceloc "Security.java", 359, -1, -1, -1} true;
    $return := $r1;
    goto block54;

  block54:
    return;
}



implementation unsafe.org.openmrs.util.Security$$la$clinit$ra$$() returns ($exception: ref)
{
  var $r0: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    $exception := unsafe.$null;
    assert {:sourceloc "Security.java", 43, -1, -1, -1} true;
    call $r0, $exception := unsafe.org.slf4j.LoggerFactory$getLogger$java.lang.Class(unsafe.CC$org$_$openmrs$_$util$_$Security);
    assert {:sourceloc "Security.java", 43, -1, -1, -1} true;
    unsafe.org.slf4j.Logger$org.openmrs.util.Security$log259 := $r0;
    assert {:sourceloc "Security.java", 43, -1, -1, -1} true;
    goto block55;

  block55:
    return;
}



implementation unsafe.java.nio.charset.Charset$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Charset.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.nio.charset.Charset;
    assume {:sourceloc "Charset.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "Charset.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Charset.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Charset.java", 3, -1, -1, -1} true;
    goto block56;

  block56:
    return;
}



implementation unsafe.java.lang.StringBuilder$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := $fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto block57;

  block57:
    return;
}



implementation unsafe.java.lang.StringBuilder$append$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r3: ref;
  var $fakelocal_0: ref;
  var $fakelocal_2: ref;
  var $r2: ref;
  var r0: ref;
  var $r6: ref;
  var $r5: ref;
  var r1: ref;
  var $r4: ref;
  var $fakelocal_1: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.String;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    $exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    $r2 := $fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := $r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    $r3 := unsafe.$heap[r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := $r2;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := $r3;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    $r4 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Then:
    assume {:partition} $r4 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon7_Else:
    assume {:partition} $r4 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon3:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := $r4;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := r1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    $r5 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Then:
    assume {:partition} $r5 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon8_Else:
    assume {:partition} $r5 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon6:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := $r5;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    $r6 := inline$java.lang.StringBuilder$toString$$2$$return;
    $exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := $r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    $return := r0;
    goto block58;

  block58:
    return;
}



implementation unsafe.java.lang.StringBuilder$append$char($this: ref, $in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var $r4: ref;
  var r1: ref;
  var $r6: ref;
  var $r8: ref;
  var $fakelocal_2: ref;
  var $r2: ref;
  var c0: int;
  var $r5: ref;
  var $fakelocal_4: ref;
  var $fakelocal_3: ref;
  var $fakelocal_0: ref;
  var $fakelocal_1: ref;
  var $fakelocal_5: ref;
  var $r7: ref;
  var $r3: ref;
  var r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$append$char$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$0$r1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$0$c0: int;
  var inline$java.lang.StringBuilder$append$char$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$0$r0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$this: ref;
  var inline$java.lang.StringBuilder$append$char$0$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$0$$return: ref;
  var inline$java.lang.StringBuilder$append$char$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$2$r0: ref;
  var inline$java.lang.StringBuilder$toString$$2$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$2$$this: ref;
  var inline$java.lang.StringBuilder$toString$$2$$return: ref;
  var inline$java.lang.StringBuilder$toString$$2$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$3$r0: ref;
  var inline$java.lang.StringBuilder$toString$$3$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$3$$this: ref;
  var inline$java.lang.StringBuilder$toString$$3$$return: ref;
  var inline$java.lang.StringBuilder$toString$$3$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    $exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    c0 := $in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[$fakelocal_0 := 1];
    $r2 := $fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto anon10_Then, anon10_Else;

  anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[$r2] && 0 >= 0;
    $exception := $exception;
    goto anon3;

  anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[$r2] && 0 >= 0);
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r2 := unsafe.$intArrHeap[$r2][0 := c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    r1 := $r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    $r3 := $fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := $r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    $r4 := unsafe.$heap[r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := $r3;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := $r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    $r5 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto anon3$2;

  anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    $r6 := $fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := $r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto anon3$3;

  anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto anon11_Then, anon11_Else;

  anon11_Then:
    assume {:partition} $r5 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon11_Else:
    assume {:partition} $r5 == unsafe.$null;
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$this := $r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0 := $r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$0$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$Entry;

  inline$java.lang.StringBuilder$append$char$0$Entry:
    inline$java.lang.StringBuilder$append$char$0$$this := inline$java.lang.StringBuilder$append$java.lang.Object$0$r0;
    inline$java.lang.StringBuilder$append$char$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0;
    havoc inline$java.lang.StringBuilder$append$char$0$$r4, inline$java.lang.StringBuilder$append$char$0$r1, inline$java.lang.StringBuilder$append$char$0$$r6, inline$java.lang.StringBuilder$append$char$0$$r8, inline$java.lang.StringBuilder$append$char$0$$fakelocal_2, inline$java.lang.StringBuilder$append$char$0$$r2, inline$java.lang.StringBuilder$append$char$0$c0, inline$java.lang.StringBuilder$append$char$0$$r5, inline$java.lang.StringBuilder$append$char$0$$fakelocal_4, inline$java.lang.StringBuilder$append$char$0$$fakelocal_3, inline$java.lang.StringBuilder$append$char$0$$fakelocal_0, inline$java.lang.StringBuilder$append$char$0$$fakelocal_1, inline$java.lang.StringBuilder$append$char$0$$fakelocal_5, inline$java.lang.StringBuilder$append$char$0$$r7, inline$java.lang.StringBuilder$append$char$0$$r3, inline$java.lang.StringBuilder$append$char$0$r0, inline$java.lang.StringBuilder$append$char$0$$return, inline$java.lang.StringBuilder$append$char$0$$exception;
    inline$java.lang.StringBuilder$append$char$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$char$0$anon0;

  inline$java.lang.StringBuilder$append$char$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r0 := inline$java.lang.StringBuilder$append$char$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$c0 := inline$java.lang.StringBuilder$append$char$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$0$$r2 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon10_Then, inline$java.lang.StringBuilder$append$char$0$anon10_Else;

  inline$java.lang.StringBuilder$append$char$0$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3;

  inline$java.lang.StringBuilder$append$char$0$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2][0 := inline$java.lang.StringBuilder$append$char$0$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r1 := inline$java.lang.StringBuilder$append$char$0$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$0$$r3 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$2$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$2$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$$la$init$ra$$$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$2$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$2$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$2$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$2$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$1;

  inline$java.lang.StringBuilder$append$char$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$1$$r3, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$1$$r2, inline$java.lang.StringBuilder$append$java.lang.String$1$r0, inline$java.lang.StringBuilder$append$java.lang.String$1$$r6, inline$java.lang.StringBuilder$append$java.lang.String$1$$r5, inline$java.lang.StringBuilder$append$java.lang.String$1$r1, inline$java.lang.StringBuilder$append$java.lang.String$1$$r4, inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$1$$return, inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r0 := inline$java.lang.StringBuilder$append$java.lang.String$1$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$r1 := inline$java.lang.StringBuilder$append$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$3$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$3$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.StringBuilder$$la$init$ra$$$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$3$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$3$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$3$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$3$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$1$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$1$$r5;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$1$$r6 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$1$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$1$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$1$$return := inline$java.lang.StringBuilder$append$java.lang.String$1$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$1$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$1$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$1$Return:
    inline$java.lang.StringBuilder$append$char$0$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$1$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$2;

  inline$java.lang.StringBuilder$append$char$0$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$0$$r6 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this := inline$java.lang.StringBuilder$append$char$0$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$3;

  inline$java.lang.StringBuilder$append$char$0$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon11_Then, inline$java.lang.StringBuilder$append$char$0$anon11_Else;

  inline$java.lang.StringBuilder$append$char$0$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6;

  inline$java.lang.StringBuilder$append$char$0$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon6:
    assume false;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon12_Then, inline$java.lang.StringBuilder$append$char$0$anon12_Else;

  inline$java.lang.StringBuilder$append$char$0$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9;

  inline$java.lang.StringBuilder$append$char$0$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$2$Entry;

  inline$java.lang.StringBuilder$toString$$2$Entry:
    inline$java.lang.StringBuilder$toString$$2$$this := inline$java.lang.StringBuilder$append$char$0$$r7;
    havoc inline$java.lang.StringBuilder$toString$$2$r0, inline$java.lang.StringBuilder$toString$$2$$r1, inline$java.lang.StringBuilder$toString$$2$$return, inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$toString$$2$anon0;

  inline$java.lang.StringBuilder$toString$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$2$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$r0 := inline$java.lang.StringBuilder$toString$$2$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$2$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$2$$return := inline$java.lang.StringBuilder$toString$$2$$r1;
    goto inline$java.lang.StringBuilder$toString$$2$block61;

  inline$java.lang.StringBuilder$toString$$2$block61:
    goto inline$java.lang.StringBuilder$toString$$2$Return;

  inline$java.lang.StringBuilder$toString$$2$Return:
    inline$java.lang.StringBuilder$append$char$0$$r8 := inline$java.lang.StringBuilder$toString$$2$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$toString$$2$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9$1;

  inline$java.lang.StringBuilder$append$char$0$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$0$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$return := inline$java.lang.StringBuilder$append$char$0$r0;
    goto inline$java.lang.StringBuilder$append$char$0$block59;

  inline$java.lang.StringBuilder$append$char$0$block59:
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3 := inline$java.lang.StringBuilder$append$char$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Return:
    $r7 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto anon12_Then, anon12_Else;

  anon12_Then:
    assume {:partition} $r7 != unsafe.$null;
    $exception := $exception;
    goto anon9;

  anon12_Else:
    assume {:partition} $r7 == unsafe.$null;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon9:
    goto inline$java.lang.StringBuilder$toString$$3$Entry;

  inline$java.lang.StringBuilder$toString$$3$Entry:
    inline$java.lang.StringBuilder$toString$$3$$this := $r7;
    havoc inline$java.lang.StringBuilder$toString$$3$r0, inline$java.lang.StringBuilder$toString$$3$$r1, inline$java.lang.StringBuilder$toString$$3$$return, inline$java.lang.StringBuilder$toString$$3$$exception;
    goto inline$java.lang.StringBuilder$toString$$3$anon0;

  inline$java.lang.StringBuilder$toString$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$3$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$r0 := inline$java.lang.StringBuilder$toString$$3$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$3$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$3$$return := inline$java.lang.StringBuilder$toString$$3$$r1;
    goto inline$java.lang.StringBuilder$toString$$3$block61;

  inline$java.lang.StringBuilder$toString$$3$block61:
    goto inline$java.lang.StringBuilder$toString$$3$Return;

  inline$java.lang.StringBuilder$toString$$3$Return:
    $r8 := inline$java.lang.StringBuilder$toString$$3$$return;
    $exception := inline$java.lang.StringBuilder$toString$$3$$exception;
    goto anon9$1;

  anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := $r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    $return := r0;
    goto block59;

  block59:
    return;
}



implementation unsafe.java.lang.StringBuilder$append$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r3: ref;
  var $c0: int;
  var r0: ref;
  var $fakelocal_0: ref;
  var r1: ref;
  var $r2: ref;
  var $fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$char$0$r1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r8: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$char$0$c0: int;
  var inline$java.lang.StringBuilder$append$char$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$char$0$$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r7: ref;
  var inline$java.lang.StringBuilder$append$char$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$char$0$r0: ref;
  var inline$java.lang.StringBuilder$append$char$0$$this: ref;
  var inline$java.lang.StringBuilder$append$char$0$$in_parameter__0: int;
  var inline$java.lang.StringBuilder$append$char$0$$return: ref;
  var inline$java.lang.StringBuilder$append$char$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$char$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$char$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$char$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$append$char$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$r4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String$0$$stringSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$r0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex: int;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap: $heap_type;
  var inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap: [ref]int;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.lang.StringBuilder$toString$$0$r0: ref;
  var inline$java.lang.StringBuilder$toString$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$0$$this: ref;
  var inline$java.lang.StringBuilder$toString$$0$$return: ref;
  var inline$java.lang.StringBuilder$toString$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$this: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$toString$$1$r0: ref;
  var inline$java.lang.StringBuilder$toString$$1$$r1: ref;
  var inline$java.lang.StringBuilder$toString$$1$$this: ref;
  var inline$java.lang.StringBuilder$toString$$1$$return: ref;
  var inline$java.lang.StringBuilder$toString$$1$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.Object;
    $exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Then:
    assume {:partition} unsafe.$heap[r1, unsafe.$type] <: unsafe.java.lang.Character;
    $exception := $exception;
    goto anon3;

  anon7_Else:
    assume {:partition} !(unsafe.$heap[r1, unsafe.$type] <: unsafe.java.lang.Character);
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    $r2 := r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Then:
    assume {:partition} $r2 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon8_Else:
    assume {:partition} $r2 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon6:
    call $c0, $exception := unsafe.java.lang.Character$charValue$($r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$Entry;

  inline$java.lang.StringBuilder$append$char$0$Entry:
    inline$java.lang.StringBuilder$append$char$0$$this := r0;
    inline$java.lang.StringBuilder$append$char$0$$in_parameter__0 := $c0;
    havoc inline$java.lang.StringBuilder$append$char$0$$r4, inline$java.lang.StringBuilder$append$char$0$r1, inline$java.lang.StringBuilder$append$char$0$$r6, inline$java.lang.StringBuilder$append$char$0$$r8, inline$java.lang.StringBuilder$append$char$0$$fakelocal_2, inline$java.lang.StringBuilder$append$char$0$$r2, inline$java.lang.StringBuilder$append$char$0$c0, inline$java.lang.StringBuilder$append$char$0$$r5, inline$java.lang.StringBuilder$append$char$0$$fakelocal_4, inline$java.lang.StringBuilder$append$char$0$$fakelocal_3, inline$java.lang.StringBuilder$append$char$0$$fakelocal_0, inline$java.lang.StringBuilder$append$char$0$$fakelocal_1, inline$java.lang.StringBuilder$append$char$0$$fakelocal_5, inline$java.lang.StringBuilder$append$char$0$$r7, inline$java.lang.StringBuilder$append$char$0$$r3, inline$java.lang.StringBuilder$append$char$0$r0, inline$java.lang.StringBuilder$append$char$0$$return, inline$java.lang.StringBuilder$append$char$0$$exception;
    inline$java.lang.StringBuilder$append$char$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$char$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$char$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$char$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$append$char$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$append$char$0$anon0;

  inline$java.lang.StringBuilder$append$char$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$char$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$char$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r0 := inline$java.lang.StringBuilder$append$char$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$c0 := inline$java.lang.StringBuilder$append$char$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$fakelocal_0 := 1];
    inline$java.lang.StringBuilder$append$char$0$$r2 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon10_Then, inline$java.lang.StringBuilder$append$char$0$anon10_Else;

  inline$java.lang.StringBuilder$append$char$0$anon10_Then:
    assume {:partition} 0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3;

  inline$java.lang.StringBuilder$append$char$0$anon10_Else:
    assume {:partition} !(0 < unsafe.$arrSizeHeap[inline$java.lang.StringBuilder$append$char$0$$r2]
   && 0 >= 0);
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon3:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2 := unsafe.$intArrHeap[inline$java.lang.StringBuilder$append$char$0$$r2][0 := inline$java.lang.StringBuilder$append$char$0$c0]];
    assert {:sourceloc "StringBuilder.java", 24, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$r1 := inline$java.lang.StringBuilder$append$char$0$$r2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$char$0$$r3 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_2;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$0$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.StringBuilder$$la$init$ra$$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$0$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$0$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$1;

  inline$java.lang.StringBuilder$append$char$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$r4 := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$this := inline$java.lang.StringBuilder$append$char$0$$r3;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r4;
    havoc inline$java.lang.StringBuilder$append$java.lang.String$0$$r3, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2, inline$java.lang.StringBuilder$append$java.lang.String$0$$r2, inline$java.lang.StringBuilder$append$java.lang.String$0$r0, inline$java.lang.StringBuilder$append$java.lang.String$0$$r6, inline$java.lang.StringBuilder$append$java.lang.String$0$$r5, inline$java.lang.StringBuilder$append$java.lang.String$0$r1, inline$java.lang.StringBuilder$append$java.lang.String$0$$r4, inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.String$0$$return, inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.String$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.String;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r0 := inline$java.lang.StringBuilder$append$java.lang.String$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$r1 := inline$java.lang.StringBuilder$append$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.StringBuilder);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Entry:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r2;
    havoc inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0, inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$heap := unsafe.$heap;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$stringSizeHeap := unsafe.$stringSizeHeap;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$$la$init$ra$$$1$$this != unsafe.$null;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$$la$init$ra$$$1$r0 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$this;
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.StringBuilder$$la$init$ra$$$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$anon0$1:
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.String);
    unsafe.$stringSizeHeap := unsafe.$stringSizeHeap[inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0 := 0];
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$$la$init$ra$$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$$la$init$ra$$$1$$fakelocal_0];
    assert {:sourceloc "StringBuilder.java", 16, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$block57;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$block57:
    goto inline$java.lang.StringBuilder$$la$init$ra$$$1$Return;

  inline$java.lang.StringBuilder$$la$init$ra$$$1$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$$la$init$ra$$$1$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r3 := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon7_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r4 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon3:
    assume false;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$fakelocal_2;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6:
    goto inline$java.lang.StringBuilder$toString$$0$Entry;

  inline$java.lang.StringBuilder$toString$$0$Entry:
    inline$java.lang.StringBuilder$toString$$0$$this := inline$java.lang.StringBuilder$append$java.lang.String$0$$r5;
    havoc inline$java.lang.StringBuilder$toString$$0$r0, inline$java.lang.StringBuilder$toString$$0$$r1, inline$java.lang.StringBuilder$toString$$0$$return, inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$toString$$0$anon0;

  inline$java.lang.StringBuilder$toString$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$r0 := inline$java.lang.StringBuilder$toString$$0$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$0$$return := inline$java.lang.StringBuilder$toString$$0$$r1;
    goto inline$java.lang.StringBuilder$toString$$0$block61;

  inline$java.lang.StringBuilder$toString$$0$block61:
    goto inline$java.lang.StringBuilder$toString$$0$Return;

  inline$java.lang.StringBuilder$toString$$0$Return:
    inline$java.lang.StringBuilder$append$java.lang.String$0$$r6 := inline$java.lang.StringBuilder$toString$$0$$return;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$exception := inline$java.lang.StringBuilder$toString$$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1;

  inline$java.lang.StringBuilder$append$java.lang.String$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.String$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$java.lang.String$0$$r6];
    assert {:sourceloc "StringBuilder.java", 20, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String$0$$return := inline$java.lang.StringBuilder$append$java.lang.String$0$r0;
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$block58;

  inline$java.lang.StringBuilder$append$java.lang.String$0$block58:
    goto inline$java.lang.StringBuilder$append$java.lang.String$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$r5 := inline$java.lang.StringBuilder$append$java.lang.String$0$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.String$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$2;

  inline$java.lang.StringBuilder$append$char$0$anon3$2:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.String);
    inline$java.lang.StringBuilder$append$char$0$$r6 := inline$java.lang.StringBuilder$append$char$0$$fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := inline$java.lang.StringBuilder$append$char$0$$r6;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$r1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != unsafe.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block63:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon3$3;

  inline$java.lang.StringBuilder$append$char$0$anon3$3:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon11_Then, inline$java.lang.StringBuilder$append$char$0$anon11_Else;

  inline$java.lang.StringBuilder$append$char$0$anon11_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6;

  inline$java.lang.StringBuilder$append$char$0$anon11_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r5 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_4;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon6:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$this := inline$java.lang.StringBuilder$append$char$0$$r5;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0 := inline$java.lang.StringBuilder$append$char$0$$r6;
    havoc inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3, inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0, inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2, inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1, inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$append$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$return, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r0 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$r1 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Then:
    assume {:partition} unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon7_Else:
    assume {:partition} !(unsafe.$heap[inline$java.lang.StringBuilder$append$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.lang.Character);
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon3:
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 := inline$java.lang.StringBuilder$append$java.lang.Object$0$r1;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then, inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 != unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon8_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$fakelocal_1;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$anon6:
    call inline$java.lang.StringBuilder$append$java.lang.Object$0$$c0, inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception := unsafe.java.lang.Character$charValue$(inline$java.lang.StringBuilder$append$java.lang.Object$0$$r2);
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.Object$0$$return := inline$java.lang.StringBuilder$append$java.lang.Object$0$$r3;
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$block60;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$block60:
    goto inline$java.lang.StringBuilder$append$java.lang.Object$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.Object$0$Return:
    inline$java.lang.StringBuilder$append$char$0$$r7 := inline$java.lang.StringBuilder$append$java.lang.Object$0$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$java.lang.Object$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon6$1;

  inline$java.lang.StringBuilder$append$char$0$anon6$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$char$0$anon12_Then, inline$java.lang.StringBuilder$append$char$0$anon12_Else;

  inline$java.lang.StringBuilder$append$char$0$anon12_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 != unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9;

  inline$java.lang.StringBuilder$append$char$0$anon12_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$char$0$$r7 == unsafe.$null;
    call inline$java.lang.StringBuilder$append$char$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$append$char$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$append$char$0$$fakelocal_5;
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$anon9:
    goto inline$java.lang.StringBuilder$toString$$1$Entry;

  inline$java.lang.StringBuilder$toString$$1$Entry:
    inline$java.lang.StringBuilder$toString$$1$$this := inline$java.lang.StringBuilder$append$char$0$$r7;
    havoc inline$java.lang.StringBuilder$toString$$1$r0, inline$java.lang.StringBuilder$toString$$1$$r1, inline$java.lang.StringBuilder$toString$$1$$return, inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$toString$$1$anon0;

  inline$java.lang.StringBuilder$toString$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toString$$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$$return, unsafe.$type]
   <: unsafe.java.lang.String;
    inline$java.lang.StringBuilder$toString$$1$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$r0 := inline$java.lang.StringBuilder$toString$$1$$this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toString$$1$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toString$$1$$return := inline$java.lang.StringBuilder$toString$$1$$r1;
    goto inline$java.lang.StringBuilder$toString$$1$block61;

  inline$java.lang.StringBuilder$toString$$1$block61:
    goto inline$java.lang.StringBuilder$toString$$1$Return;

  inline$java.lang.StringBuilder$toString$$1$Return:
    inline$java.lang.StringBuilder$append$char$0$$r8 := inline$java.lang.StringBuilder$toString$$1$$return;
    inline$java.lang.StringBuilder$append$char$0$$exception := inline$java.lang.StringBuilder$toString$$1$$exception;
    goto inline$java.lang.StringBuilder$append$char$0$anon9$1;

  inline$java.lang.StringBuilder$append$char$0$anon9$1:
    assert {:sourceloc "StringBuilder.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.StringBuilder$append$char$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470 := inline$java.lang.StringBuilder$append$char$0$$r8];
    assert {:sourceloc "StringBuilder.java", 26, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$char$0$$return := inline$java.lang.StringBuilder$append$char$0$r0;
    goto inline$java.lang.StringBuilder$append$char$0$block59;

  inline$java.lang.StringBuilder$append$char$0$block59:
    goto inline$java.lang.StringBuilder$append$char$0$Return;

  inline$java.lang.StringBuilder$append$char$0$Return:
    $r3 := inline$java.lang.StringBuilder$append$char$0$$return;
    $exception := inline$java.lang.StringBuilder$append$char$0$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "StringBuilder.java", 30, -1, -1, -1} true;
    $return := $r3;
    goto block60;

  block60:
    return;
}



implementation unsafe.java.lang.StringBuilder$toString$($this: ref) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var $r1: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.String;
    $exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    $r1 := unsafe.$heap[r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 34, -1, -1, -1} true;
    $return := $r1;
    goto block61;

  block61:
    return;
}



implementation unsafe.java.lang.StringBuilder$toCharArray$($this: ref) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var $r1: ref;
  var $r2: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.String$toCharArray$$0$r0: ref;
  var inline$java.lang.String$toCharArray$$0$$r1: ref;
  var inline$java.lang.String$toCharArray$$0$$this: ref;
  var inline$java.lang.String$toCharArray$$0$$return: ref;
  var inline$java.lang.String$toCharArray$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    $r1 := unsafe.$heap[r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Then:
    assume {:partition} $r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon4_Else:
    assume {:partition} $r1 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    goto inline$java.lang.String$toCharArray$$0$Entry;

  inline$java.lang.String$toCharArray$$0$Entry:
    inline$java.lang.String$toCharArray$$0$$this := $r1;
    havoc inline$java.lang.String$toCharArray$$0$r0, inline$java.lang.String$toCharArray$$0$$r1, inline$java.lang.String$toCharArray$$0$$return, inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.String$toCharArray$$0$anon0;

  inline$java.lang.String$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.String$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$r0 := inline$java.lang.String$toCharArray$$0$$this;
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.String$toCharArray$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$return := inline$java.lang.String$toCharArray$$0$$r1;
    goto inline$java.lang.String$toCharArray$$0$block73;

  inline$java.lang.String$toCharArray$$0$block73:
    goto inline$java.lang.String$toCharArray$$0$Return;

  inline$java.lang.String$toCharArray$$0$Return:
    $r2 := inline$java.lang.String$toCharArray$$0$$return;
    $exception := inline$java.lang.String$toCharArray$$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    $return := $r2;
    goto block62;

  block62:
    return;
}



implementation unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref)
{
  var r0: ref;
  var r1: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 20, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 21, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := r1];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto block63;

  block63:
    return;
}



implementation unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_java.nio.charset.Charset($this: ref, $in_parameter__0: ref, $in_parameter__1: ref)
   returns ($exception: ref)
{
  var $i0: int;
  var $b2: int;
  var r0: ref;
  var $fakelocal_4: ref;
  var r1: ref;
  var $fakelocal_3: ref;
  var $fakelocal_1: ref;
  var $r4: ref;
  var $fakelocal_2: ref;
  var $c3: int;
  var $fakelocal_0: ref;
  var $r3: ref;
  var r2: ref;
  var i4: int;
  var $i1: int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$in_parameter__1, unsafe.$type] <: unsafe.java.nio.charset.Charset;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r2 := $in_parameter__1;
    assert {:sourceloc "String.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon16_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $exception := $fakelocal_0;
    return;

  anon3:
    $i0 := unsafe.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[$fakelocal_1 := $i0];
    $r3 := $fakelocal_1;
    assert {:sourceloc "String.java", 25, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := $r3];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    i4 := 0;
    goto block64;

  block64:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon17_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $exception := $fakelocal_2;
    return;

  anon6:
    $i1 := unsafe.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} i4 >= $i1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "thenblock"} true;
    goto block65;

  anon18_Else:
    assume {:partition} $i1 > i4;
    assert {:sourceloc "String.java", 26, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    $r4 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} i4 < unsafe.$arrSizeHeap[r1] && i4 >= 0;
    $exception := $exception;
    goto anon12;

  anon19_Else:
    assume {:partition} !(i4 < unsafe.$arrSizeHeap[r1] && i4 >= 0);
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_3;
    return;

  anon12:
    $b2 := unsafe.$intArrHeap[r1][i4];
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    $c3 := $b2;
    assert {:sourceloc "String.java", 27, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} i4 < unsafe.$arrSizeHeap[$r4] && i4 >= 0;
    $exception := $exception;
    goto anon15;

  anon20_Else:
    assume {:partition} !(i4 < unsafe.$arrSizeHeap[$r4] && i4 >= 0);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_4;
    return;

  anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[$r4 := unsafe.$intArrHeap[$r4][i4 := $c3]];
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    i4 := i4 + 1;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto block64;

  block65:
    assert {:sourceloc "String.java", 29, -1, -1, -1} true;
    goto block66;

  block66:
    return;
}



implementation unsafe.java.lang.String$$la$init$ra$$java.lang.StringBuilder($this: ref, $in_parameter__0: ref) returns ($exception: ref)
{
  var $fakelocal_0: ref;
  var r0: ref;
  var $r2: ref;
  var r1: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$r0: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$r1: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$r2: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$this: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$return: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$exception: ref;
  var inline$java.lang.StringBuilder$toCharArray$$0$$objIndex: int;
  var inline$java.lang.StringBuilder$toCharArray$$0$$heap: $heap_type;
  var inline$java.lang.String$toCharArray$$0$r0: ref;
  var inline$java.lang.String$toCharArray$$0$$r1: ref;
  var inline$java.lang.String$toCharArray$$0$$this: ref;
  var inline$java.lang.String$toCharArray$$0$$return: ref;
  var inline$java.lang.String$toCharArray$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.StringBuilder;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon4_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $exception := $fakelocal_0;
    return;

  anon3:
    goto inline$java.lang.StringBuilder$toCharArray$$0$Entry;

  inline$java.lang.StringBuilder$toCharArray$$0$Entry:
    inline$java.lang.StringBuilder$toCharArray$$0$$this := r1;
    havoc inline$java.lang.StringBuilder$toCharArray$$0$r0, inline$java.lang.StringBuilder$toCharArray$$0$$r1, inline$java.lang.StringBuilder$toCharArray$$0$$r2, inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0, inline$java.lang.StringBuilder$toCharArray$$0$$return, inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    inline$java.lang.StringBuilder$toCharArray$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.StringBuilder$toCharArray$$0$$heap := unsafe.$heap;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon0;

  inline$java.lang.StringBuilder$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.StringBuilder$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} inline$java.lang.StringBuilder$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$r0 := inline$java.lang.StringBuilder$toCharArray$$0$$this;
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.StringBuilder$toCharArray$$0$r0, unsafe.java.lang.String$java.lang.StringBuilder$value470];
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon4_Then, inline$java.lang.StringBuilder$toCharArray$$0$anon4_Else;

  inline$java.lang.StringBuilder$toCharArray$$0$anon4_Then:
    assume {:partition} inline$java.lang.StringBuilder$toCharArray$$0$$r1 != unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon3;

  inline$java.lang.StringBuilder$toCharArray$$0$anon4_Else:
    assume {:partition} inline$java.lang.StringBuilder$toCharArray$$0$$r1 == unsafe.$null;
    call inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$java.lang.StringBuilder$toCharArray$$0$$return := unsafe.$null;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.StringBuilder$toCharArray$$0$$fakelocal_0;
    goto inline$java.lang.StringBuilder$toCharArray$$0$Return;

  inline$java.lang.StringBuilder$toCharArray$$0$anon3:
    goto inline$java.lang.String$toCharArray$$0$Entry;

  inline$java.lang.String$toCharArray$$0$Entry:
    inline$java.lang.String$toCharArray$$0$$this := inline$java.lang.StringBuilder$toCharArray$$0$$r1;
    havoc inline$java.lang.String$toCharArray$$0$r0, inline$java.lang.String$toCharArray$$0$$r1, inline$java.lang.String$toCharArray$$0$$return, inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.String$toCharArray$$0$anon0;

  inline$java.lang.String$toCharArray$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$toCharArray$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$toCharArray$$0$$this != unsafe.$null;
    inline$java.lang.String$toCharArray$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$r0 := inline$java.lang.String$toCharArray$$0$$this;
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$r1 := unsafe.$heap[inline$java.lang.String$toCharArray$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    inline$java.lang.String$toCharArray$$0$$return := inline$java.lang.String$toCharArray$$0$$r1;
    goto inline$java.lang.String$toCharArray$$0$block73;

  inline$java.lang.String$toCharArray$$0$block73:
    goto inline$java.lang.String$toCharArray$$0$Return;

  inline$java.lang.String$toCharArray$$0$Return:
    inline$java.lang.StringBuilder$toCharArray$$0$$r2 := inline$java.lang.String$toCharArray$$0$$return;
    inline$java.lang.StringBuilder$toCharArray$$0$$exception := inline$java.lang.String$toCharArray$$0$$exception;
    goto inline$java.lang.StringBuilder$toCharArray$$0$anon3$1;

  inline$java.lang.StringBuilder$toCharArray$$0$anon3$1:
    assert {:sourceloc "StringBuilder.java", 38, -1, -1, -1} true;
    inline$java.lang.StringBuilder$toCharArray$$0$$return := inline$java.lang.StringBuilder$toCharArray$$0$$r2;
    goto inline$java.lang.StringBuilder$toCharArray$$0$block62;

  inline$java.lang.StringBuilder$toCharArray$$0$block62:
    goto inline$java.lang.StringBuilder$toCharArray$$0$Return;

  inline$java.lang.StringBuilder$toCharArray$$0$Return:
    $r2 := inline$java.lang.StringBuilder$toCharArray$$0$$return;
    $exception := inline$java.lang.StringBuilder$toCharArray$$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471 := $r2];
    assert {:sourceloc "String.java", 33, -1, -1, -1} true;
    goto block67;

  block67:
    return;
}



implementation unsafe.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var $fakelocal_0: ref;
  var $c1: int;
  var i0: int;
  var r0: ref;
  var $r1: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "String.java", 36, -1, -1, -1} true;
    $r1 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 36, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Then:
    assume {:partition} i0 < unsafe.$arrSizeHeap[$r1] && i0 >= 0;
    $exception := $exception;
    goto anon3;

  anon4_Else:
    assume {:partition} !(i0 < unsafe.$arrSizeHeap[$r1] && i0 >= 0);
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon3:
    $c1 := unsafe.$intArrHeap[$r1][i0];
    assert {:sourceloc "String.java", 36, -1, -1, -1} true;
    $return := $c1;
    goto block68;

  block68:
    return;
}



implementation unsafe.java.lang.String$getBytes$($this: ref) returns ($return: ref, $exception: ref)
{
  var $r4: ref;
  var $fakelocal_2: ref;
  var $c2: int;
  var $b3: int;
  var $fakelocal_4: ref;
  var r0: ref;
  var i4: int;
  var $i0: int;
  var $r3: ref;
  var $fakelocal_3: ref;
  var r1: ref;
  var $i1: int;
  var $fakelocal_0: ref;
  var $r2: ref;
  var $fakelocal_1: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    $r2 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Then:
    assume {:partition} $r2 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon16_Else:
    assume {:partition} $r2 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    $i0 := unsafe.$arrSizeHeap[$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[$fakelocal_1 := $i0];
    r1 := $fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    i4 := 0;
    goto block69;

  block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    $r3 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Then:
    assume {:partition} $r3 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon17_Else:
    assume {:partition} $r3 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon6:
    $i1 := unsafe.$arrSizeHeap[$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} i4 >= $i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto block70;

  anon18_Else:
    assume {:partition} $i1 > i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    $r4 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} i4 < unsafe.$arrSizeHeap[$r4] && i4 >= 0;
    $exception := $exception;
    goto anon12;

  anon19_Else:
    assume {:partition} !(i4 < unsafe.$arrSizeHeap[$r4] && i4 >= 0);
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon12:
    $c2 := unsafe.$intArrHeap[$r4][i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    $b3 := $c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} i4 < unsafe.$arrSizeHeap[r1] && i4 >= 0;
    $exception := $exception;
    goto anon15;

  anon20_Else:
    assume {:partition} !(i4 < unsafe.$arrSizeHeap[r1] && i4 >= 0);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[r1 := unsafe.$intArrHeap[r1][i4 := $b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    i4 := i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto block69;

  block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    $return := r1;
    goto block71;

  block71:
    return;
}



implementation unsafe.java.lang.String$getBytes$java.nio.charset.Charset($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r2: ref;
  var r0: ref;
  var r1: ref;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$b3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$i4: int;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.nio.charset.Charset;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := r0;
    havoc inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$b3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$i4, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := unsafe.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := unsafe.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := unsafe.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := unsafe.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.String$getBytes$$0$$this, unsafe.$type]
   <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 40, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := unsafe.$new(unsafe.$intArrayType);
    unsafe.$arrSizeHeap := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := 0;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block69:
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == unsafe.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block70;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i4;
    assert {:sourceloc "String.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := unsafe.$heap[inline$java.lang.String$getBytes$$0$r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i4];
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b3 := inline$java.lang.String$getBytes$$0$$c2;
    assert {:sourceloc "String.java", 42, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i4
     < unsafe.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i4 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := unsafe.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15:
    unsafe.$intArrHeap := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := unsafe.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$$b3]];
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i4 := inline$java.lang.String$getBytes$$0$i4 + 1;
    assert {:sourceloc "String.java", 41, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$block69;

  inline$java.lang.String$getBytes$$0$block70:
    assert {:sourceloc "String.java", 44, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block71;

  inline$java.lang.String$getBytes$$0$block71:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$Return:
    $r2 := inline$java.lang.String$getBytes$$0$$return;
    $exception := inline$java.lang.String$getBytes$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 48, -1, -1, -1} true;
    $return := $r2;
    goto block72;

  block72:
    return;
}



implementation unsafe.java.lang.String$toCharArray$($this: ref) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var $r1: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    $r1 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 52, -1, -1, -1} true;
    $return := $r1;
    goto block73;

  block73:
    return;
}



implementation unsafe.java.lang.String$toCharArray$java.nio.charset.Charset($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r2: ref;
  var r0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.nio.charset.Charset;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 56, -1, -1, -1} true;
    $r2 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 56, -1, -1, -1} true;
    $return := $r2;
    goto block74;

  block74:
    return;
}



implementation unsafe.java.lang.String$hashCode$($this: ref) returns ($return: int, $exception: ref)
{
  var i4: int;
  var r0: ref;
  var $i1: int;
  var $i2: int;
  var b3: int;
  var $r1: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", 62, -1, -1, -1} true;
    b3 := 1;
    assert {:sourceloc "String.java", 63, -1, -1, -1} true;
    $i1 := unsafe.$mulInt(31, b3);
    assert {:sourceloc "String.java", 63, -1, -1, -1} true;
    $r1 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 63, -1, -1, -1} true;
    call $i2, $exception := unsafe.java.util.Arrays$hashCode$char$lp$$rp$($r1);
    assert {:sourceloc "String.java", 63, -1, -1, -1} true;
    i4 := $i1 + $i2;
    assert {:sourceloc "String.java", 64, -1, -1, -1} true;
    $return := i4;
    goto block75;

  block75:
    return;
}



implementation unsafe.java.lang.String$equals$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref)
{
  var $r7: ref;
  var $r6: ref;
  var $r8: ref;
  var r2: ref;
  var $i0: int;
  var $r3: ref;
  var $r4: ref;
  var i5: int;
  var $fakelocal_5: ref;
  var $r9: ref;
  var $fakelocal_4: ref;
  var $c3: int;
  var $fakelocal_0: ref;
  var $r5: ref;
  var $c4: int;
  var $fakelocal_1: ref;
  var r1: ref;
  var $fakelocal_2: ref;
  var $i2: int;
  var r0: ref;
  var $i1: int;
  var $fakelocal_3: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.Object;
    $exception := unsafe.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 69, -1, -1, -1} true;
    goto anon37_Then, anon37_Else;

  anon37_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "String.java", 69, -1, -1, -1} {:comment "thenblock"} true;
    goto block76;

  anon37_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "String.java", 69, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "String.java", 70, -1, -1, -1} true;
    $return := 1;
    goto block83;

  block76:
    assert {:sourceloc "String.java", 71, -1, -1, -1} true;
    goto anon38_Then, anon38_Else;

  anon38_Then:
    assume {:partition} r1 != unsafe.$null;
    assert {:sourceloc "String.java", 71, -1, -1, -1} {:comment "thenblock"} true;
    goto block77;

  anon38_Else:
    assume {:partition} r1 == unsafe.$null;
    assert {:sourceloc "String.java", 71, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "String.java", 72, -1, -1, -1} true;
    $return := 0;
    goto block83;

  block77:
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    call $r3, $exception := unsafe.java.lang.Object$getClass$(r0);
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    call $r4, $exception := unsafe.java.lang.Object$getClass$(r1);
    assert {:sourceloc "String.java", 73, -1, -1, -1} true;
    goto anon39_Then, anon39_Else;

  anon39_Then:
    assume {:partition} $r3 == $r4;
    assert {:sourceloc "String.java", 73, -1, -1, -1} {:comment "thenblock"} true;
    goto block78;

  anon39_Else:
    assume {:partition} $r3 != $r4;
    assert {:sourceloc "String.java", 73, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 74, -1, -1, -1} true;
    $return := 0;
    goto block83;

  block78:
    assert {:sourceloc "String.java", 75, -1, -1, -1} true;
    goto anon40_Then, anon40_Else;

  anon40_Then:
    assume {:partition} unsafe.$heap[r1, unsafe.$type] <: unsafe.java.lang.String;
    $exception := $exception;
    goto anon12;

  anon40_Else:
    assume {:partition} !(unsafe.$heap[r1, unsafe.$type] <: unsafe.java.lang.String);
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon12:
    r2 := r1;
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    $r5 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto anon41_Then, anon41_Else;

  anon41_Then:
    assume {:partition} $r5 != unsafe.$null;
    $exception := $exception;
    goto anon15;

  anon41_Else:
    assume {:partition} $r5 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_1;
    return;

  anon15:
    $i1 := unsafe.$arrSizeHeap[$r5];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    $r6 := unsafe.$heap[r2, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto anon42_Then, anon42_Else;

  anon42_Then:
    assume {:partition} $r6 != unsafe.$null;
    $exception := $exception;
    goto anon18;

  anon42_Else:
    assume {:partition} $r6 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_2;
    return;

  anon18:
    $i0 := unsafe.$arrSizeHeap[$r6];
    assert {:sourceloc "String.java", 77, -1, -1, -1} true;
    goto anon43_Then, anon43_Else;

  anon43_Then:
    assume {:partition} $i1 == $i0;
    assert {:sourceloc "String.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto block79;

  anon43_Else:
    assume {:partition} $i1 != $i0;
    assert {:sourceloc "String.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto anon21;

  anon21:
    assert {:sourceloc "String.java", 78, -1, -1, -1} true;
    $return := 0;
    goto block83;

  block79:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    i5 := 0;
    goto block80;

  block80:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    $r7 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto anon44_Then, anon44_Else;

  anon44_Then:
    assume {:partition} $r7 != unsafe.$null;
    $exception := $exception;
    goto anon24;

  anon44_Else:
    assume {:partition} $r7 == unsafe.$null;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_3;
    return;

  anon24:
    $i2 := unsafe.$arrSizeHeap[$r7];
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto anon45_Then, anon45_Else;

  anon45_Then:
    assume {:partition} i5 >= $i2;
    assert {:sourceloc "String.java", 80, -1, -1, -1} {:comment "thenblock"} true;
    goto block81;

  anon45_Else:
    assume {:partition} $i2 > i5;
    assert {:sourceloc "String.java", 80, -1, -1, -1} {:comment "elseblock"} true;
    goto anon27;

  anon27:
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    $r8 := unsafe.$heap[r0, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto anon46_Then, anon46_Else;

  anon46_Then:
    assume {:partition} i5 < unsafe.$arrSizeHeap[$r8] && i5 >= 0;
    $exception := $exception;
    goto anon30;

  anon46_Else:
    assume {:partition} !(i5 < unsafe.$arrSizeHeap[$r8] && i5 >= 0);
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_4;
    return;

  anon30:
    $c4 := unsafe.$intArrHeap[$r8][i5];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    $r9 := unsafe.$heap[r2, unsafe.char$lp$$rp$$java.lang.String$chars471];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto anon47_Then, anon47_Else;

  anon47_Then:
    assume {:partition} i5 < unsafe.$arrSizeHeap[$r9] && i5 >= 0;
    $exception := $exception;
    goto anon33;

  anon47_Else:
    assume {:partition} !(i5 < unsafe.$arrSizeHeap[$r9] && i5 >= 0);
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_5;
    return;

  anon33:
    $c3 := unsafe.$intArrHeap[$r9][i5];
    assert {:sourceloc "String.java", 81, -1, -1, -1} true;
    goto anon48_Then, anon48_Else;

  anon48_Then:
    assume {:partition} $c4 == $c3;
    assert {:sourceloc "String.java", 81, -1, -1, -1} {:comment "thenblock"} true;
    goto block82;

  anon48_Else:
    assume {:partition} $c4 != $c3;
    assert {:sourceloc "String.java", 81, -1, -1, -1} {:comment "elseblock"} true;
    goto anon36;

  anon36:
    assert {:sourceloc "String.java", 82, -1, -1, -1} true;
    $return := 0;
    goto block83;

  block82:
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    i5 := i5 + 1;
    assert {:sourceloc "String.java", 80, -1, -1, -1} true;
    goto block80;

  block81:
    assert {:sourceloc "String.java", 85, -1, -1, -1} true;
    $return := 1;
    goto block83;

  block83:
    return;
}



implementation unsafe.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref)
{
  var r0: ref;
  var z0: int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[r0, unsafe.boolean$java.lang.Boolean$value0 := z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto block84;

  block84:
    return;
}



implementation unsafe.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var $r0: ref;
  var z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.lang.Boolean;
    $exception := unsafe.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.Boolean);
    $r0 := $fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this := $r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0 := z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap := unsafe.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} unsafe.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this, unsafe.$type]
   <: unsafe.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this != unsafe.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := unsafe.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, unsafe.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$block84;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$block84:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return:
    $exception := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    $return := $r0;
    goto block85;

  block85:
    return;
}



implementation unsafe.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref)
{
  var r0: ref;
  var $z0: int;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $z0 := unsafe.$heap[r0, unsafe.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $return := $z0;
    goto block86;

  block86:
    return;
}



implementation unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := unsafe.$null;
    return;
}



type ref;

type javaType;

type Field _;

type $heap_type = <$GenericType__0>[ref,Field $GenericType__0]$GenericType__0;

type boolArrHeap_type = [ref][int]bool;

type refArrHeap_type = [ref][int]ref;

type realArrHeap_type = [ref][int]int;

type intArrHeap_type = [ref][int]int;
