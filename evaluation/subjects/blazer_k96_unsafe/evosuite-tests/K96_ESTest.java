/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 12:53:36 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class K96_ESTest extends K96_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = K96.modular_exponentiation_unsafe(bigInteger0, bigInteger0, bigInteger0, (byte) (-10));
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-92);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = K96.standardMultiply(bigInteger0, bigInteger1);
      assertEquals((short) (-23552), bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = K96.standardMultiply(bigInteger0, bigInteger0);
      assertEquals((byte) (-28), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-92);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = K96.standardMultiply(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = K96.modular_exponentiation_unsafe(bigInteger1, bigInteger0, bigInteger2, 1);
      assertEquals((short) (-23552), bigInteger3.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-66);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = K96.modular_exponentiation_unsafe(bigInteger0, bigInteger1, bigInteger1, 763);
      assertEquals((byte)1, bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit(2243);
      BigInteger bigInteger2 = K96.standardMultiply(bigInteger0, bigInteger1);
      BigInteger bigInteger3 = K96.modular_exponentiation_unsafe(bigInteger1, bigInteger0, bigInteger1, 3063);
      K96.standardMultiply(bigInteger0, bigInteger1);
      // Undeclared exception!
      K96.standardMultiply(bigInteger3, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        K96.standardMultiply((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(694);
      BigInteger bigInteger0 = BigInteger.probablePrime(694, mockRandom0);
      // Undeclared exception!
      K96.modular_exponentiation_unsafe(bigInteger0, bigInteger0, bigInteger0, 694);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        K96.modular_exponentiation_unsafe((BigInteger) null, (BigInteger) null, (BigInteger) null, 2951);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        K96.modular_exponentiation_unsafe(bigInteger0, bigInteger0, bigInteger0, 979);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = K96.standardMultiply(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = BigInteger.valueOf(2225L);
      BigInteger bigInteger3 = K96.modular_exponentiation_unsafe(bigInteger1, bigInteger0, bigInteger2, 63);
      assertEquals((byte) (-23), bigInteger3.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      K96 k96_0 = new K96();
  }
}
