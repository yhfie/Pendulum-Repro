/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 29 03:34:37 GMT 2022
 */

package fr.xephi.authme.security.crypts;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fr.xephi.authme.security.crypts.HashedPassword;
import fr.xephi.authme.security.crypts.RoyalAuth;
import fr.xephi.authme.security.crypts.UnsaltedMethod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnsaltedMethod_ESTest extends UnsaltedMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-2);
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)13;
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)13;
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[1];
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      boolean boolean0 = royalAuth0.isEqual_unsafe("1708ed31019bfa3a9d909d820c50c1bc5987a9a4f2a1ca7b4c5a5fd0d12639443913e79328c6e67d810e64e8c5ea9b025d3aa888ad4265b3470770d807759bb7", "bb42336c168a0f9d7a365de1cbb5db0e3e0966714f32855de9fb5643dcce6cec3651377699203ef98c44d9f0ad6b8373ba21ca3d334225bc89d7b2cc5ad6370e");
      assertFalse(royalAuth0.safeMode);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth(false);
      String string0 = royalAuth0.computeHash(":[;tsx");
      assertEquals("f367cef02304b32e6136c7bf993dfb66b24a13c04ffd9a664b85478de9074c861980b5d5f1e751053a43eaa0e64ece6cf8a406a6b522b7b0ef4eaad5fdd30a6f", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      // Undeclared exception!
      try { 
        royalAuth0.isEqual_unsafe((String) null, "Bs@c_5,X7,[^aR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.xephi.authme.security.crypts.UnsaltedMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      // Undeclared exception!
      try { 
        royalAuth0.computeHash((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.xephi.authme.security.HashUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      // Undeclared exception!
      try { 
        royalAuth0.computeHash((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.xephi.authme.security.HashUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      // Undeclared exception!
      try { 
        royalAuth0.computeHash((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.xephi.authme.security.HashUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      // Undeclared exception!
      try { 
        royalAuth0.comparePassword("r8/K`lA", (HashedPassword) null, "r8/K`lA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.xephi.authme.security.crypts.UnsaltedMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      boolean boolean0 = royalAuth0.isEqual_unsafe("e40d9c2617af9057f4085ff552b4b018b69557ef22cbcfd126b252e049c907aa4a7de2b26da8197a8c6efa77f647fd8803e6082c4ec538ba448e566b9d871165", "e40d9c2617af9057f4085ff552b4b018b69557ef22cbcfd126b252e049c907aa4a7de2b26da8197a8c6efa77f647fd8803e6082c4ec538ba448e566b9d871165");
      assertFalse(royalAuth0.safeMode);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      boolean boolean0 = royalAuth0.isEqual_unsafe("r&ig8JJC1NR i", "");
      assertFalse(royalAuth0.safeMode);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual(byteArray0, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = UnsaltedMethod.MessageDigestisEqual(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      boolean boolean0 = royalAuth0.isEqual_unsafe("`LROc cSoNY,^P79!9n", "R}6m+K.Ve8dZ SxjylM");
      assertFalse(boolean0);
      assertFalse(royalAuth0.safeMode);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      HashedPassword hashedPassword0 = new HashedPassword("fr.xephi.authme.security.crypts.description.SaltType");
      boolean boolean0 = royalAuth0.comparePassword("fr.xephi.authme.security.crypts.description.SaltType", hashedPassword0, "fr.xephi.authme.security.crypts.description.SaltType");
      assertFalse(royalAuth0.safeMode);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      HashedPassword hashedPassword0 = royalAuth0.computeHash("", "");
      boolean boolean0 = royalAuth0.isEqual_unsafe("e40d9c2617af9057f4085ff552b4b018b69557ef22cbcfd126b252e049c907aa4a7de2b26da8197a8c6efa77f647fd8803e6082c4ec538ba448e566b9d871165", hashedPassword0);
      assertFalse(boolean0);
      assertFalse(royalAuth0.safeMode);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      boolean boolean0 = royalAuth0.isEqual_unsafe("", "");
      assertTrue(boolean0);
      assertFalse(royalAuth0.safeMode);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth();
      royalAuth0.generateSalt();
      assertFalse(royalAuth0.safeMode);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth(true);
      String string0 = royalAuth0.computeHash("gNhnd5", "", "");
      assertEquals("54a9b03ab50c3137de3dc12c916a2fc2b8dcb7a2e39813b22d4f59dfb11ef21eff02e2c8558f05409ff7f671470a6d05f9f86f16ce355c0abff6c71e79fbc194", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth(true);
      boolean boolean0 = royalAuth0.hasSeparateSalt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RoyalAuth royalAuth0 = new RoyalAuth(true);
      HashedPassword hashedPassword0 = royalAuth0.computeHash("", "");
      boolean boolean0 = royalAuth0.comparePassword("", hashedPassword0, "");
      assertTrue(boolean0);
  }
}
