(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.Sanity () T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.Number () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.lang.Integer () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun fixed.java.lang.Appendable () T@U)
(declare-fun fixed.java.lang.CharSequence () T@U)
(declare-fun fixed.java.lang.AbstractStringBuilder () T@U)
(declare-fun fixed.java.lang.StringBuilder () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$StringConst0 () T@U)
(declare-fun fixed.java.lang.String () T@U)
(declare-fun fixed.$StringConst1 () T@U)
(declare-fun fixed.java.lang.AutoCloseable () T@U)
(declare-fun fixed.java.io.Closeable () T@U)
(declare-fun fixed.java.io.Flushable () T@U)
(declare-fun fixed.java.io.OutputStream () T@U)
(declare-fun fixed.java.io.FilterOutputStream () T@U)
(declare-fun fixed.java.io.PrintStream () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun %lbl%+1057545 () Bool)
(declare-fun %lbl%+1057540 () Bool)
(declare-fun inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$i1@1 () Int)
(declare-fun %lbl%+1057539 () Bool)
(declare-fun $in_parameter__1 () Int)
(declare-fun %lbl%+1057535 () Bool)
(declare-fun %lbl%+1057533 () Bool)
(declare-fun inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$out_i1@2 () Int)
(declare-fun %lbl%+1057534 () Bool)
(declare-fun %lbl%+1057520 () Bool)
(declare-fun %lbl%+1057515 () Bool)
(declare-fun inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$i1@1 () Int)
(declare-fun %lbl%+1057514 () Bool)
(declare-fun %lbl%+1057510 () Bool)
(declare-fun %lbl%+1057508 () Bool)
(declare-fun inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$out_i1@2 () Int)
(declare-fun %lbl%+1057509 () Bool)
(declare-fun %lbl%+1070534 () Bool)
(declare-fun %lbl%@1071099 () Bool)
(declare-fun AA_TEMP131@2 () Bool)
(declare-fun AA_TEMP130@2 () Bool)
(declare-fun %lbl%+1057548 () Bool)
(declare-fun AA_TEMP130@1 () Bool)
(declare-fun AA_TEMP130@0 () Bool)
(declare-fun AA_TEMP131@1 () Bool)
(declare-fun AA_TEMP131@0 () Bool)
(declare-fun %lbl%+1057547 () Bool)
(declare-fun %lbl%+1057543 () Bool)
(declare-fun %lbl%+1057542 () Bool)
(declare-fun %lbl%+1057541 () Bool)
(declare-fun %lbl%+1057546 () Bool)
(declare-fun %lbl%+1057538 () Bool)
(declare-fun %lbl%+1057537 () Bool)
(declare-fun %lbl%+1057532 () Bool)
(declare-fun %lbl%+1057531 () Bool)
(declare-fun %lbl%+1057530 () Bool)
(declare-fun %lbl%+1057529 () Bool)
(declare-fun %lbl%+1057528 () Bool)
(declare-fun %lbl%+1057527 () Bool)
(declare-fun %lbl%+1057526 () Bool)
(declare-fun %lbl%+1057544 () Bool)
(declare-fun %lbl%+1057525 () Bool)
(declare-fun %lbl%+1057524 () Bool)
(declare-fun %lbl%+1057523 () Bool)
(declare-fun %lbl%+1057522 () Bool)
(declare-fun %lbl%+1057518 () Bool)
(declare-fun %lbl%+1057517 () Bool)
(declare-fun %lbl%+1057516 () Bool)
(declare-fun %lbl%+1057521 () Bool)
(declare-fun %lbl%+1057513 () Bool)
(declare-fun %lbl%+1057512 () Bool)
(declare-fun %lbl%+1057507 () Bool)
(declare-fun %lbl%+1057506 () Bool)
(declare-fun %lbl%+1057505 () Bool)
(declare-fun %lbl%+1057504 () Bool)
(declare-fun %lbl%+1057503 () Bool)
(declare-fun %lbl%+1057502 () Bool)
(declare-fun %lbl%+1057501 () Bool)
(declare-fun %lbl%+1057519 () Bool)
(declare-fun %lbl%+1057500 () Bool)
(declare-fun %lbl%+1057499 () Bool)
(declare-fun %lbl%+1057498 () Bool)
(declare-fun %lbl%+1070532 () Bool)
(declare-fun %lbl%+1070545 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@0 T@U) ) (!  (=> (= (type w@@0) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@0) (UOrdering2 w@@0 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@0) (= fixed.java.lang.Object w@@0))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@0) (UOrdering2 w@@0 fixed.java.lang.Object))
)))
(assert (forall ((w@@1 T@U) ) (!  (=> (and (= (type w@@1) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@1)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@1) (UOrdering2 fixed.java.lang.Object w@@1)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@1))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (and (= (type w@@2) javaTypeType) (UOrdering2 w@@2 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@2) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@2 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.Sanity) javaTypeType))
(assert (not (= fixed.Sanity fixed.java.lang.Object)))
(assert (UOrdering2 fixed.Sanity fixed.java.lang.Object))
(assert (forall ((w@@3 T@U) ) (!  (=> (= (type w@@3) javaTypeType) (=> (and (UOrdering2 fixed.Sanity w@@3) (UOrdering2 w@@3 fixed.java.lang.Object)) (or (= fixed.Sanity w@@3) (= fixed.java.lang.Object w@@3))))
 :pattern ( (UOrdering2 fixed.Sanity w@@3) (UOrdering2 w@@3 fixed.java.lang.Object))
)))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) javaTypeType) (UOrdering2 fixed.Sanity w@@4)) (or (= fixed.Sanity w@@4) (UOrdering2 fixed.java.lang.Object w@@4)))
 :pattern ( (UOrdering2 fixed.Sanity w@@4))
)))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) javaTypeType) (UOrdering2 w@@5 fixed.Sanity)) (= (oneStep fixed.java.lang.Object w@@5) fixed.Sanity))
 :pattern ( (UOrdering2 w@@5 fixed.Sanity))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@6)) (= fixed.java.io.Serializable w@@6))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@6))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@7 T@U) ) (!  (=> (= (type w@@7) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@7) (= fixed.java.lang.Object w@@7))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object))
)))
(assert (forall ((w@@8 T@U) ) (!  (=> (= (type w@@8) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@8) (= fixed.java.io.Serializable w@@8))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (and (= (type w@@9) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@9)) (or (or (= fixed.java.lang.Throwable w@@9) (UOrdering2 fixed.java.lang.Object w@@9)) (UOrdering2 fixed.java.io.Serializable w@@9)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@9))
)))
(assert (forall ((w@@10 T@U) ) (!  (=> (and (= (type w@@10) javaTypeType) (UOrdering2 w@@10 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@10) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@10 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@11 T@U) ) (!  (=> (= (type w@@11) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@11) (= fixed.java.lang.Throwable w@@11))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@12)) (or (= fixed.java.lang.Exception w@@12) (UOrdering2 fixed.java.lang.Throwable w@@12)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@12))
)))
(assert (forall ((w@@13 T@U) ) (!  (=> (and (= (type w@@13) javaTypeType) (UOrdering2 w@@13 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@13) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@13 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@14 T@U) ) (!  (=> (= (type w@@14) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@14) (= fixed.java.lang.Exception w@@14))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (and (= (type w@@15) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@15)) (or (= fixed.java.lang.RuntimeException w@@15) (UOrdering2 fixed.java.lang.Exception w@@15)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@15))
)))
(assert (forall ((w@@16 T@U) ) (!  (=> (and (= (type w@@16) javaTypeType) (UOrdering2 w@@16 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@16) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@16 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@17 T@U) ) (!  (=> (= (type w@@17) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@17) (= fixed.java.lang.RuntimeException w@@17))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (and (= (type w@@18) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@18)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@18) (UOrdering2 fixed.java.lang.RuntimeException w@@18)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@18))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (and (= (type w@@19) javaTypeType) (UOrdering2 w@@19 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@19) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@19 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@20 T@U) ) (!  (=> (= (type w@@20) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@20) (UOrdering2 w@@20 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@20) (= fixed.java.lang.IndexOutOfBoundsException w@@20))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@20) (UOrdering2 w@@20 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@21 T@U) ) (!  (=> (and (= (type w@@21) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@21)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@21) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@21)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@21))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (and (= (type w@@22) javaTypeType) (UOrdering2 w@@22 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@22) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@22 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.Number) javaTypeType))
(assert (not (= fixed.java.lang.Number fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Number fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.io.Serializable))
(assert (forall ((w@@23 T@U) ) (!  (=> (= (type w@@23) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@23) (UOrdering2 w@@23 fixed.java.lang.Object)) (or (= fixed.java.lang.Number w@@23) (= fixed.java.lang.Object w@@23))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@23) (UOrdering2 w@@23 fixed.java.lang.Object))
)))
(assert (forall ((w@@24 T@U) ) (!  (=> (= (type w@@24) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@24) (UOrdering2 w@@24 fixed.java.io.Serializable)) (or (= fixed.java.lang.Number w@@24) (= fixed.java.io.Serializable w@@24))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@24) (UOrdering2 w@@24 fixed.java.io.Serializable))
)))
(assert (forall ((w@@25 T@U) ) (!  (=> (and (= (type w@@25) javaTypeType) (UOrdering2 fixed.java.lang.Number w@@25)) (or (or (= fixed.java.lang.Number w@@25) (UOrdering2 fixed.java.lang.Object w@@25)) (UOrdering2 fixed.java.io.Serializable w@@25)))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@25))
)))
(assert (forall ((w@@26 T@U) ) (!  (=> (and (= (type w@@26) javaTypeType) (UOrdering2 w@@26 fixed.java.lang.Number)) (= (oneStep fixed.java.lang.Object w@@26) fixed.java.lang.Number))
 :pattern ( (UOrdering2 w@@26 fixed.java.lang.Number))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@27 T@U) ) (!  (=> (and (= (type w@@27) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@27)) (= fixed.java.lang.Comparable w@@27))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@27))
)))
(assert (= (type fixed.java.lang.Integer) javaTypeType))
(assert (not (= fixed.java.lang.Integer fixed.java.lang.Number)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.lang.Number))
(assert (not (= fixed.java.lang.Integer fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.lang.Comparable))
(assert (forall ((w@@28 T@U) ) (!  (=> (= (type w@@28) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@28) (UOrdering2 w@@28 fixed.java.lang.Number)) (or (= fixed.java.lang.Integer w@@28) (= fixed.java.lang.Number w@@28))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@28) (UOrdering2 w@@28 fixed.java.lang.Number))
)))
(assert (forall ((w@@29 T@U) ) (!  (=> (= (type w@@29) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@29) (UOrdering2 w@@29 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Integer w@@29) (= fixed.java.lang.Comparable w@@29))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@29) (UOrdering2 w@@29 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@30 T@U) ) (!  (=> (and (= (type w@@30) javaTypeType) (UOrdering2 fixed.java.lang.Integer w@@30)) (or (or (= fixed.java.lang.Integer w@@30) (UOrdering2 fixed.java.lang.Number w@@30)) (UOrdering2 fixed.java.lang.Comparable w@@30)))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@30))
)))
(assert (forall ((w@@31 T@U) ) (!  (=> (and (= (type w@@31) javaTypeType) (UOrdering2 w@@31 fixed.java.lang.Integer)) (= (oneStep fixed.java.lang.Number w@@31) fixed.java.lang.Integer))
 :pattern ( (UOrdering2 w@@31 fixed.java.lang.Integer))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@32 T@U) ) (!  (=> (= (type w@@32) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@32) (UOrdering2 w@@32 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@32) (= fixed.java.lang.RuntimeException w@@32))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@32) (UOrdering2 w@@32 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@33)) (or (= fixed.java.lang.ClassCastException w@@33) (UOrdering2 fixed.java.lang.RuntimeException w@@33)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@33))
)))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 w@@34 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@34) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@34 fixed.java.lang.ClassCastException))
)))
(assert (= (type fixed.java.lang.Appendable) javaTypeType))
(assert (forall ((w@@35 T@U) ) (!  (=> (and (= (type w@@35) javaTypeType) (UOrdering2 fixed.java.lang.Appendable w@@35)) (= fixed.java.lang.Appendable w@@35))
 :pattern ( (UOrdering2 fixed.java.lang.Appendable w@@35))
)))
(assert (= (type fixed.java.lang.CharSequence) javaTypeType))
(assert (forall ((w@@36 T@U) ) (!  (=> (and (= (type w@@36) javaTypeType) (UOrdering2 fixed.java.lang.CharSequence w@@36)) (= fixed.java.lang.CharSequence w@@36))
 :pattern ( (UOrdering2 fixed.java.lang.CharSequence w@@36))
)))
(assert (= (type fixed.java.lang.AbstractStringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.Object))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.Appendable)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.Appendable))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.CharSequence))
(assert (forall ((w@@37 T@U) ) (!  (=> (= (type w@@37) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@37) (UOrdering2 w@@37 fixed.java.lang.Object)) (or (= fixed.java.lang.AbstractStringBuilder w@@37) (= fixed.java.lang.Object w@@37))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@37) (UOrdering2 w@@37 fixed.java.lang.Object))
)))
(assert (forall ((w@@38 T@U) ) (!  (=> (= (type w@@38) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@38) (UOrdering2 w@@38 fixed.java.lang.Appendable)) (or (= fixed.java.lang.AbstractStringBuilder w@@38) (= fixed.java.lang.Appendable w@@38))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@38) (UOrdering2 w@@38 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@39 T@U) ) (!  (=> (= (type w@@39) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@39) (UOrdering2 w@@39 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.AbstractStringBuilder w@@39) (= fixed.java.lang.CharSequence w@@39))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@39) (UOrdering2 w@@39 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (and (= (type w@@40) javaTypeType) (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@40)) (or (or (or (= fixed.java.lang.AbstractStringBuilder w@@40) (UOrdering2 fixed.java.lang.Object w@@40)) (UOrdering2 fixed.java.lang.Appendable w@@40)) (UOrdering2 fixed.java.lang.CharSequence w@@40)))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@40))
)))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 w@@41 fixed.java.lang.AbstractStringBuilder)) (= (oneStep fixed.java.lang.Object w@@41) fixed.java.lang.AbstractStringBuilder))
 :pattern ( (UOrdering2 w@@41 fixed.java.lang.AbstractStringBuilder))
)))
(assert (= (type fixed.java.lang.StringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.lang.AbstractStringBuilder)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.lang.AbstractStringBuilder))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.lang.CharSequence))
(assert (forall ((w@@42 T@U) ) (!  (=> (= (type w@@42) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@42) (UOrdering2 w@@42 fixed.java.lang.AbstractStringBuilder)) (or (= fixed.java.lang.StringBuilder w@@42) (= fixed.java.lang.AbstractStringBuilder w@@42))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@42) (UOrdering2 w@@42 fixed.java.lang.AbstractStringBuilder))
)))
(assert (forall ((w@@43 T@U) ) (!  (=> (= (type w@@43) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@43) (UOrdering2 w@@43 fixed.java.io.Serializable)) (or (= fixed.java.lang.StringBuilder w@@43) (= fixed.java.io.Serializable w@@43))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@43) (UOrdering2 w@@43 fixed.java.io.Serializable))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (= (type w@@44) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@44) (UOrdering2 w@@44 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.StringBuilder w@@44) (= fixed.java.lang.CharSequence w@@44))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@44) (UOrdering2 w@@44 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@45 T@U) ) (!  (=> (and (= (type w@@45) javaTypeType) (UOrdering2 fixed.java.lang.StringBuilder w@@45)) (or (or (or (= fixed.java.lang.StringBuilder w@@45) (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@45)) (UOrdering2 fixed.java.io.Serializable w@@45)) (UOrdering2 fixed.java.lang.CharSequence w@@45)))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@45))
)))
(assert (forall ((w@@46 T@U) ) (!  (=> (and (= (type w@@46) javaTypeType) (UOrdering2 w@@46 fixed.java.lang.StringBuilder)) (= (oneStep fixed.java.lang.AbstractStringBuilder w@@46) fixed.java.lang.StringBuilder))
 :pattern ( (UOrdering2 w@@46 fixed.java.lang.StringBuilder))
)))
(assert  (and (= (Ctor refType) 4) (= (type fixed.$StringConst0) refType)))
(assert (forall ((w@@47 T@U) ) (!  (=> (and (= (type w@@47) refType) (UOrdering2 fixed.$StringConst0 w@@47)) (= fixed.$StringConst0 w@@47))
 :pattern ( (UOrdering2 fixed.$StringConst0 w@@47))
)))
(assert (= (type fixed.java.lang.String) javaTypeType))
(assert (not (= fixed.java.lang.String fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.Object))
(assert (not (= fixed.java.lang.String fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.String fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.Comparable))
(assert (not (= fixed.java.lang.String fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.CharSequence))
(assert (forall ((w@@48 T@U) ) (!  (=> (= (type w@@48) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@48) (UOrdering2 w@@48 fixed.java.lang.Object)) (or (= fixed.java.lang.String w@@48) (= fixed.java.lang.Object w@@48))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@48) (UOrdering2 w@@48 fixed.java.lang.Object))
)))
(assert (forall ((w@@49 T@U) ) (!  (=> (= (type w@@49) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@49) (UOrdering2 w@@49 fixed.java.io.Serializable)) (or (= fixed.java.lang.String w@@49) (= fixed.java.io.Serializable w@@49))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@49) (UOrdering2 w@@49 fixed.java.io.Serializable))
)))
(assert (forall ((w@@50 T@U) ) (!  (=> (= (type w@@50) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@50) (UOrdering2 w@@50 fixed.java.lang.Comparable)) (or (= fixed.java.lang.String w@@50) (= fixed.java.lang.Comparable w@@50))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@50) (UOrdering2 w@@50 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@51 T@U) ) (!  (=> (= (type w@@51) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@51) (UOrdering2 w@@51 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.String w@@51) (= fixed.java.lang.CharSequence w@@51))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@51) (UOrdering2 w@@51 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@52 T@U) ) (!  (=> (and (= (type w@@52) javaTypeType) (UOrdering2 fixed.java.lang.String w@@52)) (or (or (or (or (= fixed.java.lang.String w@@52) (UOrdering2 fixed.java.lang.Object w@@52)) (UOrdering2 fixed.java.io.Serializable w@@52)) (UOrdering2 fixed.java.lang.Comparable w@@52)) (UOrdering2 fixed.java.lang.CharSequence w@@52)))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@52))
)))
(assert (forall ((w@@53 T@U) ) (!  (=> (and (= (type w@@53) javaTypeType) (UOrdering2 w@@53 fixed.java.lang.String)) (= (oneStep fixed.java.lang.Object w@@53) fixed.java.lang.String))
 :pattern ( (UOrdering2 w@@53 fixed.java.lang.String))
)))
(assert (= (type fixed.$StringConst1) refType))
(assert (forall ((w@@54 T@U) ) (!  (=> (and (= (type w@@54) refType) (UOrdering2 fixed.$StringConst1 w@@54)) (= fixed.$StringConst1 w@@54))
 :pattern ( (UOrdering2 fixed.$StringConst1 w@@54))
)))
(assert (= (type fixed.java.lang.AutoCloseable) javaTypeType))
(assert (forall ((w@@55 T@U) ) (!  (=> (and (= (type w@@55) javaTypeType) (UOrdering2 fixed.java.lang.AutoCloseable w@@55)) (= fixed.java.lang.AutoCloseable w@@55))
 :pattern ( (UOrdering2 fixed.java.lang.AutoCloseable w@@55))
)))
(assert (= (type fixed.java.io.Closeable) javaTypeType))
(assert (not (= fixed.java.io.Closeable fixed.java.lang.AutoCloseable)))
(assert (UOrdering2 fixed.java.io.Closeable fixed.java.lang.AutoCloseable))
(assert (forall ((w@@56 T@U) ) (!  (=> (= (type w@@56) javaTypeType) (=> (and (UOrdering2 fixed.java.io.Closeable w@@56) (UOrdering2 w@@56 fixed.java.lang.AutoCloseable)) (or (= fixed.java.io.Closeable w@@56) (= fixed.java.lang.AutoCloseable w@@56))))
 :pattern ( (UOrdering2 fixed.java.io.Closeable w@@56) (UOrdering2 w@@56 fixed.java.lang.AutoCloseable))
)))
(assert (forall ((w@@57 T@U) ) (!  (=> (and (= (type w@@57) javaTypeType) (UOrdering2 fixed.java.io.Closeable w@@57)) (or (= fixed.java.io.Closeable w@@57) (UOrdering2 fixed.java.lang.AutoCloseable w@@57)))
 :pattern ( (UOrdering2 fixed.java.io.Closeable w@@57))
)))
(assert (= (type fixed.java.io.Flushable) javaTypeType))
(assert (forall ((w@@58 T@U) ) (!  (=> (and (= (type w@@58) javaTypeType) (UOrdering2 fixed.java.io.Flushable w@@58)) (= fixed.java.io.Flushable w@@58))
 :pattern ( (UOrdering2 fixed.java.io.Flushable w@@58))
)))
(assert (= (type fixed.java.io.OutputStream) javaTypeType))
(assert (not (= fixed.java.io.OutputStream fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.lang.Object))
(assert (not (= fixed.java.io.OutputStream fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.io.Closeable))
(assert (not (= fixed.java.io.OutputStream fixed.java.io.Flushable)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.io.Flushable))
(assert (forall ((w@@59 T@U) ) (!  (=> (= (type w@@59) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@59) (UOrdering2 w@@59 fixed.java.lang.Object)) (or (= fixed.java.io.OutputStream w@@59) (= fixed.java.lang.Object w@@59))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@59) (UOrdering2 w@@59 fixed.java.lang.Object))
)))
(assert (forall ((w@@60 T@U) ) (!  (=> (= (type w@@60) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@60) (UOrdering2 w@@60 fixed.java.io.Closeable)) (or (= fixed.java.io.OutputStream w@@60) (= fixed.java.io.Closeable w@@60))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@60) (UOrdering2 w@@60 fixed.java.io.Closeable))
)))
(assert (forall ((w@@61 T@U) ) (!  (=> (= (type w@@61) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@61) (UOrdering2 w@@61 fixed.java.io.Flushable)) (or (= fixed.java.io.OutputStream w@@61) (= fixed.java.io.Flushable w@@61))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@61) (UOrdering2 w@@61 fixed.java.io.Flushable))
)))
(assert (forall ((w@@62 T@U) ) (!  (=> (and (= (type w@@62) javaTypeType) (UOrdering2 fixed.java.io.OutputStream w@@62)) (or (or (or (= fixed.java.io.OutputStream w@@62) (UOrdering2 fixed.java.lang.Object w@@62)) (UOrdering2 fixed.java.io.Closeable w@@62)) (UOrdering2 fixed.java.io.Flushable w@@62)))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@62))
)))
(assert (forall ((w@@63 T@U) ) (!  (=> (and (= (type w@@63) javaTypeType) (UOrdering2 w@@63 fixed.java.io.OutputStream)) (= (oneStep fixed.java.lang.Object w@@63) fixed.java.io.OutputStream))
 :pattern ( (UOrdering2 w@@63 fixed.java.io.OutputStream))
)))
(assert (= (type fixed.java.io.FilterOutputStream) javaTypeType))
(assert (not (= fixed.java.io.FilterOutputStream fixed.java.io.OutputStream)))
(assert (UOrdering2 fixed.java.io.FilterOutputStream fixed.java.io.OutputStream))
(assert (forall ((w@@64 T@U) ) (!  (=> (= (type w@@64) javaTypeType) (=> (and (UOrdering2 fixed.java.io.FilterOutputStream w@@64) (UOrdering2 w@@64 fixed.java.io.OutputStream)) (or (= fixed.java.io.FilterOutputStream w@@64) (= fixed.java.io.OutputStream w@@64))))
 :pattern ( (UOrdering2 fixed.java.io.FilterOutputStream w@@64) (UOrdering2 w@@64 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@65 T@U) ) (!  (=> (and (= (type w@@65) javaTypeType) (UOrdering2 fixed.java.io.FilterOutputStream w@@65)) (or (= fixed.java.io.FilterOutputStream w@@65) (UOrdering2 fixed.java.io.OutputStream w@@65)))
 :pattern ( (UOrdering2 fixed.java.io.FilterOutputStream w@@65))
)))
(assert (forall ((w@@66 T@U) ) (!  (=> (and (= (type w@@66) javaTypeType) (UOrdering2 w@@66 fixed.java.io.FilterOutputStream)) (= (oneStep fixed.java.io.OutputStream w@@66) fixed.java.io.FilterOutputStream))
 :pattern ( (UOrdering2 w@@66 fixed.java.io.FilterOutputStream))
)))
(assert (= (type fixed.java.io.PrintStream) javaTypeType))
(assert (not (= fixed.java.io.PrintStream fixed.java.io.FilterOutputStream)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.io.FilterOutputStream))
(assert (not (= fixed.java.io.PrintStream fixed.java.lang.Appendable)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.lang.Appendable))
(assert (not (= fixed.java.io.PrintStream fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.io.Closeable))
(assert (forall ((w@@67 T@U) ) (!  (=> (= (type w@@67) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@67) (UOrdering2 w@@67 fixed.java.io.FilterOutputStream)) (or (= fixed.java.io.PrintStream w@@67) (= fixed.java.io.FilterOutputStream w@@67))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@67) (UOrdering2 w@@67 fixed.java.io.FilterOutputStream))
)))
(assert (forall ((w@@68 T@U) ) (!  (=> (= (type w@@68) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@68) (UOrdering2 w@@68 fixed.java.lang.Appendable)) (or (= fixed.java.io.PrintStream w@@68) (= fixed.java.lang.Appendable w@@68))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@68) (UOrdering2 w@@68 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@69 T@U) ) (!  (=> (= (type w@@69) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@69) (UOrdering2 w@@69 fixed.java.io.Closeable)) (or (= fixed.java.io.PrintStream w@@69) (= fixed.java.io.Closeable w@@69))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@69) (UOrdering2 w@@69 fixed.java.io.Closeable))
)))
(assert (forall ((w@@70 T@U) ) (!  (=> (and (= (type w@@70) javaTypeType) (UOrdering2 fixed.java.io.PrintStream w@@70)) (or (or (or (= fixed.java.io.PrintStream w@@70) (UOrdering2 fixed.java.io.FilterOutputStream w@@70)) (UOrdering2 fixed.java.lang.Appendable w@@70)) (UOrdering2 fixed.java.io.Closeable w@@70)))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@70))
)))
(assert (forall ((w@@71 T@U) ) (!  (=> (and (= (type w@@71) javaTypeType) (UOrdering2 w@@71 fixed.java.io.PrintStream)) (= (oneStep fixed.java.io.FilterOutputStream w@@71) fixed.java.io.PrintStream))
 :pattern ( (UOrdering2 w@@71 fixed.java.io.PrintStream))
)))
(assert (forall ((w@@72 T@U) ) (!  (=> (and (= (type w@@72) javaTypeType) (UOrdering2 w@@72 fixed.java.lang.Object)) (or (or (or (or (or (or (or (= fixed.java.lang.Object w@@72) (UOrdering2 w@@72 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@72 fixed.Sanity)) (UOrdering2 w@@72 fixed.java.lang.Throwable)) (UOrdering2 w@@72 fixed.java.lang.Number)) (UOrdering2 w@@72 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@72 fixed.java.lang.String)) (UOrdering2 w@@72 fixed.java.io.OutputStream)))
 :pattern ( (UOrdering2 w@@72 fixed.java.lang.Object))
)))
(assert (forall ((w@@73 T@U) ) (!  (=> (and (= (type w@@73) javaTypeType) (UOrdering2 w@@73 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@73))
 :pattern ( (UOrdering2 w@@73 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@74 T@U) ) (!  (=> (and (= (type w@@74) javaTypeType) (UOrdering2 w@@74 fixed.Sanity)) (= fixed.Sanity w@@74))
 :pattern ( (UOrdering2 w@@74 fixed.Sanity))
)))
(assert (forall ((w@@75 T@U) ) (!  (=> (and (= (type w@@75) javaTypeType) (UOrdering2 w@@75 fixed.java.io.Serializable)) (or (or (or (or (= fixed.java.io.Serializable w@@75) (UOrdering2 w@@75 fixed.java.lang.Throwable)) (UOrdering2 w@@75 fixed.java.lang.Number)) (UOrdering2 w@@75 fixed.java.lang.StringBuilder)) (UOrdering2 w@@75 fixed.java.lang.String)))
 :pattern ( (UOrdering2 w@@75 fixed.java.io.Serializable))
)))
(assert (forall ((w@@76 T@U) ) (!  (=> (and (= (type w@@76) javaTypeType) (UOrdering2 w@@76 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@76) (UOrdering2 w@@76 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@76 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@77 T@U) ) (!  (=> (and (= (type w@@77) javaTypeType) (UOrdering2 w@@77 fixed.java.lang.Exception)) (or (= fixed.java.lang.Exception w@@77) (UOrdering2 w@@77 fixed.java.lang.RuntimeException)))
 :pattern ( (UOrdering2 w@@77 fixed.java.lang.Exception))
)))
(assert (forall ((w@@78 T@U) ) (!  (=> (and (= (type w@@78) javaTypeType) (UOrdering2 w@@78 fixed.java.lang.RuntimeException)) (or (or (= fixed.java.lang.RuntimeException w@@78) (UOrdering2 w@@78 fixed.java.lang.IndexOutOfBoundsException)) (UOrdering2 w@@78 fixed.java.lang.ClassCastException)))
 :pattern ( (UOrdering2 w@@78 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@79 T@U) ) (!  (=> (and (= (type w@@79) javaTypeType) (UOrdering2 w@@79 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@79) (UOrdering2 w@@79 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@79 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@80 T@U) ) (!  (=> (and (= (type w@@80) javaTypeType) (UOrdering2 w@@80 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@80))
 :pattern ( (UOrdering2 w@@80 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@81 T@U) ) (!  (=> (and (= (type w@@81) javaTypeType) (UOrdering2 w@@81 fixed.java.lang.Number)) (or (= fixed.java.lang.Number w@@81) (UOrdering2 w@@81 fixed.java.lang.Integer)))
 :pattern ( (UOrdering2 w@@81 fixed.java.lang.Number))
)))
(assert (forall ((w@@82 T@U) ) (!  (=> (and (= (type w@@82) javaTypeType) (UOrdering2 w@@82 fixed.java.lang.Comparable)) (or (or (= fixed.java.lang.Comparable w@@82) (UOrdering2 w@@82 fixed.java.lang.Integer)) (UOrdering2 w@@82 fixed.java.lang.String)))
 :pattern ( (UOrdering2 w@@82 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@83 T@U) ) (!  (=> (and (= (type w@@83) javaTypeType) (UOrdering2 w@@83 fixed.java.lang.Integer)) (= fixed.java.lang.Integer w@@83))
 :pattern ( (UOrdering2 w@@83 fixed.java.lang.Integer))
)))
(assert (forall ((w@@84 T@U) ) (!  (=> (and (= (type w@@84) javaTypeType) (UOrdering2 w@@84 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@84))
 :pattern ( (UOrdering2 w@@84 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@85 T@U) ) (!  (=> (and (= (type w@@85) javaTypeType) (UOrdering2 w@@85 fixed.java.lang.Appendable)) (or (or (= fixed.java.lang.Appendable w@@85) (UOrdering2 w@@85 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@85 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@85 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@86 T@U) ) (!  (=> (and (= (type w@@86) javaTypeType) (UOrdering2 w@@86 fixed.java.lang.CharSequence)) (or (or (or (= fixed.java.lang.CharSequence w@@86) (UOrdering2 w@@86 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@86 fixed.java.lang.StringBuilder)) (UOrdering2 w@@86 fixed.java.lang.String)))
 :pattern ( (UOrdering2 w@@86 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@87 T@U) ) (!  (=> (and (= (type w@@87) javaTypeType) (UOrdering2 w@@87 fixed.java.lang.AbstractStringBuilder)) (or (= fixed.java.lang.AbstractStringBuilder w@@87) (UOrdering2 w@@87 fixed.java.lang.StringBuilder)))
 :pattern ( (UOrdering2 w@@87 fixed.java.lang.AbstractStringBuilder))
)))
(assert (forall ((w@@88 T@U) ) (!  (=> (and (= (type w@@88) javaTypeType) (UOrdering2 w@@88 fixed.java.lang.StringBuilder)) (= fixed.java.lang.StringBuilder w@@88))
 :pattern ( (UOrdering2 w@@88 fixed.java.lang.StringBuilder))
)))
(assert (forall ((w@@89 T@U) ) (!  (=> (and (= (type w@@89) refType) (UOrdering2 w@@89 fixed.$StringConst0)) (= fixed.$StringConst0 w@@89))
 :pattern ( (UOrdering2 w@@89 fixed.$StringConst0))
)))
(assert (forall ((w@@90 T@U) ) (!  (=> (and (= (type w@@90) javaTypeType) (UOrdering2 w@@90 fixed.java.lang.String)) (= fixed.java.lang.String w@@90))
 :pattern ( (UOrdering2 w@@90 fixed.java.lang.String))
)))
(assert (forall ((w@@91 T@U) ) (!  (=> (and (= (type w@@91) refType) (UOrdering2 w@@91 fixed.$StringConst1)) (= fixed.$StringConst1 w@@91))
 :pattern ( (UOrdering2 w@@91 fixed.$StringConst1))
)))
(assert (forall ((w@@92 T@U) ) (!  (=> (and (= (type w@@92) javaTypeType) (UOrdering2 w@@92 fixed.java.lang.AutoCloseable)) (or (= fixed.java.lang.AutoCloseable w@@92) (UOrdering2 w@@92 fixed.java.io.Closeable)))
 :pattern ( (UOrdering2 w@@92 fixed.java.lang.AutoCloseable))
)))
(assert (forall ((w@@93 T@U) ) (!  (=> (and (= (type w@@93) javaTypeType) (UOrdering2 w@@93 fixed.java.io.Closeable)) (or (or (= fixed.java.io.Closeable w@@93) (UOrdering2 w@@93 fixed.java.io.OutputStream)) (UOrdering2 w@@93 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@93 fixed.java.io.Closeable))
)))
(assert (forall ((w@@94 T@U) ) (!  (=> (and (= (type w@@94) javaTypeType) (UOrdering2 w@@94 fixed.java.io.Flushable)) (or (= fixed.java.io.Flushable w@@94) (UOrdering2 w@@94 fixed.java.io.OutputStream)))
 :pattern ( (UOrdering2 w@@94 fixed.java.io.Flushable))
)))
(assert (forall ((w@@95 T@U) ) (!  (=> (and (= (type w@@95) javaTypeType) (UOrdering2 w@@95 fixed.java.io.OutputStream)) (or (= fixed.java.io.OutputStream w@@95) (UOrdering2 w@@95 fixed.java.io.FilterOutputStream)))
 :pattern ( (UOrdering2 w@@95 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@96 T@U) ) (!  (=> (and (= (type w@@96) javaTypeType) (UOrdering2 w@@96 fixed.java.io.FilterOutputStream)) (or (= fixed.java.io.FilterOutputStream w@@96) (UOrdering2 w@@96 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@96 fixed.java.io.FilterOutputStream))
)))
(assert (forall ((w@@97 T@U) ) (!  (=> (and (= (type w@@97) javaTypeType) (UOrdering2 w@@97 fixed.java.io.PrintStream)) (= fixed.java.io.PrintStream w@@97))
 :pattern ( (UOrdering2 w@@97 fixed.java.io.PrintStream))
)))
(assert  (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 5)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.Sanity fixed.java.io.Serializable fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.Number fixed.java.lang.Comparable fixed.java.lang.Integer fixed.java.lang.ClassCastException fixed.java.lang.Appendable fixed.java.lang.CharSequence fixed.java.lang.AbstractStringBuilder fixed.java.lang.StringBuilder fixed.$StringConst0 fixed.java.lang.String fixed.$StringConst1 fixed.java.lang.AutoCloseable fixed.java.io.Closeable fixed.java.io.Flushable fixed.java.io.OutputStream fixed.java.io.FilterOutputStream fixed.java.io.PrintStream)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCSa.125:15|
 :skolemid |3825|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCSa.129:15|
 :skolemid |3826|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCSa.133:15|
 :skolemid |3827|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCSa.137:15|
 :skolemid |3828|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCSa.141:15|
 :skolemid |3829|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCSa.145:15|
 :skolemid |3830|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCSa.147:15|
 :skolemid |3831|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCSa.41365:15|
 :skolemid |4726|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCSa.41369:15|
 :skolemid |4727|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCSa.41373:15|
 :skolemid |4728|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCSa.41377:15|
 :skolemid |4729|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCSa.41381:15|
 :skolemid |4730|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCSa.41385:15|
 :skolemid |4731|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCSa.41387:15|
 :skolemid |4732|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap) (MapType0Type refType))) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))))
(push 1)
(set-info :boogie-vc-id PROC_.Sanity$nosecret_safe$int$lp$$rp$_int_EQ_unsafe__xx__fixed)
(assert (not
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon6_dummy_correct  (=> (! (and %lbl%+1057545 true) :lblpos +1057545) true)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon6_correct  (=> (! (and %lbl%+1057540 true) :lblpos +1057540) (=> (= inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$i1@1 (+ 0 1)) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon6_dummy_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon8_Else_correct  (=> (! (and %lbl%+1057539 true) :lblpos +1057539) (=> (> $in_parameter__1 0) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon6_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$anon6_dummy_correct  (=> (! (and %lbl%+1057535 true) :lblpos +1057535) true)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$anon6_correct  (=> (! (and %lbl%+1057533 true) :lblpos +1057533) (=> (= inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$out_i1@2 (+ 0 1)) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$anon6_dummy_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$anon8_Else_correct  (=> (! (and %lbl%+1057534 true) :lblpos +1057534) (=> (> $in_parameter__1 0) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$anon6_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon6_dummy_correct  (=> (! (and %lbl%+1057520 true) :lblpos +1057520) true)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon6_correct  (=> (! (and %lbl%+1057515 true) :lblpos +1057515) (=> (= inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$i1@1 (+ 0 1)) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon6_dummy_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon8_Else_correct  (=> (! (and %lbl%+1057514 true) :lblpos +1057514) (=> (> $in_parameter__1 0) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon6_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$anon6_dummy_correct  (=> (! (and %lbl%+1057510 true) :lblpos +1057510) true)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$anon6_correct  (=> (! (and %lbl%+1057508 true) :lblpos +1057508) (=> (= inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$out_i1@2 (+ 0 1)) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$anon6_dummy_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$anon8_Else_correct  (=> (! (and %lbl%+1057509 true) :lblpos +1057509) (=> (> $in_parameter__1 0) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$anon6_correct))))
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+1070534 true) :lblpos +1070534) (! (or %lbl%@1071099  (and AA_TEMP131@2 AA_TEMP130@2)) :lblneg @1071099))))
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+1057548 true) :lblpos +1057548) (=> (and (and (and (=> AA_TEMP130@1 (or AA_TEMP130@0 (= 1 1))) (=> (or AA_TEMP130@0 (= 1 1)) AA_TEMP130@1)) (and (=> AA_TEMP131@1 (or AA_TEMP131@0 (= fixed.$null fixed.$null))) (=> (or AA_TEMP131@0 (= fixed.$null fixed.$null)) AA_TEMP131@1))) (and (and (=> AA_TEMP130@2 AA_TEMP130@1) (=> AA_TEMP130@1 AA_TEMP130@2)) (and (=> AA_TEMP131@2 AA_TEMP131@1) (=> AA_TEMP131@1 AA_TEMP131@2)))) GeneratedUnifiedExit_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$Return_correct  (=> (! (and %lbl%+1057547 true) :lblpos +1057547) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block58_correct  (=> (! (and %lbl%+1057543 true) :lblpos +1057543) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$Return_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block56_correct  (=> (! (and %lbl%+1057542 true) :lblpos +1057542) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block58_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon8_Then_correct  (=> (! (and %lbl%+1057541 true) :lblpos +1057541) (=> (>= 0 $in_parameter__1) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block56_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block57_last_correct  (=> (! (and %lbl%+1057546 true) :lblpos +1057546) (and inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon8_Then_correct inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon8_Else_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block57$1_correct  (=> (! (and %lbl%+1057538 true) :lblpos +1057538) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block57_last_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$Return_correct  (=> (! (and %lbl%+1057537 true) :lblpos +1057537) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block57$1_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$anon8_Then_correct  (=> (! (and %lbl%+1057532 true) :lblpos +1057532) (=> (>= 0 $in_parameter__1) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$Return_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$block57_correct  (=> (! (and %lbl%+1057531 true) :lblpos +1057531) (and inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$anon8_Then_correct inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$anon8_Else_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$entry_correct  (=> (! (and %lbl%+1057530 true) :lblpos +1057530) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$block57_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$Entry_correct  (=> (! (and %lbl%+1057529 true) :lblpos +1057529) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$entry_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block57_correct  (=> (! (and %lbl%+1057528 true) :lblpos +1057528) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block57$0$Entry_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon3_correct  (=> (! (and %lbl%+1057527 true) :lblpos +1057527) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block57_correct)))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon7_Else_correct  (=> (! (and %lbl%+1057526 true) :lblpos +1057526) (=> (< 0 $in_parameter__1) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon3_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon7_Then_correct  (=> (! (and %lbl%+1057544 true) :lblpos +1057544) (=> (<= $in_parameter__1 0) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$block56_correct))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon0_correct  (=> (! (and %lbl%+1057525 true) :lblpos +1057525) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T))
 :qid |RSPROCSa.43201:20|
 :skolemid |4754|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCSa.43202:20|
 :skolemid |4755|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCSa.43203:20|
 :skolemid |4756|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon7_Then_correct inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon7_Else_correct))))))
(let ((inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$Entry_correct  (=> (! (and %lbl%+1057524 true) :lblpos +1057524) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+1057523 true) :lblpos +1057523) inline$fixed.Sanity$nosecret_safe$int$lp$$rp$_int$0$Entry_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$Return_correct  (=> (! (and %lbl%+1057522 true) :lblpos +1057522) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block7_correct  (=> (! (and %lbl%+1057518 true) :lblpos +1057518) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$Return_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block5_correct  (=> (! (and %lbl%+1057517 true) :lblpos +1057517) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block7_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon8_Then_correct  (=> (! (and %lbl%+1057516 true) :lblpos +1057516) (=> (>= 0 $in_parameter__1) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block5_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block6_last_correct  (=> (! (and %lbl%+1057521 true) :lblpos +1057521) (and inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon8_Then_correct inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon8_Else_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block6$1_correct  (=> (! (and %lbl%+1057513 true) :lblpos +1057513) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block6_last_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$Return_correct  (=> (! (and %lbl%+1057512 true) :lblpos +1057512) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block6$1_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$anon8_Then_correct  (=> (! (and %lbl%+1057507 true) :lblpos +1057507) (=> (>= 0 $in_parameter__1) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$Return_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$block6_correct  (=> (! (and %lbl%+1057506 true) :lblpos +1057506) (and inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$anon8_Then_correct inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$anon8_Else_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$entry_correct  (=> (! (and %lbl%+1057505 true) :lblpos +1057505) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$block6_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$Entry_correct  (=> (! (and %lbl%+1057504 true) :lblpos +1057504) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$entry_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block6_correct  (=> (! (and %lbl%+1057503 true) :lblpos +1057503) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$inline$Sanity$nosecret_safe$int$lp$$rp$_int_loop_block6$0$Entry_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon3_correct  (=> (! (and %lbl%+1057502 true) :lblpos +1057502) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block6_correct)))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon7_Else_correct  (=> (! (and %lbl%+1057501 true) :lblpos +1057501) (=> (< 0 $in_parameter__1) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon3_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon7_Then_correct  (=> (! (and %lbl%+1057519 true) :lblpos +1057519) (=> (<= $in_parameter__1 0) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$block5_correct))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon0_correct  (=> (! (and %lbl%+1057500 true) :lblpos +1057500) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@0))
 :qid |RSPROCSa.43071:20|
 :skolemid |4751|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCSa.43072:20|
 :skolemid |4752|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCSa.43073:20|
 :skolemid |4753|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon7_Then_correct inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon7_Else_correct))))))
(let ((inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$Entry_correct  (=> (! (and %lbl%+1057499 true) :lblpos +1057499) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+1057498 true) :lblpos +1057498) inline$unsafe.Sanity$nosecret_safe$int$lp$$rp$_int$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+1070532 true) :lblpos +1070532) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+1070545 true) :lblpos +1070545) q@0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
