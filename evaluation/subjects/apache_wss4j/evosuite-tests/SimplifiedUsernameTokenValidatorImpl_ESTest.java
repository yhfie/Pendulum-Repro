/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 08 07:36:58 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wss4j.binding.wss10.PasswordString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class SimplifiedUsernameTokenValidatorImpl_ESTest extends SimplifiedUsernameTokenValidatorImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = SimplifiedUsernameTokenValidatorImpl.unsafe_String_equals("@Oqr7/y0l)*JIoj$Uq", "J.p&t{:s*.A`iW;]gj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimplifiedUsernameTokenValidatorImpl.verifyPlaintextPassword((PasswordString) null, "@Oqr7/y0l)*JIoj$Uq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SimplifiedUsernameTokenValidatorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimplifiedUsernameTokenValidatorImpl.unsafe_String_equals((String) null, "@Oqr7/yl)*N5JIoj$U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SimplifiedUsernameTokenValidatorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = SimplifiedUsernameTokenValidatorImpl.unsafe_String_equals("EncryptedKeySHA1", "EncryptedKeySHA1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PasswordString passwordString0 = new PasswordString();
      passwordString0.setValue("");
      try { 
        SimplifiedUsernameTokenValidatorImpl.verifyPlaintextPassword(passwordString0, "SimplifiedUsernameTokenValidatorImpl");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The security token could not be authenticated or authorized
         //
         verifyException("SimplifiedUsernameTokenValidatorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PasswordString passwordString0 = new PasswordString();
      passwordString0.setValue("");
      SimplifiedUsernameTokenValidatorImpl.verifyPlaintextPassword(passwordString0, "");
      assertNull(passwordString0.getId());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      boolean boolean0 = SimplifiedUsernameTokenValidatorImpl.unsafe_String_equals("@Oqr7/y0l)*JIoj$Uq", "Jp&t{:s*.A`iW;]gj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = SimplifiedUsernameTokenValidatorImpl.unsafe_String_equals("P3e9!B~+|iz", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      boolean boolean0 = SimplifiedUsernameTokenValidatorImpl.unsafe_String_equals("SimplifiedUsernameTokenValidatorImpl", "SimplifiedUsernameToke-ZalidatorImpl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SimplifiedUsernameTokenValidatorImpl simplifiedUsernameTokenValidatorImpl0 = new SimplifiedUsernameTokenValidatorImpl();
  }
}
