/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 12:47:16 GMT 2022
 */

package org.apache.ftpserver.usermanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.ftpserver.usermanager.ClearTextPasswordEncryptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClearTextPasswordEncryptor_ESTest extends ClearTextPasswordEncryptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      String string0 = clearTextPasswordEncryptor0.encrypt((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      String string0 = clearTextPasswordEncryptor0.encrypt("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      // Undeclared exception!
      try { 
        clearTextPasswordEncryptor0.isEqual_unsafe((String) null, "|rjf(er68':I7X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ftpserver.usermanager.ClearTextPasswordEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      // Undeclared exception!
      try { 
        clearTextPasswordEncryptor0.isEqual_safe((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ftpserver.usermanager.ClearTextPasswordEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      boolean boolean0 = clearTextPasswordEncryptor0.isEqual_unsafe("dOW=", "9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      boolean boolean0 = clearTextPasswordEncryptor0.isEqual_unsafe("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      boolean boolean0 = clearTextPasswordEncryptor0.isEqual_safe("passwordToCheck can not be null", "passwordToCheck can not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      boolean boolean0 = clearTextPasswordEncryptor0.isEqual_safe("F0thROQ", "%xnk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      boolean boolean0 = clearTextPasswordEncryptor0.isEqual_unsafe("storedPassword can not be null", "storedPasswowd can not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      boolean boolean0 = clearTextPasswordEncryptor0.matches("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      boolean boolean0 = clearTextPasswordEncryptor0.isEqual_unsafe("?", "9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      Object object0 = new Object();
      boolean boolean0 = clearTextPasswordEncryptor0.isEqual_unsafe("*FFALEQ'", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      // Undeclared exception!
      try { 
        clearTextPasswordEncryptor0.matches((String) null, ";jxR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // passwordToCheck can not be null
         //
         verifyException("org.apache.ftpserver.usermanager.ClearTextPasswordEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      // Undeclared exception!
      try { 
        clearTextPasswordEncryptor0.matches((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // storedPassword can not be null
         //
         verifyException("org.apache.ftpserver.usermanager.ClearTextPasswordEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      boolean boolean0 = clearTextPasswordEncryptor0.matches("9", "PRpPYowB?wOz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor(true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClearTextPasswordEncryptor clearTextPasswordEncryptor0 = new ClearTextPasswordEncryptor();
      String string0 = clearTextPasswordEncryptor0.encrypt("*FFALEQ'");
      assertEquals("*FFALEQ'", string0);
  }
}
