(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.lang.Integer () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun fixed.MoreSanity () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.Number () T@U)
(declare-fun fixed.java.lang.ArithmeticException () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun %lbl%+278034 () Bool)
(declare-fun %lbl%+278027 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i5@1 () Int)
(declare-fun $in_parameter__0 () Int)
(declare-fun %lbl%+278026 () Bool)
(declare-fun %lbl%+278022 () Bool)
(declare-fun %lbl%+278020 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$out_i5@2 () Int)
(declare-fun %lbl%+278021 () Bool)
(declare-fun %lbl%+278032 () Bool)
(declare-fun %lbl%+278008 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i4@1 () Int)
(declare-fun %lbl%+278007 () Bool)
(declare-fun %lbl%+278003 () Bool)
(declare-fun %lbl%+278001 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$out_i4@2 () Int)
(declare-fun %lbl%+278002 () Bool)
(declare-fun %lbl%+278099 () Bool)
(declare-fun %lbl%+278092 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i5@1 () Int)
(declare-fun %lbl%+278091 () Bool)
(declare-fun %lbl%+278087 () Bool)
(declare-fun %lbl%+278085 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$out_i5@2 () Int)
(declare-fun %lbl%+278086 () Bool)
(declare-fun %lbl%+278097 () Bool)
(declare-fun %lbl%+278073 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i4@1 () Int)
(declare-fun %lbl%+278072 () Bool)
(declare-fun %lbl%+278068 () Bool)
(declare-fun %lbl%+278066 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$out_i4@2 () Int)
(declare-fun %lbl%+278067 () Bool)
(declare-fun %lbl%+278095 () Bool)
(declare-fun %lbl%+278053 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i2@1 () Int)
(declare-fun %lbl%+278052 () Bool)
(declare-fun %lbl%+278048 () Bool)
(declare-fun %lbl%+278046 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$out_i2@2 () Int)
(declare-fun %lbl%+278047 () Bool)
(declare-fun %lbl%+278030 () Bool)
(declare-fun %lbl%+277988 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i2@1 () Int)
(declare-fun %lbl%+277987 () Bool)
(declare-fun %lbl%+277983 () Bool)
(declare-fun %lbl%+277981 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$out_i2@2 () Int)
(declare-fun %lbl%+277982 () Bool)
(declare-fun %lbl%+282129 () Bool)
(declare-fun %lbl%@283302 () Bool)
(declare-fun AA_TEMP181@2 () Bool)
(declare-fun AA_TEMP180@2 () Bool)
(declare-fun %lbl%+278102 () Bool)
(declare-fun AA_TEMP180@1 () Bool)
(declare-fun AA_TEMP180@0 () Bool)
(declare-fun AA_TEMP181@1 () Bool)
(declare-fun AA_TEMP181@0 () Bool)
(declare-fun %lbl%+278101 () Bool)
(declare-fun %lbl%+278056 () Bool)
(declare-fun %lbl%+278055 () Bool)
(declare-fun %lbl%+278093 () Bool)
(declare-fun %lbl%+278100 () Bool)
(declare-fun %lbl%+278090 () Bool)
(declare-fun %lbl%+278089 () Bool)
(declare-fun %lbl%+278084 () Bool)
(declare-fun %lbl%+278083 () Bool)
(declare-fun %lbl%+278082 () Bool)
(declare-fun %lbl%+278081 () Bool)
(declare-fun %lbl%+278080 () Bool)
(declare-fun %lbl%+278079 () Bool)
(declare-fun %lbl%+278078 () Bool)
(declare-fun %lbl%+278094 () Bool)
(declare-fun %lbl%+278077 () Bool)
(declare-fun %lbl%+278076 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i3@1 () Int)
(declare-fun %lbl%+278075 () Bool)
(declare-fun %lbl%+278074 () Bool)
(declare-fun %lbl%+278098 () Bool)
(declare-fun %lbl%+278071 () Bool)
(declare-fun %lbl%+278070 () Bool)
(declare-fun %lbl%+278065 () Bool)
(declare-fun %lbl%+278064 () Bool)
(declare-fun %lbl%+278063 () Bool)
(declare-fun %lbl%+278062 () Bool)
(declare-fun %lbl%+278061 () Bool)
(declare-fun %lbl%+278060 () Bool)
(declare-fun %lbl%+278059 () Bool)
(declare-fun %lbl%+278058 () Bool)
(declare-fun $in_parameter__1 () Int)
(declare-fun %lbl%+278057 () Bool)
(declare-fun %lbl%+278054 () Bool)
(declare-fun %lbl%+278096 () Bool)
(declare-fun %lbl%+278051 () Bool)
(declare-fun %lbl%+278050 () Bool)
(declare-fun %lbl%+278045 () Bool)
(declare-fun %lbl%+278044 () Bool)
(declare-fun %lbl%+278043 () Bool)
(declare-fun %lbl%+278042 () Bool)
(declare-fun %lbl%+278041 () Bool)
(declare-fun %lbl%+278040 () Bool)
(declare-fun %lbl%+278039 () Bool)
(declare-fun %lbl%+278038 () Bool)
(declare-fun %lbl%+278037 () Bool)
(declare-fun %lbl%+278036 () Bool)
(declare-fun %lbl%+277991 () Bool)
(declare-fun %lbl%+277990 () Bool)
(declare-fun %lbl%+278028 () Bool)
(declare-fun %lbl%+278035 () Bool)
(declare-fun %lbl%+278025 () Bool)
(declare-fun %lbl%+278024 () Bool)
(declare-fun %lbl%+278019 () Bool)
(declare-fun %lbl%+278018 () Bool)
(declare-fun %lbl%+278017 () Bool)
(declare-fun %lbl%+278016 () Bool)
(declare-fun %lbl%+278015 () Bool)
(declare-fun %lbl%+278014 () Bool)
(declare-fun %lbl%+278013 () Bool)
(declare-fun %lbl%+278029 () Bool)
(declare-fun %lbl%+278012 () Bool)
(declare-fun %lbl%+278011 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i3@1 () Int)
(declare-fun %lbl%+278010 () Bool)
(declare-fun %lbl%+278009 () Bool)
(declare-fun %lbl%+278033 () Bool)
(declare-fun %lbl%+278006 () Bool)
(declare-fun %lbl%+278005 () Bool)
(declare-fun %lbl%+278000 () Bool)
(declare-fun %lbl%+277999 () Bool)
(declare-fun %lbl%+277998 () Bool)
(declare-fun %lbl%+277997 () Bool)
(declare-fun %lbl%+277996 () Bool)
(declare-fun %lbl%+277995 () Bool)
(declare-fun %lbl%+277994 () Bool)
(declare-fun %lbl%+277993 () Bool)
(declare-fun %lbl%+277992 () Bool)
(declare-fun %lbl%+277989 () Bool)
(declare-fun %lbl%+278031 () Bool)
(declare-fun %lbl%+277986 () Bool)
(declare-fun %lbl%+277985 () Bool)
(declare-fun %lbl%+277980 () Bool)
(declare-fun %lbl%+277979 () Bool)
(declare-fun %lbl%+277978 () Bool)
(declare-fun %lbl%+277977 () Bool)
(declare-fun %lbl%+277976 () Bool)
(declare-fun %lbl%+277975 () Bool)
(declare-fun %lbl%+277974 () Bool)
(declare-fun %lbl%+277973 () Bool)
(declare-fun %lbl%+277972 () Bool)
(declare-fun %lbl%+282127 () Bool)
(declare-fun %lbl%+282148 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@0 T@U) ) (!  (=> (and (= (type w@@0) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@0)) (= fixed.java.io.Serializable w@@0))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@0))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@1 T@U) ) (!  (=> (and (= (type w@@1) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@1)) (= fixed.java.lang.Comparable w@@1))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@1))
)))
(assert (= (type fixed.java.lang.Integer) javaTypeType))
(assert (not (= fixed.java.lang.Integer fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Integer fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.Integer fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.lang.Comparable))
(assert (forall ((w@@2 T@U) ) (!  (=> (= (type w@@2) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@2) (UOrdering2 w@@2 fixed.java.lang.Object)) (or (= fixed.java.lang.Integer w@@2) (= fixed.java.lang.Object w@@2))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@2) (UOrdering2 w@@2 fixed.java.lang.Object))
)))
(assert (forall ((w@@3 T@U) ) (!  (=> (= (type w@@3) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@3) (UOrdering2 w@@3 fixed.java.io.Serializable)) (or (= fixed.java.lang.Integer w@@3) (= fixed.java.io.Serializable w@@3))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@3) (UOrdering2 w@@3 fixed.java.io.Serializable))
)))
(assert (forall ((w@@4 T@U) ) (!  (=> (= (type w@@4) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@4) (UOrdering2 w@@4 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Integer w@@4) (= fixed.java.lang.Comparable w@@4))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@4) (UOrdering2 w@@4 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) javaTypeType) (UOrdering2 fixed.java.lang.Integer w@@5)) (or (or (or (= fixed.java.lang.Integer w@@5) (UOrdering2 fixed.java.lang.Object w@@5)) (UOrdering2 fixed.java.io.Serializable w@@5)) (UOrdering2 fixed.java.lang.Comparable w@@5)))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@5))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) javaTypeType) (UOrdering2 w@@6 fixed.java.lang.Integer)) (= (oneStep fixed.java.lang.Object w@@6) fixed.java.lang.Integer))
 :pattern ( (UOrdering2 w@@6 fixed.java.lang.Integer))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@7 T@U) ) (!  (=> (= (type w@@7) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@7) (= fixed.java.lang.Object w@@7))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object))
)))
(assert (forall ((w@@8 T@U) ) (!  (=> (= (type w@@8) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@8) (= fixed.java.io.Serializable w@@8))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (and (= (type w@@9) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@9)) (or (or (= fixed.java.lang.Throwable w@@9) (UOrdering2 fixed.java.lang.Object w@@9)) (UOrdering2 fixed.java.io.Serializable w@@9)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@9))
)))
(assert (forall ((w@@10 T@U) ) (!  (=> (and (= (type w@@10) javaTypeType) (UOrdering2 w@@10 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@10) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@10 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@11 T@U) ) (!  (=> (= (type w@@11) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@11) (= fixed.java.lang.Throwable w@@11))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@12)) (or (= fixed.java.lang.Exception w@@12) (UOrdering2 fixed.java.lang.Throwable w@@12)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@12))
)))
(assert (forall ((w@@13 T@U) ) (!  (=> (and (= (type w@@13) javaTypeType) (UOrdering2 w@@13 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@13) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@13 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@14 T@U) ) (!  (=> (= (type w@@14) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@14) (= fixed.java.lang.Exception w@@14))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (and (= (type w@@15) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@15)) (or (= fixed.java.lang.RuntimeException w@@15) (UOrdering2 fixed.java.lang.Exception w@@15)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@15))
)))
(assert (forall ((w@@16 T@U) ) (!  (=> (and (= (type w@@16) javaTypeType) (UOrdering2 w@@16 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@16) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@16 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@17 T@U) ) (!  (=> (= (type w@@17) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@17) (= fixed.java.lang.RuntimeException w@@17))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (and (= (type w@@18) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@18)) (or (= fixed.java.lang.NullPointerException w@@18) (UOrdering2 fixed.java.lang.RuntimeException w@@18)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@18))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (and (= (type w@@19) javaTypeType) (UOrdering2 w@@19 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@19) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@19 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@20 T@U) ) (!  (=> (= (type w@@20) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@20) (UOrdering2 w@@20 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@20) (= fixed.java.lang.RuntimeException w@@20))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@20) (UOrdering2 w@@20 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@21 T@U) ) (!  (=> (and (= (type w@@21) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@21)) (or (= fixed.java.lang.ClassCastException w@@21) (UOrdering2 fixed.java.lang.RuntimeException w@@21)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@21))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (and (= (type w@@22) javaTypeType) (UOrdering2 w@@22 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@22) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@22 fixed.java.lang.ClassCastException))
)))
(assert (= (type fixed.MoreSanity) javaTypeType))
(assert (not (= fixed.MoreSanity fixed.java.lang.Object)))
(assert (UOrdering2 fixed.MoreSanity fixed.java.lang.Object))
(assert (forall ((w@@23 T@U) ) (!  (=> (= (type w@@23) javaTypeType) (=> (and (UOrdering2 fixed.MoreSanity w@@23) (UOrdering2 w@@23 fixed.java.lang.Object)) (or (= fixed.MoreSanity w@@23) (= fixed.java.lang.Object w@@23))))
 :pattern ( (UOrdering2 fixed.MoreSanity w@@23) (UOrdering2 w@@23 fixed.java.lang.Object))
)))
(assert (forall ((w@@24 T@U) ) (!  (=> (and (= (type w@@24) javaTypeType) (UOrdering2 fixed.MoreSanity w@@24)) (or (= fixed.MoreSanity w@@24) (UOrdering2 fixed.java.lang.Object w@@24)))
 :pattern ( (UOrdering2 fixed.MoreSanity w@@24))
)))
(assert (forall ((w@@25 T@U) ) (!  (=> (and (= (type w@@25) javaTypeType) (UOrdering2 w@@25 fixed.MoreSanity)) (= (oneStep fixed.java.lang.Object w@@25) fixed.MoreSanity))
 :pattern ( (UOrdering2 w@@25 fixed.MoreSanity))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@26 T@U) ) (!  (=> (= (type w@@26) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (UOrdering2 w@@26 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (= fixed.java.lang.Object w@@26))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (UOrdering2 w@@26 fixed.java.lang.Object))
)))
(assert (forall ((w@@27 T@U) ) (!  (=> (and (= (type w@@27) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27) (UOrdering2 fixed.java.lang.Object w@@27)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27))
)))
(assert (forall ((w@@28 T@U) ) (!  (=> (and (= (type w@@28) javaTypeType) (UOrdering2 w@@28 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@28) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@28 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@29 T@U) ) (!  (=> (= (type w@@29) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@29) (UOrdering2 w@@29 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@29) (= fixed.java.lang.RuntimeException w@@29))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@29) (UOrdering2 w@@29 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@30 T@U) ) (!  (=> (and (= (type w@@30) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@30)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@30) (UOrdering2 fixed.java.lang.RuntimeException w@@30)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@30))
)))
(assert (forall ((w@@31 T@U) ) (!  (=> (and (= (type w@@31) javaTypeType) (UOrdering2 w@@31 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@31) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@31 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@32 T@U) ) (!  (=> (= (type w@@32) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@32) (UOrdering2 w@@32 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@32) (= fixed.java.lang.IndexOutOfBoundsException w@@32))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@32) (UOrdering2 w@@32 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@33)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@33) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@33)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@33))
)))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 w@@34 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@34) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@34 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.Number) javaTypeType))
(assert (not (= fixed.java.lang.Number fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Number fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.io.Serializable))
(assert (forall ((w@@35 T@U) ) (!  (=> (= (type w@@35) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@35) (UOrdering2 w@@35 fixed.java.lang.Object)) (or (= fixed.java.lang.Number w@@35) (= fixed.java.lang.Object w@@35))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@35) (UOrdering2 w@@35 fixed.java.lang.Object))
)))
(assert (forall ((w@@36 T@U) ) (!  (=> (= (type w@@36) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@36) (UOrdering2 w@@36 fixed.java.io.Serializable)) (or (= fixed.java.lang.Number w@@36) (= fixed.java.io.Serializable w@@36))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@36) (UOrdering2 w@@36 fixed.java.io.Serializable))
)))
(assert (forall ((w@@37 T@U) ) (!  (=> (and (= (type w@@37) javaTypeType) (UOrdering2 fixed.java.lang.Number w@@37)) (or (or (= fixed.java.lang.Number w@@37) (UOrdering2 fixed.java.lang.Object w@@37)) (UOrdering2 fixed.java.io.Serializable w@@37)))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@37))
)))
(assert (forall ((w@@38 T@U) ) (!  (=> (and (= (type w@@38) javaTypeType) (UOrdering2 w@@38 fixed.java.lang.Number)) (= (oneStep fixed.java.lang.Object w@@38) fixed.java.lang.Number))
 :pattern ( (UOrdering2 w@@38 fixed.java.lang.Number))
)))
(assert (= (type fixed.java.lang.ArithmeticException) javaTypeType))
(assert (not (= fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException))
(assert (forall ((w@@39 T@U) ) (!  (=> (= (type w@@39) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArithmeticException w@@39) (UOrdering2 w@@39 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ArithmeticException w@@39) (= fixed.java.lang.RuntimeException w@@39))))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@39) (UOrdering2 w@@39 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (and (= (type w@@40) javaTypeType) (UOrdering2 fixed.java.lang.ArithmeticException w@@40)) (or (= fixed.java.lang.ArithmeticException w@@40) (UOrdering2 fixed.java.lang.RuntimeException w@@40)))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@40))
)))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 w@@41 fixed.java.lang.ArithmeticException)) (= (oneStep fixed.java.lang.RuntimeException w@@41) fixed.java.lang.ArithmeticException))
 :pattern ( (UOrdering2 w@@41 fixed.java.lang.ArithmeticException))
)))
(assert (forall ((w@@42 T@U) ) (!  (=> (and (= (type w@@42) javaTypeType) (UOrdering2 w@@42 fixed.java.lang.Object)) (or (or (or (or (or (= fixed.java.lang.Object w@@42) (UOrdering2 w@@42 fixed.java.lang.Integer)) (UOrdering2 w@@42 fixed.java.lang.Throwable)) (UOrdering2 w@@42 fixed.MoreSanity)) (UOrdering2 w@@42 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@42 fixed.java.lang.Number)))
 :pattern ( (UOrdering2 w@@42 fixed.java.lang.Object))
)))
(assert (forall ((w@@43 T@U) ) (!  (=> (and (= (type w@@43) javaTypeType) (UOrdering2 w@@43 fixed.java.io.Serializable)) (or (or (or (= fixed.java.io.Serializable w@@43) (UOrdering2 w@@43 fixed.java.lang.Integer)) (UOrdering2 w@@43 fixed.java.lang.Throwable)) (UOrdering2 w@@43 fixed.java.lang.Number)))
 :pattern ( (UOrdering2 w@@43 fixed.java.io.Serializable))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (and (= (type w@@44) javaTypeType) (UOrdering2 w@@44 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Comparable w@@44) (UOrdering2 w@@44 fixed.java.lang.Integer)))
 :pattern ( (UOrdering2 w@@44 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@45 T@U) ) (!  (=> (and (= (type w@@45) javaTypeType) (UOrdering2 w@@45 fixed.java.lang.Integer)) (= fixed.java.lang.Integer w@@45))
 :pattern ( (UOrdering2 w@@45 fixed.java.lang.Integer))
)))
(assert (forall ((w@@46 T@U) ) (!  (=> (and (= (type w@@46) javaTypeType) (UOrdering2 w@@46 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@46) (UOrdering2 w@@46 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@46 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@47 T@U) ) (!  (=> (and (= (type w@@47) javaTypeType) (UOrdering2 w@@47 fixed.java.lang.Exception)) (or (= fixed.java.lang.Exception w@@47) (UOrdering2 w@@47 fixed.java.lang.RuntimeException)))
 :pattern ( (UOrdering2 w@@47 fixed.java.lang.Exception))
)))
(assert (forall ((w@@48 T@U) ) (!  (=> (and (= (type w@@48) javaTypeType) (UOrdering2 w@@48 fixed.java.lang.RuntimeException)) (or (or (or (or (= fixed.java.lang.RuntimeException w@@48) (UOrdering2 w@@48 fixed.java.lang.NullPointerException)) (UOrdering2 w@@48 fixed.java.lang.ClassCastException)) (UOrdering2 w@@48 fixed.java.lang.IndexOutOfBoundsException)) (UOrdering2 w@@48 fixed.java.lang.ArithmeticException)))
 :pattern ( (UOrdering2 w@@48 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@49 T@U) ) (!  (=> (and (= (type w@@49) javaTypeType) (UOrdering2 w@@49 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@49))
 :pattern ( (UOrdering2 w@@49 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@50 T@U) ) (!  (=> (and (= (type w@@50) javaTypeType) (UOrdering2 w@@50 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@50))
 :pattern ( (UOrdering2 w@@50 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@51 T@U) ) (!  (=> (and (= (type w@@51) javaTypeType) (UOrdering2 w@@51 fixed.MoreSanity)) (= fixed.MoreSanity w@@51))
 :pattern ( (UOrdering2 w@@51 fixed.MoreSanity))
)))
(assert (forall ((w@@52 T@U) ) (!  (=> (and (= (type w@@52) javaTypeType) (UOrdering2 w@@52 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@52))
 :pattern ( (UOrdering2 w@@52 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@53 T@U) ) (!  (=> (and (= (type w@@53) javaTypeType) (UOrdering2 w@@53 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@53) (UOrdering2 w@@53 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@53 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@54 T@U) ) (!  (=> (and (= (type w@@54) javaTypeType) (UOrdering2 w@@54 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@54))
 :pattern ( (UOrdering2 w@@54 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@55 T@U) ) (!  (=> (and (= (type w@@55) javaTypeType) (UOrdering2 w@@55 fixed.java.lang.Number)) (= fixed.java.lang.Number w@@55))
 :pattern ( (UOrdering2 w@@55 fixed.java.lang.Number))
)))
(assert (forall ((w@@56 T@U) ) (!  (=> (and (= (type w@@56) javaTypeType) (UOrdering2 w@@56 fixed.java.lang.ArithmeticException)) (= fixed.java.lang.ArithmeticException w@@56))
 :pattern ( (UOrdering2 w@@56 fixed.java.lang.ArithmeticException))
)))
(assert  (and (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 4)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (Ctor refType) 5)) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.java.io.Serializable fixed.java.lang.Comparable fixed.java.lang.Integer fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.lang.NullPointerException fixed.java.lang.ClassCastException fixed.MoreSanity fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.Number fixed.java.lang.ArithmeticException)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCMo.103:15|
 :skolemid |1360|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCMo.107:15|
 :skolemid |1361|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCMo.111:15|
 :skolemid |1362|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCMo.115:15|
 :skolemid |1363|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCMo.119:15|
 :skolemid |1364|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCMo.123:15|
 :skolemid |1365|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCMo.125:15|
 :skolemid |1366|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCMo.5762:15|
 :skolemid |1550|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCMo.5766:15|
 :skolemid |1551|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCMo.5770:15|
 :skolemid |1552|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCMo.5774:15|
 :skolemid |1553|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCMo.5778:15|
 :skolemid |1554|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCMo.5782:15|
 :skolemid |1555|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCMo.5784:15|
 :skolemid |1556|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap) (MapType0Type refType))) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))))
(push 1)
(set-info :boogie-vc-id PROC_.MoreSanity$loopAndbranch_safe$int_int_EQ_unsafe__xx__fixed)
(assert (not
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon17_dummy_correct  (=> (! (and %lbl%+278034 true) :lblpos +278034) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon17_correct  (=> (! (and %lbl%+278027 true) :lblpos +278027) (=> (= inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i5@1 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon17_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon23_Else_correct  (=> (! (and %lbl%+278026 true) :lblpos +278026) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon17_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$anon17_dummy_correct  (=> (! (and %lbl%+278022 true) :lblpos +278022) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$anon17_correct  (=> (! (and %lbl%+278020 true) :lblpos +278020) (=> (= inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$out_i5@2 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$anon17_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$anon23_Else_correct  (=> (! (and %lbl%+278021 true) :lblpos +278021) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$anon17_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon11_dummy_correct  (=> (! (and %lbl%+278032 true) :lblpos +278032) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon11_correct  (=> (! (and %lbl%+278008 true) :lblpos +278008) (=> (= inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i4@1 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon11_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon21_Else_correct  (=> (! (and %lbl%+278007 true) :lblpos +278007) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon11_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon11_dummy_correct  (=> (! (and %lbl%+278003 true) :lblpos +278003) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon11_correct  (=> (! (and %lbl%+278001 true) :lblpos +278001) (=> (= inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$out_i4@2 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon11_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon21_Else_correct  (=> (! (and %lbl%+278002 true) :lblpos +278002) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon11_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon17_dummy_correct  (=> (! (and %lbl%+278099 true) :lblpos +278099) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon17_correct  (=> (! (and %lbl%+278092 true) :lblpos +278092) (=> (= inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i5@1 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon17_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon23_Else_correct  (=> (! (and %lbl%+278091 true) :lblpos +278091) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon17_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon17_dummy_correct  (=> (! (and %lbl%+278087 true) :lblpos +278087) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon17_correct  (=> (! (and %lbl%+278085 true) :lblpos +278085) (=> (= inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$out_i5@2 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon17_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon23_Else_correct  (=> (! (and %lbl%+278086 true) :lblpos +278086) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon17_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon11_dummy_correct  (=> (! (and %lbl%+278097 true) :lblpos +278097) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon11_correct  (=> (! (and %lbl%+278073 true) :lblpos +278073) (=> (= inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i4@1 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon11_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon21_Else_correct  (=> (! (and %lbl%+278072 true) :lblpos +278072) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon11_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$anon11_dummy_correct  (=> (! (and %lbl%+278068 true) :lblpos +278068) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$anon11_correct  (=> (! (and %lbl%+278066 true) :lblpos +278066) (=> (= inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$out_i4@2 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$anon11_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$anon21_Else_correct  (=> (! (and %lbl%+278067 true) :lblpos +278067) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$anon11_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon5_dummy_correct  (=> (! (and %lbl%+278095 true) :lblpos +278095) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon5_correct  (=> (! (and %lbl%+278053 true) :lblpos +278053) (=> (= inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i2@1 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon5_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon19_Else_correct  (=> (! (and %lbl%+278052 true) :lblpos +278052) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon5_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$anon5_dummy_correct  (=> (! (and %lbl%+278048 true) :lblpos +278048) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$anon5_correct  (=> (! (and %lbl%+278046 true) :lblpos +278046) (=> (= inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$out_i2@2 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$anon5_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$anon19_Else_correct  (=> (! (and %lbl%+278047 true) :lblpos +278047) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$anon5_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon5_dummy_correct  (=> (! (and %lbl%+278030 true) :lblpos +278030) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon5_correct  (=> (! (and %lbl%+277988 true) :lblpos +277988) (=> (= inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i2@1 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon5_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon19_Else_correct  (=> (! (and %lbl%+277987 true) :lblpos +277987) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon5_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$anon5_dummy_correct  (=> (! (and %lbl%+277983 true) :lblpos +277983) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$anon5_correct  (=> (! (and %lbl%+277981 true) :lblpos +277981) (=> (= inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$out_i2@2 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$anon5_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$anon19_Else_correct  (=> (! (and %lbl%+277982 true) :lblpos +277982) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$anon5_correct))))
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+282129 true) :lblpos +282129) (! (or %lbl%@283302  (and AA_TEMP181@2 AA_TEMP180@2)) :lblneg @283302))))
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+278102 true) :lblpos +278102) (=> (and (and (and (=> AA_TEMP180@1 (or AA_TEMP180@0 (= 1 1))) (=> (or AA_TEMP180@0 (= 1 1)) AA_TEMP180@1)) (and (=> AA_TEMP181@1 (or AA_TEMP181@0 (= fixed.$null fixed.$null))) (=> (or AA_TEMP181@0 (= fixed.$null fixed.$null)) AA_TEMP181@1))) (and (and (=> AA_TEMP180@2 AA_TEMP180@1) (=> AA_TEMP180@1 AA_TEMP180@2)) (and (=> AA_TEMP181@2 AA_TEMP181@1) (=> AA_TEMP181@1 AA_TEMP181@2)))) GeneratedUnifiedExit_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$Return_correct  (=> (! (and %lbl%+278101 true) :lblpos +278101) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block19_correct  (=> (! (and %lbl%+278056 true) :lblpos +278056) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$Return_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block14_correct  (=> (! (and %lbl%+278055 true) :lblpos +278055) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block19_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon23_Then_correct  (=> (! (and %lbl%+278093 true) :lblpos +278093) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block14_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block18_last_correct  (=> (! (and %lbl%+278100 true) :lblpos +278100) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon23_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon23_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block18$1_correct  (=> (! (and %lbl%+278090 true) :lblpos +278090) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block18_last_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$Return_correct  (=> (! (and %lbl%+278089 true) :lblpos +278089) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block18$1_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon23_Then_correct  (=> (! (and %lbl%+278084 true) :lblpos +278084) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$Return_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$block18_correct  (=> (! (and %lbl%+278083 true) :lblpos +278083) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon23_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon23_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$entry_correct  (=> (! (and %lbl%+278082 true) :lblpos +278082) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$block18_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$Entry_correct  (=> (! (and %lbl%+278081 true) :lblpos +278081) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block18_correct  (=> (! (and %lbl%+278080 true) :lblpos +278080) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$Entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon14_correct  (=> (! (and %lbl%+278079 true) :lblpos +278079) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block18_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon22_Else_correct  (=> (! (and %lbl%+278078 true) :lblpos +278078) (=> (> 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon14_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon22_Then_correct  (=> (! (and %lbl%+278094 true) :lblpos +278094) (=> (>= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block14_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block15_correct  (=> (! (and %lbl%+278077 true) :lblpos +278077) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon22_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon22_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon20_Then_correct  (=> (! (and %lbl%+278076 true) :lblpos +278076) (=> (< inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i3@1 10) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block15_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block17_correct  (=> (! (and %lbl%+278075 true) :lblpos +278075) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block14_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon21_Then_correct  (=> (! (and %lbl%+278074 true) :lblpos +278074) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block17_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block16_last_correct  (=> (! (and %lbl%+278098 true) :lblpos +278098) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon21_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon21_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block16$1_correct  (=> (! (and %lbl%+278071 true) :lblpos +278071) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block16_last_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$Return_correct  (=> (! (and %lbl%+278070 true) :lblpos +278070) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block16$1_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$anon21_Then_correct  (=> (! (and %lbl%+278065 true) :lblpos +278065) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$Return_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$block16_correct  (=> (! (and %lbl%+278064 true) :lblpos +278064) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$anon21_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$anon21_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$entry_correct  (=> (! (and %lbl%+278063 true) :lblpos +278063) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$block16_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$Entry_correct  (=> (! (and %lbl%+278062 true) :lblpos +278062) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block16_correct  (=> (! (and %lbl%+278061 true) :lblpos +278061) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block16$0$Entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon8_correct  (=> (! (and %lbl%+278060 true) :lblpos +278060) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block16_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon20_Else_correct  (=> (! (and %lbl%+278059 true) :lblpos +278059) (=> (<= 10 inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i3@1) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon8_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block12_correct  (=> (! (and %lbl%+278058 true) :lblpos +278058) (=> (= inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$i3@1 (+ $in_parameter__1 10)) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon20_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon20_Else_correct)))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon18_Then_correct  (=> (! (and %lbl%+278057 true) :lblpos +278057) (=> (>= $in_parameter__1 0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block12_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon19_Then_correct  (=> (! (and %lbl%+278054 true) :lblpos +278054) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block14_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block13_last_correct  (=> (! (and %lbl%+278096 true) :lblpos +278096) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon19_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon19_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block13$1_correct  (=> (! (and %lbl%+278051 true) :lblpos +278051) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block13_last_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$Return_correct  (=> (! (and %lbl%+278050 true) :lblpos +278050) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block13$1_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$anon19_Then_correct  (=> (! (and %lbl%+278045 true) :lblpos +278045) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$Return_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$block13_correct  (=> (! (and %lbl%+278044 true) :lblpos +278044) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$anon19_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$anon19_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$entry_correct  (=> (! (and %lbl%+278043 true) :lblpos +278043) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$block13_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$Entry_correct  (=> (! (and %lbl%+278042 true) :lblpos +278042) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block13_correct  (=> (! (and %lbl%+278041 true) :lblpos +278041) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block13$0$Entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon18_Else_correct  (=> (! (and %lbl%+278040 true) :lblpos +278040) (=> (> 0 $in_parameter__1) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$block13_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon0_correct  (=> (! (and %lbl%+278039 true) :lblpos +278039) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T))
 :qid |RSPROCMo.8817:20|
 :skolemid |1593|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCMo.8818:20|
 :skolemid |1594|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCMo.8819:20|
 :skolemid |1595|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon18_Then_correct inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon18_Else_correct))))))
(let ((inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$Entry_correct  (=> (! (and %lbl%+278038 true) :lblpos +278038) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+278037 true) :lblpos +278037) inline$fixed.MoreSanity$loopAndbranch_safe$int_int$0$Entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$Return_correct  (=> (! (and %lbl%+278036 true) :lblpos +278036) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block21_correct  (=> (! (and %lbl%+277991 true) :lblpos +277991) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$Return_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block16_correct  (=> (! (and %lbl%+277990 true) :lblpos +277990) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block21_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon23_Then_correct  (=> (! (and %lbl%+278028 true) :lblpos +278028) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block16_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block20_last_correct  (=> (! (and %lbl%+278035 true) :lblpos +278035) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon23_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon23_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block20$1_correct  (=> (! (and %lbl%+278025 true) :lblpos +278025) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block20_last_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$Return_correct  (=> (! (and %lbl%+278024 true) :lblpos +278024) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block20$1_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$anon23_Then_correct  (=> (! (and %lbl%+278019 true) :lblpos +278019) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$Return_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$block20_correct  (=> (! (and %lbl%+278018 true) :lblpos +278018) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$anon23_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$anon23_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$entry_correct  (=> (! (and %lbl%+278017 true) :lblpos +278017) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$block20_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$Entry_correct  (=> (! (and %lbl%+278016 true) :lblpos +278016) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block20_correct  (=> (! (and %lbl%+278015 true) :lblpos +278015) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block20$0$Entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon14_correct  (=> (! (and %lbl%+278014 true) :lblpos +278014) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block20_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon22_Else_correct  (=> (! (and %lbl%+278013 true) :lblpos +278013) (=> (> 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon14_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon22_Then_correct  (=> (! (and %lbl%+278029 true) :lblpos +278029) (=> (>= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block16_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block17_correct  (=> (! (and %lbl%+278012 true) :lblpos +278012) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon22_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon22_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon20_Then_correct  (=> (! (and %lbl%+278011 true) :lblpos +278011) (=> (< inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i3@1 10) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block17_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block19_correct  (=> (! (and %lbl%+278010 true) :lblpos +278010) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block16_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon21_Then_correct  (=> (! (and %lbl%+278009 true) :lblpos +278009) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block19_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block18_last_correct  (=> (! (and %lbl%+278033 true) :lblpos +278033) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon21_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon21_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block18$1_correct  (=> (! (and %lbl%+278006 true) :lblpos +278006) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block18_last_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$Return_correct  (=> (! (and %lbl%+278005 true) :lblpos +278005) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block18$1_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon21_Then_correct  (=> (! (and %lbl%+278000 true) :lblpos +278000) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$Return_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$block18_correct  (=> (! (and %lbl%+277999 true) :lblpos +277999) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon21_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$anon21_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$entry_correct  (=> (! (and %lbl%+277998 true) :lblpos +277998) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$block18_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$Entry_correct  (=> (! (and %lbl%+277997 true) :lblpos +277997) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block18_correct  (=> (! (and %lbl%+277996 true) :lblpos +277996) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block18$0$Entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon8_correct  (=> (! (and %lbl%+277995 true) :lblpos +277995) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block18_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon20_Else_correct  (=> (! (and %lbl%+277994 true) :lblpos +277994) (=> (<= 10 inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i3@1) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon8_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block14_correct  (=> (! (and %lbl%+277993 true) :lblpos +277993) (=> (= inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$i3@1 (+ $in_parameter__1 10)) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon20_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon20_Else_correct)))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon18_Then_correct  (=> (! (and %lbl%+277992 true) :lblpos +277992) (=> (>= $in_parameter__1 0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block14_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon19_Then_correct  (=> (! (and %lbl%+277989 true) :lblpos +277989) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block16_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block15_last_correct  (=> (! (and %lbl%+278031 true) :lblpos +278031) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon19_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon19_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block15$1_correct  (=> (! (and %lbl%+277986 true) :lblpos +277986) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block15_last_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$Return_correct  (=> (! (and %lbl%+277985 true) :lblpos +277985) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block15$1_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$anon19_Then_correct  (=> (! (and %lbl%+277980 true) :lblpos +277980) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$Return_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$block15_correct  (=> (! (and %lbl%+277979 true) :lblpos +277979) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$anon19_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$anon19_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$entry_correct  (=> (! (and %lbl%+277978 true) :lblpos +277978) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$block15_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$Entry_correct  (=> (! (and %lbl%+277977 true) :lblpos +277977) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block15_correct  (=> (! (and %lbl%+277976 true) :lblpos +277976) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$inline$MoreSanity$loopAndbranch_safe$int_int_loop_block15$0$Entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon18_Else_correct  (=> (! (and %lbl%+277975 true) :lblpos +277975) (=> (> 0 $in_parameter__1) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$block15_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon0_correct  (=> (! (and %lbl%+277974 true) :lblpos +277974) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@0))
 :qid |RSPROCMo.8501:20|
 :skolemid |1590|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCMo.8502:20|
 :skolemid |1591|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCMo.8503:20|
 :skolemid |1592|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon18_Then_correct inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon18_Else_correct))))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$Entry_correct  (=> (! (and %lbl%+277973 true) :lblpos +277973) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+277972 true) :lblpos +277972) inline$unsafe.MoreSanity$loopAndbranch_safe$int_int$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+282127 true) :lblpos +282127) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+282148 true) :lblpos +282148) q@0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
