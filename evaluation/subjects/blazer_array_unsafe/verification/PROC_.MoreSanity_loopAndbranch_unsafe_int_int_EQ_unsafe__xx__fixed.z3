(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.lang.Integer () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun fixed.MoreSanity () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.Number () T@U)
(declare-fun fixed.java.lang.ArithmeticException () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun %lbl%+318867 () Bool)
(declare-fun %lbl%+318860 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i5@1 () Int)
(declare-fun $in_parameter__0 () Int)
(declare-fun %lbl%+318859 () Bool)
(declare-fun %lbl%+318855 () Bool)
(declare-fun %lbl%+318853 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$out_i5@2 () Int)
(declare-fun %lbl%+318854 () Bool)
(declare-fun %lbl%+318865 () Bool)
(declare-fun %lbl%+318841 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i4@1 () Int)
(declare-fun %lbl%+318840 () Bool)
(declare-fun %lbl%+318836 () Bool)
(declare-fun %lbl%+318834 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$out_i4@2 () Int)
(declare-fun %lbl%+318835 () Bool)
(declare-fun %lbl%+318932 () Bool)
(declare-fun %lbl%+318925 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i5@1 () Int)
(declare-fun %lbl%+318924 () Bool)
(declare-fun %lbl%+318920 () Bool)
(declare-fun %lbl%+318918 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$out_i5@2 () Int)
(declare-fun %lbl%+318919 () Bool)
(declare-fun %lbl%+318930 () Bool)
(declare-fun %lbl%+318906 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i4@1 () Int)
(declare-fun %lbl%+318905 () Bool)
(declare-fun %lbl%+318901 () Bool)
(declare-fun %lbl%+318899 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$out_i4@2 () Int)
(declare-fun %lbl%+318900 () Bool)
(declare-fun %lbl%+318928 () Bool)
(declare-fun %lbl%+318886 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i2@1 () Int)
(declare-fun %lbl%+318885 () Bool)
(declare-fun %lbl%+318881 () Bool)
(declare-fun %lbl%+318879 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$out_i2@2 () Int)
(declare-fun %lbl%+318880 () Bool)
(declare-fun %lbl%+318863 () Bool)
(declare-fun %lbl%+318821 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i2@1 () Int)
(declare-fun %lbl%+318820 () Bool)
(declare-fun %lbl%+318816 () Bool)
(declare-fun %lbl%+318814 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$out_i2@2 () Int)
(declare-fun %lbl%+318815 () Bool)
(declare-fun %lbl%+323006 () Bool)
(declare-fun %lbl%@324179 () Bool)
(declare-fun AA_TEMP231@2 () Bool)
(declare-fun AA_TEMP230@2 () Bool)
(declare-fun %lbl%+318935 () Bool)
(declare-fun AA_TEMP230@1 () Bool)
(declare-fun AA_TEMP230@0 () Bool)
(declare-fun AA_TEMP231@1 () Bool)
(declare-fun AA_TEMP231@0 () Bool)
(declare-fun %lbl%+318934 () Bool)
(declare-fun %lbl%+318889 () Bool)
(declare-fun %lbl%+318888 () Bool)
(declare-fun %lbl%+318926 () Bool)
(declare-fun %lbl%+318933 () Bool)
(declare-fun %lbl%+318923 () Bool)
(declare-fun %lbl%+318922 () Bool)
(declare-fun %lbl%+318917 () Bool)
(declare-fun %lbl%+318916 () Bool)
(declare-fun %lbl%+318915 () Bool)
(declare-fun %lbl%+318914 () Bool)
(declare-fun %lbl%+318913 () Bool)
(declare-fun %lbl%+318912 () Bool)
(declare-fun %lbl%+318911 () Bool)
(declare-fun %lbl%+318927 () Bool)
(declare-fun %lbl%+318910 () Bool)
(declare-fun %lbl%+318909 () Bool)
(declare-fun inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i3@1 () Int)
(declare-fun %lbl%+318908 () Bool)
(declare-fun %lbl%+318907 () Bool)
(declare-fun %lbl%+318931 () Bool)
(declare-fun %lbl%+318904 () Bool)
(declare-fun %lbl%+318903 () Bool)
(declare-fun %lbl%+318898 () Bool)
(declare-fun %lbl%+318897 () Bool)
(declare-fun %lbl%+318896 () Bool)
(declare-fun %lbl%+318895 () Bool)
(declare-fun %lbl%+318894 () Bool)
(declare-fun %lbl%+318893 () Bool)
(declare-fun %lbl%+318892 () Bool)
(declare-fun %lbl%+318891 () Bool)
(declare-fun $in_parameter__1 () Int)
(declare-fun %lbl%+318890 () Bool)
(declare-fun %lbl%+318887 () Bool)
(declare-fun %lbl%+318929 () Bool)
(declare-fun %lbl%+318884 () Bool)
(declare-fun %lbl%+318883 () Bool)
(declare-fun %lbl%+318878 () Bool)
(declare-fun %lbl%+318877 () Bool)
(declare-fun %lbl%+318876 () Bool)
(declare-fun %lbl%+318875 () Bool)
(declare-fun %lbl%+318874 () Bool)
(declare-fun %lbl%+318873 () Bool)
(declare-fun %lbl%+318872 () Bool)
(declare-fun %lbl%+318871 () Bool)
(declare-fun %lbl%+318870 () Bool)
(declare-fun %lbl%+318869 () Bool)
(declare-fun %lbl%+318824 () Bool)
(declare-fun %lbl%+318823 () Bool)
(declare-fun %lbl%+318861 () Bool)
(declare-fun %lbl%+318868 () Bool)
(declare-fun %lbl%+318858 () Bool)
(declare-fun %lbl%+318857 () Bool)
(declare-fun %lbl%+318852 () Bool)
(declare-fun %lbl%+318851 () Bool)
(declare-fun %lbl%+318850 () Bool)
(declare-fun %lbl%+318849 () Bool)
(declare-fun %lbl%+318848 () Bool)
(declare-fun %lbl%+318847 () Bool)
(declare-fun %lbl%+318846 () Bool)
(declare-fun %lbl%+318862 () Bool)
(declare-fun %lbl%+318845 () Bool)
(declare-fun %lbl%+318844 () Bool)
(declare-fun inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i3@1 () Int)
(declare-fun %lbl%+318843 () Bool)
(declare-fun %lbl%+318842 () Bool)
(declare-fun %lbl%+318866 () Bool)
(declare-fun %lbl%+318839 () Bool)
(declare-fun %lbl%+318838 () Bool)
(declare-fun %lbl%+318833 () Bool)
(declare-fun %lbl%+318832 () Bool)
(declare-fun %lbl%+318831 () Bool)
(declare-fun %lbl%+318830 () Bool)
(declare-fun %lbl%+318829 () Bool)
(declare-fun %lbl%+318828 () Bool)
(declare-fun %lbl%+318827 () Bool)
(declare-fun %lbl%+318826 () Bool)
(declare-fun %lbl%+318825 () Bool)
(declare-fun %lbl%+318822 () Bool)
(declare-fun %lbl%+318864 () Bool)
(declare-fun %lbl%+318819 () Bool)
(declare-fun %lbl%+318818 () Bool)
(declare-fun %lbl%+318813 () Bool)
(declare-fun %lbl%+318812 () Bool)
(declare-fun %lbl%+318811 () Bool)
(declare-fun %lbl%+318810 () Bool)
(declare-fun %lbl%+318809 () Bool)
(declare-fun %lbl%+318808 () Bool)
(declare-fun %lbl%+318807 () Bool)
(declare-fun %lbl%+318806 () Bool)
(declare-fun %lbl%+318805 () Bool)
(declare-fun %lbl%+323004 () Bool)
(declare-fun %lbl%+323025 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@0 T@U) ) (!  (=> (and (= (type w@@0) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@0)) (= fixed.java.io.Serializable w@@0))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@0))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@1 T@U) ) (!  (=> (and (= (type w@@1) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@1)) (= fixed.java.lang.Comparable w@@1))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@1))
)))
(assert (= (type fixed.java.lang.Integer) javaTypeType))
(assert (not (= fixed.java.lang.Integer fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Integer fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.Integer fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.lang.Comparable))
(assert (forall ((w@@2 T@U) ) (!  (=> (= (type w@@2) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@2) (UOrdering2 w@@2 fixed.java.lang.Object)) (or (= fixed.java.lang.Integer w@@2) (= fixed.java.lang.Object w@@2))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@2) (UOrdering2 w@@2 fixed.java.lang.Object))
)))
(assert (forall ((w@@3 T@U) ) (!  (=> (= (type w@@3) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@3) (UOrdering2 w@@3 fixed.java.io.Serializable)) (or (= fixed.java.lang.Integer w@@3) (= fixed.java.io.Serializable w@@3))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@3) (UOrdering2 w@@3 fixed.java.io.Serializable))
)))
(assert (forall ((w@@4 T@U) ) (!  (=> (= (type w@@4) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@4) (UOrdering2 w@@4 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Integer w@@4) (= fixed.java.lang.Comparable w@@4))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@4) (UOrdering2 w@@4 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) javaTypeType) (UOrdering2 fixed.java.lang.Integer w@@5)) (or (or (or (= fixed.java.lang.Integer w@@5) (UOrdering2 fixed.java.lang.Object w@@5)) (UOrdering2 fixed.java.io.Serializable w@@5)) (UOrdering2 fixed.java.lang.Comparable w@@5)))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@5))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) javaTypeType) (UOrdering2 w@@6 fixed.java.lang.Integer)) (= (oneStep fixed.java.lang.Object w@@6) fixed.java.lang.Integer))
 :pattern ( (UOrdering2 w@@6 fixed.java.lang.Integer))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@7 T@U) ) (!  (=> (= (type w@@7) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@7) (= fixed.java.lang.Object w@@7))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object))
)))
(assert (forall ((w@@8 T@U) ) (!  (=> (= (type w@@8) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@8) (= fixed.java.io.Serializable w@@8))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (and (= (type w@@9) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@9)) (or (or (= fixed.java.lang.Throwable w@@9) (UOrdering2 fixed.java.lang.Object w@@9)) (UOrdering2 fixed.java.io.Serializable w@@9)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@9))
)))
(assert (forall ((w@@10 T@U) ) (!  (=> (and (= (type w@@10) javaTypeType) (UOrdering2 w@@10 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@10) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@10 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@11 T@U) ) (!  (=> (= (type w@@11) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@11) (= fixed.java.lang.Throwable w@@11))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@12)) (or (= fixed.java.lang.Exception w@@12) (UOrdering2 fixed.java.lang.Throwable w@@12)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@12))
)))
(assert (forall ((w@@13 T@U) ) (!  (=> (and (= (type w@@13) javaTypeType) (UOrdering2 w@@13 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@13) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@13 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@14 T@U) ) (!  (=> (= (type w@@14) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@14) (= fixed.java.lang.Exception w@@14))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (and (= (type w@@15) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@15)) (or (= fixed.java.lang.RuntimeException w@@15) (UOrdering2 fixed.java.lang.Exception w@@15)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@15))
)))
(assert (forall ((w@@16 T@U) ) (!  (=> (and (= (type w@@16) javaTypeType) (UOrdering2 w@@16 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@16) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@16 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@17 T@U) ) (!  (=> (= (type w@@17) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@17) (= fixed.java.lang.RuntimeException w@@17))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (and (= (type w@@18) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@18)) (or (= fixed.java.lang.NullPointerException w@@18) (UOrdering2 fixed.java.lang.RuntimeException w@@18)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@18))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (and (= (type w@@19) javaTypeType) (UOrdering2 w@@19 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@19) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@19 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@20 T@U) ) (!  (=> (= (type w@@20) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@20) (UOrdering2 w@@20 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@20) (= fixed.java.lang.RuntimeException w@@20))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@20) (UOrdering2 w@@20 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@21 T@U) ) (!  (=> (and (= (type w@@21) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@21)) (or (= fixed.java.lang.ClassCastException w@@21) (UOrdering2 fixed.java.lang.RuntimeException w@@21)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@21))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (and (= (type w@@22) javaTypeType) (UOrdering2 w@@22 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@22) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@22 fixed.java.lang.ClassCastException))
)))
(assert (= (type fixed.MoreSanity) javaTypeType))
(assert (not (= fixed.MoreSanity fixed.java.lang.Object)))
(assert (UOrdering2 fixed.MoreSanity fixed.java.lang.Object))
(assert (forall ((w@@23 T@U) ) (!  (=> (= (type w@@23) javaTypeType) (=> (and (UOrdering2 fixed.MoreSanity w@@23) (UOrdering2 w@@23 fixed.java.lang.Object)) (or (= fixed.MoreSanity w@@23) (= fixed.java.lang.Object w@@23))))
 :pattern ( (UOrdering2 fixed.MoreSanity w@@23) (UOrdering2 w@@23 fixed.java.lang.Object))
)))
(assert (forall ((w@@24 T@U) ) (!  (=> (and (= (type w@@24) javaTypeType) (UOrdering2 fixed.MoreSanity w@@24)) (or (= fixed.MoreSanity w@@24) (UOrdering2 fixed.java.lang.Object w@@24)))
 :pattern ( (UOrdering2 fixed.MoreSanity w@@24))
)))
(assert (forall ((w@@25 T@U) ) (!  (=> (and (= (type w@@25) javaTypeType) (UOrdering2 w@@25 fixed.MoreSanity)) (= (oneStep fixed.java.lang.Object w@@25) fixed.MoreSanity))
 :pattern ( (UOrdering2 w@@25 fixed.MoreSanity))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@26 T@U) ) (!  (=> (= (type w@@26) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (UOrdering2 w@@26 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (= fixed.java.lang.Object w@@26))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (UOrdering2 w@@26 fixed.java.lang.Object))
)))
(assert (forall ((w@@27 T@U) ) (!  (=> (and (= (type w@@27) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27) (UOrdering2 fixed.java.lang.Object w@@27)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27))
)))
(assert (forall ((w@@28 T@U) ) (!  (=> (and (= (type w@@28) javaTypeType) (UOrdering2 w@@28 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@28) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@28 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@29 T@U) ) (!  (=> (= (type w@@29) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@29) (UOrdering2 w@@29 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@29) (= fixed.java.lang.RuntimeException w@@29))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@29) (UOrdering2 w@@29 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@30 T@U) ) (!  (=> (and (= (type w@@30) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@30)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@30) (UOrdering2 fixed.java.lang.RuntimeException w@@30)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@30))
)))
(assert (forall ((w@@31 T@U) ) (!  (=> (and (= (type w@@31) javaTypeType) (UOrdering2 w@@31 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@31) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@31 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@32 T@U) ) (!  (=> (= (type w@@32) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@32) (UOrdering2 w@@32 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@32) (= fixed.java.lang.IndexOutOfBoundsException w@@32))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@32) (UOrdering2 w@@32 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@33)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@33) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@33)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@33))
)))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 w@@34 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@34) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@34 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.Number) javaTypeType))
(assert (not (= fixed.java.lang.Number fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Number fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.io.Serializable))
(assert (forall ((w@@35 T@U) ) (!  (=> (= (type w@@35) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@35) (UOrdering2 w@@35 fixed.java.lang.Object)) (or (= fixed.java.lang.Number w@@35) (= fixed.java.lang.Object w@@35))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@35) (UOrdering2 w@@35 fixed.java.lang.Object))
)))
(assert (forall ((w@@36 T@U) ) (!  (=> (= (type w@@36) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@36) (UOrdering2 w@@36 fixed.java.io.Serializable)) (or (= fixed.java.lang.Number w@@36) (= fixed.java.io.Serializable w@@36))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@36) (UOrdering2 w@@36 fixed.java.io.Serializable))
)))
(assert (forall ((w@@37 T@U) ) (!  (=> (and (= (type w@@37) javaTypeType) (UOrdering2 fixed.java.lang.Number w@@37)) (or (or (= fixed.java.lang.Number w@@37) (UOrdering2 fixed.java.lang.Object w@@37)) (UOrdering2 fixed.java.io.Serializable w@@37)))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@37))
)))
(assert (forall ((w@@38 T@U) ) (!  (=> (and (= (type w@@38) javaTypeType) (UOrdering2 w@@38 fixed.java.lang.Number)) (= (oneStep fixed.java.lang.Object w@@38) fixed.java.lang.Number))
 :pattern ( (UOrdering2 w@@38 fixed.java.lang.Number))
)))
(assert (= (type fixed.java.lang.ArithmeticException) javaTypeType))
(assert (not (= fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException))
(assert (forall ((w@@39 T@U) ) (!  (=> (= (type w@@39) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArithmeticException w@@39) (UOrdering2 w@@39 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ArithmeticException w@@39) (= fixed.java.lang.RuntimeException w@@39))))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@39) (UOrdering2 w@@39 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (and (= (type w@@40) javaTypeType) (UOrdering2 fixed.java.lang.ArithmeticException w@@40)) (or (= fixed.java.lang.ArithmeticException w@@40) (UOrdering2 fixed.java.lang.RuntimeException w@@40)))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@40))
)))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 w@@41 fixed.java.lang.ArithmeticException)) (= (oneStep fixed.java.lang.RuntimeException w@@41) fixed.java.lang.ArithmeticException))
 :pattern ( (UOrdering2 w@@41 fixed.java.lang.ArithmeticException))
)))
(assert (forall ((w@@42 T@U) ) (!  (=> (and (= (type w@@42) javaTypeType) (UOrdering2 w@@42 fixed.java.lang.Object)) (or (or (or (or (or (= fixed.java.lang.Object w@@42) (UOrdering2 w@@42 fixed.java.lang.Integer)) (UOrdering2 w@@42 fixed.java.lang.Throwable)) (UOrdering2 w@@42 fixed.MoreSanity)) (UOrdering2 w@@42 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@42 fixed.java.lang.Number)))
 :pattern ( (UOrdering2 w@@42 fixed.java.lang.Object))
)))
(assert (forall ((w@@43 T@U) ) (!  (=> (and (= (type w@@43) javaTypeType) (UOrdering2 w@@43 fixed.java.io.Serializable)) (or (or (or (= fixed.java.io.Serializable w@@43) (UOrdering2 w@@43 fixed.java.lang.Integer)) (UOrdering2 w@@43 fixed.java.lang.Throwable)) (UOrdering2 w@@43 fixed.java.lang.Number)))
 :pattern ( (UOrdering2 w@@43 fixed.java.io.Serializable))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (and (= (type w@@44) javaTypeType) (UOrdering2 w@@44 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Comparable w@@44) (UOrdering2 w@@44 fixed.java.lang.Integer)))
 :pattern ( (UOrdering2 w@@44 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@45 T@U) ) (!  (=> (and (= (type w@@45) javaTypeType) (UOrdering2 w@@45 fixed.java.lang.Integer)) (= fixed.java.lang.Integer w@@45))
 :pattern ( (UOrdering2 w@@45 fixed.java.lang.Integer))
)))
(assert (forall ((w@@46 T@U) ) (!  (=> (and (= (type w@@46) javaTypeType) (UOrdering2 w@@46 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@46) (UOrdering2 w@@46 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@46 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@47 T@U) ) (!  (=> (and (= (type w@@47) javaTypeType) (UOrdering2 w@@47 fixed.java.lang.Exception)) (or (= fixed.java.lang.Exception w@@47) (UOrdering2 w@@47 fixed.java.lang.RuntimeException)))
 :pattern ( (UOrdering2 w@@47 fixed.java.lang.Exception))
)))
(assert (forall ((w@@48 T@U) ) (!  (=> (and (= (type w@@48) javaTypeType) (UOrdering2 w@@48 fixed.java.lang.RuntimeException)) (or (or (or (or (= fixed.java.lang.RuntimeException w@@48) (UOrdering2 w@@48 fixed.java.lang.NullPointerException)) (UOrdering2 w@@48 fixed.java.lang.ClassCastException)) (UOrdering2 w@@48 fixed.java.lang.IndexOutOfBoundsException)) (UOrdering2 w@@48 fixed.java.lang.ArithmeticException)))
 :pattern ( (UOrdering2 w@@48 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@49 T@U) ) (!  (=> (and (= (type w@@49) javaTypeType) (UOrdering2 w@@49 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@49))
 :pattern ( (UOrdering2 w@@49 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@50 T@U) ) (!  (=> (and (= (type w@@50) javaTypeType) (UOrdering2 w@@50 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@50))
 :pattern ( (UOrdering2 w@@50 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@51 T@U) ) (!  (=> (and (= (type w@@51) javaTypeType) (UOrdering2 w@@51 fixed.MoreSanity)) (= fixed.MoreSanity w@@51))
 :pattern ( (UOrdering2 w@@51 fixed.MoreSanity))
)))
(assert (forall ((w@@52 T@U) ) (!  (=> (and (= (type w@@52) javaTypeType) (UOrdering2 w@@52 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@52))
 :pattern ( (UOrdering2 w@@52 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@53 T@U) ) (!  (=> (and (= (type w@@53) javaTypeType) (UOrdering2 w@@53 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@53) (UOrdering2 w@@53 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@53 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@54 T@U) ) (!  (=> (and (= (type w@@54) javaTypeType) (UOrdering2 w@@54 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@54))
 :pattern ( (UOrdering2 w@@54 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@55 T@U) ) (!  (=> (and (= (type w@@55) javaTypeType) (UOrdering2 w@@55 fixed.java.lang.Number)) (= fixed.java.lang.Number w@@55))
 :pattern ( (UOrdering2 w@@55 fixed.java.lang.Number))
)))
(assert (forall ((w@@56 T@U) ) (!  (=> (and (= (type w@@56) javaTypeType) (UOrdering2 w@@56 fixed.java.lang.ArithmeticException)) (= fixed.java.lang.ArithmeticException w@@56))
 :pattern ( (UOrdering2 w@@56 fixed.java.lang.ArithmeticException))
)))
(assert  (and (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 4)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (Ctor refType) 5)) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.java.io.Serializable fixed.java.lang.Comparable fixed.java.lang.Integer fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.lang.NullPointerException fixed.java.lang.ClassCastException fixed.MoreSanity fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.Number fixed.java.lang.ArithmeticException)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCMo.103:15|
 :skolemid |1596|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCMo.107:15|
 :skolemid |1597|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCMo.111:15|
 :skolemid |1598|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCMo.115:15|
 :skolemid |1599|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCMo.119:15|
 :skolemid |1600|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCMo.123:15|
 :skolemid |1601|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCMo.125:15|
 :skolemid |1602|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCMo.5774:15|
 :skolemid |1786|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCMo.5778:15|
 :skolemid |1787|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCMo.5782:15|
 :skolemid |1788|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCMo.5786:15|
 :skolemid |1789|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCMo.5790:15|
 :skolemid |1790|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCMo.5794:15|
 :skolemid |1791|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCMo.5796:15|
 :skolemid |1792|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap) (MapType0Type refType))) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))))
(push 1)
(set-info :boogie-vc-id PROC_.MoreSanity$loopAndbranch_unsafe$int_int_EQ_unsafe__xx__fixed)
(assert (not
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon17_dummy_correct  (=> (! (and %lbl%+318867 true) :lblpos +318867) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon17_correct  (=> (! (and %lbl%+318860 true) :lblpos +318860) (=> (= inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i5@1 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon17_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon23_Else_correct  (=> (! (and %lbl%+318859 true) :lblpos +318859) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon17_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$anon17_dummy_correct  (=> (! (and %lbl%+318855 true) :lblpos +318855) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$anon17_correct  (=> (! (and %lbl%+318853 true) :lblpos +318853) (=> (= inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$out_i5@2 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$anon17_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$anon23_Else_correct  (=> (! (and %lbl%+318854 true) :lblpos +318854) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$anon17_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon11_dummy_correct  (=> (! (and %lbl%+318865 true) :lblpos +318865) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon11_correct  (=> (! (and %lbl%+318841 true) :lblpos +318841) (=> (= inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i4@1 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon11_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon21_Else_correct  (=> (! (and %lbl%+318840 true) :lblpos +318840) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon11_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon11_dummy_correct  (=> (! (and %lbl%+318836 true) :lblpos +318836) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon11_correct  (=> (! (and %lbl%+318834 true) :lblpos +318834) (=> (= inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$out_i4@2 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon11_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon21_Else_correct  (=> (! (and %lbl%+318835 true) :lblpos +318835) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon11_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon17_dummy_correct  (=> (! (and %lbl%+318932 true) :lblpos +318932) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon17_correct  (=> (! (and %lbl%+318925 true) :lblpos +318925) (=> (= inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i5@1 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon17_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon23_Else_correct  (=> (! (and %lbl%+318924 true) :lblpos +318924) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon17_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon17_dummy_correct  (=> (! (and %lbl%+318920 true) :lblpos +318920) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon17_correct  (=> (! (and %lbl%+318918 true) :lblpos +318918) (=> (= inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$out_i5@2 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon17_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon23_Else_correct  (=> (! (and %lbl%+318919 true) :lblpos +318919) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon17_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon11_dummy_correct  (=> (! (and %lbl%+318930 true) :lblpos +318930) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon11_correct  (=> (! (and %lbl%+318906 true) :lblpos +318906) (=> (= inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i4@1 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon11_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon21_Else_correct  (=> (! (and %lbl%+318905 true) :lblpos +318905) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon11_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$anon11_dummy_correct  (=> (! (and %lbl%+318901 true) :lblpos +318901) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$anon11_correct  (=> (! (and %lbl%+318899 true) :lblpos +318899) (=> (= inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$out_i4@2 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$anon11_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$anon21_Else_correct  (=> (! (and %lbl%+318900 true) :lblpos +318900) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$anon11_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon5_dummy_correct  (=> (! (and %lbl%+318928 true) :lblpos +318928) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon5_correct  (=> (! (and %lbl%+318886 true) :lblpos +318886) (=> (= inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i2@1 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon5_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon19_Else_correct  (=> (! (and %lbl%+318885 true) :lblpos +318885) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon5_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$anon5_dummy_correct  (=> (! (and %lbl%+318881 true) :lblpos +318881) true)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$anon5_correct  (=> (! (and %lbl%+318879 true) :lblpos +318879) (=> (= inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$out_i2@2 (+ $in_parameter__0 (- 0 1))) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$anon5_dummy_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$anon19_Else_correct  (=> (! (and %lbl%+318880 true) :lblpos +318880) (=> (< 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$anon5_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon5_dummy_correct  (=> (! (and %lbl%+318863 true) :lblpos +318863) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon5_correct  (=> (! (and %lbl%+318821 true) :lblpos +318821) (=> (= inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i2@1 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon5_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon19_Else_correct  (=> (! (and %lbl%+318820 true) :lblpos +318820) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon5_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$anon5_dummy_correct  (=> (! (and %lbl%+318816 true) :lblpos +318816) true)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$anon5_correct  (=> (! (and %lbl%+318814 true) :lblpos +318814) (=> (= inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$out_i2@2 (+ $in_parameter__0 (- 0 1))) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$anon5_dummy_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$anon19_Else_correct  (=> (! (and %lbl%+318815 true) :lblpos +318815) (=> (< 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$anon5_correct))))
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+323006 true) :lblpos +323006) (! (or %lbl%@324179  (and AA_TEMP231@2 AA_TEMP230@2)) :lblneg @324179))))
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+318935 true) :lblpos +318935) (=> (and (and (and (=> AA_TEMP230@1 (or AA_TEMP230@0 (= 1 1))) (=> (or AA_TEMP230@0 (= 1 1)) AA_TEMP230@1)) (and (=> AA_TEMP231@1 (or AA_TEMP231@0 (= fixed.$null fixed.$null))) (=> (or AA_TEMP231@0 (= fixed.$null fixed.$null)) AA_TEMP231@1))) (and (and (=> AA_TEMP230@2 AA_TEMP230@1) (=> AA_TEMP230@1 AA_TEMP230@2)) (and (=> AA_TEMP231@2 AA_TEMP231@1) (=> AA_TEMP231@1 AA_TEMP231@2)))) GeneratedUnifiedExit_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$Return_correct  (=> (! (and %lbl%+318934 true) :lblpos +318934) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block27_correct  (=> (! (and %lbl%+318889 true) :lblpos +318889) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$Return_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block22_correct  (=> (! (and %lbl%+318888 true) :lblpos +318888) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block27_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon23_Then_correct  (=> (! (and %lbl%+318926 true) :lblpos +318926) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block22_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block26_last_correct  (=> (! (and %lbl%+318933 true) :lblpos +318933) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon23_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon23_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block26$1_correct  (=> (! (and %lbl%+318923 true) :lblpos +318923) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block26_last_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$Return_correct  (=> (! (and %lbl%+318922 true) :lblpos +318922) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block26$1_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon23_Then_correct  (=> (! (and %lbl%+318917 true) :lblpos +318917) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$Return_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$block26_correct  (=> (! (and %lbl%+318916 true) :lblpos +318916) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon23_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon23_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$entry_correct  (=> (! (and %lbl%+318915 true) :lblpos +318915) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$block26_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$Entry_correct  (=> (! (and %lbl%+318914 true) :lblpos +318914) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block26_correct  (=> (! (and %lbl%+318913 true) :lblpos +318913) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$Entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon14_correct  (=> (! (and %lbl%+318912 true) :lblpos +318912) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block26_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon22_Else_correct  (=> (! (and %lbl%+318911 true) :lblpos +318911) (=> (> 0 $in_parameter__0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon14_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon22_Then_correct  (=> (! (and %lbl%+318927 true) :lblpos +318927) (=> (>= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block22_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block23_correct  (=> (! (and %lbl%+318910 true) :lblpos +318910) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon22_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon22_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon20_Then_correct  (=> (! (and %lbl%+318909 true) :lblpos +318909) (=> (< inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i3@1 10) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block23_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block25_correct  (=> (! (and %lbl%+318908 true) :lblpos +318908) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block22_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon21_Then_correct  (=> (! (and %lbl%+318907 true) :lblpos +318907) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block25_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_last_correct  (=> (! (and %lbl%+318931 true) :lblpos +318931) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon21_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon21_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block24$1_correct  (=> (! (and %lbl%+318904 true) :lblpos +318904) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_last_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$Return_correct  (=> (! (and %lbl%+318903 true) :lblpos +318903) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block24$1_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$anon21_Then_correct  (=> (! (and %lbl%+318898 true) :lblpos +318898) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$Return_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$block24_correct  (=> (! (and %lbl%+318897 true) :lblpos +318897) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$anon21_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$anon21_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$entry_correct  (=> (! (and %lbl%+318896 true) :lblpos +318896) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$block24_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$Entry_correct  (=> (! (and %lbl%+318895 true) :lblpos +318895) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_correct  (=> (! (and %lbl%+318894 true) :lblpos +318894) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block24$0$Entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon8_correct  (=> (! (and %lbl%+318893 true) :lblpos +318893) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon20_Else_correct  (=> (! (and %lbl%+318892 true) :lblpos +318892) (=> (<= 10 inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i3@1) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon8_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block20_correct  (=> (! (and %lbl%+318891 true) :lblpos +318891) (=> (= inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$i3@1 (- $in_parameter__1 10)) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon20_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon20_Else_correct)))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon18_Then_correct  (=> (! (and %lbl%+318890 true) :lblpos +318890) (=> (>= $in_parameter__1 0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block20_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon19_Then_correct  (=> (! (and %lbl%+318887 true) :lblpos +318887) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block22_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block21_last_correct  (=> (! (and %lbl%+318929 true) :lblpos +318929) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon19_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon19_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block21$1_correct  (=> (! (and %lbl%+318884 true) :lblpos +318884) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block21_last_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$Return_correct  (=> (! (and %lbl%+318883 true) :lblpos +318883) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block21$1_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$anon19_Then_correct  (=> (! (and %lbl%+318878 true) :lblpos +318878) (=> (<= $in_parameter__0 0) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$Return_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$block21_correct  (=> (! (and %lbl%+318877 true) :lblpos +318877) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$anon19_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$anon19_Else_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$entry_correct  (=> (! (and %lbl%+318876 true) :lblpos +318876) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$block21_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$Entry_correct  (=> (! (and %lbl%+318875 true) :lblpos +318875) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block21_correct  (=> (! (and %lbl%+318874 true) :lblpos +318874) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block21$0$Entry_correct)))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon18_Else_correct  (=> (! (and %lbl%+318873 true) :lblpos +318873) (=> (> 0 $in_parameter__1) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$block21_correct))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon0_correct  (=> (! (and %lbl%+318872 true) :lblpos +318872) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T))
 :qid |RSPROCMo.8861:20|
 :skolemid |1829|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCMo.8862:20|
 :skolemid |1830|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCMo.8863:20|
 :skolemid |1831|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon18_Then_correct inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon18_Else_correct))))))
(let ((inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$Entry_correct  (=> (! (and %lbl%+318871 true) :lblpos +318871) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+318870 true) :lblpos +318870) inline$fixed.MoreSanity$loopAndbranch_unsafe$int_int$0$Entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$Return_correct  (=> (! (and %lbl%+318869 true) :lblpos +318869) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block29_correct  (=> (! (and %lbl%+318824 true) :lblpos +318824) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$Return_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_correct  (=> (! (and %lbl%+318823 true) :lblpos +318823) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block29_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon23_Then_correct  (=> (! (and %lbl%+318861 true) :lblpos +318861) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block28_last_correct  (=> (! (and %lbl%+318868 true) :lblpos +318868) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon23_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon23_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block28$1_correct  (=> (! (and %lbl%+318858 true) :lblpos +318858) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block28_last_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$Return_correct  (=> (! (and %lbl%+318857 true) :lblpos +318857) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block28$1_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$anon23_Then_correct  (=> (! (and %lbl%+318852 true) :lblpos +318852) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$Return_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$block28_correct  (=> (! (and %lbl%+318851 true) :lblpos +318851) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$anon23_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$anon23_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$entry_correct  (=> (! (and %lbl%+318850 true) :lblpos +318850) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$block28_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$Entry_correct  (=> (! (and %lbl%+318849 true) :lblpos +318849) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block28_correct  (=> (! (and %lbl%+318848 true) :lblpos +318848) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block28$0$Entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon14_correct  (=> (! (and %lbl%+318847 true) :lblpos +318847) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block28_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon22_Else_correct  (=> (! (and %lbl%+318846 true) :lblpos +318846) (=> (> 0 $in_parameter__0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon14_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon22_Then_correct  (=> (! (and %lbl%+318862 true) :lblpos +318862) (=> (>= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block25_correct  (=> (! (and %lbl%+318845 true) :lblpos +318845) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon22_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon22_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon20_Then_correct  (=> (! (and %lbl%+318844 true) :lblpos +318844) (=> (< inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i3@1 10) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block25_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block27_correct  (=> (! (and %lbl%+318843 true) :lblpos +318843) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon21_Then_correct  (=> (! (and %lbl%+318842 true) :lblpos +318842) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block27_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block26_last_correct  (=> (! (and %lbl%+318866 true) :lblpos +318866) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon21_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon21_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block26$1_correct  (=> (! (and %lbl%+318839 true) :lblpos +318839) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block26_last_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$Return_correct  (=> (! (and %lbl%+318838 true) :lblpos +318838) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block26$1_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon21_Then_correct  (=> (! (and %lbl%+318833 true) :lblpos +318833) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$Return_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$block26_correct  (=> (! (and %lbl%+318832 true) :lblpos +318832) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon21_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$anon21_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$entry_correct  (=> (! (and %lbl%+318831 true) :lblpos +318831) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$block26_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$Entry_correct  (=> (! (and %lbl%+318830 true) :lblpos +318830) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block26_correct  (=> (! (and %lbl%+318829 true) :lblpos +318829) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block26$0$Entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon8_correct  (=> (! (and %lbl%+318828 true) :lblpos +318828) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block26_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon20_Else_correct  (=> (! (and %lbl%+318827 true) :lblpos +318827) (=> (<= 10 inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i3@1) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon8_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block22_correct  (=> (! (and %lbl%+318826 true) :lblpos +318826) (=> (= inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$i3@1 (- $in_parameter__1 10)) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon20_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon20_Else_correct)))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon18_Then_correct  (=> (! (and %lbl%+318825 true) :lblpos +318825) (=> (>= $in_parameter__1 0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block22_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon19_Then_correct  (=> (! (and %lbl%+318822 true) :lblpos +318822) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block24_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block23_last_correct  (=> (! (and %lbl%+318864 true) :lblpos +318864) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon19_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon19_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block23$1_correct  (=> (! (and %lbl%+318819 true) :lblpos +318819) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block23_last_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$Return_correct  (=> (! (and %lbl%+318818 true) :lblpos +318818) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block23$1_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$anon19_Then_correct  (=> (! (and %lbl%+318813 true) :lblpos +318813) (=> (<= $in_parameter__0 0) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$Return_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$block23_correct  (=> (! (and %lbl%+318812 true) :lblpos +318812) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$anon19_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$anon19_Else_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$entry_correct  (=> (! (and %lbl%+318811 true) :lblpos +318811) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$block23_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$Entry_correct  (=> (! (and %lbl%+318810 true) :lblpos +318810) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block23_correct  (=> (! (and %lbl%+318809 true) :lblpos +318809) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$inline$MoreSanity$loopAndbranch_unsafe$int_int_loop_block23$0$Entry_correct)))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon18_Else_correct  (=> (! (and %lbl%+318808 true) :lblpos +318808) (=> (> 0 $in_parameter__1) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$block23_correct))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon0_correct  (=> (! (and %lbl%+318807 true) :lblpos +318807) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@0))
 :qid |RSPROCMo.8545:20|
 :skolemid |1826|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCMo.8546:20|
 :skolemid |1827|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCMo.8547:20|
 :skolemid |1828|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon18_Then_correct inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon18_Else_correct))))))
(let ((inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$Entry_correct  (=> (! (and %lbl%+318806 true) :lblpos +318806) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+318805 true) :lblpos +318805) inline$unsafe.MoreSanity$loopAndbranch_unsafe$int_int$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+323004 true) :lblpos +323004) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+323025 true) :lblpos +323025) q@0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
