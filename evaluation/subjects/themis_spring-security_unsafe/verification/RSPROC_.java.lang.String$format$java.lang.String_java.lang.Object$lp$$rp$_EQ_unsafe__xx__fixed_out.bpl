var fixed.$heap: $heap_type;

var fixed.$intArrayType: javaType;

var fixed.$charArrayType: javaType;

var fixed.$boolArrayType: javaType;

var fixed.$byteArrayType: javaType;

var fixed.$longArrayType: javaType;

var fixed.$arrSizeHeap: [ref]int;

var fixed.$stringSizeHeap: [ref]int;

var fixed.$boolArrHeap: boolArrHeap_type;

var fixed.$refArrHeap: refArrHeap_type;

var fixed.$realArrHeap: realArrHeap_type;

var fixed.$intArrHeap: intArrHeap_type;

var fixed.$objIndex: int;

var fixed.java.io.PrintStream$java.lang.System$out260: ref;

var fixed.char$lp$$rp$$java.lang.StringBuilder$chars347: Field ref;

var fixed.char$lp$$rp$$java.lang.String$chars348: Field ref;

var fixed.boolean$java.lang.Boolean$value0: Field int;

const unique fixed.$type: Field javaType;

const unique fixed.$alloc: Field bool;

const unique fixed.$null: ref;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.Object: javaType extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.PasswordEncoderUtils: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.io.Serializable: javaType extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.Comparable: javaType extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.CharSequence: javaType extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.Throwable: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.Exception: javaType extends unique fixed.java.lang.Throwable complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.RuntimeException: javaType extends unique fixed.java.lang.Exception complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.NullPointerException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.sg.edu.nus.comp.tsunami.safe.Safe: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.ClassCastException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.IndexOutOfBoundsException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.ArrayIndexOutOfBoundsException: javaType extends unique fixed.java.lang.IndexOutOfBoundsException complete;

const unique fixed.$StringConst0: ref extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.io.IOException: javaType extends unique fixed.java.lang.Exception complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.io.UnsupportedEncodingException: javaType extends unique fixed.java.io.IOException complete;

const unique fixed.$StringConst1: ref extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.AutoCloseable: javaType extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.io.Closeable: javaType extends fixed.java.lang.AutoCloseable complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.io.Flushable: javaType extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.io.OutputStream: javaType extends unique fixed.java.lang.Object, fixed.java.io.Closeable, fixed.java.io.Flushable complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.io.FilterOutputStream: javaType extends unique fixed.java.io.OutputStream complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.lang.Appendable: javaType extends complete;

const {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} unique fixed.java.io.PrintStream: javaType extends unique fixed.java.io.FilterOutputStream, fixed.java.lang.Appendable, fixed.java.io.Closeable complete;

const {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unique fixed.java.lang.StringBuilder: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "StringBuilder.java", -1, -1, -1, -1} unique fixed.java.lang.String: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "Boolean.java", -1, -1, -1, -1} unique fixed.java.lang.Boolean: javaType extends unique fixed.java.lang.Object complete;

function fixed.$arrayType(t: javaType) : javaType;

function fixed.$intToReal(x: int) : real;

function fixed.$intToBool(x: int) : bool;

function fixed.$refToBool(x: ref) : bool;

function fixed.$boolToInt(x: bool) : int;

function fixed.$cmpBool(x: bool, y: bool) : int;

function fixed.$cmpRef(x: ref, y: ref) : int;

function fixed.$cmpReal(x: real, y: real) : int;

function fixed.$cmpInt(x: int, y: int) : int;

function fixed.$bitOr(x: int, y: int) : int;

function fixed.$bitAnd(x: int, y: int) : int;

function fixed.$xorInt(x: int, y: int) : int;

function fixed.$shlInt(x: int, y: int) : int;

function fixed.$ushrInt(x: int, y: int) : int;

function fixed.$shrInt(x: int, y: int) : int;

function fixed.$mulInt(x: int, y: int) : int;

function fixed.$divInt(x: int, y: int) : int;

function fixed.$modInt(x: int, y: int) : int;

function fixed.$intToRef(id: int) : ref;

axiom (forall x: int :: 
  { fixed.$intToBool(x): bool } 
  fixed.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { fixed.$refToBool(x): bool } 
  fixed.$refToBool(x): bool <==> (if x == fixed.$null then false else true));

axiom (forall x: bool :: 
  { fixed.$boolToInt(x): int } 
  fixed.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { fixed.$cmpReal(x, y): int } 
  fixed.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { fixed.$cmpInt(x, y): int } 
  fixed.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: fixed.$intToRef(index) != fixed.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> fixed.$intToRef(i1) == fixed.$intToRef(i2));

procedure {:prefix "fixed"} fixed.$new(obj_type: javaType) returns ($obj: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures fixed.$heap
   == old(fixed.$heap)[$obj, fixed.$alloc := true][$obj, fixed.$type := obj_type];
  free ensures $obj == fixed.$intToRef(old(fixed.$objIndex));
  free ensures fixed.$objIndex == old(fixed.$objIndex) + 1;
  free ensures !old(fixed.$heap[$obj, fixed.$alloc]);
  free ensures $obj != fixed.$null;



procedure {:prefix "fixed"} fixed.java.lang.Object$java.lang.Object$clone$43($this: ref) returns ($other: ref);
  free ensures $other != fixed.$null;
  free ensures fixed.$heap[$other, fixed.$alloc] <==> true;
  free ensures fixed.$heap[$other, fixed.$type] == fixed.$heap[$this, fixed.$type];



procedure {:prefix "fixed"} fixed.int$java.lang.String$compareTo$87($this: ref, $other: ref) returns ($return: int);



procedure {:prefix "fixed"} fixed.PasswordEncoderUtils$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception
   == _uf_fixed.PasswordEncoderUtils$$la$init$ra$$_$exception($this, old(fixed.$heap), old(fixed.$arrSizeHeap), old(fixed.$stringSizeHeap));



procedure {:prefix "fixed"} fixed.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception == _uf_fixed.java.lang.Object$$la$init$ra$$_$exception($this);



procedure {:prefix "fixed"} fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures $exception
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures fixed.$objIndex
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$objIndex($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures fixed.$heap
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$heap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$arrSizeHeap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures fixed.$intArrHeap
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$intArrHeap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));



procedure {:prefix "fixed"} fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_$return($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures $exception
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_$exception($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures fixed.$objIndex
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$objIndex($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures fixed.$heap
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$heap($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$arrSizeHeap($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures fixed.$intArrHeap
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$intArrHeap($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object($in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.io.PrintStream$println$java.lang.String($this: ref, $in_parameter__0: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$$la$init$ra$$($this: ref) returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap;
  free ensures $exception
   == _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_$exception($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$intArrayType), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$objIndex($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$intArrayType), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$heap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$intArrayType), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$arrSizeHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$intArrayType), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347));



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$append$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures $exception
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$arrSizeHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$intArrHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$toString$($this: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.java.lang.StringBuilder$toString$_$return($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures $exception
   == _uf_fixed.java.lang.StringBuilder$toString$_$exception($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.StringBuilder$toString$_fixed.$objIndex($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.StringBuilder$toString$_fixed.$heap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.StringBuilder$toString$_fixed.$arrSizeHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.StringBuilder$toString$_fixed.$intArrHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));



procedure {:prefix "fixed"} fixed.java.lang.String$$la$init$ra$$char$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $exception
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$arrSizeHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$intArrHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));



procedure {:prefix "fixed"} fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $exception
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$arrSizeHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$intArrHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));



procedure {:prefix "fixed"} fixed.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.java.lang.String$charAt$int_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures $exception
   == _uf_fixed.java.lang.String$charAt$int_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$charAt$int_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$charAt$int_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));



procedure {:prefix "fixed"} fixed.java.lang.String$getBytes$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures $exception
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$arrSizeHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$intArrHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));



procedure {:prefix "fixed"} fixed.java.lang.String$getBytes$($this: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.java.lang.String$getBytes$_$return($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures $exception
   == _uf_fixed.java.lang.String$getBytes$_$exception($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$getBytes$_fixed.$objIndex($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$getBytes$_fixed.$heap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.String$getBytes$_fixed.$arrSizeHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.String$getBytes$_fixed.$intArrHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));



procedure {:inline 1} fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref);
  free ensures $return
   == _uf_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));
  free ensures $exception
   == _uf_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));



procedure {:prefix "fixed"} fixed.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref);
  modifies fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$not$boolean($in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$and$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$or$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6(in_$return: int, 
    in_$exception: ref, 
    in_$b5: int, 
    in_$b6: int, 
    in_b9: int, 
    in_r2: ref, 
    in_r3: ref, 
    in_i0: int, 
    in_$b4: int, 
    in_$fakelocal_6: ref, 
    in_i10: int, 
    in_$fakelocal_7: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$b5: int, 
    out_$b6: int, 
    out_b9: int, 
    out_$b4: int, 
    out_$fakelocal_6: ref, 
    out_i10: int, 
    out_$fakelocal_7: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$append$java.lang.String_loop_block20(in_$return: ref, 
    in_$exception: ref, 
    in_i8: int, 
    in_$fakelocal_9: ref, 
    in_$fakelocal_10: ref, 
    in_$c5: int, 
    in_$r8: ref, 
    in_$r7: ref, 
    in_r2: ref, 
    in_$i4: int, 
    in_r1: ref, 
    in_$fakelocal_8: ref)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_i8: int, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_10: ref, 
    out_$c5: int, 
    out_$r8: ref, 
    out_$r7: ref, 
    out_$i4: int, 
    out_$fakelocal_8: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$append$java.lang.String_loop_block18(in_$return: ref, 
    in_$exception: ref, 
    in_$i3: int, 
    in_$r9: ref, 
    in_$c6: int, 
    in_$r5: ref, 
    in_$fakelocal_5: ref, 
    in_i7: int, 
    in_r2: ref, 
    in_$fakelocal_4: ref, 
    in_$fakelocal_6: ref, 
    in_r0: ref)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$i3: int, 
    out_$r9: ref, 
    out_$c6: int, 
    out_$r5: ref, 
    out_$fakelocal_5: ref, 
    out_i7: int, 
    out_$fakelocal_4: ref, 
    out_$fakelocal_6: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "fixed"} fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24(in_$exception: ref, 
    in_r1: ref, 
    in_$c2: int, 
    in_$r3: ref, 
    in_$i1: int, 
    in_r0: ref, 
    in_$fakelocal_4: ref, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_3: ref, 
    in_i3: int)
   returns (out_$exception: ref, 
    out_$c2: int, 
    out_$r3: ref, 
    out_$i1: int, 
    out_$fakelocal_4: ref, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_3: ref, 
    out_i3: int);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "fixed"} fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27(in_$exception: ref, 
    in_r0: ref, 
    in_i4: int, 
    in_$fakelocal_4: ref, 
    in_$c3: int, 
    in_r1: ref, 
    in_$b2: int, 
    in_$fakelocal_3: ref, 
    in_$r3: ref, 
    in_$i1: int, 
    in_$fakelocal_2: ref)
   returns (out_$exception: ref, 
    out_i4: int, 
    out_$fakelocal_4: ref, 
    out_$c3: int, 
    out_$b2: int, 
    out_$fakelocal_3: ref, 
    out_$r3: ref, 
    out_$i1: int, 
    out_$fakelocal_2: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "fixed"} fixed.java.lang.String$getBytes$_loop_block32(in_$return: ref, 
    in_$exception: ref, 
    in_r0: ref, 
    in_$c2: int, 
    in_$c3: int, 
    in_$fakelocal_4: ref, 
    in_$i1: int, 
    in_$fakelocal_3: ref, 
    in_r1: ref, 
    in_$r4: ref, 
    in_$r3: ref, 
    in_i5: int, 
    in_$fakelocal_2: ref, 
    in_$b4: int)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$c2: int, 
    out_$c3: int, 
    out_$fakelocal_4: ref, 
    out_$i1: int, 
    out_$fakelocal_3: ref, 
    out_$r4: ref, 
    out_$r3: ref, 
    out_i5: int, 
    out_$fakelocal_2: ref, 
    out_$b4: int);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



implementation fixed.PasswordEncoderUtils$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.PasswordEncoderUtils;
    assume {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "PasswordEncoderUtils.java", 16, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 16, -1, -1, -1} true;
    goto block1;

  block1:
    return;
}



implementation fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var z2: int;
  var $b5: int;
  var $l3: int;
  var $r11: ref;
  var $fakelocal_3: ref;
  var $r5: ref;
  var $r16: ref;
  var $r8: ref;
  var $fakelocal_5: ref;
  var $i8: int;
  var $b6: int;
  var $l2: int;
  var b9: int;
  var $i7: int;
  var r2: ref;
  var $r9: ref;
  var $fakelocal_4: ref;
  var $r7: ref;
  var i1: int;
  var z4: int;
  var $z1: int;
  var z3: int;
  var r3: ref;
  var $r4: ref;
  var $r6: ref;
  var $r17: ref;
  var z0: int;
  var r0: ref;
  var $r10: ref;
  var $r12: ref;
  var $fakelocal_8: ref;
  var $r14: ref;
  var z5: int;
  var i0: int;
  var $r15: ref;
  var $fakelocal_1: ref;
  var $b4: int;
  var $fakelocal_6: ref;
  var i10: int;
  var $fakelocal_9: ref;
  var $fakelocal_7: ref;
  var $r13: ref;
  var r1: ref;
  var $fakelocal_2: ref;
  var $fakelocal_0: ref;
  var $z6: int;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$fakelocal_0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r3: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r2: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$in_parameter__0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$objIndex: int;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$java.lang.String$0$r1: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$r0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$this: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$return: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.lang.String$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.lang.String$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$c3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$i5: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$b4: int;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block32$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$heap: $heap_type;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$fakelocal_0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r3: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r2: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$in_parameter__0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$objIndex: int;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.String$getBytes$java.lang.String$1$r1: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$r2: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$r0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$this: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$return: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$exception: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$objIndex: int;
  var inline$java.lang.String$getBytes$java.lang.String$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.lang.String$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$1$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$1$r0: ref;
  var inline$java.lang.String$getBytes$$1$$c2: int;
  var inline$java.lang.String$getBytes$$1$$c3: int;
  var inline$java.lang.String$getBytes$$1$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$1$$i1: int;
  var inline$java.lang.String$getBytes$$1$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$1$$r2: ref;
  var inline$java.lang.String$getBytes$$1$r1: ref;
  var inline$java.lang.String$getBytes$$1$$i0: int;
  var inline$java.lang.String$getBytes$$1$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$1$$r4: ref;
  var inline$java.lang.String$getBytes$$1$$r3: ref;
  var inline$java.lang.String$getBytes$$1$i5: int;
  var inline$java.lang.String$getBytes$$1$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$1$$b4: int;
  var inline$java.lang.String$getBytes$$1$$this: ref;
  var inline$java.lang.String$getBytes$$1$$return: ref;
  var inline$java.lang.String$getBytes$$1$$exception: ref;
  var inline$java.lang.String$getBytes$$1$$objIndex: int;
  var inline$java.lang.String$getBytes$$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$1$$heap: $heap_type;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$1$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block32$1$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block32$1$$heap: $heap_type;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$java.lang.Boolean$booleanValue$$0$$z0: int;
  var inline$java.lang.Boolean$booleanValue$$0$r0: ref;
  var inline$java.lang.Boolean$booleanValue$$0$$this: ref;
  var inline$java.lang.Boolean$booleanValue$$0$$return: int;
  var inline$java.lang.Boolean$booleanValue$$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$4$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$4$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$4$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$4$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$4$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$4$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$4$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$4$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$4$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$4$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$4$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$4$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$4$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$4$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$java.lang.Boolean$booleanValue$$1$$z0: int;
  var inline$java.lang.Boolean$booleanValue$$1$r0: ref;
  var inline$java.lang.Boolean$booleanValue$$1$$this: ref;
  var inline$java.lang.Boolean$booleanValue$$1$$return: int;
  var inline$java.lang.Boolean$booleanValue$$1$$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i0: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap: $heap_type;
  var inline$java.lang.Boolean$valueOf$boolean$5$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$5$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$5$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$5$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$5$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$5$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$5$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$5$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$5$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$5$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$5$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$5$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$5$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$5$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$6$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$6$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$6$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$6$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$6$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$6$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$6$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$6$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$6$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$6$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$6$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$6$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$6$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$6$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$java.lang.Boolean$booleanValue$$2$$z0: int;
  var inline$java.lang.Boolean$booleanValue$$2$r0: ref;
  var inline$java.lang.Boolean$booleanValue$$2$$this: ref;
  var inline$java.lang.Boolean$booleanValue$$2$$return: int;
  var inline$java.lang.Boolean$booleanValue$$2$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.String;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "PasswordEncoderUtils.java", 38, -1, -1, -1} true;
    z2 := 0;
    assert {:sourceloc "PasswordEncoderUtils.java", 39, -1, -1, -1} true;
    z3 := 0;
    assert {:sourceloc "PasswordEncoderUtils.java", 40, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Entry;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Entry:
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$in_parameter__0 := r0;
    havoc inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$fakelocal_0, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r3, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r2, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$objIndex := fixed.$objIndex;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$heap := fixed.$heap;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon0;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$in_parameter__0;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block11;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block11:
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon9_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon9_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon9_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block13;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block13:
    assert {:sourceloc "PasswordEncoderUtils.java", 62, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block16:
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Return;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon9_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block12;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block12:
    assert {:sourceloc "PasswordEncoderUtils.java", 65, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$java.lang.String$0$Entry;

  inline$java.lang.String$getBytes$java.lang.String$0$Entry:
    inline$java.lang.String$getBytes$java.lang.String$0$$this := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0;
    inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0 := fixed.$StringConst0;
    havoc inline$java.lang.String$getBytes$java.lang.String$0$r1, inline$java.lang.String$getBytes$java.lang.String$0$$r2, inline$java.lang.String$getBytes$java.lang.String$0$r0, inline$java.lang.String$getBytes$java.lang.String$0$$return, inline$java.lang.String$getBytes$java.lang.String$0$$exception;
    inline$java.lang.String$getBytes$java.lang.String$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$java.lang.String$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.lang.String$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$java.lang.String$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$java.lang.String$0$anon0;

  inline$java.lang.String$getBytes$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.lang.String$0$$this != fixed.$null;
    assume fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$java.lang.String$getBytes$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$r0 := inline$java.lang.String$getBytes$java.lang.String$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$r1 := inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.lang.String$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$c3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$i5, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$b4, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := 0;
    goto inline$java.lang.String$getBytes$$0$block32;

  inline$java.lang.String$getBytes$$0$block32:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Entry;

  inline$java.lang.String$getBytes$_loop_block32$0$Entry:
    inline$java.lang.String$getBytes$_loop_block32$0$in_$return := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$exception := inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r0 := inline$java.lang.String$getBytes$$0$r0;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c2 := inline$java.lang.String$getBytes$$0$$c2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c3 := inline$java.lang.String$getBytes$$0$$c3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4 := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$i1 := inline$java.lang.String$getBytes$$0$$i1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3 := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := inline$java.lang.String$getBytes$$0$r1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r4 := inline$java.lang.String$getBytes$$0$$r4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r3 := inline$java.lang.String$getBytes$$0$$r3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_i5 := inline$java.lang.String$getBytes$$0$i5;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2 := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$b4 := inline$java.lang.String$getBytes$$0$$b4;
    havoc inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block32$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block32$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$entry;

  inline$java.lang.String$getBytes$_loop_block32$0$entry:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    goto inline$java.lang.String$getBytes$_loop_block32$0$block32;

  inline$java.lang.String$getBytes$_loop_block32$0$block32:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1][inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15;

  inline$java.lang.String$getBytes$_loop_block32$0$anon12:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4][inline$java.lang.String$getBytes$_loop_block32$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon12;

  inline$java.lang.String$getBytes$_loop_block32$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon9;

  inline$java.lang.String$getBytes$_loop_block32$0$anon6:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon6;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$Return:
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$_loop_block32$0$out_$return;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    inline$java.lang.String$getBytes$$0$$c2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c2;
    inline$java.lang.String$getBytes$$0$$c3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    inline$java.lang.String$getBytes$$0$$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$$0$$i1 := inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    inline$java.lang.String$getBytes$$0$$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$$0$$r4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r4;
    inline$java.lang.String$getBytes$$0$$r3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r3;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    inline$java.lang.String$getBytes$$0$$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    goto inline$java.lang.String$getBytes$$0$block32$1;

  inline$java.lang.String$getBytes$$0$block32$1:
    goto inline$java.lang.String$getBytes$$0$block32_last;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$$0$$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$$0$$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon15_dummy;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block33;

  inline$java.lang.String$getBytes$$0$block33:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block34;

  inline$java.lang.String$getBytes$$0$block34:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$block32_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.lang.String$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.lang.String$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.lang.String$0$anon0$1;

  inline$java.lang.String$getBytes$java.lang.String$0$anon0$1:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$$return := inline$java.lang.String$getBytes$java.lang.String$0$$r2;
    goto inline$java.lang.String$getBytes$java.lang.String$0$block31;

  inline$java.lang.String$getBytes$java.lang.String$0$block31:
    goto inline$java.lang.String$getBytes$java.lang.String$0$Return;

  inline$java.lang.String$getBytes$java.lang.String$0$Return:
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r2 := inline$java.lang.String$getBytes$java.lang.String$0$$return;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := inline$java.lang.String$getBytes$java.lang.String$0$$exception;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block12$1;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block12$1:
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon10_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon10_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon10_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block15;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block15:
    assert {:sourceloc "PasswordEncoderUtils.java", 65, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r2;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon10_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon11_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon11_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon11_Else:
    assume {:partition} !(fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException);
    assert {:clone} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block15;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon11_Then:
    assume {:partition} fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block14;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block14:
    assert {:sourceloc "PasswordEncoderUtils.java", 62, -1, -1, -1} true;
    assume fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r3 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception;
    assert {:sourceloc "PasswordEncoderUtils.java", 69, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4 := fixed.java.io.PrintStream$java.lang.System$out260;
    assert {:sourceloc "PasswordEncoderUtils.java", 69, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon12_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon12_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon12_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4 == fixed.$null;
    call inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := fixed.$null;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$fakelocal_0;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Return;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon12_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4 != fixed.$null;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon8;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon8:
    call inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := fixed.java.io.PrintStream$println$java.lang.String(inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4, fixed.$StringConst1);
    assert {:sourceloc "PasswordEncoderUtils.java", 70, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Return:
    r2 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return;
    $exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 41, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Entry;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Entry:
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$in_parameter__0 := r1;
    havoc inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$fakelocal_0, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r3, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r2, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$objIndex := fixed.$objIndex;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$heap := fixed.$heap;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon0;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$in_parameter__0;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block11;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block11:
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon9_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon9_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon9_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block13;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block13:
    assert {:sourceloc "PasswordEncoderUtils.java", 62, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block16:
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Return;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon9_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block12;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block12:
    assert {:sourceloc "PasswordEncoderUtils.java", 65, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$java.lang.String$1$Entry;

  inline$java.lang.String$getBytes$java.lang.String$1$Entry:
    inline$java.lang.String$getBytes$java.lang.String$1$$this := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0;
    inline$java.lang.String$getBytes$java.lang.String$1$$in_parameter__0 := fixed.$StringConst0;
    havoc inline$java.lang.String$getBytes$java.lang.String$1$r1, inline$java.lang.String$getBytes$java.lang.String$1$$r2, inline$java.lang.String$getBytes$java.lang.String$1$r0, inline$java.lang.String$getBytes$java.lang.String$1$$return, inline$java.lang.String$getBytes$java.lang.String$1$$exception;
    inline$java.lang.String$getBytes$java.lang.String$1$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$java.lang.String$1$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.lang.String$1$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$java.lang.String$1$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$java.lang.String$1$anon0;

  inline$java.lang.String$getBytes$java.lang.String$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$1$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.lang.String$1$$this != fixed.$null;
    assume fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$1$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$java.lang.String$getBytes$java.lang.String$1$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$1$r0 := inline$java.lang.String$getBytes$java.lang.String$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$1$r1 := inline$java.lang.String$getBytes$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$Entry;

  inline$java.lang.String$getBytes$$1$Entry:
    inline$java.lang.String$getBytes$$1$$this := inline$java.lang.String$getBytes$java.lang.String$1$r0;
    havoc inline$java.lang.String$getBytes$$1$$fakelocal_0, inline$java.lang.String$getBytes$$1$r0, inline$java.lang.String$getBytes$$1$$c2, inline$java.lang.String$getBytes$$1$$c3, inline$java.lang.String$getBytes$$1$$fakelocal_4, inline$java.lang.String$getBytes$$1$$i1, inline$java.lang.String$getBytes$$1$$fakelocal_3, inline$java.lang.String$getBytes$$1$$r2, inline$java.lang.String$getBytes$$1$r1, inline$java.lang.String$getBytes$$1$$i0, inline$java.lang.String$getBytes$$1$$fakelocal_1, inline$java.lang.String$getBytes$$1$$r4, inline$java.lang.String$getBytes$$1$$r3, inline$java.lang.String$getBytes$$1$i5, inline$java.lang.String$getBytes$$1$$fakelocal_2, inline$java.lang.String$getBytes$$1$$b4, inline$java.lang.String$getBytes$$1$$return, inline$java.lang.String$getBytes$$1$$exception;
    inline$java.lang.String$getBytes$$1$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$$1$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$$1$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$$1$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$$1$anon0;

  inline$java.lang.String$getBytes$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$$1$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$1$$this != fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$r0 := inline$java.lang.String$getBytes$$1$$this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r2 := fixed.$heap[inline$java.lang.String$getBytes$$1$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon16_Then, inline$java.lang.String$getBytes$$1$anon16_Else;

  inline$java.lang.String$getBytes$$1$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r2 == fixed.$null;
    call inline$java.lang.String$getBytes$$1$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$1$$return := fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r2 != fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon3;

  inline$java.lang.String$getBytes$$1$anon3:
    inline$java.lang.String$getBytes$$1$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$1$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$fakelocal_1 := inline$java.lang.String$getBytes$$1$$i0];
    inline$java.lang.String$getBytes$$1$r1 := inline$java.lang.String$getBytes$$1$$fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$i5 := 0;
    goto inline$java.lang.String$getBytes$$1$block32;

  inline$java.lang.String$getBytes$$1$block32:
    goto inline$java.lang.String$getBytes$_loop_block32$1$Entry;

  inline$java.lang.String$getBytes$_loop_block32$1$Entry:
    inline$java.lang.String$getBytes$_loop_block32$1$in_$return := inline$java.lang.String$getBytes$$1$$return;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$exception := inline$java.lang.String$getBytes$$1$$exception;
    inline$java.lang.String$getBytes$_loop_block32$1$in_r0 := inline$java.lang.String$getBytes$$1$r0;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$c2 := inline$java.lang.String$getBytes$$1$$c2;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$c3 := inline$java.lang.String$getBytes$$1$$c3;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_4 := inline$java.lang.String$getBytes$$1$$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$i1 := inline$java.lang.String$getBytes$$1$$i1;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_3 := inline$java.lang.String$getBytes$$1$$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$1$in_r1 := inline$java.lang.String$getBytes$$1$r1;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$r4 := inline$java.lang.String$getBytes$$1$$r4;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$r3 := inline$java.lang.String$getBytes$$1$$r3;
    inline$java.lang.String$getBytes$_loop_block32$1$in_i5 := inline$java.lang.String$getBytes$$1$i5;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_2 := inline$java.lang.String$getBytes$$1$$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$1$in_$b4 := inline$java.lang.String$getBytes$$1$$b4;
    havoc inline$java.lang.String$getBytes$_loop_block32$1$out_$return, inline$java.lang.String$getBytes$_loop_block32$1$out_$exception, inline$java.lang.String$getBytes$_loop_block32$1$out_$c2, inline$java.lang.String$getBytes$_loop_block32$1$out_$c3, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$out_$i1, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$out_$r4, inline$java.lang.String$getBytes$_loop_block32$1$out_$r3, inline$java.lang.String$getBytes$_loop_block32$1$out_i5, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$out_$b4;
    inline$java.lang.String$getBytes$_loop_block32$1$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block32$1$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block32$1$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$1$entry;

  inline$java.lang.String$getBytes$_loop_block32$1$entry:
    inline$java.lang.String$getBytes$_loop_block32$1$out_$return, inline$java.lang.String$getBytes$_loop_block32$1$out_$exception, inline$java.lang.String$getBytes$_loop_block32$1$out_$c2, inline$java.lang.String$getBytes$_loop_block32$1$out_$c3, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$out_$i1, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$out_$r4, inline$java.lang.String$getBytes$_loop_block32$1$out_$r3, inline$java.lang.String$getBytes$_loop_block32$1$out_i5, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$1$in_$return, inline$java.lang.String$getBytes$_loop_block32$1$in_$exception, inline$java.lang.String$getBytes$_loop_block32$1$in_$c2, inline$java.lang.String$getBytes$_loop_block32$1$in_$c3, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$in_$i1, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$in_$r4, inline$java.lang.String$getBytes$_loop_block32$1$in_$r3, inline$java.lang.String$getBytes$_loop_block32$1$in_i5, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$in_$b4;
    goto inline$java.lang.String$getBytes$_loop_block32$1$block32;

  inline$java.lang.String$getBytes$_loop_block32$1$block32:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$1$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon17_Then, inline$java.lang.String$getBytes$_loop_block32$1$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block32$1$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$1$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block32$1$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$exception := inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$return, inline$java.lang.String$getBytes$_loop_block32$1$out_$exception, inline$java.lang.String$getBytes$_loop_block32$1$out_$c2, inline$java.lang.String$getBytes$_loop_block32$1$out_$c3, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$out_$i1, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$out_$r4, inline$java.lang.String$getBytes$_loop_block32$1$out_$r3, inline$java.lang.String$getBytes$_loop_block32$1$out_i5, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$1$in_$return, inline$java.lang.String$getBytes$_loop_block32$1$in_$exception, inline$java.lang.String$getBytes$_loop_block32$1$in_$c2, inline$java.lang.String$getBytes$_loop_block32$1$in_$c3, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$in_$i1, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$in_$r4, inline$java.lang.String$getBytes$_loop_block32$1$in_$r3, inline$java.lang.String$getBytes$_loop_block32$1$in_i5, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$1$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$1$$objIndex, inline$java.lang.String$getBytes$_loop_block32$1$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$1$Return;

  inline$java.lang.String$getBytes$_loop_block32$1$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$1$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$1$in_r1][inline$java.lang.String$getBytes$_loop_block32$1$out_i5 := inline$java.lang.String$getBytes$_loop_block32$1$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$1$out_i5 := inline$java.lang.String$getBytes$_loop_block32$1$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block32$1$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$1$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$1$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$1$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$exception := inline$java.lang.String$getBytes$_loop_block32$1$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon15;

  inline$java.lang.String$getBytes$_loop_block32$1$anon12:
    inline$java.lang.String$getBytes$_loop_block32$1$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$1$out_$r4][inline$java.lang.String$getBytes$_loop_block32$1$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block32$1$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$1$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon20_Then, inline$java.lang.String$getBytes$_loop_block32$1$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block32$1$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$1$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$1$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$1$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$1$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$exception := inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$return, inline$java.lang.String$getBytes$_loop_block32$1$out_$exception, inline$java.lang.String$getBytes$_loop_block32$1$out_$c2, inline$java.lang.String$getBytes$_loop_block32$1$out_$c3, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$out_$i1, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$out_$r4, inline$java.lang.String$getBytes$_loop_block32$1$out_$r3, inline$java.lang.String$getBytes$_loop_block32$1$out_i5, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$1$in_$return, inline$java.lang.String$getBytes$_loop_block32$1$in_$exception, inline$java.lang.String$getBytes$_loop_block32$1$in_$c2, inline$java.lang.String$getBytes$_loop_block32$1$in_$c3, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$in_$i1, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$in_$r4, inline$java.lang.String$getBytes$_loop_block32$1$in_$r3, inline$java.lang.String$getBytes$_loop_block32$1$in_i5, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$1$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$1$$objIndex, inline$java.lang.String$getBytes$_loop_block32$1$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$1$Return;

  inline$java.lang.String$getBytes$_loop_block32$1$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$1$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$1$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$1$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$exception := inline$java.lang.String$getBytes$_loop_block32$1$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon12;

  inline$java.lang.String$getBytes$_loop_block32$1$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$1$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon19_Then, inline$java.lang.String$getBytes$_loop_block32$1$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block32$1$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$1$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$1$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$1$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$1$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$exception := inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$return, inline$java.lang.String$getBytes$_loop_block32$1$out_$exception, inline$java.lang.String$getBytes$_loop_block32$1$out_$c2, inline$java.lang.String$getBytes$_loop_block32$1$out_$c3, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$out_$i1, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$out_$r4, inline$java.lang.String$getBytes$_loop_block32$1$out_$r3, inline$java.lang.String$getBytes$_loop_block32$1$out_i5, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$1$in_$return, inline$java.lang.String$getBytes$_loop_block32$1$in_$exception, inline$java.lang.String$getBytes$_loop_block32$1$in_$c2, inline$java.lang.String$getBytes$_loop_block32$1$in_$c3, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$in_$i1, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$in_$r4, inline$java.lang.String$getBytes$_loop_block32$1$in_$r3, inline$java.lang.String$getBytes$_loop_block32$1$in_i5, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$1$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$1$$objIndex, inline$java.lang.String$getBytes$_loop_block32$1$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$1$Return;

  inline$java.lang.String$getBytes$_loop_block32$1$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$1$out_$i1
   > inline$java.lang.String$getBytes$_loop_block32$1$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon9;

  inline$java.lang.String$getBytes$_loop_block32$1$anon6:
    inline$java.lang.String$getBytes$_loop_block32$1$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$1$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon18_Then, inline$java.lang.String$getBytes$_loop_block32$1$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block32$1$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$1$out_i5
   >= inline$java.lang.String$getBytes$_loop_block32$1$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$return, inline$java.lang.String$getBytes$_loop_block32$1$out_$exception, inline$java.lang.String$getBytes$_loop_block32$1$out_$c2, inline$java.lang.String$getBytes$_loop_block32$1$out_$c3, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$out_$i1, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$out_$r4, inline$java.lang.String$getBytes$_loop_block32$1$out_$r3, inline$java.lang.String$getBytes$_loop_block32$1$out_i5, inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$1$in_$return, inline$java.lang.String$getBytes$_loop_block32$1$in_$exception, inline$java.lang.String$getBytes$_loop_block32$1$in_$c2, inline$java.lang.String$getBytes$_loop_block32$1$in_$c3, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$1$in_$i1, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$1$in_$r4, inline$java.lang.String$getBytes$_loop_block32$1$in_$r3, inline$java.lang.String$getBytes$_loop_block32$1$in_i5, inline$java.lang.String$getBytes$_loop_block32$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$1$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$1$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$1$$objIndex, inline$java.lang.String$getBytes$_loop_block32$1$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$1$Return;

  inline$java.lang.String$getBytes$_loop_block32$1$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$1$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$1$out_$exception := inline$java.lang.String$getBytes$_loop_block32$1$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$1$anon6;

  inline$java.lang.String$getBytes$_loop_block32$1$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block32$1$Return;

  inline$java.lang.String$getBytes$_loop_block32$1$exit:
    goto inline$java.lang.String$getBytes$_loop_block32$1$Return;

  inline$java.lang.String$getBytes$_loop_block32$1$Return:
    inline$java.lang.String$getBytes$$1$$return := inline$java.lang.String$getBytes$_loop_block32$1$out_$return;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$_loop_block32$1$out_$exception;
    inline$java.lang.String$getBytes$$1$$c2 := inline$java.lang.String$getBytes$_loop_block32$1$out_$c2;
    inline$java.lang.String$getBytes$$1$$c3 := inline$java.lang.String$getBytes$_loop_block32$1$out_$c3;
    inline$java.lang.String$getBytes$$1$$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_4;
    inline$java.lang.String$getBytes$$1$$i1 := inline$java.lang.String$getBytes$_loop_block32$1$out_$i1;
    inline$java.lang.String$getBytes$$1$$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_3;
    inline$java.lang.String$getBytes$$1$$r4 := inline$java.lang.String$getBytes$_loop_block32$1$out_$r4;
    inline$java.lang.String$getBytes$$1$$r3 := inline$java.lang.String$getBytes$_loop_block32$1$out_$r3;
    inline$java.lang.String$getBytes$$1$i5 := inline$java.lang.String$getBytes$_loop_block32$1$out_i5;
    inline$java.lang.String$getBytes$$1$$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block32$1$out_$fakelocal_2;
    inline$java.lang.String$getBytes$$1$$b4 := inline$java.lang.String$getBytes$_loop_block32$1$out_$b4;
    goto inline$java.lang.String$getBytes$$1$block32$1;

  inline$java.lang.String$getBytes$$1$block32$1:
    goto inline$java.lang.String$getBytes$$1$block32_last;

  inline$java.lang.String$getBytes$$1$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$$1$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$1$$return := fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r3 != fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon6;

  inline$java.lang.String$getBytes$$1$anon6:
    inline$java.lang.String$getBytes$$1$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon18_Then, inline$java.lang.String$getBytes$$1$anon18_Else;

  inline$java.lang.String$getBytes$$1$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$i1 > inline$java.lang.String$getBytes$$1$i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$1$anon9;

  inline$java.lang.String$getBytes$$1$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r4 := fixed.$heap[inline$java.lang.String$getBytes$$1$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon19_Then, inline$java.lang.String$getBytes$$1$anon19_Else;

  inline$java.lang.String$getBytes$$1$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$1$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r4]
   && inline$java.lang.String$getBytes$$1$i5 >= 0);
    call inline$java.lang.String$getBytes$$1$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$1$$return := fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r4]
   && inline$java.lang.String$getBytes$$1$i5 >= 0;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon12;

  inline$java.lang.String$getBytes$$1$anon12:
    inline$java.lang.String$getBytes$$1$$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$1$$r4][inline$java.lang.String$getBytes$$1$i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$$1$$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$b4 := inline$java.lang.String$getBytes$$1$$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon20_Then, inline$java.lang.String$getBytes$$1$anon20_Else;

  inline$java.lang.String$getBytes$$1$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$1$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$r1]
   && inline$java.lang.String$getBytes$$1$i5 >= 0);
    call inline$java.lang.String$getBytes$$1$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$1$$return := fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$r1]
   && inline$java.lang.String$getBytes$$1$i5 >= 0;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon15;

  inline$java.lang.String$getBytes$$1$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$$1$r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$1$r1][inline$java.lang.String$getBytes$$1$i5 := inline$java.lang.String$getBytes$$1$$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$i5 := inline$java.lang.String$getBytes$$1$i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon15_dummy;

  inline$java.lang.String$getBytes$$1$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i5
   >= inline$java.lang.String$getBytes$$1$$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$1$block33;

  inline$java.lang.String$getBytes$$1$block33:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$return := inline$java.lang.String$getBytes$$1$r1;
    goto inline$java.lang.String$getBytes$$1$block34;

  inline$java.lang.String$getBytes$$1$block34:
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$block32_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r3 := fixed.$heap[inline$java.lang.String$getBytes$$1$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon17_Then, inline$java.lang.String$getBytes$$1$anon17_Else;

  inline$java.lang.String$getBytes$$1$Return:
    inline$java.lang.String$getBytes$java.lang.String$1$$r2 := inline$java.lang.String$getBytes$$1$$return;
    inline$java.lang.String$getBytes$java.lang.String$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$java.lang.String$1$anon0$1;

  inline$java.lang.String$getBytes$java.lang.String$1$anon0$1:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$1$$return := inline$java.lang.String$getBytes$java.lang.String$1$$r2;
    goto inline$java.lang.String$getBytes$java.lang.String$1$block31;

  inline$java.lang.String$getBytes$java.lang.String$1$block31:
    goto inline$java.lang.String$getBytes$java.lang.String$1$Return;

  inline$java.lang.String$getBytes$java.lang.String$1$Return:
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r2 := inline$java.lang.String$getBytes$java.lang.String$1$$return;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := inline$java.lang.String$getBytes$java.lang.String$1$$exception;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block12$1;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block12$1:
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon10_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon10_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon10_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception
   == fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block15;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block15:
    assert {:sourceloc "PasswordEncoderUtils.java", 65, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r2;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon10_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception
   != fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon11_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon11_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon11_Else:
    assume {:partition} !(fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException);
    assert {:clone} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block15;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon11_Then:
    assume {:partition} fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block14;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block14:
    assert {:sourceloc "PasswordEncoderUtils.java", 62, -1, -1, -1} true;
    assume fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r3 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception;
    assert {:sourceloc "PasswordEncoderUtils.java", 69, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4 := fixed.java.io.PrintStream$java.lang.System$out260;
    assert {:sourceloc "PasswordEncoderUtils.java", 69, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon12_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon12_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon12_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4 == fixed.$null;
    call inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := fixed.$null;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$fakelocal_0;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Return;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon12_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4 != fixed.$null;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon8;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon8:
    call inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := fixed.java.io.PrintStream$println$java.lang.String(inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4, fixed.$StringConst1);
    assert {:sourceloc "PasswordEncoderUtils.java", 70, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Return:
    r3 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return;
    $exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "PasswordEncoderUtils.java", 42, -1, -1, -1} true;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} r2 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    $i7 := -1;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto block3;

  block3:
    assert {:sourceloc "PasswordEncoderUtils.java", 42, -1, -1, -1} true;
    i0 := $i7;
    assert {:sourceloc "PasswordEncoderUtils.java", 43, -1, -1, -1} true;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} r3 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    $i8 := -1;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto block5;

  block5:
    assert {:sourceloc "PasswordEncoderUtils.java", 43, -1, -1, -1} true;
    i1 := $i8;
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    $l3 := i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    $l2 := i1;
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0 := $l3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1 := $l2;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block60;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block60:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block61;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block61:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block62;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block62:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block61;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block60;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return:
    z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto block5$1;

  block5$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$0$Entry;

  inline$java.lang.Boolean$valueOf$boolean$0$Entry:
    inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0 := z2;
    havoc inline$java.lang.Boolean$valueOf$boolean$0$z0, inline$java.lang.Boolean$valueOf$boolean$0$$r0, inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$0$$return, inline$java.lang.Boolean$valueOf$boolean$0$$exception;
    inline$java.lang.Boolean$valueOf$boolean$0$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$0$anon0;

  inline$java.lang.Boolean$valueOf$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$0$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$0$z0 := inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$0$$r0 := inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this := inline$java.lang.Boolean$valueOf$boolean$0$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$0$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$block36;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$block36:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return:
    inline$java.lang.Boolean$valueOf$boolean$0$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$0$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$0$$return := inline$java.lang.Boolean$valueOf$boolean$0$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$0$block37;

  inline$java.lang.Boolean$valueOf$boolean$0$block37:
    goto inline$java.lang.Boolean$valueOf$boolean$0$Return;

  inline$java.lang.Boolean$valueOf$boolean$0$Return:
    $r4 := inline$java.lang.Boolean$valueOf$boolean$0$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$0$$exception;
    goto block5$2;

  block5$2:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$1$Entry;

  inline$java.lang.Boolean$valueOf$boolean$1$Entry:
    inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0 := 0;
    havoc inline$java.lang.Boolean$valueOf$boolean$1$z0, inline$java.lang.Boolean$valueOf$boolean$1$$r0, inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$1$$return, inline$java.lang.Boolean$valueOf$boolean$1$$exception;
    inline$java.lang.Boolean$valueOf$boolean$1$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$1$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$1$anon0;

  inline$java.lang.Boolean$valueOf$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$1$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$1$z0 := inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$1$$r0 := inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this := inline$java.lang.Boolean$valueOf$boolean$1$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$1$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$block36;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$block36:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$Return:
    inline$java.lang.Boolean$valueOf$boolean$1$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$1$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$1$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$1$$return := inline$java.lang.Boolean$valueOf$boolean$1$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$1$block37;

  inline$java.lang.Boolean$valueOf$boolean$1$block37:
    goto inline$java.lang.Boolean$valueOf$boolean$1$Return;

  inline$java.lang.Boolean$valueOf$boolean$1$Return:
    $r5 := inline$java.lang.Boolean$valueOf$boolean$1$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$1$$exception;
    goto block5$3;

  block5$3:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := $r4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := $r5;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block87;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block87:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block88;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block88:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block89;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block89:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block88;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block87;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    $r6 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto block5$4;

  block5$4:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$2$Entry;

  inline$java.lang.Boolean$valueOf$boolean$2$Entry:
    inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0 := z2;
    havoc inline$java.lang.Boolean$valueOf$boolean$2$z0, inline$java.lang.Boolean$valueOf$boolean$2$$r0, inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$2$$return, inline$java.lang.Boolean$valueOf$boolean$2$$exception;
    inline$java.lang.Boolean$valueOf$boolean$2$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$2$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$2$anon0;

  inline$java.lang.Boolean$valueOf$boolean$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$2$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$2$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$2$z0 := inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$2$$r0 := inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this := inline$java.lang.Boolean$valueOf$boolean$2$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$2$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$block36;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$block36:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$Return:
    inline$java.lang.Boolean$valueOf$boolean$2$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$2$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$2$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$2$$return := inline$java.lang.Boolean$valueOf$boolean$2$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$2$block37;

  inline$java.lang.Boolean$valueOf$boolean$2$block37:
    goto inline$java.lang.Boolean$valueOf$boolean$2$Return;

  inline$java.lang.Boolean$valueOf$boolean$2$Return:
    $r7 := inline$java.lang.Boolean$valueOf$boolean$2$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$2$$exception;
    goto block5$5;

  block5$5:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := $r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := $r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block87;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block87:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block88;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block88:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block89;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block89:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block88;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block87;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    $r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto block5$6;

  block5$6:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} !(fixed.$heap[$r8, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_2;
    return;

  anon47_Then:
    assume {:partition} fixed.$heap[$r8, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon15;

  anon15:
    $r9 := $r8;
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} $r9 == fixed.$null;
    call $fakelocal_3 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_3;
    return;

  anon48_Then:
    assume {:partition} $r9 != fixed.$null;
    $exception := $exception;
    goto anon18;

  anon18:
    goto inline$java.lang.Boolean$booleanValue$$0$Entry;

  inline$java.lang.Boolean$booleanValue$$0$Entry:
    inline$java.lang.Boolean$booleanValue$$0$$this := $r9;
    havoc inline$java.lang.Boolean$booleanValue$$0$$z0, inline$java.lang.Boolean$booleanValue$$0$r0, inline$java.lang.Boolean$booleanValue$$0$$return, inline$java.lang.Boolean$booleanValue$$0$$exception;
    goto inline$java.lang.Boolean$booleanValue$$0$anon0;

  inline$java.lang.Boolean$booleanValue$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$booleanValue$$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$booleanValue$$0$$this != fixed.$null;
    inline$java.lang.Boolean$booleanValue$$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$r0 := inline$java.lang.Boolean$booleanValue$$0$$this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$$z0 := fixed.$heap[inline$java.lang.Boolean$booleanValue$$0$r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$$return := inline$java.lang.Boolean$booleanValue$$0$$z0;
    goto inline$java.lang.Boolean$booleanValue$$0$block38;

  inline$java.lang.Boolean$booleanValue$$0$block38:
    goto inline$java.lang.Boolean$booleanValue$$0$Return;

  inline$java.lang.Boolean$booleanValue$$0$Return:
    z4 := inline$java.lang.Boolean$booleanValue$$0$$return;
    $exception := inline$java.lang.Boolean$booleanValue$$0$$exception;
    goto anon18$1;

  anon18$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 48, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$3$Entry;

  inline$java.lang.Boolean$valueOf$boolean$3$Entry:
    inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0 := 1;
    havoc inline$java.lang.Boolean$valueOf$boolean$3$z0, inline$java.lang.Boolean$valueOf$boolean$3$$r0, inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$3$$return, inline$java.lang.Boolean$valueOf$boolean$3$$exception;
    inline$java.lang.Boolean$valueOf$boolean$3$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$3$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$3$anon0;

  inline$java.lang.Boolean$valueOf$boolean$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$3$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$3$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$3$z0 := inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$3$$r0 := inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this := inline$java.lang.Boolean$valueOf$boolean$3$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$3$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$block36;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$block36:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$Return:
    inline$java.lang.Boolean$valueOf$boolean$3$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$3$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$3$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$3$$return := inline$java.lang.Boolean$valueOf$boolean$3$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$3$block37;

  inline$java.lang.Boolean$valueOf$boolean$3$block37:
    goto inline$java.lang.Boolean$valueOf$boolean$3$Return;

  inline$java.lang.Boolean$valueOf$boolean$3$Return:
    $r10 := inline$java.lang.Boolean$valueOf$boolean$3$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$3$$exception;
    goto anon18$2;

  anon18$2:
    assert {:sourceloc "PasswordEncoderUtils.java", 48, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$4$Entry;

  inline$java.lang.Boolean$valueOf$boolean$4$Entry:
    inline$java.lang.Boolean$valueOf$boolean$4$$in_parameter__0 := z3;
    havoc inline$java.lang.Boolean$valueOf$boolean$4$z0, inline$java.lang.Boolean$valueOf$boolean$4$$r0, inline$java.lang.Boolean$valueOf$boolean$4$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$4$$return, inline$java.lang.Boolean$valueOf$boolean$4$$exception;
    inline$java.lang.Boolean$valueOf$boolean$4$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$4$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$4$anon0;

  inline$java.lang.Boolean$valueOf$boolean$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$4$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$4$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$4$z0 := inline$java.lang.Boolean$valueOf$boolean$4$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$4$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$4$$r0 := inline$java.lang.Boolean$valueOf$boolean$4$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$4$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$4$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$4$$this := inline$java.lang.Boolean$valueOf$boolean$4$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$4$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$4$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$4$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$4$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$4$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$4$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$4$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$4$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$4$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$4$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$4$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$4$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$4$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$4$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$4$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$4$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$4$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$4$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$4$block36;

  inline$java.lang.Boolean$$la$init$ra$$boolean$4$block36:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$4$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$4$Return:
    inline$java.lang.Boolean$valueOf$boolean$4$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$4$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$4$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$4$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$4$$return := inline$java.lang.Boolean$valueOf$boolean$4$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$4$block37;

  inline$java.lang.Boolean$valueOf$boolean$4$block37:
    goto inline$java.lang.Boolean$valueOf$boolean$4$Return;

  inline$java.lang.Boolean$valueOf$boolean$4$Return:
    $r11 := inline$java.lang.Boolean$valueOf$boolean$4$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$4$$exception;
    goto anon18$3;

  anon18$3:
    assert {:sourceloc "PasswordEncoderUtils.java", 48, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := $r10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := $r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block87;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block87:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block88;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block88:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block89;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block89:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block88;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block87;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    $r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto anon18$4;

  anon18$4:
    assert {:sourceloc "PasswordEncoderUtils.java", 48, -1, -1, -1} true;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} !(fixed.$heap[$r12, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_4;
    return;

  anon49_Then:
    assume {:partition} fixed.$heap[$r12, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon21;

  anon21:
    $r13 := $r12;
    assert {:sourceloc "PasswordEncoderUtils.java", 48, -1, -1, -1} true;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} $r13 == fixed.$null;
    call $fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_5;
    return;

  anon50_Then:
    assume {:partition} $r13 != fixed.$null;
    $exception := $exception;
    goto anon24;

  anon24:
    goto inline$java.lang.Boolean$booleanValue$$1$Entry;

  inline$java.lang.Boolean$booleanValue$$1$Entry:
    inline$java.lang.Boolean$booleanValue$$1$$this := $r13;
    havoc inline$java.lang.Boolean$booleanValue$$1$$z0, inline$java.lang.Boolean$booleanValue$$1$r0, inline$java.lang.Boolean$booleanValue$$1$$return, inline$java.lang.Boolean$booleanValue$$1$$exception;
    goto inline$java.lang.Boolean$booleanValue$$1$anon0;

  inline$java.lang.Boolean$booleanValue$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$booleanValue$$1$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$booleanValue$$1$$this != fixed.$null;
    inline$java.lang.Boolean$booleanValue$$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$r0 := inline$java.lang.Boolean$booleanValue$$1$$this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$$z0 := fixed.$heap[inline$java.lang.Boolean$booleanValue$$1$r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$$return := inline$java.lang.Boolean$booleanValue$$1$$z0;
    goto inline$java.lang.Boolean$booleanValue$$1$block38;

  inline$java.lang.Boolean$booleanValue$$1$block38:
    goto inline$java.lang.Boolean$booleanValue$$1$Return;

  inline$java.lang.Boolean$booleanValue$$1$Return:
    z5 := inline$java.lang.Boolean$booleanValue$$1$$return;
    $exception := inline$java.lang.Boolean$booleanValue$$1$$exception;
    goto anon24$1;

  anon24$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} true;
    b9 := 0;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    i10 := 0;
    goto block6;

  block6:
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Entry;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Entry:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return := $return;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception := $exception;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5 := $b5;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6 := $b6;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9 := b9;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2 := r2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3 := r3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i0 := i0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4 := $b4;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6 := $fakelocal_6;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10 := i10;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7 := $fakelocal_7;
    havoc inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex := fixed.$objIndex;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap := fixed.$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$entry;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$entry:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$block6;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$block6:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon51_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon51_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon51_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
   >= inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} {:comment "thenblock"} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon33:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4 := fixed.$intArrHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3][inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10];
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6 := fixed.$xorInt(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, 
  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4);
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9 := fixed.$bitOr(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, 
  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6);
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
   + 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon33_dummy;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon53_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     >= 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon33;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon30:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5 := fixed.$intArrHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2][inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10];
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon53_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon53_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon53_Else:
    assume {:partition} !(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     >= 0);
    call inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return := 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon52_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     >= 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon30;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon27:
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon52_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon52_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon52_Else:
    assume {:partition} !(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     >= 0);
    call inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return := 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon51_Else:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i0
   > inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon27;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon33_dummy:
    assume false;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$exit:
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return:
    $return := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return;
    $exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception;
    $b5 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5;
    $b6 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6;
    b9 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9;
    $b4 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4;
    $fakelocal_6 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6;
    i10 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10;
    $fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7;
    goto block6$1;

  block6$1:
    goto block6_last;

  anon51_Else:
    assume {:partition} i0 > i10;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} {:comment "elseblock"} true;
    goto anon27;

  anon27:
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} !(i10 < fixed.$arrSizeHeap[r2] && i10 >= 0);
    call $fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_6;
    return;

  anon52_Then:
    assume {:partition} i10 < fixed.$arrSizeHeap[r2] && i10 >= 0;
    $exception := $exception;
    goto anon30;

  anon30:
    $b5 := fixed.$intArrHeap[r2][i10];
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} !(i10 < fixed.$arrSizeHeap[r3] && i10 >= 0);
    call $fakelocal_7 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_7;
    return;

  anon53_Then:
    assume {:partition} i10 < fixed.$arrSizeHeap[r3] && i10 >= 0;
    $exception := $exception;
    goto anon33;

  anon33:
    $b4 := fixed.$intArrHeap[r3][i10];
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    $b6 := fixed.$xorInt($b5, $b4);
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    b9 := fixed.$bitOr(b9, $b6);
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    i10 := i10 + 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto anon33_dummy;

  anon51_Then:
    assume {:partition} i10 >= i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} {:comment "thenblock"} true;
    goto block7;

  block7:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$5$Entry;

  inline$java.lang.Boolean$valueOf$boolean$5$Entry:
    inline$java.lang.Boolean$valueOf$boolean$5$$in_parameter__0 := z4;
    havoc inline$java.lang.Boolean$valueOf$boolean$5$z0, inline$java.lang.Boolean$valueOf$boolean$5$$r0, inline$java.lang.Boolean$valueOf$boolean$5$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$5$$return, inline$java.lang.Boolean$valueOf$boolean$5$$exception;
    inline$java.lang.Boolean$valueOf$boolean$5$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$5$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$5$anon0;

  inline$java.lang.Boolean$valueOf$boolean$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$5$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$5$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$5$z0 := inline$java.lang.Boolean$valueOf$boolean$5$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$5$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$5$$r0 := inline$java.lang.Boolean$valueOf$boolean$5$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$5$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$5$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$5$$this := inline$java.lang.Boolean$valueOf$boolean$5$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$5$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$5$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$5$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$5$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$5$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$5$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$5$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$5$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$5$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$5$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$5$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$5$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$5$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$5$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$5$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$5$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$5$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$5$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$5$block36;

  inline$java.lang.Boolean$$la$init$ra$$boolean$5$block36:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$5$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$5$Return:
    inline$java.lang.Boolean$valueOf$boolean$5$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$5$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$5$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$5$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$5$$return := inline$java.lang.Boolean$valueOf$boolean$5$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$5$block37;

  inline$java.lang.Boolean$valueOf$boolean$5$block37:
    goto inline$java.lang.Boolean$valueOf$boolean$5$Return;

  inline$java.lang.Boolean$valueOf$boolean$5$Return:
    $r14 := inline$java.lang.Boolean$valueOf$boolean$5$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$5$$exception;
    goto block7$1;

  block7$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} b9 == 0;
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto anon36;

  anon36:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    $z6 := 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto block9;

  block9:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$6$Entry;

  inline$java.lang.Boolean$valueOf$boolean$6$Entry:
    inline$java.lang.Boolean$valueOf$boolean$6$$in_parameter__0 := $z6;
    havoc inline$java.lang.Boolean$valueOf$boolean$6$z0, inline$java.lang.Boolean$valueOf$boolean$6$$r0, inline$java.lang.Boolean$valueOf$boolean$6$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$6$$return, inline$java.lang.Boolean$valueOf$boolean$6$$exception;
    inline$java.lang.Boolean$valueOf$boolean$6$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$6$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$6$anon0;

  inline$java.lang.Boolean$valueOf$boolean$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$6$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$6$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$6$z0 := inline$java.lang.Boolean$valueOf$boolean$6$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$6$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$6$$r0 := inline$java.lang.Boolean$valueOf$boolean$6$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$6$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$6$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$6$$this := inline$java.lang.Boolean$valueOf$boolean$6$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$6$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$6$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$6$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$6$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$6$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$6$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$6$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$6$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$6$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$6$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$6$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$6$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$6$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$6$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$6$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$6$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$6$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$6$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$6$block36;

  inline$java.lang.Boolean$$la$init$ra$$boolean$6$block36:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$6$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$6$Return:
    inline$java.lang.Boolean$valueOf$boolean$6$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$6$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$6$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$6$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$6$$return := inline$java.lang.Boolean$valueOf$boolean$6$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$6$block37;

  inline$java.lang.Boolean$valueOf$boolean$6$block37:
    goto inline$java.lang.Boolean$valueOf$boolean$6$Return;

  inline$java.lang.Boolean$valueOf$boolean$6$Return:
    $r15 := inline$java.lang.Boolean$valueOf$boolean$6$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$6$$exception;
    goto block9$1;

  block9$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := $r14;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := $r15;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block87;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block87:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block88;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block88:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block89;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block89:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block88;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block87;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    $r16 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto block9$2;

  block9$2:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} !(fixed.$heap[$r16, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_8 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_8;
    return;

  anon55_Then:
    assume {:partition} fixed.$heap[$r16, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon39;

  anon39:
    $r17 := $r16;
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} $r17 == fixed.$null;
    call $fakelocal_9 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_9;
    return;

  anon56_Then:
    assume {:partition} $r17 != fixed.$null;
    $exception := $exception;
    goto anon42;

  anon42:
    goto inline$java.lang.Boolean$booleanValue$$2$Entry;

  inline$java.lang.Boolean$booleanValue$$2$Entry:
    inline$java.lang.Boolean$booleanValue$$2$$this := $r17;
    havoc inline$java.lang.Boolean$booleanValue$$2$$z0, inline$java.lang.Boolean$booleanValue$$2$r0, inline$java.lang.Boolean$booleanValue$$2$$return, inline$java.lang.Boolean$booleanValue$$2$$exception;
    goto inline$java.lang.Boolean$booleanValue$$2$anon0;

  inline$java.lang.Boolean$booleanValue$$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$booleanValue$$2$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$booleanValue$$2$$this != fixed.$null;
    inline$java.lang.Boolean$booleanValue$$2$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$2$r0 := inline$java.lang.Boolean$booleanValue$$2$$this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$2$$z0 := fixed.$heap[inline$java.lang.Boolean$booleanValue$$2$r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$2$$return := inline$java.lang.Boolean$booleanValue$$2$$z0;
    goto inline$java.lang.Boolean$booleanValue$$2$block38;

  inline$java.lang.Boolean$booleanValue$$2$block38:
    goto inline$java.lang.Boolean$booleanValue$$2$Return;

  inline$java.lang.Boolean$booleanValue$$2$Return:
    $z1 := inline$java.lang.Boolean$booleanValue$$2$$return;
    $exception := inline$java.lang.Boolean$booleanValue$$2$$exception;
    goto anon42$1;

  anon42$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    $return := $z1;
    goto block10;

  block10:
    return;

  anon54_Then:
    assume {:partition} b9 != 0;
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto block8;

  block8:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    $z6 := 0;
    goto block9;

  anon45_Then:
    assume {:partition} r3 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto block4;

  block4:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} r3 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_1;
    return;

  anon46_Then:
    assume {:partition} r3 != fixed.$null;
    $exception := $exception;
    goto anon12;

  anon12:
    $i8 := fixed.$arrSizeHeap[r3];
    goto block5;

  anon43_Then:
    assume {:partition} r2 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto block2;

  block2:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} r2 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon44_Then:
    assume {:partition} r2 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i7 := fixed.$arrSizeHeap[r2];
    goto block3;

  anon33_dummy:
    assume false;
    return;

  block6_last:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto anon51_Then, anon51_Else;
}



implementation fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var r0: ref;
  var $r3: ref;
  var $r2: ref;
  var $r4: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$r1: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$r0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$this: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$return: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.lang.String$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.lang.String$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$c3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$i5: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$b4: int;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block32$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    goto block11;

  block11:
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} true;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} r0 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} {:comment "elseblock"} true;
    goto block13;

  block13:
    assert {:sourceloc "PasswordEncoderUtils.java", 62, -1, -1, -1} true;
    $return := fixed.$null;
    goto block16;

  block16:
    return;

  anon9_Then:
    assume {:partition} r0 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} {:comment "thenblock"} true;
    goto block12;

  block12:
    assert {:sourceloc "PasswordEncoderUtils.java", 65, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$java.lang.String$0$Entry;

  inline$java.lang.String$getBytes$java.lang.String$0$Entry:
    inline$java.lang.String$getBytes$java.lang.String$0$$this := r0;
    inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0 := fixed.$StringConst0;
    havoc inline$java.lang.String$getBytes$java.lang.String$0$r1, inline$java.lang.String$getBytes$java.lang.String$0$$r2, inline$java.lang.String$getBytes$java.lang.String$0$r0, inline$java.lang.String$getBytes$java.lang.String$0$$return, inline$java.lang.String$getBytes$java.lang.String$0$$exception;
    inline$java.lang.String$getBytes$java.lang.String$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$java.lang.String$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.lang.String$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$java.lang.String$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$java.lang.String$0$anon0;

  inline$java.lang.String$getBytes$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.lang.String$0$$this != fixed.$null;
    assume fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$java.lang.String$getBytes$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$r0 := inline$java.lang.String$getBytes$java.lang.String$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$r1 := inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.lang.String$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$c3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$i5, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$b4, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := 0;
    goto inline$java.lang.String$getBytes$$0$block32;

  inline$java.lang.String$getBytes$$0$block32:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Entry;

  inline$java.lang.String$getBytes$_loop_block32$0$Entry:
    inline$java.lang.String$getBytes$_loop_block32$0$in_$return := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$exception := inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r0 := inline$java.lang.String$getBytes$$0$r0;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c2 := inline$java.lang.String$getBytes$$0$$c2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c3 := inline$java.lang.String$getBytes$$0$$c3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4 := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$i1 := inline$java.lang.String$getBytes$$0$$i1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3 := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := inline$java.lang.String$getBytes$$0$r1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r4 := inline$java.lang.String$getBytes$$0$$r4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r3 := inline$java.lang.String$getBytes$$0$$r3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_i5 := inline$java.lang.String$getBytes$$0$i5;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2 := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$b4 := inline$java.lang.String$getBytes$$0$$b4;
    havoc inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block32$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block32$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$entry;

  inline$java.lang.String$getBytes$_loop_block32$0$entry:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    goto inline$java.lang.String$getBytes$_loop_block32$0$block32;

  inline$java.lang.String$getBytes$_loop_block32$0$block32:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1][inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15;

  inline$java.lang.String$getBytes$_loop_block32$0$anon12:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4][inline$java.lang.String$getBytes$_loop_block32$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon12;

  inline$java.lang.String$getBytes$_loop_block32$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon9;

  inline$java.lang.String$getBytes$_loop_block32$0$anon6:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon6;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$Return:
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$_loop_block32$0$out_$return;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    inline$java.lang.String$getBytes$$0$$c2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c2;
    inline$java.lang.String$getBytes$$0$$c3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    inline$java.lang.String$getBytes$$0$$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$$0$$i1 := inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    inline$java.lang.String$getBytes$$0$$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$$0$$r4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r4;
    inline$java.lang.String$getBytes$$0$$r3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r3;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    inline$java.lang.String$getBytes$$0$$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    goto inline$java.lang.String$getBytes$$0$block32$1;

  inline$java.lang.String$getBytes$$0$block32$1:
    goto inline$java.lang.String$getBytes$$0$block32_last;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$$0$$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$$0$$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon15_dummy;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block33;

  inline$java.lang.String$getBytes$$0$block33:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block34;

  inline$java.lang.String$getBytes$$0$block34:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$block32_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.lang.String$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.lang.String$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.lang.String$0$anon0$1;

  inline$java.lang.String$getBytes$java.lang.String$0$anon0$1:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$$return := inline$java.lang.String$getBytes$java.lang.String$0$$r2;
    goto inline$java.lang.String$getBytes$java.lang.String$0$block31;

  inline$java.lang.String$getBytes$java.lang.String$0$block31:
    goto inline$java.lang.String$getBytes$java.lang.String$0$Return;

  inline$java.lang.String$getBytes$java.lang.String$0$Return:
    $r2 := inline$java.lang.String$getBytes$java.lang.String$0$$return;
    $exception := inline$java.lang.String$getBytes$java.lang.String$0$$exception;
    goto block12$1;

  block12$1:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} $exception == fixed.$null;
    goto block15;

  block15:
    assert {:sourceloc "PasswordEncoderUtils.java", 65, -1, -1, -1} true;
    $return := $r2;
    goto block16;

  anon10_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException);
    assert {:clone} true;
    goto block15;

  anon11_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException;
    $return := fixed.$null;
    goto block14;

  block14:
    assert {:sourceloc "PasswordEncoderUtils.java", 62, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r3 := $exception;
    assert {:sourceloc "PasswordEncoderUtils.java", 69, -1, -1, -1} true;
    $r4 := fixed.java.io.PrintStream$java.lang.System$out260;
    assert {:sourceloc "PasswordEncoderUtils.java", 69, -1, -1, -1} true;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} $r4 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon12_Then:
    assume {:partition} $r4 != fixed.$null;
    $exception := $exception;
    goto anon8;

  anon8:
    call $exception := fixed.java.io.PrintStream$println$java.lang.String($r4, fixed.$StringConst1);
    assert {:sourceloc "PasswordEncoderUtils.java", 70, -1, -1, -1} true;
    $return := fixed.$null;
    goto block16;
}



implementation fixed.java.lang.StringBuilder$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var $fakelocal_0: ref;
  var r0: ref;
  var $r1: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "StringBuilder.java", 4, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_0 := 0];
    $r1 := $fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 4, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347 := $r1];
    assert {:sourceloc "StringBuilder.java", 4, -1, -1, -1} true;
    goto block17;

  block17:
    return;
}



implementation fixed.java.lang.StringBuilder$append$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $fakelocal_7: ref;
  var i8: int;
  var $fakelocal_9: ref;
  var $i3: int;
  var $fakelocal_2: ref;
  var $fakelocal_0: ref;
  var $fakelocal_10: ref;
  var $i1: int;
  var $i2: int;
  var $r4: ref;
  var $c5: int;
  var $r9: ref;
  var $c6: int;
  var $r8: ref;
  var $r5: ref;
  var $r3: ref;
  var $r7: ref;
  var $fakelocal_5: ref;
  var $r6: ref;
  var i7: int;
  var r2: ref;
  var $fakelocal_1: ref;
  var $fakelocal_4: ref;
  var $i4: int;
  var $i0: int;
  var $fakelocal_6: ref;
  var r1: ref;
  var r0: ref;
  var $fakelocal_8: ref;
  var $fakelocal_3: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.StringBuilder;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    $r3 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} $r3 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon37_Then:
    assume {:partition} $r3 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i1 := fixed.$arrSizeHeap[$r3];
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_1;
    return;

  anon38_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $r4 := fixed.$heap[r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} $r4 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_2;
    return;

  anon39_Then:
    assume {:partition} $r4 != fixed.$null;
    $exception := $exception;
    goto anon9;

  anon9:
    $i0 := fixed.$arrSizeHeap[$r4];
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    $i2 := $i1 + $i0;
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    call $fakelocal_3 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_3 := $i2];
    r2 := $fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    i7 := 0;
    goto block18;

  block18:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return := $return;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception := $exception;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3 := $i3;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9 := $r9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6 := $c6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5 := $r5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5 := $fakelocal_5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7 := i7;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2 := r2;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4 := $fakelocal_4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6 := $fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r0 := r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap := fixed.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$block18;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$block18:
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon40_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon40_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon40_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5
   == fixed.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon21:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2][inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6]];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7 + 1;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon21_dummy;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon43_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon21;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon18:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9][inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon43_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon43_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon43_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon42_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon18;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon15:
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon42_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon42_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon42_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon41_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3
   > inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon15;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon12:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3 := fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon41_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon41_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon41_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
   >= inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon40_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5
   != fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon12;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon21_dummy:
    assume false;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$exit:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return:
    $return := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception;
    $i3 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3;
    $r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9;
    $c6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6;
    $r5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5;
    $fakelocal_5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5;
    i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7;
    $fakelocal_4 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4;
    $fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6;
    goto block18$1;

  block18$1:
    goto block18_last;

  anon40_Else:
    assume {:partition} $r5 == fixed.$null;
    call $fakelocal_4 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_4;
    return;

  anon40_Then:
    assume {:partition} $r5 != fixed.$null;
    $exception := $exception;
    goto anon12;

  anon12:
    $i3 := fixed.$arrSizeHeap[$r5];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} $i3 > i7;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    $r9 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} !(i7 < fixed.$arrSizeHeap[$r9] && i7 >= 0);
    call $fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_5;
    return;

  anon42_Then:
    assume {:partition} i7 < fixed.$arrSizeHeap[$r9] && i7 >= 0;
    $exception := $exception;
    goto anon18;

  anon18:
    $c6 := fixed.$intArrHeap[$r9][i7];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} !(i7 < fixed.$arrSizeHeap[r2] && i7 >= 0);
    call $fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_6;
    return;

  anon43_Then:
    assume {:partition} i7 < fixed.$arrSizeHeap[r2] && i7 >= 0;
    $exception := $exception;
    goto anon21;

  anon21:
    fixed.$intArrHeap := fixed.$intArrHeap[r2 := fixed.$intArrHeap[r2][i7 := $c6]];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    i7 := i7 + 1;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon21_dummy;

  anon41_Then:
    assume {:partition} i7 >= $i3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "thenblock"} true;
    goto block19;

  block19:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    $r6 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} $r6 == fixed.$null;
    call $fakelocal_7 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_7;
    return;

  anon44_Then:
    assume {:partition} $r6 != fixed.$null;
    $exception := $exception;
    goto anon24;

  anon24:
    i8 := fixed.$arrSizeHeap[$r6];
    goto block20;

  block20:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return := $return;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception := $exception;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8 := i8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9 := $fakelocal_9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10 := $fakelocal_10;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5 := $c5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8 := $r8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7 := $r7;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2 := r2;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4 := $i4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r1 := r1;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8 := $fakelocal_8;
    havoc inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex := fixed.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap := fixed.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$block20;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$block20:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon45_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon45_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon45_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7
   == fixed.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon36:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2][inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5]];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8 + 1;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon36_dummy;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon48_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon36;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon33:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8][inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon48_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon48_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon48_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon47_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon33;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon30:
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon47_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon47_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon47_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon46_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4
   > inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon30;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon27:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4 := fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon46_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon46_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon46_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
   >= inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon45_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7
   != fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon27;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon36_dummy:
    assume false;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$exit:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return:
    $return := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception;
    i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8;
    $fakelocal_9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9;
    $fakelocal_10 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10;
    $c5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5;
    $r8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8;
    $r7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7;
    $i4 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4;
    $fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8;
    goto block20$1;

  block20$1:
    goto block20_last;

  anon45_Else:
    assume {:partition} $r7 == fixed.$null;
    call $fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_8;
    return;

  anon45_Then:
    assume {:partition} $r7 != fixed.$null;
    $exception := $exception;
    goto anon27;

  anon27:
    $i4 := fixed.$arrSizeHeap[$r7];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} $i4 > i8;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "elseblock"} true;
    goto anon30;

  anon30:
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    $r8 := fixed.$heap[r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} !(i8 < fixed.$arrSizeHeap[$r8] && i8 >= 0);
    call $fakelocal_9 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_9;
    return;

  anon47_Then:
    assume {:partition} i8 < fixed.$arrSizeHeap[$r8] && i8 >= 0;
    $exception := $exception;
    goto anon33;

  anon33:
    $c5 := fixed.$intArrHeap[$r8][i8];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} !(i8 < fixed.$arrSizeHeap[r2] && i8 >= 0);
    call $fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_10;
    return;

  anon48_Then:
    assume {:partition} i8 < fixed.$arrSizeHeap[r2] && i8 >= 0;
    $exception := $exception;
    goto anon36;

  anon36:
    fixed.$intArrHeap := fixed.$intArrHeap[r2 := fixed.$intArrHeap[r2][i8 := $c5]];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    i8 := i8 + 1;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon36_dummy;

  anon46_Then:
    assume {:partition} i8 >= $i4;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "thenblock"} true;
    goto block21;

  block21:
    assert {:sourceloc "StringBuilder.java", 14, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347 := r2];
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    $return := r0;
    goto block22;

  block22:
    return;

  anon36_dummy:
    assume false;
    return;

  block20_last:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    $r7 := fixed.$heap[r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon45_Then, anon45_Else;

  anon21_dummy:
    assume false;
    return;

  block18_last:
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    $r5 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon40_Then, anon40_Else;
}



implementation fixed.java.lang.StringBuilder$toString$($this: ref) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var $r1: ref;
  var $r2: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i0: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.String);
    $r1 := $fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    $r2 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := $r1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := $r2;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := fixed.$heap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$intArrHeap := fixed.$intArrHeap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon16_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon16_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon3;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon3:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i0];
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r2];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 := 0;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block24;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block24:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$block24;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$block24:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon12:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon12;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon9;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon6:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
   >= inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon6;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$exit:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block24$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block24$1:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block24_last;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon6;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon6:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon18_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1
   > inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon9;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon19_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon12;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon12:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1][inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon20_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon15;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3][inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
   >= inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block25;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block25:
    assert {:sourceloc "String.java", 12, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block26;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block26:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block24_last:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon17_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    $return := $r1;
    goto block23;

  block23:
    return;
}



implementation fixed.java.lang.String$$la$init$ra$$char$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref)
{
  var r1: ref;
  var $c2: int;
  var $fakelocal_1: ref;
  var $r3: ref;
  var $i1: int;
  var $fakelocal_0: ref;
  var r0: ref;
  var $fakelocal_4: ref;
  var $fakelocal_2: ref;
  var $fakelocal_3: ref;
  var i3: int;
  var $r2: ref;
  var $i0: int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $exception := $fakelocal_0;
    return;

  anon16_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i0 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_1 := $i0];
    $r2 := $fakelocal_1;
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348 := $r2];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    i3 := 0;
    goto block24;

  block24:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception := $exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1 := r1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2 := $c2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3 := $r3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1 := $i1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0 := r0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4 := $fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2 := $fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3 := $fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3 := i3;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$block24;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$block24:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon12:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon12;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon9;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon6:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
   >= inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon6;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$exit:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    $c2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2;
    $r3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3;
    $i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1;
    $fakelocal_4 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4;
    $fakelocal_2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2;
    $fakelocal_3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3;
    i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    goto block24$1;

  block24$1:
    goto block24_last;

  anon17_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    $exception := $fakelocal_2;
    return;

  anon17_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i1 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} $i1 > i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    $r3 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(i3 < fixed.$arrSizeHeap[r1] && i3 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_3;
    return;

  anon19_Then:
    assume {:partition} i3 < fixed.$arrSizeHeap[r1] && i3 >= 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $c2 := fixed.$intArrHeap[r1][i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(i3 < fixed.$arrSizeHeap[$r3] && i3 >= 0);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_4;
    return;

  anon20_Then:
    assume {:partition} i3 < fixed.$arrSizeHeap[$r3] && i3 >= 0;
    $exception := $exception;
    goto anon15;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[$r3 := fixed.$intArrHeap[$r3][i3 := $c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    i3 := i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon15_dummy;

  anon18_Then:
    assume {:partition} i3 >= $i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    goto block25;

  block25:
    assert {:sourceloc "String.java", 12, -1, -1, -1} true;
    goto block26;

  block26:
    return;

  anon15_dummy:
    assume false;
    return;

  block24_last:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;
}



implementation fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref)
{
  var r0: ref;
  var $fakelocal_0: ref;
  var i4: int;
  var $fakelocal_4: ref;
  var $c3: int;
  var $fakelocal_1: ref;
  var $i0: int;
  var r1: ref;
  var $b2: int;
  var $fakelocal_3: ref;
  var $r2: ref;
  var $r3: ref;
  var $i1: int;
  var $fakelocal_2: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 14, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 15, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $exception := $fakelocal_0;
    return;

  anon16_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i0 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 15, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_1 := $i0];
    $r2 := $fakelocal_1;
    assert {:sourceloc "String.java", 15, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348 := $r2];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    i4 := 0;
    goto block27;

  block27:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception := $exception;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r0 := r0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4 := i4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4 := $fakelocal_4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3 := $c3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1 := r1;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2 := $b2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3 := $fakelocal_3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3 := $r3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1 := $i1;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2 := $fakelocal_2;
    havoc inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$block27;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$block27:
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3]];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 + 1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon12:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2;
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon12;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon9:
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon9;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon6:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
   >= inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon6;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$exit:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception;
    i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4;
    $fakelocal_4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4;
    $c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3;
    $b2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2;
    $fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3;
    $r3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3;
    $i1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1;
    $fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2;
    goto block27$1;

  block27$1:
    goto block27_last;

  anon17_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    $exception := $fakelocal_2;
    return;

  anon17_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i1 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} $i1 > i4;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    $r3 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(i4 < fixed.$arrSizeHeap[r1] && i4 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_3;
    return;

  anon19_Then:
    assume {:partition} i4 < fixed.$arrSizeHeap[r1] && i4 >= 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $b2 := fixed.$intArrHeap[r1][i4];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    $c3 := $b2;
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(i4 < fixed.$arrSizeHeap[$r3] && i4 >= 0);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_4;
    return;

  anon20_Then:
    assume {:partition} i4 < fixed.$arrSizeHeap[$r3] && i4 >= 0;
    $exception := $exception;
    goto anon15;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[$r3 := fixed.$intArrHeap[$r3][i4 := $c3]];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    i4 := i4 + 1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon15_dummy;

  anon18_Then:
    assume {:partition} i4 >= $i1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    goto block28;

  block28:
    assert {:sourceloc "String.java", 19, -1, -1, -1} true;
    goto block29;

  block29:
    return;

  anon15_dummy:
    assume false;
    return;

  block27_last:
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;
}



implementation fixed.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var $fakelocal_0: ref;
  var $r1: ref;
  var $c1: int;
  var i0: int;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    $r1 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !(i0 < fixed.$arrSizeHeap[$r1] && i0 >= 0);
    call $fakelocal_0 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon4_Then:
    assume {:partition} i0 < fixed.$arrSizeHeap[$r1] && i0 >= 0;
    $exception := $exception;
    goto anon3;

  anon3:
    $c1 := fixed.$intArrHeap[$r1][i0];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    $return := $c1;
    goto block30;

  block30:
    return;
}



implementation fixed.java.lang.String$getBytes$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r1: ref;
  var $r2: ref;
  var r0: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$c3: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$i5: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$b4: int;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block32$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := r0;
    havoc inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$c3, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$i5, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$b4, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := 0;
    goto inline$java.lang.String$getBytes$$0$block32;

  inline$java.lang.String$getBytes$$0$block32:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Entry;

  inline$java.lang.String$getBytes$_loop_block32$0$Entry:
    inline$java.lang.String$getBytes$_loop_block32$0$in_$return := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$exception := inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r0 := inline$java.lang.String$getBytes$$0$r0;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c2 := inline$java.lang.String$getBytes$$0$$c2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c3 := inline$java.lang.String$getBytes$$0$$c3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4 := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$i1 := inline$java.lang.String$getBytes$$0$$i1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3 := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := inline$java.lang.String$getBytes$$0$r1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r4 := inline$java.lang.String$getBytes$$0$$r4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r3 := inline$java.lang.String$getBytes$$0$$r3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_i5 := inline$java.lang.String$getBytes$$0$i5;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2 := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$b4 := inline$java.lang.String$getBytes$$0$$b4;
    havoc inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block32$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block32$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$entry;

  inline$java.lang.String$getBytes$_loop_block32$0$entry:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    goto inline$java.lang.String$getBytes$_loop_block32$0$block32;

  inline$java.lang.String$getBytes$_loop_block32$0$block32:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1][inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15;

  inline$java.lang.String$getBytes$_loop_block32$0$anon12:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4][inline$java.lang.String$getBytes$_loop_block32$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon12;

  inline$java.lang.String$getBytes$_loop_block32$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon9;

  inline$java.lang.String$getBytes$_loop_block32$0$anon6:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon6;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$Return:
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$_loop_block32$0$out_$return;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    inline$java.lang.String$getBytes$$0$$c2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c2;
    inline$java.lang.String$getBytes$$0$$c3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    inline$java.lang.String$getBytes$$0$$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$$0$$i1 := inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    inline$java.lang.String$getBytes$$0$$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$$0$$r4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r4;
    inline$java.lang.String$getBytes$$0$$r3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r3;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    inline$java.lang.String$getBytes$$0$$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    goto inline$java.lang.String$getBytes$$0$block32$1;

  inline$java.lang.String$getBytes$$0$block32$1:
    goto inline$java.lang.String$getBytes$$0$block32_last;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$$0$$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$$0$$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon15_dummy;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block33;

  inline$java.lang.String$getBytes$$0$block33:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block34;

  inline$java.lang.String$getBytes$$0$block34:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$block32_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$Return:
    $r2 := inline$java.lang.String$getBytes$$0$$return;
    $exception := inline$java.lang.String$getBytes$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    $return := $r2;
    goto block31;

  block31:
    return;
}



implementation fixed.java.lang.String$getBytes$($this: ref) returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var r0: ref;
  var $c2: int;
  var $c3: int;
  var $fakelocal_4: ref;
  var $i1: int;
  var $fakelocal_3: ref;
  var $r2: ref;
  var r1: ref;
  var $i0: int;
  var $fakelocal_1: ref;
  var $r4: ref;
  var $r3: ref;
  var i5: int;
  var $fakelocal_2: ref;
  var $b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block32$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    $r2 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} $r2 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon16_Then:
    assume {:partition} $r2 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i0 := fixed.$arrSizeHeap[$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_1 := $i0];
    r1 := $fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    i5 := 0;
    goto block32;

  block32:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Entry;

  inline$java.lang.String$getBytes$_loop_block32$0$Entry:
    inline$java.lang.String$getBytes$_loop_block32$0$in_$return := $return;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$exception := $exception;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r0 := r0;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c2 := $c2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c3 := $c3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4 := $fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$i1 := $i1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3 := $fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := r1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r4 := $r4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r3 := $r3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_i5 := i5;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2 := $fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$b4 := $b4;
    havoc inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block32$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block32$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$entry;

  inline$java.lang.String$getBytes$_loop_block32$0$entry:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    goto inline$java.lang.String$getBytes$_loop_block32$0$block32;

  inline$java.lang.String$getBytes$_loop_block32$0$block32:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1][inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15;

  inline$java.lang.String$getBytes$_loop_block32$0$anon12:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4][inline$java.lang.String$getBytes$_loop_block32$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon12;

  inline$java.lang.String$getBytes$_loop_block32$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon9;

  inline$java.lang.String$getBytes$_loop_block32$0$anon6:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon6;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$Return:
    $return := inline$java.lang.String$getBytes$_loop_block32$0$out_$return;
    $exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    $c2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c2;
    $c3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    $fakelocal_4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    $i1 := inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    $fakelocal_3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    $r4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r4;
    $r3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r3;
    i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    $fakelocal_2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    $b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    goto block32$1;

  block32$1:
    goto block32_last;

  anon17_Else:
    assume {:partition} $r3 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_2;
    return;

  anon17_Then:
    assume {:partition} $r3 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i1 := fixed.$arrSizeHeap[$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} $i1 > i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    $r4 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(i5 < fixed.$arrSizeHeap[$r4] && i5 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_3;
    return;

  anon19_Then:
    assume {:partition} i5 < fixed.$arrSizeHeap[$r4] && i5 >= 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $c2 := fixed.$intArrHeap[$r4][i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    $c3 := fixed.$bitAnd($c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    $b4 := $c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(i5 < fixed.$arrSizeHeap[r1] && i5 >= 0);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_4;
    return;

  anon20_Then:
    assume {:partition} i5 < fixed.$arrSizeHeap[r1] && i5 >= 0;
    $exception := $exception;
    goto anon15;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[r1 := fixed.$intArrHeap[r1][i5 := $b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    i5 := i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon15_dummy;

  anon18_Then:
    assume {:partition} i5 >= $i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto block33;

  block33:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    $return := r1;
    goto block34;

  block34:
    return;

  anon15_dummy:
    assume false;
    return;

  block32_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    $r3 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;
}



implementation {:inline 1} fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "String.java", 39, -1, -1, -1} true;
    $return := r0;
    goto block35;

  block35:
    return;
}



implementation fixed.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref)
{
  var z0: int;
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.boolean$java.lang.Boolean$value0 := z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto block36;

  block36:
    return;
}



implementation fixed.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var z0: int;
  var $r0: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    $r0 := $fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this := $r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0 := z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$block36;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$block36:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return:
    $exception := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    $return := $r0;
    goto block37;

  block37:
    return;
}



implementation fixed.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref)
{
  var $z0: int;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $z0 := fixed.$heap[r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $return := $z0;
    goto block38;

  block38:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Safe.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.sg.edu.nus.comp.tsunami.safe.Safe;
    assume {:sourceloc "Safe.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Safe.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Safe.java", 3, -1, -1, -1} true;
    goto block39;

  block39:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$not$boolean($in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var z0: int;
  var z1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    z1 := 0;
    goto block40;

  block40:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    z1 := 1;
    goto block41;

  block41:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    $return := z1;
    goto block42;

  block42:
    return;

  anon8_Then:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block41;

  anon7_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block40;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$and$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z1: int;
  var z0: int;
  var $z2: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 12, -1, -1, -1} true;
    $z2 := fixed.$bitAnd(z0, z1);
    assert {:sourceloc "Safe.java", 12, -1, -1, -1} true;
    $return := $z2;
    goto block43;

  block43:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$or$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z1: int;
  var $z2: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 16, -1, -1, -1} true;
    $z2 := fixed.$bitOr(z0, z1);
    assert {:sourceloc "Safe.java", 16, -1, -1, -1} true;
    $return := $z2;
    goto block44;

  block44:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b2: int;
  var $b3: int;
  var z0: int;
  var l1: int;
  var l0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 < $b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    z0 := 1;
    goto block45;

  block45:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 >= $b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    z0 := 0;
    goto block46;

  block46:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    $return := z0;
    goto block47;

  block47:
    return;

  anon8_Then:
    assume {:partition} $b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto block46;

  anon7_Then:
    assume {:partition} $b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto block45;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l0: int;
  var l1: int;
  var $b3: int;
  var $b2: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 27, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 > $b2;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    z0 := 1;
    goto block48;

  block48:
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 <= $b3;
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    z0 := 0;
    goto block49;

  block49:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    $return := z0;
    goto block50;

  block50:
    return;

  anon8_Then:
    assume {:partition} $b3 < 0;
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} {:comment "thenblock"} true;
    goto block49;

  anon7_Then:
    assume {:partition} $b2 >= 0;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} {:comment "thenblock"} true;
    goto block48;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var l1: int;
  var l0: int;
  var $b2: int;
  var $b3: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 34, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 <= $b2;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    z0 := 1;
    goto block51;

  block51:
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 > $b3;
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    z0 := 0;
    goto block52;

  block52:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    $return := z0;
    goto block53;

  block53:
    return;

  anon8_Then:
    assume {:partition} $b3 >= 0;
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} {:comment "thenblock"} true;
    goto block52;

  anon7_Then:
    assume {:partition} $b2 < 0;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} {:comment "thenblock"} true;
    goto block51;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b3: int;
  var z0: int;
  var l1: int;
  var $b2: int;
  var l0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 41, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 >= $b2;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    z0 := 1;
    goto block54;

  block54:
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 < $b3;
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    z0 := 0;
    goto block55;

  block55:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    $return := z0;
    goto block56;

  block56:
    return;

  anon8_Then:
    assume {:partition} $b3 <= 0;
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto block55;

  anon7_Then:
    assume {:partition} $b2 > 0;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto block54;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l1: int;
  var $b3: int;
  var $b2: int;
  var l0: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    z0 := 1;
    goto block57;

  block57:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    z0 := 0;
    goto block58;

  block58:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    $return := z0;
    goto block59;

  block59:
    return;

  anon8_Then:
    assume {:partition} $b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto block58;

  anon7_Then:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto block57;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var l0: int;
  var $b2: int;
  var l1: int;
  var $b3: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    z0 := 1;
    goto block60;

  block60:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    z0 := 0;
    goto block61;

  block61:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    $return := z0;
    goto block62;

  block62:
    return;

  anon8_Then:
    assume {:partition} $b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto block61;

  anon7_Then:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto block60;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b0: int;
  var d0: int;
  var z0: int;
  var $b1: int;
  var d1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 62, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 < $b0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    z0 := 1;
    goto block63;

  block63:
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 >= $b1;
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    z0 := 0;
    goto block64;

  block64:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    $return := z0;
    goto block65;

  block65:
    return;

  anon8_Then:
    assume {:partition} $b1 > 0;
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} {:comment "thenblock"} true;
    goto block64;

  anon7_Then:
    assume {:partition} $b0 <= 0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} {:comment "thenblock"} true;
    goto block63;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b1: int;
  var d1: int;
  var d0: int;
  var z0: int;
  var $b0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 69, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 > $b0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    z0 := 1;
    goto block66;

  block66:
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 <= $b1;
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    z0 := 0;
    goto block67;

  block67:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    $return := z0;
    goto block68;

  block68:
    return;

  anon8_Then:
    assume {:partition} $b1 < 0;
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} {:comment "thenblock"} true;
    goto block67;

  anon7_Then:
    assume {:partition} $b0 >= 0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto block66;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d0: int;
  var d1: int;
  var z0: int;
  var $b0: int;
  var $b1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 76, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 <= $b0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    z0 := 1;
    goto block69;

  block69:
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 > $b1;
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    z0 := 0;
    goto block70;

  block70:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    $return := z0;
    goto block71;

  block71:
    return;

  anon8_Then:
    assume {:partition} $b1 >= 0;
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} {:comment "thenblock"} true;
    goto block70;

  anon7_Then:
    assume {:partition} $b0 < 0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto block69;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b1: int;
  var $b0: int;
  var d1: int;
  var d0: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 83, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 >= $b0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    z0 := 1;
    goto block72;

  block72:
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 < $b1;
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    z0 := 0;
    goto block73;

  block73:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    $return := z0;
    goto block74;

  block74:
    return;

  anon8_Then:
    assume {:partition} $b1 <= 0;
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} {:comment "thenblock"} true;
    goto block73;

  anon7_Then:
    assume {:partition} $b0 > 0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} {:comment "thenblock"} true;
    goto block72;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b0: int;
  var d1: int;
  var z0: int;
  var d0: int;
  var $b1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 90, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b0 == 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    z0 := 1;
    goto block75;

  block75:
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    z0 := 0;
    goto block76;

  block76:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    $return := z0;
    goto block77;

  block77:
    return;

  anon8_Then:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} {:comment "thenblock"} true;
    goto block76;

  anon7_Then:
    assume {:partition} $b0 != 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} {:comment "thenblock"} true;
    goto block75;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b0: int;
  var $b1: int;
  var d1: int;
  var z0: int;
  var d0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 97, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b0 != 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    z0 := 1;
    goto block78;

  block78:
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    z0 := 0;
    goto block79;

  block79:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    $return := z0;
    goto block80;

  block80:
    return;

  anon8_Then:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} {:comment "thenblock"} true;
    goto block79;

  anon7_Then:
    assume {:partition} $b0 == 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} {:comment "thenblock"} true;
    goto block78;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var r0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 104, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    z0 := 1;
    goto block81;

  block81:
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    z0 := 0;
    goto block82;

  block82:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    $return := z0;
    goto block83;

  block83:
    return;

  anon8_Then:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block82;

  anon7_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block81;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var r1: ref;
  var r0: ref;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 111, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    z0 := 1;
    goto block84;

  block84:
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    z0 := 0;
    goto block85;

  block85:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    $return := z0;
    goto block86;

  block86:
    return;

  anon8_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block85;

  anon7_Then:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block84;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object($in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref)
{
  var r1: ref;
  var r2: ref;
  var z0: int;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__2, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    r2 := r0;
    goto block87;

  block87:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    r2 := r1;
    goto block88;

  block88:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    $return := r2;
    goto block89;

  block89:
    return;

  anon8_Then:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block88;

  anon7_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block87;
}



implementation fixed.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := fixed.$null;
    return;
}



implementation fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6(in_$return: int, 
    in_$exception: ref, 
    in_$b5: int, 
    in_$b6: int, 
    in_b9: int, 
    in_r2: ref, 
    in_r3: ref, 
    in_i0: int, 
    in_$b4: int, 
    in_$fakelocal_6: ref, 
    in_i10: int, 
    in_$fakelocal_7: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$b5: int, 
    out_$b6: int, 
    out_b9: int, 
    out_$b4: int, 
    out_$fakelocal_6: ref, 
    out_i10: int, 
    out_$fakelocal_7: ref)
{
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i0: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$b5, out_$b6, out_b9, out_$b4, out_$fakelocal_6, out_i10, out_$fakelocal_7 := in_$return, in_$exception, in_$b5, in_$b6, in_b9, in_$b4, in_$fakelocal_6, in_i10, in_$fakelocal_7;
    goto block6;

  block6:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto anon51_Then, anon51_Else;

  anon51_Then:
    assume {:partition} out_i10 >= in_i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$b5, out_$b6, out_b9, out_$b4, out_$fakelocal_6, out_i10, out_$fakelocal_7 := in_$return, in_$exception, in_$b5, in_$b6, in_b9, in_$b4, in_$fakelocal_6, in_i10, in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon33:
    out_$b4 := fixed.$intArrHeap[in_r3][out_i10];
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    out_$b6 := fixed.$xorInt(out_$b5, out_$b4);
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    out_b9 := fixed.$bitOr(out_b9, out_$b6);
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    out_i10 := out_i10 + 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto anon33_dummy;

  anon53_Then:
    assume {:partition} out_i10 < fixed.$arrSizeHeap[in_r3] && out_i10 >= 0;
    out_$exception := out_$exception;
    goto anon33;

  anon30:
    out_$b5 := fixed.$intArrHeap[in_r2][out_i10];
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} !(out_i10 < fixed.$arrSizeHeap[in_r3] && out_i10 >= 0);
    call out_$fakelocal_7 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_7;
    out_$return, out_$exception, out_$b5, out_$b6, out_b9, out_$b4, out_$fakelocal_6, out_i10, out_$fakelocal_7 := in_$return, in_$exception, in_$b5, in_$b6, in_b9, in_$b4, in_$fakelocal_6, in_i10, in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon52_Then:
    assume {:partition} out_i10 < fixed.$arrSizeHeap[in_r2] && out_i10 >= 0;
    out_$exception := out_$exception;
    goto anon30;

  anon27:
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} !(out_i10 < fixed.$arrSizeHeap[in_r2] && out_i10 >= 0);
    call out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_6;
    out_$return, out_$exception, out_$b5, out_$b6, out_b9, out_$b4, out_$fakelocal_6, out_i10, out_$fakelocal_7 := in_$return, in_$exception, in_$b5, in_$b6, in_b9, in_$b4, in_$fakelocal_6, in_i10, in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon51_Else:
    assume {:partition} in_i0 > out_i10;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} {:comment "elseblock"} true;
    goto anon27;

  anon33_dummy:
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Entry;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Entry:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return := out_$return;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception := out_$exception;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5 := out_$b5;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6 := out_$b6;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9 := out_b9;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2 := in_r2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3 := in_r3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i0 := in_i0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4 := out_$b4;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6 := out_$fakelocal_6;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10 := out_i10;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7 := out_$fakelocal_7;
    havoc inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex := fixed.$objIndex;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap := fixed.$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$entry;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$entry:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$block6;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$block6:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon51_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon51_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon51_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
   >= inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} {:comment "thenblock"} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon33:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4 := fixed.$intArrHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3][inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10];
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6 := fixed.$xorInt(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, 
  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4);
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9 := fixed.$bitOr(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, 
  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6);
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
   + 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon33_dummy;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon53_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     >= 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon33;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon30:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5 := fixed.$intArrHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2][inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10];
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon53_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon53_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon53_Else:
    assume {:partition} !(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r3]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     >= 0);
    call inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return := 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon52_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     >= 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon30;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon27:
    assert {:sourceloc "PasswordEncoderUtils.java", 54, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon52_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon52_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon52_Else:
    assume {:partition} !(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_r2]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10
     >= 0);
    call inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return := 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b5, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_b9, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_6, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i10, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_$fakelocal_7;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon51_Else:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$in_i0
   > inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10;
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon27;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$anon33_dummy:
    assume false;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$exit:
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$Return:
    out_$return := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$return;
    out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$exception;
    out_$b5 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b5;
    out_$b6 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b6;
    out_b9 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_b9;
    out_$b4 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$b4;
    out_$fakelocal_6 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_6;
    out_i10 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_i10;
    out_$fakelocal_7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block6$0$out_$fakelocal_7;
    goto anon33_dummy$1;

  anon33_dummy$1:
    return;

  exit:
    return;
}



implementation fixed.java.lang.StringBuilder$append$java.lang.String_loop_block20(in_$return: ref, 
    in_$exception: ref, 
    in_i8: int, 
    in_$fakelocal_9: ref, 
    in_$fakelocal_10: ref, 
    in_$c5: int, 
    in_$r8: ref, 
    in_$r7: ref, 
    in_r2: ref, 
    in_$i4: int, 
    in_r1: ref, 
    in_$fakelocal_8: ref)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_i8: int, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_10: ref, 
    out_$c5: int, 
    out_$r8: ref, 
    out_$r7: ref, 
    out_$i4: int, 
    out_$fakelocal_8: ref)
{
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_i8, out_$fakelocal_9, out_$fakelocal_10, out_$c5, out_$r8, out_$r7, out_$i4, out_$fakelocal_8 := in_$return, in_$exception, in_i8, in_$fakelocal_9, in_$fakelocal_10, in_$c5, in_$r8, in_$r7, in_$i4, in_$fakelocal_8;
    goto block20;

  block20:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    out_$r7 := fixed.$heap[in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} out_$r7 == fixed.$null;
    call out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_8;
    out_$return, out_$exception, out_i8, out_$fakelocal_9, out_$fakelocal_10, out_$c5, out_$r8, out_$r7, out_$i4, out_$fakelocal_8 := in_$return, in_$exception, in_i8, in_$fakelocal_9, in_$fakelocal_10, in_$c5, in_$r8, in_$r7, in_$i4, in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon36:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r2 := fixed.$intArrHeap[in_r2][out_i8 := out_$c5]];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    out_i8 := out_i8 + 1;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon36_dummy;

  anon48_Then:
    assume {:partition} out_i8 < fixed.$arrSizeHeap[in_r2] && out_i8 >= 0;
    out_$exception := out_$exception;
    goto anon36;

  anon33:
    out_$c5 := fixed.$intArrHeap[out_$r8][out_i8];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} !(out_i8 < fixed.$arrSizeHeap[in_r2] && out_i8 >= 0);
    call out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_10;
    out_$return, out_$exception, out_i8, out_$fakelocal_9, out_$fakelocal_10, out_$c5, out_$r8, out_$r7, out_$i4, out_$fakelocal_8 := in_$return, in_$exception, in_i8, in_$fakelocal_9, in_$fakelocal_10, in_$c5, in_$r8, in_$r7, in_$i4, in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon47_Then:
    assume {:partition} out_i8 < fixed.$arrSizeHeap[out_$r8] && out_i8 >= 0;
    out_$exception := out_$exception;
    goto anon33;

  anon30:
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    out_$r8 := fixed.$heap[in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} !(out_i8 < fixed.$arrSizeHeap[out_$r8] && out_i8 >= 0);
    call out_$fakelocal_9 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_9;
    out_$return, out_$exception, out_i8, out_$fakelocal_9, out_$fakelocal_10, out_$c5, out_$r8, out_$r7, out_$i4, out_$fakelocal_8 := in_$return, in_$exception, in_i8, in_$fakelocal_9, in_$fakelocal_10, in_$c5, in_$r8, in_$r7, in_$i4, in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon46_Else:
    assume {:partition} out_$i4 > out_i8;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "elseblock"} true;
    goto anon30;

  anon27:
    out_$i4 := fixed.$arrSizeHeap[out_$r7];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon46_Then, anon46_Else;

  anon46_Then:
    assume {:partition} out_i8 >= out_$i4;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_i8, out_$fakelocal_9, out_$fakelocal_10, out_$c5, out_$r8, out_$r7, out_$i4, out_$fakelocal_8 := in_$return, in_$exception, in_i8, in_$fakelocal_9, in_$fakelocal_10, in_$c5, in_$r8, in_$r7, in_$i4, in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon45_Then:
    assume {:partition} out_$r7 != fixed.$null;
    out_$exception := out_$exception;
    goto anon27;

  anon36_dummy:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return := out_$return;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception := out_$exception;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8 := out_i8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9 := out_$fakelocal_9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10 := out_$fakelocal_10;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5 := out_$c5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8 := out_$r8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7 := out_$r7;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2 := in_r2;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4 := out_$i4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r1 := in_r1;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8 := out_$fakelocal_8;
    havoc inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex := fixed.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap := fixed.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$block20;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$block20:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon45_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon45_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon45_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7
   == fixed.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon36:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2][inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5]];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8 + 1;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon36_dummy;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon48_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon36;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon33:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8][inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon48_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon48_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon48_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon47_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon33;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon30:
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon47_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon47_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon47_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon46_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4
   > inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon30;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon27:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4 := fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon46_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon46_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon46_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8
   >= inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_i8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$in_$fakelocal_8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon45_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7
   != fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon27;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$anon36_dummy:
    assume false;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$exit:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$Return:
    out_$return := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$return;
    out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$exception;
    out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_i8;
    out_$fakelocal_9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_9;
    out_$fakelocal_10 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_10;
    out_$c5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$c5;
    out_$r8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r8;
    out_$r7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$r7;
    out_$i4 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$i4;
    out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block20$0$out_$fakelocal_8;
    goto anon36_dummy$1;

  anon36_dummy$1:
    return;

  exit:
    return;
}



implementation fixed.java.lang.StringBuilder$append$java.lang.String_loop_block18(in_$return: ref, 
    in_$exception: ref, 
    in_$i3: int, 
    in_$r9: ref, 
    in_$c6: int, 
    in_$r5: ref, 
    in_$fakelocal_5: ref, 
    in_i7: int, 
    in_r2: ref, 
    in_$fakelocal_4: ref, 
    in_$fakelocal_6: ref, 
    in_r0: ref)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$i3: int, 
    out_$r9: ref, 
    out_$c6: int, 
    out_$r5: ref, 
    out_$fakelocal_5: ref, 
    out_i7: int, 
    out_$fakelocal_4: ref, 
    out_$fakelocal_6: ref)
{
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$i3, out_$r9, out_$c6, out_$r5, out_$fakelocal_5, out_i7, out_$fakelocal_4, out_$fakelocal_6 := in_$return, in_$exception, in_$i3, in_$r9, in_$c6, in_$r5, in_$fakelocal_5, in_i7, in_$fakelocal_4, in_$fakelocal_6;
    goto block18;

  block18:
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    out_$r5 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} out_$r5 == fixed.$null;
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_4;
    out_$return, out_$exception, out_$i3, out_$r9, out_$c6, out_$r5, out_$fakelocal_5, out_i7, out_$fakelocal_4, out_$fakelocal_6 := in_$return, in_$exception, in_$i3, in_$r9, in_$c6, in_$r5, in_$fakelocal_5, in_i7, in_$fakelocal_4, in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon21:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r2 := fixed.$intArrHeap[in_r2][out_i7 := out_$c6]];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    out_i7 := out_i7 + 1;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon21_dummy;

  anon43_Then:
    assume {:partition} out_i7 < fixed.$arrSizeHeap[in_r2] && out_i7 >= 0;
    out_$exception := out_$exception;
    goto anon21;

  anon18:
    out_$c6 := fixed.$intArrHeap[out_$r9][out_i7];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} !(out_i7 < fixed.$arrSizeHeap[in_r2] && out_i7 >= 0);
    call out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_6;
    out_$return, out_$exception, out_$i3, out_$r9, out_$c6, out_$r5, out_$fakelocal_5, out_i7, out_$fakelocal_4, out_$fakelocal_6 := in_$return, in_$exception, in_$i3, in_$r9, in_$c6, in_$r5, in_$fakelocal_5, in_i7, in_$fakelocal_4, in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon42_Then:
    assume {:partition} out_i7 < fixed.$arrSizeHeap[out_$r9] && out_i7 >= 0;
    out_$exception := out_$exception;
    goto anon18;

  anon15:
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    out_$r9 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} !(out_i7 < fixed.$arrSizeHeap[out_$r9] && out_i7 >= 0);
    call out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_5;
    out_$return, out_$exception, out_$i3, out_$r9, out_$c6, out_$r5, out_$fakelocal_5, out_i7, out_$fakelocal_4, out_$fakelocal_6 := in_$return, in_$exception, in_$i3, in_$r9, in_$c6, in_$r5, in_$fakelocal_5, in_i7, in_$fakelocal_4, in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon41_Else:
    assume {:partition} out_$i3 > out_i7;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon12:
    out_$i3 := fixed.$arrSizeHeap[out_$r5];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon41_Then, anon41_Else;

  anon41_Then:
    assume {:partition} out_i7 >= out_$i3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$i3, out_$r9, out_$c6, out_$r5, out_$fakelocal_5, out_i7, out_$fakelocal_4, out_$fakelocal_6 := in_$return, in_$exception, in_$i3, in_$r9, in_$c6, in_$r5, in_$fakelocal_5, in_i7, in_$fakelocal_4, in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon40_Then:
    assume {:partition} out_$r5 != fixed.$null;
    out_$exception := out_$exception;
    goto anon12;

  anon21_dummy:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return := out_$return;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception := out_$exception;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3 := out_$i3;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9 := out_$r9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6 := out_$c6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5 := out_$r5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5 := out_$fakelocal_5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7 := out_i7;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2 := in_r2;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6 := out_$fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r0 := in_r0;
    havoc inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap := fixed.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$block18;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$block18:
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon40_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon40_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon40_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5
   == fixed.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon21:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2][inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6]];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7 + 1;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon21_dummy;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon43_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon21;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon18:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9][inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon43_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon43_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon43_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon42_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon18;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon15:
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon42_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon42_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon42_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon41_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3
   > inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon15;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon12:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3 := fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon41_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon41_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon41_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7
   >= inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$in_$fakelocal_6;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon40_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5
   != fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon12;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$anon21_dummy:
    assume false;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$exit:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$Return:
    out_$return := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$return;
    out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$exception;
    out_$i3 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$i3;
    out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r9;
    out_$c6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$c6;
    out_$r5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$r5;
    out_$fakelocal_5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_5;
    out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_i7;
    out_$fakelocal_4 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_4;
    out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block18$0$out_$fakelocal_6;
    goto anon21_dummy$1;

  anon21_dummy$1:
    return;

  exit:
    return;
}



implementation fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24(in_$exception: ref, 
    in_r1: ref, 
    in_$c2: int, 
    in_$r3: ref, 
    in_$i1: int, 
    in_r0: ref, 
    in_$fakelocal_4: ref, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_3: ref, 
    in_i3: int)
   returns (out_$exception: ref, 
    out_$c2: int, 
    out_$r3: ref, 
    out_$i1: int, 
    out_$fakelocal_4: ref, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_3: ref, 
    out_i3: int)
{
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap: $heap_type;

  entry:
    out_$exception, out_$c2, out_$r3, out_$i1, out_$fakelocal_4, out_$fakelocal_2, out_$fakelocal_3, out_i3 := in_$exception, in_$c2, in_$r3, in_$i1, in_$fakelocal_4, in_$fakelocal_2, in_$fakelocal_3, in_i3;
    goto block24;

  block24:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} in_r1 == fixed.$null;
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$exception := out_$fakelocal_2;
    out_$exception, out_$c2, out_$r3, out_$i1, out_$fakelocal_4, out_$fakelocal_2, out_$fakelocal_3, out_i3 := in_$exception, in_$c2, in_$r3, in_$i1, in_$fakelocal_4, in_$fakelocal_2, in_$fakelocal_3, in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[out_$r3 := fixed.$intArrHeap[out_$r3][out_i3 := out_$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    out_i3 := out_i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon15_dummy;

  anon20_Then:
    assume {:partition} out_i3 < fixed.$arrSizeHeap[out_$r3] && out_i3 >= 0;
    out_$exception := out_$exception;
    goto anon15;

  anon12:
    out_$c2 := fixed.$intArrHeap[in_r1][out_i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(out_i3 < fixed.$arrSizeHeap[out_$r3] && out_i3 >= 0);
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$exception := out_$fakelocal_4;
    out_$exception, out_$c2, out_$r3, out_$i1, out_$fakelocal_4, out_$fakelocal_2, out_$fakelocal_3, out_i3 := in_$exception, in_$c2, in_$r3, in_$i1, in_$fakelocal_4, in_$fakelocal_2, in_$fakelocal_3, in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon19_Then:
    assume {:partition} out_i3 < fixed.$arrSizeHeap[in_r1] && out_i3 >= 0;
    out_$exception := out_$exception;
    goto anon12;

  anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    out_$r3 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(out_i3 < fixed.$arrSizeHeap[in_r1] && out_i3 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$exception := out_$fakelocal_3;
    out_$exception, out_$c2, out_$r3, out_$i1, out_$fakelocal_4, out_$fakelocal_2, out_$fakelocal_3, out_i3 := in_$exception, in_$c2, in_$r3, in_$i1, in_$fakelocal_4, in_$fakelocal_2, in_$fakelocal_3, in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon18_Else:
    assume {:partition} out_$i1 > out_i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon6:
    out_$i1 := fixed.$arrSizeHeap[in_r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} out_i3 >= out_$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    out_$exception, out_$c2, out_$r3, out_$i1, out_$fakelocal_4, out_$fakelocal_2, out_$fakelocal_3, out_i3 := in_$exception, in_$c2, in_$r3, in_$i1, in_$fakelocal_4, in_$fakelocal_2, in_$fakelocal_3, in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon17_Then:
    assume {:partition} in_r1 != fixed.$null;
    out_$exception := out_$exception;
    goto anon6;

  anon15_dummy:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception := out_$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1 := in_r1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2 := out_$c2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3 := out_$r3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1 := out_$i1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0 := in_r0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3 := out_i3;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$block24;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$block24:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon12:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon12;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon9;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon6:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3
   >= inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_i3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon6;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$exit:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$Return:
    out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$exception;
    out_$c2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$c2;
    out_$r3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$r3;
    out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$i1;
    out_$fakelocal_4 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_4;
    out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_2;
    out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_$fakelocal_3;
    out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block24$0$out_i3;
    goto anon15_dummy$1;

  anon15_dummy$1:
    return;

  exit:
    return;
}



implementation fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27(in_$exception: ref, 
    in_r0: ref, 
    in_i4: int, 
    in_$fakelocal_4: ref, 
    in_$c3: int, 
    in_r1: ref, 
    in_$b2: int, 
    in_$fakelocal_3: ref, 
    in_$r3: ref, 
    in_$i1: int, 
    in_$fakelocal_2: ref)
   returns (out_$exception: ref, 
    out_i4: int, 
    out_$fakelocal_4: ref, 
    out_$c3: int, 
    out_$b2: int, 
    out_$fakelocal_3: ref, 
    out_$r3: ref, 
    out_$i1: int, 
    out_$fakelocal_2: ref)
{
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap: $heap_type;

  entry:
    out_$exception, out_i4, out_$fakelocal_4, out_$c3, out_$b2, out_$fakelocal_3, out_$r3, out_$i1, out_$fakelocal_2 := in_$exception, in_i4, in_$fakelocal_4, in_$c3, in_$b2, in_$fakelocal_3, in_$r3, in_$i1, in_$fakelocal_2;
    goto block27;

  block27:
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} in_r1 == fixed.$null;
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$exception := out_$fakelocal_2;
    out_$exception, out_i4, out_$fakelocal_4, out_$c3, out_$b2, out_$fakelocal_3, out_$r3, out_$i1, out_$fakelocal_2 := in_$exception, in_i4, in_$fakelocal_4, in_$c3, in_$b2, in_$fakelocal_3, in_$r3, in_$i1, in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[out_$r3 := fixed.$intArrHeap[out_$r3][out_i4 := out_$c3]];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    out_i4 := out_i4 + 1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon15_dummy;

  anon20_Then:
    assume {:partition} out_i4 < fixed.$arrSizeHeap[out_$r3] && out_i4 >= 0;
    out_$exception := out_$exception;
    goto anon15;

  anon12:
    out_$b2 := fixed.$intArrHeap[in_r1][out_i4];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    out_$c3 := out_$b2;
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(out_i4 < fixed.$arrSizeHeap[out_$r3] && out_i4 >= 0);
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$exception := out_$fakelocal_4;
    out_$exception, out_i4, out_$fakelocal_4, out_$c3, out_$b2, out_$fakelocal_3, out_$r3, out_$i1, out_$fakelocal_2 := in_$exception, in_i4, in_$fakelocal_4, in_$c3, in_$b2, in_$fakelocal_3, in_$r3, in_$i1, in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon19_Then:
    assume {:partition} out_i4 < fixed.$arrSizeHeap[in_r1] && out_i4 >= 0;
    out_$exception := out_$exception;
    goto anon12;

  anon9:
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    out_$r3 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(out_i4 < fixed.$arrSizeHeap[in_r1] && out_i4 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$exception := out_$fakelocal_3;
    out_$exception, out_i4, out_$fakelocal_4, out_$c3, out_$b2, out_$fakelocal_3, out_$r3, out_$i1, out_$fakelocal_2 := in_$exception, in_i4, in_$fakelocal_4, in_$c3, in_$b2, in_$fakelocal_3, in_$r3, in_$i1, in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon18_Else:
    assume {:partition} out_$i1 > out_i4;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon6:
    out_$i1 := fixed.$arrSizeHeap[in_r1];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} out_i4 >= out_$i1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    out_$exception, out_i4, out_$fakelocal_4, out_$c3, out_$b2, out_$fakelocal_3, out_$r3, out_$i1, out_$fakelocal_2 := in_$exception, in_i4, in_$fakelocal_4, in_$c3, in_$b2, in_$fakelocal_3, in_$r3, in_$i1, in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon17_Then:
    assume {:partition} in_r1 != fixed.$null;
    out_$exception := out_$exception;
    goto anon6;

  anon15_dummy:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception := out_$exception;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r0 := in_r0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4 := out_i4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3 := out_$c3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1 := in_r1;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2 := out_$b2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3 := out_$r3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1 := out_$i1;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2 := out_$fakelocal_2;
    havoc inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$block27;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$block27:
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3]];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 + 1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon12:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2;
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon12;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon9:
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4 >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon9;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon6:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4
   >= inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_$fakelocal_2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon6;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$exit:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return:
    out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$exception;
    out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4;
    out_$fakelocal_4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_4;
    out_$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$c3;
    out_$b2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2;
    out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_3;
    out_$r3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3;
    out_$i1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1;
    out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$fakelocal_2;
    goto anon15_dummy$1;

  anon15_dummy$1:
    return;

  exit:
    return;
}



implementation fixed.java.lang.String$getBytes$_loop_block32(in_$return: ref, 
    in_$exception: ref, 
    in_r0: ref, 
    in_$c2: int, 
    in_$c3: int, 
    in_$fakelocal_4: ref, 
    in_$i1: int, 
    in_$fakelocal_3: ref, 
    in_r1: ref, 
    in_$r4: ref, 
    in_$r3: ref, 
    in_i5: int, 
    in_$fakelocal_2: ref, 
    in_$b4: int)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$c2: int, 
    out_$c3: int, 
    out_$fakelocal_4: ref, 
    out_$i1: int, 
    out_$fakelocal_3: ref, 
    out_$r4: ref, 
    out_$r3: ref, 
    out_i5: int, 
    out_$fakelocal_2: ref, 
    out_$b4: int)
{
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block32$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block32$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block32$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$c2, out_$c3, out_$fakelocal_4, out_$i1, out_$fakelocal_3, out_$r4, out_$r3, out_i5, out_$fakelocal_2, out_$b4 := in_$return, in_$exception, in_$c2, in_$c3, in_$fakelocal_4, in_$i1, in_$fakelocal_3, in_$r4, in_$r3, in_i5, in_$fakelocal_2, in_$b4;
    goto block32;

  block32:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    out_$r3 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_$r3 == fixed.$null;
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_2;
    out_$return, out_$exception, out_$c2, out_$c3, out_$fakelocal_4, out_$i1, out_$fakelocal_3, out_$r4, out_$r3, out_i5, out_$fakelocal_2, out_$b4 := in_$return, in_$exception, in_$c2, in_$c3, in_$fakelocal_4, in_$i1, in_$fakelocal_3, in_$r4, in_$r3, in_i5, in_$fakelocal_2, in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r1 := fixed.$intArrHeap[in_r1][out_i5 := out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    out_i5 := out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon15_dummy;

  anon20_Then:
    assume {:partition} out_i5 < fixed.$arrSizeHeap[in_r1] && out_i5 >= 0;
    out_$exception := out_$exception;
    goto anon15;

  anon12:
    out_$c2 := fixed.$intArrHeap[out_$r4][out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    out_$c3 := fixed.$bitAnd(out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    out_$b4 := out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(out_i5 < fixed.$arrSizeHeap[in_r1] && out_i5 >= 0);
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_4;
    out_$return, out_$exception, out_$c2, out_$c3, out_$fakelocal_4, out_$i1, out_$fakelocal_3, out_$r4, out_$r3, out_i5, out_$fakelocal_2, out_$b4 := in_$return, in_$exception, in_$c2, in_$c3, in_$fakelocal_4, in_$i1, in_$fakelocal_3, in_$r4, in_$r3, in_i5, in_$fakelocal_2, in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon19_Then:
    assume {:partition} out_i5 < fixed.$arrSizeHeap[out_$r4] && out_i5 >= 0;
    out_$exception := out_$exception;
    goto anon12;

  anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    out_$r4 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(out_i5 < fixed.$arrSizeHeap[out_$r4] && out_i5 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_3;
    out_$return, out_$exception, out_$c2, out_$c3, out_$fakelocal_4, out_$i1, out_$fakelocal_3, out_$r4, out_$r3, out_i5, out_$fakelocal_2, out_$b4 := in_$return, in_$exception, in_$c2, in_$c3, in_$fakelocal_4, in_$i1, in_$fakelocal_3, in_$r4, in_$r3, in_i5, in_$fakelocal_2, in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon18_Else:
    assume {:partition} out_$i1 > out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon6:
    out_$i1 := fixed.$arrSizeHeap[out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} out_i5 >= out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$c2, out_$c3, out_$fakelocal_4, out_$i1, out_$fakelocal_3, out_$r4, out_$r3, out_i5, out_$fakelocal_2, out_$b4 := in_$return, in_$exception, in_$c2, in_$c3, in_$fakelocal_4, in_$i1, in_$fakelocal_3, in_$r4, in_$r3, in_i5, in_$fakelocal_2, in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon17_Then:
    assume {:partition} out_$r3 != fixed.$null;
    out_$exception := out_$exception;
    goto anon6;

  anon15_dummy:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Entry;

  inline$java.lang.String$getBytes$_loop_block32$0$Entry:
    inline$java.lang.String$getBytes$_loop_block32$0$in_$return := out_$return;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$exception := out_$exception;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r0 := in_r0;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c2 := out_$c2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$c3 := out_$c3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$i1 := out_$i1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := in_r1;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r4 := out_$r4;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$r3 := out_$r3;
    inline$java.lang.String$getBytes$_loop_block32$0$in_i5 := out_i5;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$in_$b4 := out_$b4;
    havoc inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block32$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block32$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$entry;

  inline$java.lang.String$getBytes$_loop_block32$0$entry:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    goto inline$java.lang.String$getBytes$_loop_block32$0$block32;

  inline$java.lang.String$getBytes$_loop_block32$0$block32:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1][inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon15;

  inline$java.lang.String$getBytes$_loop_block32$0$anon12:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4][inline$java.lang.String$getBytes$_loop_block32$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon12;

  inline$java.lang.String$getBytes$_loop_block32$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block32$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block32$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block32$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon9;

  inline$java.lang.String$getBytes$_loop_block32$0$anon6:
    inline$java.lang.String$getBytes$_loop_block32$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block32$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block32$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block32$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$return, inline$java.lang.String$getBytes$_loop_block32$0$out_$exception, inline$java.lang.String$getBytes$_loop_block32$0$out_$c2, inline$java.lang.String$getBytes$_loop_block32$0$out_$c3, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$out_$i1, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$out_$r4, inline$java.lang.String$getBytes$_loop_block32$0$out_$r3, inline$java.lang.String$getBytes$_loop_block32$0$out_i5, inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$in_$return, inline$java.lang.String$getBytes$_loop_block32$0$in_$exception, inline$java.lang.String$getBytes$_loop_block32$0$in_$c2, inline$java.lang.String$getBytes$_loop_block32$0$in_$c3, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block32$0$in_$i1, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block32$0$in_$r4, inline$java.lang.String$getBytes$_loop_block32$0$in_$r3, inline$java.lang.String$getBytes$_loop_block32$0$in_i5, inline$java.lang.String$getBytes$_loop_block32$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block32$0$in_$b4;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block32$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block32$0$$objIndex, inline$java.lang.String$getBytes$_loop_block32$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block32$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block32$0$out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block32$0$anon6;

  inline$java.lang.String$getBytes$_loop_block32$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block32$0$Return;

  inline$java.lang.String$getBytes$_loop_block32$0$Return:
    out_$return := inline$java.lang.String$getBytes$_loop_block32$0$out_$return;
    out_$exception := inline$java.lang.String$getBytes$_loop_block32$0$out_$exception;
    out_$c2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c2;
    out_$c3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$c3;
    out_$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_4;
    out_$i1 := inline$java.lang.String$getBytes$_loop_block32$0$out_$i1;
    out_$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_3;
    out_$r4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r4;
    out_$r3 := inline$java.lang.String$getBytes$_loop_block32$0$out_$r3;
    out_i5 := inline$java.lang.String$getBytes$_loop_block32$0$out_i5;
    out_$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block32$0$out_$fakelocal_2;
    out_$b4 := inline$java.lang.String$getBytes$_loop_block32$0$out_$b4;
    goto anon15_dummy$1;

  anon15_dummy$1:
    return;

  exit:
    return;
}



axiom (forall x: int :: 
  { fixed.$intToBool(x): bool } 
  fixed.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { fixed.$refToBool(x): bool } 
  fixed.$refToBool(x): bool <==> (if x == fixed.$null then false else true));

axiom (forall x: bool :: 
  { fixed.$boolToInt(x): int } 
  fixed.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { fixed.$cmpReal(x, y): int } 
  fixed.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { fixed.$cmpInt(x, y): int } 
  fixed.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: fixed.$intToRef(index) != fixed.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> fixed.$intToRef(i1) == fixed.$intToRef(i2));

procedure {:prefix "unsafe"} unsafe.PasswordEncoderUtils$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception
   == _uf_fixed.PasswordEncoderUtils$$la$init$ra$$_$exception($this, old(fixed.$heap), old(fixed.$arrSizeHeap), old(fixed.$stringSizeHeap));



procedure {:prefix "unsafe"} unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception == _uf_fixed.java.lang.Object$$la$init$ra$$_$exception($this);



procedure {:prefix "unsafe"} unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures $exception
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures fixed.$objIndex
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$objIndex($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures fixed.$heap
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$heap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$arrSizeHeap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));
  free ensures fixed.$intArrHeap
   == _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$intArrHeap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260), 
    old(fixed.boolean$java.lang.Boolean$value0));



procedure {:prefix "unsafe"} unsafe.PasswordEncoderUtils$bytesUtf8$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_$return($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures $exception
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_$exception($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures fixed.$objIndex
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$objIndex($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures fixed.$heap
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$heap($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$arrSizeHeap($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));
  free ensures fixed.$intArrHeap
   == _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$intArrHeap($in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.java.io.PrintStream$java.lang.System$out260));



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$$la$init$ra$$($this: ref) returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap;
  free ensures $exception
   == _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_$exception($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$intArrayType), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$objIndex($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$intArrayType), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$heap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$intArrayType), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$arrSizeHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$intArrayType), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347));



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$append$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures $exception
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$arrSizeHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$intArrHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$toString$($this: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.java.lang.StringBuilder$toString$_$return($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures $exception
   == _uf_fixed.java.lang.StringBuilder$toString$_$exception($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.StringBuilder$toString$_fixed.$objIndex($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.StringBuilder$toString$_fixed.$heap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.StringBuilder$toString$_fixed.$arrSizeHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.StringBuilder$toString$_fixed.$intArrHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.char$lp$$rp$$java.lang.StringBuilder$chars347), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348));



procedure {:prefix "unsafe"} unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $exception
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$arrSizeHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$intArrHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));



procedure {:prefix "unsafe"} unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $exception
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$arrSizeHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$intArrHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrHeap));



procedure {:prefix "unsafe"} unsafe.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.java.lang.String$charAt$int_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures $exception
   == _uf_fixed.java.lang.String$charAt$int_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$charAt$int_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$charAt$int_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));



procedure {:prefix "unsafe"} unsafe.java.lang.String$getBytes$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures $exception
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$arrSizeHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$intArrHeap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$intArrayType));



procedure {:prefix "unsafe"} unsafe.java.lang.String$getBytes$($this: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$arrSizeHeap, fixed.$intArrHeap;
  free ensures $return
   == _uf_fixed.java.lang.String$getBytes$_$return($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures $exception
   == _uf_fixed.java.lang.String$getBytes$_$exception($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.java.lang.String$getBytes$_fixed.$objIndex($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.java.lang.String$getBytes$_fixed.$heap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.java.lang.String$getBytes$_fixed.$arrSizeHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));
  free ensures fixed.$intArrHeap
   == _uf_fixed.java.lang.String$getBytes$_fixed.$intArrHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.char$lp$$rp$$java.lang.String$chars348), 
    old(fixed.$objIndex), 
    old(fixed.$intArrayType), 
    old(fixed.$intArrHeap));



procedure {:inline 1} unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref);
  free ensures $return
   == _uf_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));
  free ensures $exception
   == _uf_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref);
  modifies fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7(in_$return: int, 
    in_$exception: ref, 
    in_$b4: int, 
    in_$b2: int, 
    in_b7: int, 
    in_i8: int, 
    in_r2: ref, 
    in_$b3: int, 
    in_$fakelocal_2: ref, 
    in_r3: ref, 
    in_$fakelocal_3: ref, 
    in_i0: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$b4: int, 
    out_$b2: int, 
    out_b7: int, 
    out_i8: int, 
    out_$b3: int, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_3: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$append$java.lang.String_loop_block21(in_$return: ref, 
    in_$exception: ref, 
    in_$c5: int, 
    in_$i4: int, 
    in_$r8: ref, 
    in_$fakelocal_9: ref, 
    in_r2: ref, 
    in_$fakelocal_8: ref, 
    in_$fakelocal_10: ref, 
    in_$r7: ref, 
    in_i8: int, 
    in_r1: ref)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$c5: int, 
    out_$i4: int, 
    out_$r8: ref, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_8: ref, 
    out_$fakelocal_10: ref, 
    out_$r7: ref, 
    out_i8: int);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.StringBuilder$append$java.lang.String_loop_block19(in_$return: ref, 
    in_$exception: ref, 
    in_$c6: int, 
    in_$fakelocal_4: ref, 
    in_r2: ref, 
    in_$fakelocal_5: ref, 
    in_r0: ref, 
    in_i7: int, 
    in_$fakelocal_6: ref, 
    in_$r5: ref, 
    in_$i3: int, 
    in_$r9: ref)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$c6: int, 
    out_$fakelocal_4: ref, 
    out_$fakelocal_5: ref, 
    out_i7: int, 
    out_$fakelocal_6: ref, 
    out_$r5: ref, 
    out_$i3: int, 
    out_$r9: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25(in_$exception: ref, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_4: ref, 
    in_$c2: int, 
    in_i3: int, 
    in_$fakelocal_3: ref, 
    in_r0: ref, 
    in_r1: ref, 
    in_$r3: ref, 
    in_$i1: int)
   returns (out_$exception: ref, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_4: ref, 
    out_$c2: int, 
    out_i3: int, 
    out_$fakelocal_3: ref, 
    out_$r3: ref, 
    out_$i1: int);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28(in_$exception: ref, 
    in_$r3: ref, 
    in_$i1: int, 
    in_$c3: int, 
    in_i4: int, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_4: ref, 
    in_r1: ref, 
    in_r0: ref, 
    in_$b2: int, 
    in_$fakelocal_3: ref)
   returns (out_$exception: ref, 
    out_$r3: ref, 
    out_$i1: int, 
    out_$c3: int, 
    out_i4: int, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_4: ref, 
    out_$b2: int, 
    out_$fakelocal_3: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.java.lang.String$getBytes$_loop_block33(in_$return: ref, 
    in_$exception: ref, 
    in_$b4: int, 
    in_$i1: int, 
    in_i5: int, 
    in_r1: ref, 
    in_r0: ref, 
    in_$fakelocal_4: ref, 
    in_$r4: ref, 
    in_$c3: int, 
    in_$r3: ref, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_3: ref, 
    in_$c2: int)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$b4: int, 
    out_$i1: int, 
    out_i5: int, 
    out_$fakelocal_4: ref, 
    out_$r4: ref, 
    out_$c3: int, 
    out_$r3: ref, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_3: ref, 
    out_$c2: int);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



implementation unsafe.PasswordEncoderUtils$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.PasswordEncoderUtils;
    assume {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "PasswordEncoderUtils.java", 12, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 12, -1, -1, -1} true;
    goto block1;

  block1:
    return;
}



implementation unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var $z0: int;
  var $b4: int;
  var $fakelocal_1: ref;
  var i1: int;
  var $b2: int;
  var b7: int;
  var i8: int;
  var r0: ref;
  var $i5: int;
  var r1: ref;
  var $fakelocal_0: ref;
  var r2: ref;
  var $i6: int;
  var $b3: int;
  var $fakelocal_2: ref;
  var r3: ref;
  var $fakelocal_3: ref;
  var i0: int;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$fakelocal_0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r2: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r3: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$in_parameter__0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$objIndex: int;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$java.lang.String$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$r1: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$r0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$this: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$return: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.lang.String$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.lang.String$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$b4: int;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$i5: int;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$c3: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block33$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$heap: $heap_type;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$fakelocal_0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r2: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r3: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$in_parameter__0: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception: ref;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$objIndex: int;
  var inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.String$getBytes$java.lang.String$1$$r2: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$r1: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$r0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$this: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$return: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$exception: ref;
  var inline$java.lang.String$getBytes$java.lang.String$1$$objIndex: int;
  var inline$java.lang.String$getBytes$java.lang.String$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.lang.String$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.lang.String$1$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$1$$b4: int;
  var inline$java.lang.String$getBytes$$1$$i1: int;
  var inline$java.lang.String$getBytes$$1$i5: int;
  var inline$java.lang.String$getBytes$$1$r1: ref;
  var inline$java.lang.String$getBytes$$1$$i0: int;
  var inline$java.lang.String$getBytes$$1$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$1$$r2: ref;
  var inline$java.lang.String$getBytes$$1$r0: ref;
  var inline$java.lang.String$getBytes$$1$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$1$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$1$$r4: ref;
  var inline$java.lang.String$getBytes$$1$$c3: int;
  var inline$java.lang.String$getBytes$$1$$r3: ref;
  var inline$java.lang.String$getBytes$$1$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$1$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$1$$c2: int;
  var inline$java.lang.String$getBytes$$1$$this: ref;
  var inline$java.lang.String$getBytes$$1$$return: ref;
  var inline$java.lang.String$getBytes$$1$$exception: ref;
  var inline$java.lang.String$getBytes$$1$$objIndex: int;
  var inline$java.lang.String$getBytes$$1$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$1$$heap: $heap_type;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$1$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block33$1$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block33$1$$heap: $heap_type;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i0: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.String;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "PasswordEncoderUtils.java", 34, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Entry;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Entry:
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$in_parameter__0 := r0;
    havoc inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$fakelocal_0, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r2, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r3, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$objIndex := fixed.$objIndex;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$heap := fixed.$heap;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon0;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$in_parameter__0;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block12;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block12:
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon9_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon9_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon9_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block14;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block14:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block17;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block17:
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Return;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon9_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block13;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block13:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$java.lang.String$0$Entry;

  inline$java.lang.String$getBytes$java.lang.String$0$Entry:
    inline$java.lang.String$getBytes$java.lang.String$0$$this := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$r0;
    inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0 := fixed.$StringConst0;
    havoc inline$java.lang.String$getBytes$java.lang.String$0$$r2, inline$java.lang.String$getBytes$java.lang.String$0$r1, inline$java.lang.String$getBytes$java.lang.String$0$r0, inline$java.lang.String$getBytes$java.lang.String$0$$return, inline$java.lang.String$getBytes$java.lang.String$0$$exception;
    inline$java.lang.String$getBytes$java.lang.String$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$java.lang.String$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.lang.String$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$java.lang.String$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$java.lang.String$0$anon0;

  inline$java.lang.String$getBytes$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.lang.String$0$$this != fixed.$null;
    assume fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$java.lang.String$getBytes$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$r0 := inline$java.lang.String$getBytes$java.lang.String$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$r1 := inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.lang.String$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$b4, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$i5, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$c3, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := 0;
    goto inline$java.lang.String$getBytes$$0$block33;

  inline$java.lang.String$getBytes$$0$block33:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Entry;

  inline$java.lang.String$getBytes$_loop_block33$0$Entry:
    inline$java.lang.String$getBytes$_loop_block33$0$in_$return := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$exception := inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$b4 := inline$java.lang.String$getBytes$$0$$b4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$i1 := inline$java.lang.String$getBytes$$0$$i1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_i5 := inline$java.lang.String$getBytes$$0$i5;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := inline$java.lang.String$getBytes$$0$r1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r0 := inline$java.lang.String$getBytes$$0$r0;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4 := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r4 := inline$java.lang.String$getBytes$$0$$r4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c3 := inline$java.lang.String$getBytes$$0$$c3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r3 := inline$java.lang.String$getBytes$$0$$r3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2 := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3 := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c2 := inline$java.lang.String$getBytes$$0$$c2;
    havoc inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block33$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block33$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$entry;

  inline$java.lang.String$getBytes$_loop_block33$0$entry:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    goto inline$java.lang.String$getBytes$_loop_block33$0$block33;

  inline$java.lang.String$getBytes$_loop_block33$0$block33:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1][inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15;

  inline$java.lang.String$getBytes$_loop_block33$0$anon12:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4][inline$java.lang.String$getBytes$_loop_block33$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block33$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon12;

  inline$java.lang.String$getBytes$_loop_block33$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon9;

  inline$java.lang.String$getBytes$_loop_block33$0$anon6:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon6;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$Return:
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$_loop_block33$0$out_$return;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4;
    inline$java.lang.String$getBytes$$0$$i1 := inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    inline$java.lang.String$getBytes$$0$$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$$0$$r4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r4;
    inline$java.lang.String$getBytes$$0$$c3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    inline$java.lang.String$getBytes$$0$$r3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r3;
    inline$java.lang.String$getBytes$$0$$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$$0$$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$$0$$c2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    goto inline$java.lang.String$getBytes$$0$block33$1;

  inline$java.lang.String$getBytes$$0$block33$1:
    goto inline$java.lang.String$getBytes$$0$block33_last;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$$0$$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$$0$$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon15_dummy;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block34;

  inline$java.lang.String$getBytes$$0$block34:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block35;

  inline$java.lang.String$getBytes$$0$block35:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$block33_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.lang.String$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.lang.String$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.lang.String$0$anon0$1;

  inline$java.lang.String$getBytes$java.lang.String$0$anon0$1:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$$return := inline$java.lang.String$getBytes$java.lang.String$0$$r2;
    goto inline$java.lang.String$getBytes$java.lang.String$0$block32;

  inline$java.lang.String$getBytes$java.lang.String$0$block32:
    goto inline$java.lang.String$getBytes$java.lang.String$0$Return;

  inline$java.lang.String$getBytes$java.lang.String$0$Return:
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r2 := inline$java.lang.String$getBytes$java.lang.String$0$$return;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := inline$java.lang.String$getBytes$java.lang.String$0$$exception;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block13$1;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block13$1:
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon10_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon10_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon10_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block16:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r2;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block17;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon10_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon11_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon11_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon11_Else:
    assume {:partition} !(fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException);
    assert {:clone} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon11_Then:
    assume {:partition} fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block15;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block15:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    assume fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r3 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception;
    assert {:sourceloc "PasswordEncoderUtils.java", 60, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4 := fixed.java.io.PrintStream$java.lang.System$out260;
    assert {:sourceloc "PasswordEncoderUtils.java", 60, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon12_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon12_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon12_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4 == fixed.$null;
    call inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := fixed.$null;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$fakelocal_0;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Return;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon12_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4 != fixed.$null;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon8;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$anon8:
    call inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception := fixed.java.io.PrintStream$println$java.lang.String(inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$r4, fixed.$StringConst1);
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$block17;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$Return:
    r2 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$return;
    $exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "PasswordEncoderUtils.java", 35, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Entry;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Entry:
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$in_parameter__0 := r1;
    havoc inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$fakelocal_0, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r2, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r3, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$objIndex := fixed.$objIndex;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$heap := fixed.$heap;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon0;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$in_parameter__0;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block12;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block12:
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon9_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon9_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon9_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block14;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block14:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block17;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block17:
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Return;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon9_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block13;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block13:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$java.lang.String$1$Entry;

  inline$java.lang.String$getBytes$java.lang.String$1$Entry:
    inline$java.lang.String$getBytes$java.lang.String$1$$this := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$r0;
    inline$java.lang.String$getBytes$java.lang.String$1$$in_parameter__0 := fixed.$StringConst0;
    havoc inline$java.lang.String$getBytes$java.lang.String$1$$r2, inline$java.lang.String$getBytes$java.lang.String$1$r1, inline$java.lang.String$getBytes$java.lang.String$1$r0, inline$java.lang.String$getBytes$java.lang.String$1$$return, inline$java.lang.String$getBytes$java.lang.String$1$$exception;
    inline$java.lang.String$getBytes$java.lang.String$1$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$java.lang.String$1$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.lang.String$1$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$java.lang.String$1$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$java.lang.String$1$anon0;

  inline$java.lang.String$getBytes$java.lang.String$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$1$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.lang.String$1$$this != fixed.$null;
    assume fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$1$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$java.lang.String$getBytes$java.lang.String$1$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$1$r0 := inline$java.lang.String$getBytes$java.lang.String$1$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$1$r1 := inline$java.lang.String$getBytes$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$Entry;

  inline$java.lang.String$getBytes$$1$Entry:
    inline$java.lang.String$getBytes$$1$$this := inline$java.lang.String$getBytes$java.lang.String$1$r0;
    havoc inline$java.lang.String$getBytes$$1$$b4, inline$java.lang.String$getBytes$$1$$i1, inline$java.lang.String$getBytes$$1$i5, inline$java.lang.String$getBytes$$1$r1, inline$java.lang.String$getBytes$$1$$i0, inline$java.lang.String$getBytes$$1$$fakelocal_1, inline$java.lang.String$getBytes$$1$$r2, inline$java.lang.String$getBytes$$1$r0, inline$java.lang.String$getBytes$$1$$fakelocal_4, inline$java.lang.String$getBytes$$1$$fakelocal_0, inline$java.lang.String$getBytes$$1$$r4, inline$java.lang.String$getBytes$$1$$c3, inline$java.lang.String$getBytes$$1$$r3, inline$java.lang.String$getBytes$$1$$fakelocal_2, inline$java.lang.String$getBytes$$1$$fakelocal_3, inline$java.lang.String$getBytes$$1$$c2, inline$java.lang.String$getBytes$$1$$return, inline$java.lang.String$getBytes$$1$$exception;
    inline$java.lang.String$getBytes$$1$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$$1$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$$1$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$$1$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$$1$anon0;

  inline$java.lang.String$getBytes$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$$1$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$1$$this != fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$r0 := inline$java.lang.String$getBytes$$1$$this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r2 := fixed.$heap[inline$java.lang.String$getBytes$$1$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon16_Then, inline$java.lang.String$getBytes$$1$anon16_Else;

  inline$java.lang.String$getBytes$$1$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r2 == fixed.$null;
    call inline$java.lang.String$getBytes$$1$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$1$$return := fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r2 != fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon3;

  inline$java.lang.String$getBytes$$1$anon3:
    inline$java.lang.String$getBytes$$1$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$1$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$fakelocal_1 := inline$java.lang.String$getBytes$$1$$i0];
    inline$java.lang.String$getBytes$$1$r1 := inline$java.lang.String$getBytes$$1$$fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$i5 := 0;
    goto inline$java.lang.String$getBytes$$1$block33;

  inline$java.lang.String$getBytes$$1$block33:
    goto inline$java.lang.String$getBytes$_loop_block33$1$Entry;

  inline$java.lang.String$getBytes$_loop_block33$1$Entry:
    inline$java.lang.String$getBytes$_loop_block33$1$in_$return := inline$java.lang.String$getBytes$$1$$return;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$exception := inline$java.lang.String$getBytes$$1$$exception;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$b4 := inline$java.lang.String$getBytes$$1$$b4;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$i1 := inline$java.lang.String$getBytes$$1$$i1;
    inline$java.lang.String$getBytes$_loop_block33$1$in_i5 := inline$java.lang.String$getBytes$$1$i5;
    inline$java.lang.String$getBytes$_loop_block33$1$in_r1 := inline$java.lang.String$getBytes$$1$r1;
    inline$java.lang.String$getBytes$_loop_block33$1$in_r0 := inline$java.lang.String$getBytes$$1$r0;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_4 := inline$java.lang.String$getBytes$$1$$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$r4 := inline$java.lang.String$getBytes$$1$$r4;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$c3 := inline$java.lang.String$getBytes$$1$$c3;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$r3 := inline$java.lang.String$getBytes$$1$$r3;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_2 := inline$java.lang.String$getBytes$$1$$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_3 := inline$java.lang.String$getBytes$$1$$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$1$in_$c2 := inline$java.lang.String$getBytes$$1$$c2;
    havoc inline$java.lang.String$getBytes$_loop_block33$1$out_$return, inline$java.lang.String$getBytes$_loop_block33$1$out_$exception, inline$java.lang.String$getBytes$_loop_block33$1$out_$b4, inline$java.lang.String$getBytes$_loop_block33$1$out_$i1, inline$java.lang.String$getBytes$_loop_block33$1$out_i5, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$out_$r4, inline$java.lang.String$getBytes$_loop_block33$1$out_$c3, inline$java.lang.String$getBytes$_loop_block33$1$out_$r3, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$out_$c2;
    inline$java.lang.String$getBytes$_loop_block33$1$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block33$1$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block33$1$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$1$entry;

  inline$java.lang.String$getBytes$_loop_block33$1$entry:
    inline$java.lang.String$getBytes$_loop_block33$1$out_$return, inline$java.lang.String$getBytes$_loop_block33$1$out_$exception, inline$java.lang.String$getBytes$_loop_block33$1$out_$b4, inline$java.lang.String$getBytes$_loop_block33$1$out_$i1, inline$java.lang.String$getBytes$_loop_block33$1$out_i5, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$out_$r4, inline$java.lang.String$getBytes$_loop_block33$1$out_$c3, inline$java.lang.String$getBytes$_loop_block33$1$out_$r3, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$1$in_$return, inline$java.lang.String$getBytes$_loop_block33$1$in_$exception, inline$java.lang.String$getBytes$_loop_block33$1$in_$b4, inline$java.lang.String$getBytes$_loop_block33$1$in_$i1, inline$java.lang.String$getBytes$_loop_block33$1$in_i5, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$in_$r4, inline$java.lang.String$getBytes$_loop_block33$1$in_$c3, inline$java.lang.String$getBytes$_loop_block33$1$in_$r3, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$in_$c2;
    goto inline$java.lang.String$getBytes$_loop_block33$1$block33;

  inline$java.lang.String$getBytes$_loop_block33$1$block33:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$1$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon17_Then, inline$java.lang.String$getBytes$_loop_block33$1$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block33$1$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$1$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block33$1$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$exception := inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$return, inline$java.lang.String$getBytes$_loop_block33$1$out_$exception, inline$java.lang.String$getBytes$_loop_block33$1$out_$b4, inline$java.lang.String$getBytes$_loop_block33$1$out_$i1, inline$java.lang.String$getBytes$_loop_block33$1$out_i5, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$out_$r4, inline$java.lang.String$getBytes$_loop_block33$1$out_$c3, inline$java.lang.String$getBytes$_loop_block33$1$out_$r3, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$1$in_$return, inline$java.lang.String$getBytes$_loop_block33$1$in_$exception, inline$java.lang.String$getBytes$_loop_block33$1$in_$b4, inline$java.lang.String$getBytes$_loop_block33$1$in_$i1, inline$java.lang.String$getBytes$_loop_block33$1$in_i5, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$in_$r4, inline$java.lang.String$getBytes$_loop_block33$1$in_$c3, inline$java.lang.String$getBytes$_loop_block33$1$in_$r3, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$1$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$1$$objIndex, inline$java.lang.String$getBytes$_loop_block33$1$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$1$Return;

  inline$java.lang.String$getBytes$_loop_block33$1$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$1$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$1$in_r1][inline$java.lang.String$getBytes$_loop_block33$1$out_i5 := inline$java.lang.String$getBytes$_loop_block33$1$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$1$out_i5 := inline$java.lang.String$getBytes$_loop_block33$1$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block33$1$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$1$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$1$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$1$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$exception := inline$java.lang.String$getBytes$_loop_block33$1$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon15;

  inline$java.lang.String$getBytes$_loop_block33$1$anon12:
    inline$java.lang.String$getBytes$_loop_block33$1$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$1$out_$r4][inline$java.lang.String$getBytes$_loop_block33$1$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block33$1$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$b4 := inline$java.lang.String$getBytes$_loop_block33$1$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon20_Then, inline$java.lang.String$getBytes$_loop_block33$1$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block33$1$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$1$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$1$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$1$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$1$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$exception := inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$return, inline$java.lang.String$getBytes$_loop_block33$1$out_$exception, inline$java.lang.String$getBytes$_loop_block33$1$out_$b4, inline$java.lang.String$getBytes$_loop_block33$1$out_$i1, inline$java.lang.String$getBytes$_loop_block33$1$out_i5, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$out_$r4, inline$java.lang.String$getBytes$_loop_block33$1$out_$c3, inline$java.lang.String$getBytes$_loop_block33$1$out_$r3, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$1$in_$return, inline$java.lang.String$getBytes$_loop_block33$1$in_$exception, inline$java.lang.String$getBytes$_loop_block33$1$in_$b4, inline$java.lang.String$getBytes$_loop_block33$1$in_$i1, inline$java.lang.String$getBytes$_loop_block33$1$in_i5, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$in_$r4, inline$java.lang.String$getBytes$_loop_block33$1$in_$c3, inline$java.lang.String$getBytes$_loop_block33$1$in_$r3, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$1$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$1$$objIndex, inline$java.lang.String$getBytes$_loop_block33$1$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$1$Return;

  inline$java.lang.String$getBytes$_loop_block33$1$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$1$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$1$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$1$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$exception := inline$java.lang.String$getBytes$_loop_block33$1$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon12;

  inline$java.lang.String$getBytes$_loop_block33$1$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$1$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon19_Then, inline$java.lang.String$getBytes$_loop_block33$1$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block33$1$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$1$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$1$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$1$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$1$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$exception := inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$return, inline$java.lang.String$getBytes$_loop_block33$1$out_$exception, inline$java.lang.String$getBytes$_loop_block33$1$out_$b4, inline$java.lang.String$getBytes$_loop_block33$1$out_$i1, inline$java.lang.String$getBytes$_loop_block33$1$out_i5, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$out_$r4, inline$java.lang.String$getBytes$_loop_block33$1$out_$c3, inline$java.lang.String$getBytes$_loop_block33$1$out_$r3, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$1$in_$return, inline$java.lang.String$getBytes$_loop_block33$1$in_$exception, inline$java.lang.String$getBytes$_loop_block33$1$in_$b4, inline$java.lang.String$getBytes$_loop_block33$1$in_$i1, inline$java.lang.String$getBytes$_loop_block33$1$in_i5, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$in_$r4, inline$java.lang.String$getBytes$_loop_block33$1$in_$c3, inline$java.lang.String$getBytes$_loop_block33$1$in_$r3, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$1$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$1$$objIndex, inline$java.lang.String$getBytes$_loop_block33$1$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$1$Return;

  inline$java.lang.String$getBytes$_loop_block33$1$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$1$out_$i1
   > inline$java.lang.String$getBytes$_loop_block33$1$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon9;

  inline$java.lang.String$getBytes$_loop_block33$1$anon6:
    inline$java.lang.String$getBytes$_loop_block33$1$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$1$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon18_Then, inline$java.lang.String$getBytes$_loop_block33$1$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block33$1$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$1$out_i5
   >= inline$java.lang.String$getBytes$_loop_block33$1$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$return, inline$java.lang.String$getBytes$_loop_block33$1$out_$exception, inline$java.lang.String$getBytes$_loop_block33$1$out_$b4, inline$java.lang.String$getBytes$_loop_block33$1$out_$i1, inline$java.lang.String$getBytes$_loop_block33$1$out_i5, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$out_$r4, inline$java.lang.String$getBytes$_loop_block33$1$out_$c3, inline$java.lang.String$getBytes$_loop_block33$1$out_$r3, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$1$in_$return, inline$java.lang.String$getBytes$_loop_block33$1$in_$exception, inline$java.lang.String$getBytes$_loop_block33$1$in_$b4, inline$java.lang.String$getBytes$_loop_block33$1$in_$i1, inline$java.lang.String$getBytes$_loop_block33$1$in_i5, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$1$in_$r4, inline$java.lang.String$getBytes$_loop_block33$1$in_$c3, inline$java.lang.String$getBytes$_loop_block33$1$in_$r3, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$1$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$1$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$1$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$1$$objIndex, inline$java.lang.String$getBytes$_loop_block33$1$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$1$Return;

  inline$java.lang.String$getBytes$_loop_block33$1$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$1$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$1$out_$exception := inline$java.lang.String$getBytes$_loop_block33$1$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$1$anon6;

  inline$java.lang.String$getBytes$_loop_block33$1$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block33$1$Return;

  inline$java.lang.String$getBytes$_loop_block33$1$exit:
    goto inline$java.lang.String$getBytes$_loop_block33$1$Return;

  inline$java.lang.String$getBytes$_loop_block33$1$Return:
    inline$java.lang.String$getBytes$$1$$return := inline$java.lang.String$getBytes$_loop_block33$1$out_$return;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$_loop_block33$1$out_$exception;
    inline$java.lang.String$getBytes$$1$$b4 := inline$java.lang.String$getBytes$_loop_block33$1$out_$b4;
    inline$java.lang.String$getBytes$$1$$i1 := inline$java.lang.String$getBytes$_loop_block33$1$out_$i1;
    inline$java.lang.String$getBytes$$1$i5 := inline$java.lang.String$getBytes$_loop_block33$1$out_i5;
    inline$java.lang.String$getBytes$$1$$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_4;
    inline$java.lang.String$getBytes$$1$$r4 := inline$java.lang.String$getBytes$_loop_block33$1$out_$r4;
    inline$java.lang.String$getBytes$$1$$c3 := inline$java.lang.String$getBytes$_loop_block33$1$out_$c3;
    inline$java.lang.String$getBytes$$1$$r3 := inline$java.lang.String$getBytes$_loop_block33$1$out_$r3;
    inline$java.lang.String$getBytes$$1$$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_2;
    inline$java.lang.String$getBytes$$1$$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block33$1$out_$fakelocal_3;
    inline$java.lang.String$getBytes$$1$$c2 := inline$java.lang.String$getBytes$_loop_block33$1$out_$c2;
    goto inline$java.lang.String$getBytes$$1$block33$1;

  inline$java.lang.String$getBytes$$1$block33$1:
    goto inline$java.lang.String$getBytes$$1$block33_last;

  inline$java.lang.String$getBytes$$1$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$$1$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$1$$return := fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$$r3 != fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon6;

  inline$java.lang.String$getBytes$$1$anon6:
    inline$java.lang.String$getBytes$$1$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon18_Then, inline$java.lang.String$getBytes$$1$anon18_Else;

  inline$java.lang.String$getBytes$$1$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$1$$i1 > inline$java.lang.String$getBytes$$1$i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$1$anon9;

  inline$java.lang.String$getBytes$$1$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r4 := fixed.$heap[inline$java.lang.String$getBytes$$1$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon19_Then, inline$java.lang.String$getBytes$$1$anon19_Else;

  inline$java.lang.String$getBytes$$1$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$1$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r4]
   && inline$java.lang.String$getBytes$$1$i5 >= 0);
    call inline$java.lang.String$getBytes$$1$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$1$$return := fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$$r4]
   && inline$java.lang.String$getBytes$$1$i5 >= 0;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon12;

  inline$java.lang.String$getBytes$$1$anon12:
    inline$java.lang.String$getBytes$$1$$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$1$$r4][inline$java.lang.String$getBytes$$1$i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$$1$$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$b4 := inline$java.lang.String$getBytes$$1$$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon20_Then, inline$java.lang.String$getBytes$$1$anon20_Else;

  inline$java.lang.String$getBytes$$1$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$1$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$r1]
   && inline$java.lang.String$getBytes$$1$i5 >= 0);
    call inline$java.lang.String$getBytes$$1$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$1$$return := fixed.$null;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$1$r1]
   && inline$java.lang.String$getBytes$$1$i5 >= 0;
    inline$java.lang.String$getBytes$$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$$1$anon15;

  inline$java.lang.String$getBytes$$1$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$$1$r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$1$r1][inline$java.lang.String$getBytes$$1$i5 := inline$java.lang.String$getBytes$$1$$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$i5 := inline$java.lang.String$getBytes$$1$i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon15_dummy;

  inline$java.lang.String$getBytes$$1$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$1$i5
   >= inline$java.lang.String$getBytes$$1$$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$1$block34;

  inline$java.lang.String$getBytes$$1$block34:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$return := inline$java.lang.String$getBytes$$1$r1;
    goto inline$java.lang.String$getBytes$$1$block35;

  inline$java.lang.String$getBytes$$1$block35:
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$$1$Return;

  inline$java.lang.String$getBytes$$1$block33_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$1$$r3 := fixed.$heap[inline$java.lang.String$getBytes$$1$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$1$anon17_Then, inline$java.lang.String$getBytes$$1$anon17_Else;

  inline$java.lang.String$getBytes$$1$Return:
    inline$java.lang.String$getBytes$java.lang.String$1$$r2 := inline$java.lang.String$getBytes$$1$$return;
    inline$java.lang.String$getBytes$java.lang.String$1$$exception := inline$java.lang.String$getBytes$$1$$exception;
    goto inline$java.lang.String$getBytes$java.lang.String$1$anon0$1;

  inline$java.lang.String$getBytes$java.lang.String$1$anon0$1:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$1$$return := inline$java.lang.String$getBytes$java.lang.String$1$$r2;
    goto inline$java.lang.String$getBytes$java.lang.String$1$block32;

  inline$java.lang.String$getBytes$java.lang.String$1$block32:
    goto inline$java.lang.String$getBytes$java.lang.String$1$Return;

  inline$java.lang.String$getBytes$java.lang.String$1$Return:
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r2 := inline$java.lang.String$getBytes$java.lang.String$1$$return;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := inline$java.lang.String$getBytes$java.lang.String$1$$exception;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block13$1;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block13$1:
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon10_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon10_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon10_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception
   == fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block16:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r2;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block17;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon10_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception
   != fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon11_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon11_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon11_Else:
    assume {:partition} !(fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException);
    assert {:clone} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block16;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon11_Then:
    assume {:partition} fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block15;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block15:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    assume fixed.$heap[inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r3 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception;
    assert {:sourceloc "PasswordEncoderUtils.java", 60, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4 := fixed.java.io.PrintStream$java.lang.System$out260;
    assert {:sourceloc "PasswordEncoderUtils.java", 60, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon12_Then, inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon12_Else;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon12_Else:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4 == fixed.$null;
    call inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := fixed.$null;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$fakelocal_0;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Return;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon12_Then:
    assume {:partition} inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4 != fixed.$null;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon8;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$anon8:
    call inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception := fixed.java.io.PrintStream$println$java.lang.String(inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$r4, fixed.$StringConst1);
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} true;
    inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return := fixed.$null;
    goto inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$block17;

  inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$Return:
    r3 := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$return;
    $exception := inline$PasswordEncoderUtils$bytesUtf8$java.lang.String$1$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "PasswordEncoderUtils.java", 36, -1, -1, -1} true;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} r2 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 36, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "PasswordEncoderUtils.java", 39, -1, -1, -1} true;
    $i5 := -1;
    assert {:sourceloc "PasswordEncoderUtils.java", 39, -1, -1, -1} true;
    goto block3;

  block3:
    assert {:sourceloc "PasswordEncoderUtils.java", 36, -1, -1, -1} true;
    i0 := $i5;
    assert {:sourceloc "PasswordEncoderUtils.java", 37, -1, -1, -1} true;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} r3 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 37, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "PasswordEncoderUtils.java", 40, -1, -1, -1} true;
    $i6 := -1;
    assert {:sourceloc "PasswordEncoderUtils.java", 40, -1, -1, -1} true;
    goto block5;

  block5:
    assert {:sourceloc "PasswordEncoderUtils.java", 37, -1, -1, -1} true;
    i1 := $i6;
    assert {:sourceloc "PasswordEncoderUtils.java", 39, -1, -1, -1} true;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} i0 != i1;
    assert {:sourceloc "PasswordEncoderUtils.java", 39, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "PasswordEncoderUtils.java", 40, -1, -1, -1} true;
    $return := 0;
    goto block11;

  block11:
    return;

  anon32_Then:
    assume {:partition} i0 == i1;
    assert {:sourceloc "PasswordEncoderUtils.java", 39, -1, -1, -1} {:comment "thenblock"} true;
    goto block6;

  block6:
    assert {:sourceloc "PasswordEncoderUtils.java", 43, -1, -1, -1} true;
    b7 := 0;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    i8 := 0;
    goto block7;

  block7:
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Entry;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Entry:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return := $return;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception := $exception;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4 := $b4;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2 := $b2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7 := b7;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8 := i8;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2 := r2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3 := $b3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2 := $fakelocal_2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3 := r3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3 := $fakelocal_3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i0 := i0;
    havoc inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex := fixed.$objIndex;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap := fixed.$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$entry;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$entry:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$block7;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$block7:
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon33_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon33_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon33_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
   >= inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} {:comment "thenblock"} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon24:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2 := fixed.$intArrHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3][inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8];
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4 := fixed.$xorInt(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, 
  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2);
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7 := fixed.$bitOr(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, 
  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4);
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
   + 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon24_dummy;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon35_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     >= 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon24;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon21:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3 := fixed.$intArrHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2][inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8];
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon35_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon35_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon35_Else:
    assume {:partition} !(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     >= 0);
    call inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return := 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon34_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     >= 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon21;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon18:
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon34_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon34_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon34_Else:
    assume {:partition} !(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     >= 0);
    call inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return := 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon33_Else:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i0
   > inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon18;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon24_dummy:
    assume false;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$exit:
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return:
    $return := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return;
    $exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception;
    $b4 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4;
    $b2 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2;
    b7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7;
    i8 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8;
    $b3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3;
    $fakelocal_2 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2;
    $fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3;
    goto block7$1;

  block7$1:
    goto block7_last;

  anon33_Else:
    assume {:partition} i0 > i8;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} {:comment "elseblock"} true;
    goto anon18;

  anon18:
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} !(i8 < fixed.$arrSizeHeap[r2] && i8 >= 0);
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_2;
    return;

  anon34_Then:
    assume {:partition} i8 < fixed.$arrSizeHeap[r2] && i8 >= 0;
    $exception := $exception;
    goto anon21;

  anon21:
    $b3 := fixed.$intArrHeap[r2][i8];
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} !(i8 < fixed.$arrSizeHeap[r3] && i8 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_3;
    return;

  anon35_Then:
    assume {:partition} i8 < fixed.$arrSizeHeap[r3] && i8 >= 0;
    $exception := $exception;
    goto anon24;

  anon24:
    $b2 := fixed.$intArrHeap[r3][i8];
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    $b4 := fixed.$xorInt($b3, $b2);
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    b7 := fixed.$bitOr(b7, $b4);
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    i8 := i8 + 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    goto anon24_dummy;

  anon33_Then:
    assume {:partition} i8 >= i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} {:comment "thenblock"} true;
    goto block8;

  block8:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} b7 == 0;
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} {:comment "elseblock"} true;
    goto anon27;

  anon27:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    $z0 := 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    goto block10;

  block10:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    $return := $z0;
    goto block11;

  anon36_Then:
    assume {:partition} b7 != 0;
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} {:comment "thenblock"} true;
    goto block9;

  block9:
    assert {:sourceloc "PasswordEncoderUtils.java", 47, -1, -1, -1} true;
    $z0 := 0;
    goto block10;

  anon30_Then:
    assume {:partition} r3 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 37, -1, -1, -1} {:comment "thenblock"} true;
    goto block4;

  block4:
    assert {:sourceloc "PasswordEncoderUtils.java", 40, -1, -1, -1} true;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} r3 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_1;
    return;

  anon31_Then:
    assume {:partition} r3 != fixed.$null;
    $exception := $exception;
    goto anon12;

  anon12:
    $i6 := fixed.$arrSizeHeap[r3];
    goto block5;

  anon28_Then:
    assume {:partition} r2 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 36, -1, -1, -1} {:comment "thenblock"} true;
    goto block2;

  block2:
    assert {:sourceloc "PasswordEncoderUtils.java", 39, -1, -1, -1} true;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} r2 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon29_Then:
    assume {:partition} r2 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i5 := fixed.$arrSizeHeap[r2];
    goto block3;

  anon24_dummy:
    assume false;
    return;

  block7_last:
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    goto anon33_Then, anon33_Else;
}



implementation unsafe.PasswordEncoderUtils$bytesUtf8$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var $fakelocal_0: ref;
  var $r2: ref;
  var $r3: ref;
  var $r4: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$r2: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$r1: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$r0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$this: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$return: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$exception: ref;
  var inline$java.lang.String$getBytes$java.lang.String$0$$objIndex: int;
  var inline$java.lang.String$getBytes$java.lang.String$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$java.lang.String$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$java.lang.String$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$$0$$b4: int;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$i5: int;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$c3: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block33$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    goto block12;

  block12:
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} true;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} r0 == fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} {:comment "elseblock"} true;
    goto block14;

  block14:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    $return := fixed.$null;
    goto block17;

  block17:
    return;

  anon9_Then:
    assume {:partition} r0 != fixed.$null;
    assert {:sourceloc "PasswordEncoderUtils.java", 52, -1, -1, -1} {:comment "thenblock"} true;
    goto block13;

  block13:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$java.lang.String$0$Entry;

  inline$java.lang.String$getBytes$java.lang.String$0$Entry:
    inline$java.lang.String$getBytes$java.lang.String$0$$this := r0;
    inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0 := fixed.$StringConst0;
    havoc inline$java.lang.String$getBytes$java.lang.String$0$$r2, inline$java.lang.String$getBytes$java.lang.String$0$r1, inline$java.lang.String$getBytes$java.lang.String$0$r0, inline$java.lang.String$getBytes$java.lang.String$0$$return, inline$java.lang.String$getBytes$java.lang.String$0$$exception;
    inline$java.lang.String$getBytes$java.lang.String$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$java.lang.String$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$java.lang.String$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$java.lang.String$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$java.lang.String$0$anon0;

  inline$java.lang.String$getBytes$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$java.lang.String$0$$this != fixed.$null;
    assume fixed.$heap[inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$java.lang.String$getBytes$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$r0 := inline$java.lang.String$getBytes$java.lang.String$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$r1 := inline$java.lang.String$getBytes$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := inline$java.lang.String$getBytes$java.lang.String$0$r0;
    havoc inline$java.lang.String$getBytes$$0$$b4, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$i5, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$c3, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := 0;
    goto inline$java.lang.String$getBytes$$0$block33;

  inline$java.lang.String$getBytes$$0$block33:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Entry;

  inline$java.lang.String$getBytes$_loop_block33$0$Entry:
    inline$java.lang.String$getBytes$_loop_block33$0$in_$return := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$exception := inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$b4 := inline$java.lang.String$getBytes$$0$$b4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$i1 := inline$java.lang.String$getBytes$$0$$i1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_i5 := inline$java.lang.String$getBytes$$0$i5;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := inline$java.lang.String$getBytes$$0$r1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r0 := inline$java.lang.String$getBytes$$0$r0;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4 := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r4 := inline$java.lang.String$getBytes$$0$$r4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c3 := inline$java.lang.String$getBytes$$0$$c3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r3 := inline$java.lang.String$getBytes$$0$$r3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2 := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3 := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c2 := inline$java.lang.String$getBytes$$0$$c2;
    havoc inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block33$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block33$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$entry;

  inline$java.lang.String$getBytes$_loop_block33$0$entry:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    goto inline$java.lang.String$getBytes$_loop_block33$0$block33;

  inline$java.lang.String$getBytes$_loop_block33$0$block33:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1][inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15;

  inline$java.lang.String$getBytes$_loop_block33$0$anon12:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4][inline$java.lang.String$getBytes$_loop_block33$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block33$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon12;

  inline$java.lang.String$getBytes$_loop_block33$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon9;

  inline$java.lang.String$getBytes$_loop_block33$0$anon6:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon6;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$Return:
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$_loop_block33$0$out_$return;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4;
    inline$java.lang.String$getBytes$$0$$i1 := inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    inline$java.lang.String$getBytes$$0$$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$$0$$r4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r4;
    inline$java.lang.String$getBytes$$0$$c3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    inline$java.lang.String$getBytes$$0$$r3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r3;
    inline$java.lang.String$getBytes$$0$$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$$0$$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$$0$$c2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    goto inline$java.lang.String$getBytes$$0$block33$1;

  inline$java.lang.String$getBytes$$0$block33$1:
    goto inline$java.lang.String$getBytes$$0$block33_last;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$$0$$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$$0$$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon15_dummy;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block34;

  inline$java.lang.String$getBytes$$0$block34:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block35;

  inline$java.lang.String$getBytes$$0$block35:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$block33_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$Return:
    inline$java.lang.String$getBytes$java.lang.String$0$$r2 := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$java.lang.String$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$java.lang.String$0$anon0$1;

  inline$java.lang.String$getBytes$java.lang.String$0$anon0$1:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    inline$java.lang.String$getBytes$java.lang.String$0$$return := inline$java.lang.String$getBytes$java.lang.String$0$$r2;
    goto inline$java.lang.String$getBytes$java.lang.String$0$block32;

  inline$java.lang.String$getBytes$java.lang.String$0$block32:
    goto inline$java.lang.String$getBytes$java.lang.String$0$Return;

  inline$java.lang.String$getBytes$java.lang.String$0$Return:
    $r2 := inline$java.lang.String$getBytes$java.lang.String$0$$return;
    $exception := inline$java.lang.String$getBytes$java.lang.String$0$$exception;
    goto block13$1;

  block13$1:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} $exception == fixed.$null;
    goto block16;

  block16:
    assert {:sourceloc "PasswordEncoderUtils.java", 56, -1, -1, -1} true;
    $return := $r2;
    goto block17;

  anon10_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException);
    assert {:clone} true;
    goto block16;

  anon11_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.java.io.UnsupportedEncodingException;
    $return := fixed.$null;
    goto block15;

  block15:
    assert {:sourceloc "PasswordEncoderUtils.java", 53, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r3 := $exception;
    assert {:sourceloc "PasswordEncoderUtils.java", 60, -1, -1, -1} true;
    $r4 := fixed.java.io.PrintStream$java.lang.System$out260;
    assert {:sourceloc "PasswordEncoderUtils.java", 60, -1, -1, -1} true;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} $r4 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon12_Then:
    assume {:partition} $r4 != fixed.$null;
    $exception := $exception;
    goto anon8;

  anon8:
    call $exception := fixed.java.io.PrintStream$println$java.lang.String($r4, fixed.$StringConst1);
    assert {:sourceloc "PasswordEncoderUtils.java", 61, -1, -1, -1} true;
    $return := fixed.$null;
    goto block17;
}



implementation unsafe.java.lang.StringBuilder$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var $r1: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "StringBuilder.java", 4, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_0 := 0];
    $r1 := $fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 4, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347 := $r1];
    assert {:sourceloc "StringBuilder.java", 4, -1, -1, -1} true;
    goto block18;

  block18:
    return;
}



implementation unsafe.java.lang.StringBuilder$append$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var $c5: int;
  var $i4: int;
  var $r8: ref;
  var $c6: int;
  var $r3: ref;
  var $fakelocal_9: ref;
  var $fakelocal_4: ref;
  var $fakelocal_2: ref;
  var r2: ref;
  var $fakelocal_3: ref;
  var $fakelocal_5: ref;
  var $fakelocal_8: ref;
  var $fakelocal_10: ref;
  var r0: ref;
  var $fakelocal_7: ref;
  var $r4: ref;
  var $fakelocal_1: ref;
  var $r7: ref;
  var i8: int;
  var $i2: int;
  var $i0: int;
  var i7: int;
  var $r6: ref;
  var $i1: int;
  var $fakelocal_6: ref;
  var $r5: ref;
  var $i3: int;
  var $r9: ref;
  var r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap: $heap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.StringBuilder;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    $r3 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} $r3 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon37_Then:
    assume {:partition} $r3 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i1 := fixed.$arrSizeHeap[$r3];
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_1;
    return;

  anon38_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $r4 := fixed.$heap[r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} $r4 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_2;
    return;

  anon39_Then:
    assume {:partition} $r4 != fixed.$null;
    $exception := $exception;
    goto anon9;

  anon9:
    $i0 := fixed.$arrSizeHeap[$r4];
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    $i2 := $i1 + $i0;
    assert {:sourceloc "StringBuilder.java", 7, -1, -1, -1} true;
    call $fakelocal_3 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_3 := $i2];
    r2 := $fakelocal_3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    i7 := 0;
    goto block19;

  block19:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return := $return;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception := $exception;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6 := $c6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4 := $fakelocal_4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2 := r2;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5 := $fakelocal_5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r0 := r0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7 := i7;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6 := $fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5 := $r5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3 := $i3;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9 := $r9;
    havoc inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex := fixed.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap := fixed.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$block19;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$block19:
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon40_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon40_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon40_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5
   == fixed.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon21:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2][inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6]];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7 + 1;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon21_dummy;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon43_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon21;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon18:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9][inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon43_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon43_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon43_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon42_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon18;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon15:
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon42_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon42_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon42_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon41_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3
   > inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon15;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon12:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3 := fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon41_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon41_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon41_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
   >= inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon40_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5
   != fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon12;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon21_dummy:
    assume false;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$exit:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return:
    $return := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception;
    $c6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6;
    $fakelocal_4 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4;
    $fakelocal_5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5;
    i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7;
    $fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6;
    $r5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5;
    $i3 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3;
    $r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9;
    goto block19$1;

  block19$1:
    goto block19_last;

  anon40_Else:
    assume {:partition} $r5 == fixed.$null;
    call $fakelocal_4 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_4;
    return;

  anon40_Then:
    assume {:partition} $r5 != fixed.$null;
    $exception := $exception;
    goto anon12;

  anon12:
    $i3 := fixed.$arrSizeHeap[$r5];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} $i3 > i7;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    $r9 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} !(i7 < fixed.$arrSizeHeap[$r9] && i7 >= 0);
    call $fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_5;
    return;

  anon42_Then:
    assume {:partition} i7 < fixed.$arrSizeHeap[$r9] && i7 >= 0;
    $exception := $exception;
    goto anon18;

  anon18:
    $c6 := fixed.$intArrHeap[$r9][i7];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} !(i7 < fixed.$arrSizeHeap[r2] && i7 >= 0);
    call $fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_6;
    return;

  anon43_Then:
    assume {:partition} i7 < fixed.$arrSizeHeap[r2] && i7 >= 0;
    $exception := $exception;
    goto anon21;

  anon21:
    fixed.$intArrHeap := fixed.$intArrHeap[r2 := fixed.$intArrHeap[r2][i7 := $c6]];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    i7 := i7 + 1;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon21_dummy;

  anon41_Then:
    assume {:partition} i7 >= $i3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "thenblock"} true;
    goto block20;

  block20:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    $r6 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} $r6 == fixed.$null;
    call $fakelocal_7 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_7;
    return;

  anon44_Then:
    assume {:partition} $r6 != fixed.$null;
    $exception := $exception;
    goto anon24;

  anon24:
    i8 := fixed.$arrSizeHeap[$r6];
    goto block21;

  block21:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return := $return;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception := $exception;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5 := $c5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4 := $i4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8 := $r8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9 := $fakelocal_9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2 := r2;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8 := $fakelocal_8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10 := $fakelocal_10;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7 := $r7;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8 := i8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r1 := r1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex := fixed.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap := fixed.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$block21;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$block21:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon45_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon45_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon45_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7
   == fixed.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon36:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2][inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5]];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 + 1;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon36_dummy;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon48_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon36;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon33:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8][inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon48_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon48_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon48_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon47_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon33;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon30:
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon47_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon47_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon47_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon46_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4
   > inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon30;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon27:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4 := fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon46_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon46_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon46_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
   >= inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon45_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7
   != fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon27;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon36_dummy:
    assume false;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$exit:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return:
    $return := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return;
    $exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception;
    $c5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5;
    $i4 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4;
    $r8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8;
    $fakelocal_9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9;
    $fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8;
    $fakelocal_10 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10;
    $r7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7;
    i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8;
    goto block21$1;

  block21$1:
    goto block21_last;

  anon45_Else:
    assume {:partition} $r7 == fixed.$null;
    call $fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_8;
    return;

  anon45_Then:
    assume {:partition} $r7 != fixed.$null;
    $exception := $exception;
    goto anon27;

  anon27:
    $i4 := fixed.$arrSizeHeap[$r7];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} $i4 > i8;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "elseblock"} true;
    goto anon30;

  anon30:
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    $r8 := fixed.$heap[r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} !(i8 < fixed.$arrSizeHeap[$r8] && i8 >= 0);
    call $fakelocal_9 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_9;
    return;

  anon47_Then:
    assume {:partition} i8 < fixed.$arrSizeHeap[$r8] && i8 >= 0;
    $exception := $exception;
    goto anon33;

  anon33:
    $c5 := fixed.$intArrHeap[$r8][i8];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} !(i8 < fixed.$arrSizeHeap[r2] && i8 >= 0);
    call $fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_10;
    return;

  anon48_Then:
    assume {:partition} i8 < fixed.$arrSizeHeap[r2] && i8 >= 0;
    $exception := $exception;
    goto anon36;

  anon36:
    fixed.$intArrHeap := fixed.$intArrHeap[r2 := fixed.$intArrHeap[r2][i8 := $c5]];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    i8 := i8 + 1;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon36_dummy;

  anon46_Then:
    assume {:partition} i8 >= $i4;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "thenblock"} true;
    goto block22;

  block22:
    assert {:sourceloc "StringBuilder.java", 14, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347 := r2];
    assert {:sourceloc "StringBuilder.java", 15, -1, -1, -1} true;
    $return := r0;
    goto block23;

  block23:
    return;

  anon36_dummy:
    assume false;
    return;

  block21_last:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    $r7 := fixed.$heap[r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon45_Then, anon45_Else;

  anon21_dummy:
    assume false;
    return;

  block19_last:
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    $r5 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon40_Then, anon40_Else;
}



implementation unsafe.java.lang.StringBuilder$toString$($this: ref) returns ($return: ref, $exception: ref)
{
  var $r1: ref;
  var $r2: ref;
  var r0: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i0: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap: $heap_type;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.StringBuilder;
    assume {:sourceloc "StringBuilder.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "StringBuilder.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.String);
    $r1 := $fakelocal_0;
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    $r2 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this := $r1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0 := $r2;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$heap := fixed.$heap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$intArrHeap := fixed.$intArrHeap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon0$1:
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon16_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon16_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_0;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon3;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon3:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i0];
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r2];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 := 0;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block25;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block25:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$block25;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$block25:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon12:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon12;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon9;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon6:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
   >= inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon6;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$exit:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block25$1;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block25$1:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block25_last;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_2;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1 != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon6;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon6:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon18_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1
   > inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon9;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon19_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_3;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon12;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon12:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$r1][inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon20_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$fakelocal_4;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon15;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$r3][inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$i3
   >= inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block26;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block26:
    assert {:sourceloc "String.java", 12, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block27;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block27:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$block25_last:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon17_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "StringBuilder.java", 19, -1, -1, -1} true;
    $return := $r1;
    goto block24;

  block24:
    return;
}



implementation unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref)
{
  var $fakelocal_0: ref;
  var $i0: int;
  var $fakelocal_2: ref;
  var $fakelocal_1: ref;
  var $fakelocal_4: ref;
  var $c2: int;
  var i3: int;
  var $fakelocal_3: ref;
  var r0: ref;
  var r1: ref;
  var $r2: ref;
  var $r3: ref;
  var $i1: int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $exception := $fakelocal_0;
    return;

  anon16_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i0 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_1 := $i0];
    $r2 := $fakelocal_1;
    assert {:sourceloc "String.java", 8, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348 := $r2];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    i3 := 0;
    goto block25;

  block25:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception := $exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2 := $fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4 := $fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2 := $c2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3 := i3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3 := $fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0 := r0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1 := r1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3 := $r3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1 := $i1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$block25;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$block25:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon12:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon12;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon9;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon6:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
   >= inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon6;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$exit:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    $fakelocal_2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2;
    $fakelocal_4 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4;
    $c2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2;
    i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3;
    $fakelocal_3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3;
    $r3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3;
    $i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    goto block25$1;

  block25$1:
    goto block25_last;

  anon17_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    $exception := $fakelocal_2;
    return;

  anon17_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i1 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} $i1 > i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    $r3 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(i3 < fixed.$arrSizeHeap[r1] && i3 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_3;
    return;

  anon19_Then:
    assume {:partition} i3 < fixed.$arrSizeHeap[r1] && i3 >= 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $c2 := fixed.$intArrHeap[r1][i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(i3 < fixed.$arrSizeHeap[$r3] && i3 >= 0);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_4;
    return;

  anon20_Then:
    assume {:partition} i3 < fixed.$arrSizeHeap[$r3] && i3 >= 0;
    $exception := $exception;
    goto anon15;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[$r3 := fixed.$intArrHeap[$r3][i3 := $c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    i3 := i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon15_dummy;

  anon18_Then:
    assume {:partition} i3 >= $i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    goto block26;

  block26:
    assert {:sourceloc "String.java", 12, -1, -1, -1} true;
    goto block27;

  block27:
    return;

  anon15_dummy:
    assume false;
    return;

  block25_last:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;
}



implementation unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref)
{
  var $fakelocal_1: ref;
  var $r3: ref;
  var $i0: int;
  var $r2: ref;
  var $i1: int;
  var $c3: int;
  var i4: int;
  var $fakelocal_0: ref;
  var $fakelocal_2: ref;
  var $fakelocal_4: ref;
  var r1: ref;
  var r0: ref;
  var $b2: int;
  var $fakelocal_3: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 14, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 15, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $exception := $fakelocal_0;
    return;

  anon16_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i0 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 15, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_1 := $i0];
    $r2 := $fakelocal_1;
    assert {:sourceloc "String.java", 15, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348 := $r2];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    i4 := 0;
    goto block28;

  block28:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception := $exception;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3 := $r3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1 := $i1;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3 := $c3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4 := i4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2 := $fakelocal_2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4 := $fakelocal_4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1 := r1;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r0 := r0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2 := $b2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3 := $fakelocal_3;
    havoc inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$block28;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$block28:
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3]];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 + 1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon12:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2;
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon12;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon9:
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon9;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon6:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
   >= inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon6;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$exit:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return:
    $exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception;
    $r3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3;
    $i1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1;
    $c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3;
    i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4;
    $fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2;
    $fakelocal_4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4;
    $b2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2;
    $fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3;
    goto block28$1;

  block28$1:
    goto block28_last;

  anon17_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    $exception := $fakelocal_2;
    return;

  anon17_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i1 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} $i1 > i4;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    $r3 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(i4 < fixed.$arrSizeHeap[r1] && i4 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_3;
    return;

  anon19_Then:
    assume {:partition} i4 < fixed.$arrSizeHeap[r1] && i4 >= 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $b2 := fixed.$intArrHeap[r1][i4];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    $c3 := $b2;
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(i4 < fixed.$arrSizeHeap[$r3] && i4 >= 0);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $exception := $fakelocal_4;
    return;

  anon20_Then:
    assume {:partition} i4 < fixed.$arrSizeHeap[$r3] && i4 >= 0;
    $exception := $exception;
    goto anon15;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[$r3 := fixed.$intArrHeap[$r3][i4 := $c3]];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    i4 := i4 + 1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon15_dummy;

  anon18_Then:
    assume {:partition} i4 >= $i1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    goto block29;

  block29:
    assert {:sourceloc "String.java", 19, -1, -1, -1} true;
    goto block30;

  block30:
    return;

  anon15_dummy:
    assume false;
    return;

  block28_last:
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;
}



implementation unsafe.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var $c1: int;
  var i0: int;
  var $fakelocal_0: ref;
  var $r1: ref;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    $r1 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !(i0 < fixed.$arrSizeHeap[$r1] && i0 >= 0);
    call $fakelocal_0 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon4_Then:
    assume {:partition} i0 < fixed.$arrSizeHeap[$r1] && i0 >= 0;
    $exception := $exception;
    goto anon3;

  anon3:
    $c1 := fixed.$intArrHeap[$r1][i0];
    assert {:sourceloc "String.java", 22, -1, -1, -1} true;
    $return := $c1;
    goto block31;

  block31:
    return;
}



implementation unsafe.java.lang.String$getBytes$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r2: ref;
  var r1: ref;
  var r0: ref;
  var inline$java.lang.String$getBytes$$0$$b4: int;
  var inline$java.lang.String$getBytes$$0$$i1: int;
  var inline$java.lang.String$getBytes$$0$i5: int;
  var inline$java.lang.String$getBytes$$0$r1: ref;
  var inline$java.lang.String$getBytes$$0$$i0: int;
  var inline$java.lang.String$getBytes$$0$$fakelocal_1: ref;
  var inline$java.lang.String$getBytes$$0$$r2: ref;
  var inline$java.lang.String$getBytes$$0$r0: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_0: ref;
  var inline$java.lang.String$getBytes$$0$$r4: ref;
  var inline$java.lang.String$getBytes$$0$$c3: int;
  var inline$java.lang.String$getBytes$$0$$r3: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$$0$$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$$0$$c2: int;
  var inline$java.lang.String$getBytes$$0$$this: ref;
  var inline$java.lang.String$getBytes$$0$$return: ref;
  var inline$java.lang.String$getBytes$$0$$exception: ref;
  var inline$java.lang.String$getBytes$$0$$objIndex: int;
  var inline$java.lang.String$getBytes$$0$$arrSizeHeap: [ref]int;
  var inline$java.lang.String$getBytes$$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$$0$$heap: $heap_type;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block33$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$Entry;

  inline$java.lang.String$getBytes$$0$Entry:
    inline$java.lang.String$getBytes$$0$$this := r0;
    havoc inline$java.lang.String$getBytes$$0$$b4, inline$java.lang.String$getBytes$$0$$i1, inline$java.lang.String$getBytes$$0$i5, inline$java.lang.String$getBytes$$0$r1, inline$java.lang.String$getBytes$$0$$i0, inline$java.lang.String$getBytes$$0$$fakelocal_1, inline$java.lang.String$getBytes$$0$$r2, inline$java.lang.String$getBytes$$0$r0, inline$java.lang.String$getBytes$$0$$fakelocal_4, inline$java.lang.String$getBytes$$0$$fakelocal_0, inline$java.lang.String$getBytes$$0$$r4, inline$java.lang.String$getBytes$$0$$c3, inline$java.lang.String$getBytes$$0$$r3, inline$java.lang.String$getBytes$$0$$fakelocal_2, inline$java.lang.String$getBytes$$0$$fakelocal_3, inline$java.lang.String$getBytes$$0$$c2, inline$java.lang.String$getBytes$$0$$return, inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$$0$$arrSizeHeap := fixed.$arrSizeHeap;
    inline$java.lang.String$getBytes$$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$$0$anon0;

  inline$java.lang.String$getBytes$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.String$getBytes$$0$$this, fixed.$type]
   <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} inline$java.lang.String$getBytes$$0$$this != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$r0 := inline$java.lang.String$getBytes$$0$$this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r2 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon16_Then, inline$java.lang.String$getBytes$$0$anon16_Else;

  inline$java.lang.String$getBytes$$0$anon16_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_0;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon16_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r2 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon3;

  inline$java.lang.String$getBytes$$0$anon3:
    inline$java.lang.String$getBytes$$0$$i0 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call inline$java.lang.String$getBytes$$0$$fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$fakelocal_1 := inline$java.lang.String$getBytes$$0$$i0];
    inline$java.lang.String$getBytes$$0$r1 := inline$java.lang.String$getBytes$$0$$fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := 0;
    goto inline$java.lang.String$getBytes$$0$block33;

  inline$java.lang.String$getBytes$$0$block33:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Entry;

  inline$java.lang.String$getBytes$_loop_block33$0$Entry:
    inline$java.lang.String$getBytes$_loop_block33$0$in_$return := inline$java.lang.String$getBytes$$0$$return;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$exception := inline$java.lang.String$getBytes$$0$$exception;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$b4 := inline$java.lang.String$getBytes$$0$$b4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$i1 := inline$java.lang.String$getBytes$$0$$i1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_i5 := inline$java.lang.String$getBytes$$0$i5;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := inline$java.lang.String$getBytes$$0$r1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r0 := inline$java.lang.String$getBytes$$0$r0;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4 := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r4 := inline$java.lang.String$getBytes$$0$$r4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c3 := inline$java.lang.String$getBytes$$0$$c3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r3 := inline$java.lang.String$getBytes$$0$$r3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2 := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3 := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c2 := inline$java.lang.String$getBytes$$0$$c2;
    havoc inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block33$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block33$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$entry;

  inline$java.lang.String$getBytes$_loop_block33$0$entry:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    goto inline$java.lang.String$getBytes$_loop_block33$0$block33;

  inline$java.lang.String$getBytes$_loop_block33$0$block33:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1][inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15;

  inline$java.lang.String$getBytes$_loop_block33$0$anon12:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4][inline$java.lang.String$getBytes$_loop_block33$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block33$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon12;

  inline$java.lang.String$getBytes$_loop_block33$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon9;

  inline$java.lang.String$getBytes$_loop_block33$0$anon6:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon6;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$Return:
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$_loop_block33$0$out_$return;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4;
    inline$java.lang.String$getBytes$$0$$i1 := inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    inline$java.lang.String$getBytes$$0$$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$$0$$r4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r4;
    inline$java.lang.String$getBytes$$0$$c3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    inline$java.lang.String$getBytes$$0$$r3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r3;
    inline$java.lang.String$getBytes$$0$$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$$0$$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$$0$$c2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    goto inline$java.lang.String$getBytes$$0$block33$1;

  inline$java.lang.String$getBytes$$0$block33$1:
    goto inline$java.lang.String$getBytes$$0$block33_last;

  inline$java.lang.String$getBytes$$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_2;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$$r3 != fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon6;

  inline$java.lang.String$getBytes$$0$anon6:
    inline$java.lang.String$getBytes$$0$$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon18_Then, inline$java.lang.String$getBytes$$0$anon18_Else;

  inline$java.lang.String$getBytes$$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$$0$$i1 > inline$java.lang.String$getBytes$$0$i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$$0$anon9;

  inline$java.lang.String$getBytes$$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r4 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon19_Then, inline$java.lang.String$getBytes$$0$anon19_Else;

  inline$java.lang.String$getBytes$$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_3;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$$r4]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon12;

  inline$java.lang.String$getBytes$$0$anon12:
    inline$java.lang.String$getBytes$$0$$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$$r4][inline$java.lang.String$getBytes$$0$i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$$0$$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$b4 := inline$java.lang.String$getBytes$$0$$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon20_Then, inline$java.lang.String$getBytes$$0$anon20_Else;

  inline$java.lang.String$getBytes$$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0);
    call inline$java.lang.String$getBytes$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$$0$$return := fixed.$null;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$fakelocal_4;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$$0$r1]
   && inline$java.lang.String$getBytes$$0$i5 >= 0;
    inline$java.lang.String$getBytes$$0$$exception := inline$java.lang.String$getBytes$$0$$exception;
    goto inline$java.lang.String$getBytes$$0$anon15;

  inline$java.lang.String$getBytes$$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$$0$r1][inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$i5 := inline$java.lang.String$getBytes$$0$i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon15_dummy;

  inline$java.lang.String$getBytes$$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$$0$i5
   >= inline$java.lang.String$getBytes$$0$$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.String$getBytes$$0$block34;

  inline$java.lang.String$getBytes$$0$block34:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$return := inline$java.lang.String$getBytes$$0$r1;
    goto inline$java.lang.String$getBytes$$0$block35;

  inline$java.lang.String$getBytes$$0$block35:
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$$0$Return;

  inline$java.lang.String$getBytes$$0$block33_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$$0$$r3 := fixed.$heap[inline$java.lang.String$getBytes$$0$r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$$0$anon17_Then, inline$java.lang.String$getBytes$$0$anon17_Else;

  inline$java.lang.String$getBytes$$0$Return:
    $r2 := inline$java.lang.String$getBytes$$0$$return;
    $exception := inline$java.lang.String$getBytes$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 26, -1, -1, -1} true;
    $return := $r2;
    goto block32;

  block32:
    return;
}



implementation unsafe.java.lang.String$getBytes$($this: ref) returns ($return: ref, $exception: ref)
{
  var $b4: int;
  var $i1: int;
  var i5: int;
  var r1: ref;
  var $i0: int;
  var $fakelocal_1: ref;
  var $r2: ref;
  var r0: ref;
  var $fakelocal_4: ref;
  var $fakelocal_0: ref;
  var $r4: ref;
  var $c3: int;
  var $r3: ref;
  var $fakelocal_2: ref;
  var $fakelocal_3: ref;
  var $c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block33$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    $r2 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} $r2 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon16_Then:
    assume {:partition} $r2 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i0 := fixed.$arrSizeHeap[$r2];
    assert {:sourceloc "String.java", 30, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_1 := $i0];
    r1 := $fakelocal_1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    i5 := 0;
    goto block33;

  block33:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Entry;

  inline$java.lang.String$getBytes$_loop_block33$0$Entry:
    inline$java.lang.String$getBytes$_loop_block33$0$in_$return := $return;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$exception := $exception;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$b4 := $b4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$i1 := $i1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_i5 := i5;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := r1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r0 := r0;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4 := $fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r4 := $r4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c3 := $c3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r3 := $r3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2 := $fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3 := $fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c2 := $c2;
    havoc inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block33$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block33$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$entry;

  inline$java.lang.String$getBytes$_loop_block33$0$entry:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    goto inline$java.lang.String$getBytes$_loop_block33$0$block33;

  inline$java.lang.String$getBytes$_loop_block33$0$block33:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1][inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15;

  inline$java.lang.String$getBytes$_loop_block33$0$anon12:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4][inline$java.lang.String$getBytes$_loop_block33$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block33$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon12;

  inline$java.lang.String$getBytes$_loop_block33$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon9;

  inline$java.lang.String$getBytes$_loop_block33$0$anon6:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon6;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$Return:
    $return := inline$java.lang.String$getBytes$_loop_block33$0$out_$return;
    $exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    $b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4;
    $i1 := inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    $fakelocal_4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    $r4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r4;
    $c3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    $r3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r3;
    $fakelocal_2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    $fakelocal_3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    $c2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    goto block33$1;

  block33$1:
    goto block33_last;

  anon17_Else:
    assume {:partition} $r3 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_2;
    return;

  anon17_Then:
    assume {:partition} $r3 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i1 := fixed.$arrSizeHeap[$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} $i1 > i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    $r4 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(i5 < fixed.$arrSizeHeap[$r4] && i5 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_3;
    return;

  anon19_Then:
    assume {:partition} i5 < fixed.$arrSizeHeap[$r4] && i5 >= 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $c2 := fixed.$intArrHeap[$r4][i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    $c3 := fixed.$bitAnd($c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    $b4 := $c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(i5 < fixed.$arrSizeHeap[r1] && i5 >= 0);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_4;
    return;

  anon20_Then:
    assume {:partition} i5 < fixed.$arrSizeHeap[r1] && i5 >= 0;
    $exception := $exception;
    goto anon15;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[r1 := fixed.$intArrHeap[r1][i5 := $b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    i5 := i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon15_dummy;

  anon18_Then:
    assume {:partition} i5 >= $i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto block34;

  block34:
    assert {:sourceloc "String.java", 34, -1, -1, -1} true;
    $return := r1;
    goto block35;

  block35:
    return;

  anon15_dummy:
    assume false;
    return;

  block33_last:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    $r3 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;
}



implementation {:inline 1} unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.String;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "String.java", 39, -1, -1, -1} true;
    $return := r0;
    goto block36;

  block36:
    return;
}



implementation unsafe.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref)
{
  var z0: int;
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.boolean$java.lang.Boolean$value0 := z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto block37;

  block37:
    return;
}



implementation unsafe.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var z0: int;
  var $r0: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    $r0 := $fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this := $r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0 := z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$block37;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$block37:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return:
    $exception := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    $return := $r0;
    goto block38;

  block38:
    return;
}



implementation unsafe.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref)
{
  var r0: ref;
  var $z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $z0 := fixed.$heap[r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $return := $z0;
    goto block39;

  block39:
    return;
}



implementation unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := fixed.$null;
    return;
}



implementation unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7(in_$return: int, 
    in_$exception: ref, 
    in_$b4: int, 
    in_$b2: int, 
    in_b7: int, 
    in_i8: int, 
    in_r2: ref, 
    in_$b3: int, 
    in_$fakelocal_2: ref, 
    in_r3: ref, 
    in_$fakelocal_3: ref, 
    in_i0: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$b4: int, 
    out_$b2: int, 
    out_b7: int, 
    out_i8: int, 
    out_$b3: int, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_3: ref)
{
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i0: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3: ref;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex: int;
  var inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$b4, out_$b2, out_b7, out_i8, out_$b3, out_$fakelocal_2, out_$fakelocal_3 := in_$return, in_$exception, in_$b4, in_$b2, in_b7, in_i8, in_$b3, in_$fakelocal_2, in_$fakelocal_3;
    goto block7;

  block7:
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    goto anon33_Then, anon33_Else;

  anon33_Then:
    assume {:partition} out_i8 >= in_i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$b4, out_$b2, out_b7, out_i8, out_$b3, out_$fakelocal_2, out_$fakelocal_3 := in_$return, in_$exception, in_$b4, in_$b2, in_b7, in_i8, in_$b3, in_$fakelocal_2, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon24:
    out_$b2 := fixed.$intArrHeap[in_r3][out_i8];
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    out_$b4 := fixed.$xorInt(out_$b3, out_$b2);
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    out_b7 := fixed.$bitOr(out_b7, out_$b4);
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    out_i8 := out_i8 + 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    goto anon24_dummy;

  anon35_Then:
    assume {:partition} out_i8 < fixed.$arrSizeHeap[in_r3] && out_i8 >= 0;
    out_$exception := out_$exception;
    goto anon24;

  anon21:
    out_$b3 := fixed.$intArrHeap[in_r2][out_i8];
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} !(out_i8 < fixed.$arrSizeHeap[in_r3] && out_i8 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_3;
    out_$return, out_$exception, out_$b4, out_$b2, out_b7, out_i8, out_$b3, out_$fakelocal_2, out_$fakelocal_3 := in_$return, in_$exception, in_$b4, in_$b2, in_b7, in_i8, in_$b3, in_$fakelocal_2, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon34_Then:
    assume {:partition} out_i8 < fixed.$arrSizeHeap[in_r2] && out_i8 >= 0;
    out_$exception := out_$exception;
    goto anon21;

  anon18:
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} !(out_i8 < fixed.$arrSizeHeap[in_r2] && out_i8 >= 0);
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_2;
    out_$return, out_$exception, out_$b4, out_$b2, out_b7, out_i8, out_$b3, out_$fakelocal_2, out_$fakelocal_3 := in_$return, in_$exception, in_$b4, in_$b2, in_b7, in_i8, in_$b3, in_$fakelocal_2, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon33_Else:
    assume {:partition} in_i0 > out_i8;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} {:comment "elseblock"} true;
    goto anon18;

  anon24_dummy:
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Entry;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Entry:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return := out_$return;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception := out_$exception;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4 := out_$b4;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2 := out_$b2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7 := out_b7;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8 := out_i8;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2 := in_r2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3 := out_$b3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3 := in_r3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i0 := in_i0;
    havoc inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex := fixed.$objIndex;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap := fixed.$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$entry;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$entry:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$block7;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$block7:
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon33_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon33_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon33_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
   >= inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i0;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} {:comment "thenblock"} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon24:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2 := fixed.$intArrHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3][inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8];
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4 := fixed.$xorInt(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, 
  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2);
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7 := fixed.$bitOr(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, 
  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4);
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
   + 1;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon24_dummy;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon35_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     >= 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon24;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon21:
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3 := fixed.$intArrHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2][inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8];
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon35_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon35_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon35_Else:
    assume {:partition} !(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r3]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     >= 0);
    call inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return := 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon34_Then:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     >= 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon21;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon18:
    assert {:sourceloc "PasswordEncoderUtils.java", 45, -1, -1, -1} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon34_Then, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon34_Else;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon34_Else:
    assume {:partition} !(inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     < fixed.$arrSizeHeap[inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_r2]
   && inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8
     >= 0);
    call inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return := 0;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2;
    inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$return, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$exception, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b4, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_b7, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i8, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$b3, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_2, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$objIndex, inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$$heap;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon33_Else:
    assume {:partition} inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$in_i0
   > inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8;
    assert {:sourceloc "PasswordEncoderUtils.java", 44, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon18;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$anon24_dummy:
    assume false;
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$exit:
    goto inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return;

  inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$Return:
    out_$return := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$return;
    out_$exception := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$exception;
    out_$b4 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b4;
    out_$b2 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b2;
    out_b7 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_b7;
    out_i8 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_i8;
    out_$b3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$b3;
    out_$fakelocal_2 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_2;
    out_$fakelocal_3 := inline$PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_loop_block7$0$out_$fakelocal_3;
    goto anon24_dummy$1;

  anon24_dummy$1:
    return;

  exit:
    return;
}



implementation unsafe.java.lang.StringBuilder$append$java.lang.String_loop_block21(in_$return: ref, 
    in_$exception: ref, 
    in_$c5: int, 
    in_$i4: int, 
    in_$r8: ref, 
    in_$fakelocal_9: ref, 
    in_r2: ref, 
    in_$fakelocal_8: ref, 
    in_$fakelocal_10: ref, 
    in_$r7: ref, 
    in_i8: int, 
    in_r1: ref)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$c5: int, 
    out_$i4: int, 
    out_$r8: ref, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_8: ref, 
    out_$fakelocal_10: ref, 
    out_$r7: ref, 
    out_i8: int)
{
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r1: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$c5, out_$i4, out_$r8, out_$fakelocal_9, out_$fakelocal_8, out_$fakelocal_10, out_$r7, out_i8 := in_$return, in_$exception, in_$c5, in_$i4, in_$r8, in_$fakelocal_9, in_$fakelocal_8, in_$fakelocal_10, in_$r7, in_i8;
    goto block21;

  block21:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    out_$r7 := fixed.$heap[in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} out_$r7 == fixed.$null;
    call out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_8;
    out_$return, out_$exception, out_$c5, out_$i4, out_$r8, out_$fakelocal_9, out_$fakelocal_8, out_$fakelocal_10, out_$r7, out_i8 := in_$return, in_$exception, in_$c5, in_$i4, in_$r8, in_$fakelocal_9, in_$fakelocal_8, in_$fakelocal_10, in_$r7, in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon36:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r2 := fixed.$intArrHeap[in_r2][out_i8 := out_$c5]];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    out_i8 := out_i8 + 1;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon36_dummy;

  anon48_Then:
    assume {:partition} out_i8 < fixed.$arrSizeHeap[in_r2] && out_i8 >= 0;
    out_$exception := out_$exception;
    goto anon36;

  anon33:
    out_$c5 := fixed.$intArrHeap[out_$r8][out_i8];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} !(out_i8 < fixed.$arrSizeHeap[in_r2] && out_i8 >= 0);
    call out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_10;
    out_$return, out_$exception, out_$c5, out_$i4, out_$r8, out_$fakelocal_9, out_$fakelocal_8, out_$fakelocal_10, out_$r7, out_i8 := in_$return, in_$exception, in_$c5, in_$i4, in_$r8, in_$fakelocal_9, in_$fakelocal_8, in_$fakelocal_10, in_$r7, in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon47_Then:
    assume {:partition} out_i8 < fixed.$arrSizeHeap[out_$r8] && out_i8 >= 0;
    out_$exception := out_$exception;
    goto anon33;

  anon30:
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    out_$r8 := fixed.$heap[in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} !(out_i8 < fixed.$arrSizeHeap[out_$r8] && out_i8 >= 0);
    call out_$fakelocal_9 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_9;
    out_$return, out_$exception, out_$c5, out_$i4, out_$r8, out_$fakelocal_9, out_$fakelocal_8, out_$fakelocal_10, out_$r7, out_i8 := in_$return, in_$exception, in_$c5, in_$i4, in_$r8, in_$fakelocal_9, in_$fakelocal_8, in_$fakelocal_10, in_$r7, in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon46_Else:
    assume {:partition} out_$i4 > out_i8;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "elseblock"} true;
    goto anon30;

  anon27:
    out_$i4 := fixed.$arrSizeHeap[out_$r7];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto anon46_Then, anon46_Else;

  anon46_Then:
    assume {:partition} out_i8 >= out_$i4;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$c5, out_$i4, out_$r8, out_$fakelocal_9, out_$fakelocal_8, out_$fakelocal_10, out_$r7, out_i8 := in_$return, in_$exception, in_$c5, in_$i4, in_$r8, in_$fakelocal_9, in_$fakelocal_8, in_$fakelocal_10, in_$r7, in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon45_Then:
    assume {:partition} out_$r7 != fixed.$null;
    out_$exception := out_$exception;
    goto anon27;

  anon36_dummy:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return := out_$return;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception := out_$exception;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5 := out_$c5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4 := out_$i4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8 := out_$r8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9 := out_$fakelocal_9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2 := in_r2;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8 := out_$fakelocal_8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10 := out_$fakelocal_10;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7 := out_$r7;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8 := out_i8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r1 := in_r1;
    havoc inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex := fixed.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap := fixed.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$block21;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$block21:
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon45_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon45_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon45_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7
   == fixed.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon36:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2][inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5]];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 + 1;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon36_dummy;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon48_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon36;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon33:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8][inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon48_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon48_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon48_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon47_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon33;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon30:
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_r1, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "StringBuilder.java", 12, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon47_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon47_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon47_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon46_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4
   > inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon30;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon27:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4 := fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7];
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon46_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon46_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon46_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8
   >= inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4;
    assert {:sourceloc "StringBuilder.java", 11, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$c5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$i4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_9, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_8, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$fakelocal_10, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_$r7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$in_i8;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon45_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7
   != fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon27;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$anon36_dummy:
    assume false;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$exit:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$Return:
    out_$return := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$return;
    out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$exception;
    out_$c5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$c5;
    out_$i4 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$i4;
    out_$r8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r8;
    out_$fakelocal_9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_9;
    out_$fakelocal_8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_8;
    out_$fakelocal_10 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$fakelocal_10;
    out_$r7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_$r7;
    out_i8 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block21$0$out_i8;
    goto anon36_dummy$1;

  anon36_dummy$1:
    return;

  exit:
    return;
}



implementation unsafe.java.lang.StringBuilder$append$java.lang.String_loop_block19(in_$return: ref, 
    in_$exception: ref, 
    in_$c6: int, 
    in_$fakelocal_4: ref, 
    in_r2: ref, 
    in_$fakelocal_5: ref, 
    in_r0: ref, 
    in_i7: int, 
    in_$fakelocal_6: ref, 
    in_$r5: ref, 
    in_$i3: int, 
    in_$r9: ref)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$c6: int, 
    out_$fakelocal_4: ref, 
    out_$fakelocal_5: ref, 
    out_i7: int, 
    out_$fakelocal_6: ref, 
    out_$r5: ref, 
    out_$i3: int, 
    out_$r9: ref)
{
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r0: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9: ref;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex: int;
  var inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$c6, out_$fakelocal_4, out_$fakelocal_5, out_i7, out_$fakelocal_6, out_$r5, out_$i3, out_$r9 := in_$return, in_$exception, in_$c6, in_$fakelocal_4, in_$fakelocal_5, in_i7, in_$fakelocal_6, in_$r5, in_$i3, in_$r9;
    goto block19;

  block19:
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    out_$r5 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} out_$r5 == fixed.$null;
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_4;
    out_$return, out_$exception, out_$c6, out_$fakelocal_4, out_$fakelocal_5, out_i7, out_$fakelocal_6, out_$r5, out_$i3, out_$r9 := in_$return, in_$exception, in_$c6, in_$fakelocal_4, in_$fakelocal_5, in_i7, in_$fakelocal_6, in_$r5, in_$i3, in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon21:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r2 := fixed.$intArrHeap[in_r2][out_i7 := out_$c6]];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    out_i7 := out_i7 + 1;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon21_dummy;

  anon43_Then:
    assume {:partition} out_i7 < fixed.$arrSizeHeap[in_r2] && out_i7 >= 0;
    out_$exception := out_$exception;
    goto anon21;

  anon18:
    out_$c6 := fixed.$intArrHeap[out_$r9][out_i7];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} !(out_i7 < fixed.$arrSizeHeap[in_r2] && out_i7 >= 0);
    call out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_6;
    out_$return, out_$exception, out_$c6, out_$fakelocal_4, out_$fakelocal_5, out_i7, out_$fakelocal_6, out_$r5, out_$i3, out_$r9 := in_$return, in_$exception, in_$c6, in_$fakelocal_4, in_$fakelocal_5, in_i7, in_$fakelocal_6, in_$r5, in_$i3, in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon42_Then:
    assume {:partition} out_i7 < fixed.$arrSizeHeap[out_$r9] && out_i7 >= 0;
    out_$exception := out_$exception;
    goto anon18;

  anon15:
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    out_$r9 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} !(out_i7 < fixed.$arrSizeHeap[out_$r9] && out_i7 >= 0);
    call out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_5;
    out_$return, out_$exception, out_$c6, out_$fakelocal_4, out_$fakelocal_5, out_i7, out_$fakelocal_6, out_$r5, out_$i3, out_$r9 := in_$return, in_$exception, in_$c6, in_$fakelocal_4, in_$fakelocal_5, in_i7, in_$fakelocal_6, in_$r5, in_$i3, in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon41_Else:
    assume {:partition} out_$i3 > out_i7;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon12:
    out_$i3 := fixed.$arrSizeHeap[out_$r5];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto anon41_Then, anon41_Else;

  anon41_Then:
    assume {:partition} out_i7 >= out_$i3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$c6, out_$fakelocal_4, out_$fakelocal_5, out_i7, out_$fakelocal_6, out_$r5, out_$i3, out_$r9 := in_$return, in_$exception, in_$c6, in_$fakelocal_4, in_$fakelocal_5, in_i7, in_$fakelocal_6, in_$r5, in_$i3, in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon40_Then:
    assume {:partition} out_$r5 != fixed.$null;
    out_$exception := out_$exception;
    goto anon12;

  anon21_dummy:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return := out_$return;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception := out_$exception;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6 := out_$c6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2 := in_r2;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5 := out_$fakelocal_5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r0 := in_r0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7 := out_i7;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6 := out_$fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5 := out_$r5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3 := out_$i3;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9 := out_$r9;
    havoc inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex := fixed.$objIndex;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap := fixed.$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$entry;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$entry:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$block19;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$block19:
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon40_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon40_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon40_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5
   == fixed.$null;
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon21:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2][inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6]];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7 + 1;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon21_dummy;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon43_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon21;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon18:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6 := fixed.$intArrHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9][inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon43_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon43_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon43_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r2]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon42_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     >= 0;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon18;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon15:
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := fixed.$heap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_r0, fixed.char$lp$$rp$$java.lang.StringBuilder$chars347];
    assert {:sourceloc "StringBuilder.java", 9, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon42_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon42_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon42_Else:
    assume {:partition} !(inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     < fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9]
   && inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
     >= 0);
    call inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return := fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon41_Else:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3
   > inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon15;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon12:
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3 := fixed.$arrSizeHeap[inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5];
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} true;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon41_Then, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon41_Else;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon41_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7
   >= inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3;
    assert {:sourceloc "StringBuilder.java", 8, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$return, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$exception, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$c6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_4, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_i7, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$fakelocal_6, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r5, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$i3, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$in_$r9;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$intArrHeap, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$objIndex, inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$$heap;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon40_Then:
    assume {:partition} inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5
   != fixed.$null;
    inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon12;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$anon21_dummy:
    assume false;
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$exit:
    goto inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return;

  inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$Return:
    out_$return := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$return;
    out_$exception := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$exception;
    out_$c6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$c6;
    out_$fakelocal_4 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_4;
    out_$fakelocal_5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_5;
    out_i7 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_i7;
    out_$fakelocal_6 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$fakelocal_6;
    out_$r5 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r5;
    out_$i3 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$i3;
    out_$r9 := inline$java.lang.StringBuilder$append$java.lang.String_loop_block19$0$out_$r9;
    goto anon21_dummy$1;

  anon21_dummy$1:
    return;

  exit:
    return;
}



implementation unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25(in_$exception: ref, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_4: ref, 
    in_$c2: int, 
    in_i3: int, 
    in_$fakelocal_3: ref, 
    in_r0: ref, 
    in_r1: ref, 
    in_$r3: ref, 
    in_$i1: int)
   returns (out_$exception: ref, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_4: ref, 
    out_$c2: int, 
    out_i3: int, 
    out_$fakelocal_3: ref, 
    out_$r3: ref, 
    out_$i1: int)
{
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap: $heap_type;

  entry:
    out_$exception, out_$fakelocal_2, out_$fakelocal_4, out_$c2, out_i3, out_$fakelocal_3, out_$r3, out_$i1 := in_$exception, in_$fakelocal_2, in_$fakelocal_4, in_$c2, in_i3, in_$fakelocal_3, in_$r3, in_$i1;
    goto block25;

  block25:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} in_r1 == fixed.$null;
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$exception := out_$fakelocal_2;
    out_$exception, out_$fakelocal_2, out_$fakelocal_4, out_$c2, out_i3, out_$fakelocal_3, out_$r3, out_$i1 := in_$exception, in_$fakelocal_2, in_$fakelocal_4, in_$c2, in_i3, in_$fakelocal_3, in_$r3, in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[out_$r3 := fixed.$intArrHeap[out_$r3][out_i3 := out_$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    out_i3 := out_i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon15_dummy;

  anon20_Then:
    assume {:partition} out_i3 < fixed.$arrSizeHeap[out_$r3] && out_i3 >= 0;
    out_$exception := out_$exception;
    goto anon15;

  anon12:
    out_$c2 := fixed.$intArrHeap[in_r1][out_i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(out_i3 < fixed.$arrSizeHeap[out_$r3] && out_i3 >= 0);
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$exception := out_$fakelocal_4;
    out_$exception, out_$fakelocal_2, out_$fakelocal_4, out_$c2, out_i3, out_$fakelocal_3, out_$r3, out_$i1 := in_$exception, in_$fakelocal_2, in_$fakelocal_4, in_$c2, in_i3, in_$fakelocal_3, in_$r3, in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon19_Then:
    assume {:partition} out_i3 < fixed.$arrSizeHeap[in_r1] && out_i3 >= 0;
    out_$exception := out_$exception;
    goto anon12;

  anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    out_$r3 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(out_i3 < fixed.$arrSizeHeap[in_r1] && out_i3 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$exception := out_$fakelocal_3;
    out_$exception, out_$fakelocal_2, out_$fakelocal_4, out_$c2, out_i3, out_$fakelocal_3, out_$r3, out_$i1 := in_$exception, in_$fakelocal_2, in_$fakelocal_4, in_$c2, in_i3, in_$fakelocal_3, in_$r3, in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon18_Else:
    assume {:partition} out_$i1 > out_i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon6:
    out_$i1 := fixed.$arrSizeHeap[in_r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} out_i3 >= out_$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    out_$exception, out_$fakelocal_2, out_$fakelocal_4, out_$c2, out_i3, out_$fakelocal_3, out_$r3, out_$i1 := in_$exception, in_$fakelocal_2, in_$fakelocal_4, in_$c2, in_i3, in_$fakelocal_3, in_$r3, in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon17_Then:
    assume {:partition} in_r1 != fixed.$null;
    out_$exception := out_$exception;
    goto anon6;

  anon15_dummy:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception := out_$exception;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2 := out_$c2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3 := out_i3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0 := in_r0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1 := in_r1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3 := out_$r3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1 := out_$i1;
    havoc inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$entry;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$entry:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$block25;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$block25:
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2]];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 + 1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon12:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1][inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon12;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon9:
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 10, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3 >= 0);
    call inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon9;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon6:
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1];
    assert {:sourceloc "String.java", 9, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Then, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3
   >= inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    assert {:sourceloc "String.java", 9, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$exception, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$c2, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_i3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$fakelocal_3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$r3, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_$i1;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$objIndex, inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon6;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$exit:
    goto inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return;

  inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$Return:
    out_$exception := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$exception;
    out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_2;
    out_$fakelocal_4 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_4;
    out_$c2 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$c2;
    out_i3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_i3;
    out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$fakelocal_3;
    out_$r3 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$r3;
    out_$i1 := inline$java.lang.String$$la$init$ra$$char$lp$$rp$_loop_block25$0$out_$i1;
    goto anon15_dummy$1;

  anon15_dummy$1:
    return;

  exit:
    return;
}



implementation unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28(in_$exception: ref, 
    in_$r3: ref, 
    in_$i1: int, 
    in_$c3: int, 
    in_i4: int, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_4: ref, 
    in_r1: ref, 
    in_r0: ref, 
    in_$b2: int, 
    in_$fakelocal_3: ref)
   returns (out_$exception: ref, 
    out_$r3: ref, 
    out_$i1: int, 
    out_$c3: int, 
    out_i4: int, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_4: ref, 
    out_$b2: int, 
    out_$fakelocal_3: ref)
{
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r0: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex: int;
  var inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap: $heap_type;

  entry:
    out_$exception, out_$r3, out_$i1, out_$c3, out_i4, out_$fakelocal_2, out_$fakelocal_4, out_$b2, out_$fakelocal_3 := in_$exception, in_$r3, in_$i1, in_$c3, in_i4, in_$fakelocal_2, in_$fakelocal_4, in_$b2, in_$fakelocal_3;
    goto block28;

  block28:
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} in_r1 == fixed.$null;
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$exception := out_$fakelocal_2;
    out_$exception, out_$r3, out_$i1, out_$c3, out_i4, out_$fakelocal_2, out_$fakelocal_4, out_$b2, out_$fakelocal_3 := in_$exception, in_$r3, in_$i1, in_$c3, in_i4, in_$fakelocal_2, in_$fakelocal_4, in_$b2, in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[out_$r3 := fixed.$intArrHeap[out_$r3][out_i4 := out_$c3]];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    out_i4 := out_i4 + 1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon15_dummy;

  anon20_Then:
    assume {:partition} out_i4 < fixed.$arrSizeHeap[out_$r3] && out_i4 >= 0;
    out_$exception := out_$exception;
    goto anon15;

  anon12:
    out_$b2 := fixed.$intArrHeap[in_r1][out_i4];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    out_$c3 := out_$b2;
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(out_i4 < fixed.$arrSizeHeap[out_$r3] && out_i4 >= 0);
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$exception := out_$fakelocal_4;
    out_$exception, out_$r3, out_$i1, out_$c3, out_i4, out_$fakelocal_2, out_$fakelocal_4, out_$b2, out_$fakelocal_3 := in_$exception, in_$r3, in_$i1, in_$c3, in_i4, in_$fakelocal_2, in_$fakelocal_4, in_$b2, in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon19_Then:
    assume {:partition} out_i4 < fixed.$arrSizeHeap[in_r1] && out_i4 >= 0;
    out_$exception := out_$exception;
    goto anon12;

  anon9:
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    out_$r3 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(out_i4 < fixed.$arrSizeHeap[in_r1] && out_i4 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$exception := out_$fakelocal_3;
    out_$exception, out_$r3, out_$i1, out_$c3, out_i4, out_$fakelocal_2, out_$fakelocal_4, out_$b2, out_$fakelocal_3 := in_$exception, in_$r3, in_$i1, in_$c3, in_i4, in_$fakelocal_2, in_$fakelocal_4, in_$b2, in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon18_Else:
    assume {:partition} out_$i1 > out_i4;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon6:
    out_$i1 := fixed.$arrSizeHeap[in_r1];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} out_i4 >= out_$i1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    out_$exception, out_$r3, out_$i1, out_$c3, out_i4, out_$fakelocal_2, out_$fakelocal_4, out_$b2, out_$fakelocal_3 := in_$exception, in_$r3, in_$i1, in_$c3, in_i4, in_$fakelocal_2, in_$fakelocal_4, in_$b2, in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon17_Then:
    assume {:partition} in_r1 != fixed.$null;
    out_$exception := out_$exception;
    goto anon6;

  anon15_dummy:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception := out_$exception;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3 := out_$r3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1 := out_$i1;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3 := out_$c3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4 := out_i4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1 := in_r1;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r0 := in_r0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2 := out_$b2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3 := out_$fakelocal_3;
    havoc inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap := fixed.$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$entry;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$entry:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$block28;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$block28:
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1
   == fixed.$null;
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3]];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 + 1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15_dummy;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon12:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2 := fixed.$intArrHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1][inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2;
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 >= 0;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon12;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon9:
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3 := fixed.$heap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 17, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
     < fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1]
   && inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4 >= 0);
    call inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Else:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1
   > inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon9;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon6:
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1];
    assert {:sourceloc "String.java", 16, -1, -1, -1} true;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Then, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Else;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4
   >= inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1;
    assert {:sourceloc "String.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$exception, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$r3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$i1, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$c3, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_i4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_4, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$b2, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_$fakelocal_3;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$intArrHeap, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$objIndex, inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$$heap;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Then:
    assume {:partition} inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$in_r1
   != fixed.$null;
    inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon6;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$exit:
    goto inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return;

  inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return:
    out_$exception := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$exception;
    out_$r3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3;
    out_$i1 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1;
    out_$c3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$c3;
    out_i4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4;
    out_$fakelocal_2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_2;
    out_$fakelocal_4 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_4;
    out_$b2 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2;
    out_$fakelocal_3 := inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$fakelocal_3;
    goto anon15_dummy$1;

  anon15_dummy$1:
    return;

  exit:
    return;
}



implementation unsafe.java.lang.String$getBytes$_loop_block33(in_$return: ref, 
    in_$exception: ref, 
    in_$b4: int, 
    in_$i1: int, 
    in_i5: int, 
    in_r1: ref, 
    in_r0: ref, 
    in_$fakelocal_4: ref, 
    in_$r4: ref, 
    in_$c3: int, 
    in_$r3: ref, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_3: ref, 
    in_$c2: int)
   returns (out_$return: ref, 
    out_$exception: ref, 
    out_$b4: int, 
    out_$i1: int, 
    out_i5: int, 
    out_$fakelocal_4: ref, 
    out_$r4: ref, 
    out_$c3: int, 
    out_$r3: ref, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_3: ref, 
    out_$c2: int)
{
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r1: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_r0: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$in_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$return: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$exception: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$b4: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$i1: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_i5: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r4: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c3: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$r3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3: ref;
  var inline$java.lang.String$getBytes$_loop_block33$0$out_$c2: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap: intArrHeap_type;
  var inline$java.lang.String$getBytes$_loop_block33$0$$objIndex: int;
  var inline$java.lang.String$getBytes$_loop_block33$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$b4, out_$i1, out_i5, out_$fakelocal_4, out_$r4, out_$c3, out_$r3, out_$fakelocal_2, out_$fakelocal_3, out_$c2 := in_$return, in_$exception, in_$b4, in_$i1, in_i5, in_$fakelocal_4, in_$r4, in_$c3, in_$r3, in_$fakelocal_2, in_$fakelocal_3, in_$c2;
    goto block33;

  block33:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    out_$r3 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_$r3 == fixed.$null;
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_2;
    out_$return, out_$exception, out_$b4, out_$i1, out_i5, out_$fakelocal_4, out_$r4, out_$c3, out_$r3, out_$fakelocal_2, out_$fakelocal_3, out_$c2 := in_$return, in_$exception, in_$b4, in_$i1, in_i5, in_$fakelocal_4, in_$r4, in_$c3, in_$r3, in_$fakelocal_2, in_$fakelocal_3, in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r1 := fixed.$intArrHeap[in_r1][out_i5 := out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    out_i5 := out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon15_dummy;

  anon20_Then:
    assume {:partition} out_i5 < fixed.$arrSizeHeap[in_r1] && out_i5 >= 0;
    out_$exception := out_$exception;
    goto anon15;

  anon12:
    out_$c2 := fixed.$intArrHeap[out_$r4][out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    out_$c3 := fixed.$bitAnd(out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    out_$b4 := out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} !(out_i5 < fixed.$arrSizeHeap[in_r1] && out_i5 >= 0);
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_4;
    out_$return, out_$exception, out_$b4, out_$i1, out_i5, out_$fakelocal_4, out_$r4, out_$c3, out_$r3, out_$fakelocal_2, out_$fakelocal_3, out_$c2 := in_$return, in_$exception, in_$b4, in_$i1, in_i5, in_$fakelocal_4, in_$r4, in_$c3, in_$r3, in_$fakelocal_2, in_$fakelocal_3, in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon19_Then:
    assume {:partition} out_i5 < fixed.$arrSizeHeap[out_$r4] && out_i5 >= 0;
    out_$exception := out_$exception;
    goto anon12;

  anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    out_$r4 := fixed.$heap[in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} !(out_i5 < fixed.$arrSizeHeap[out_$r4] && out_i5 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := fixed.$null;
    out_$exception := out_$fakelocal_3;
    out_$return, out_$exception, out_$b4, out_$i1, out_i5, out_$fakelocal_4, out_$r4, out_$c3, out_$r3, out_$fakelocal_2, out_$fakelocal_3, out_$c2 := in_$return, in_$exception, in_$b4, in_$i1, in_i5, in_$fakelocal_4, in_$r4, in_$c3, in_$r3, in_$fakelocal_2, in_$fakelocal_3, in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon18_Else:
    assume {:partition} out_$i1 > out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon6:
    out_$i1 := fixed.$arrSizeHeap[out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} out_i5 >= out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$b4, out_$i1, out_i5, out_$fakelocal_4, out_$r4, out_$c3, out_$r3, out_$fakelocal_2, out_$fakelocal_3, out_$c2 := in_$return, in_$exception, in_$b4, in_$i1, in_i5, in_$fakelocal_4, in_$r4, in_$c3, in_$r3, in_$fakelocal_2, in_$fakelocal_3, in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon17_Then:
    assume {:partition} out_$r3 != fixed.$null;
    out_$exception := out_$exception;
    goto anon6;

  anon15_dummy:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Entry;

  inline$java.lang.String$getBytes$_loop_block33$0$Entry:
    inline$java.lang.String$getBytes$_loop_block33$0$in_$return := out_$return;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$exception := out_$exception;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$b4 := out_$b4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$i1 := out_$i1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_i5 := out_i5;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := in_r1;
    inline$java.lang.String$getBytes$_loop_block33$0$in_r0 := in_r0;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r4 := out_$r4;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c3 := out_$c3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$r3 := out_$r3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$in_$c2 := out_$c2;
    havoc inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap := fixed.$intArrHeap;
    inline$java.lang.String$getBytes$_loop_block33$0$$objIndex := fixed.$objIndex;
    inline$java.lang.String$getBytes$_loop_block33$0$$heap := fixed.$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$entry;

  inline$java.lang.String$getBytes$_loop_block33$0$entry:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    goto inline$java.lang.String$getBytes$_loop_block33$0$block33;

  inline$java.lang.String$getBytes$_loop_block33$0$block33:
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 == fixed.$null;
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1][inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4]];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5 + 1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon15;

  inline$java.lang.String$getBytes$_loop_block33$0$anon12:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := fixed.$intArrHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4][inline$java.lang.String$getBytes$_loop_block33$0$out_i5];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$c3 := fixed.$bitAnd(inline$java.lang.String$getBytes$_loop_block33$0$out_$c2, 255);
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon20_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon20_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$in_r1]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon12;

  inline$java.lang.String$getBytes$_loop_block33$0$anon9:
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$r4 := fixed.$heap[inline$java.lang.String$getBytes$_loop_block33$0$in_r0, fixed.char$lp$$rp$$java.lang.String$chars348];
    assert {:sourceloc "String.java", 32, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon19_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon19_Else:
    assume {:partition} !(inline$java.lang.String$getBytes$_loop_block33$0$out_i5
     < fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r4]
   && inline$java.lang.String$getBytes$_loop_block33$0$out_i5 >= 0);
    call inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return := fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$i1
   > inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon9;

  inline$java.lang.String$getBytes$_loop_block33$0$anon6:
    inline$java.lang.String$getBytes$_loop_block33$0$out_$i1 := fixed.$arrSizeHeap[inline$java.lang.String$getBytes$_loop_block33$0$out_$r3];
    assert {:sourceloc "String.java", 31, -1, -1, -1} true;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then, inline$java.lang.String$getBytes$_loop_block33$0$anon18_Else;

  inline$java.lang.String$getBytes$_loop_block33$0$anon18_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_i5
   >= inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    assert {:sourceloc "String.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$return, inline$java.lang.String$getBytes$_loop_block33$0$out_$exception, inline$java.lang.String$getBytes$_loop_block33$0$out_$b4, inline$java.lang.String$getBytes$_loop_block33$0$out_$i1, inline$java.lang.String$getBytes$_loop_block33$0$out_i5, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$out_$r4, inline$java.lang.String$getBytes$_loop_block33$0$out_$c3, inline$java.lang.String$getBytes$_loop_block33$0$out_$r3, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$in_$return, inline$java.lang.String$getBytes$_loop_block33$0$in_$exception, inline$java.lang.String$getBytes$_loop_block33$0$in_$b4, inline$java.lang.String$getBytes$_loop_block33$0$in_$i1, inline$java.lang.String$getBytes$_loop_block33$0$in_i5, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_4, inline$java.lang.String$getBytes$_loop_block33$0$in_$r4, inline$java.lang.String$getBytes$_loop_block33$0$in_$c3, inline$java.lang.String$getBytes$_loop_block33$0$in_$r3, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_2, inline$java.lang.String$getBytes$_loop_block33$0$in_$fakelocal_3, inline$java.lang.String$getBytes$_loop_block33$0$in_$c2;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$java.lang.String$getBytes$_loop_block33$0$$intArrHeap, inline$java.lang.String$getBytes$_loop_block33$0$$objIndex, inline$java.lang.String$getBytes$_loop_block33$0$$heap;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$anon17_Then:
    assume {:partition} inline$java.lang.String$getBytes$_loop_block33$0$out_$r3 != fixed.$null;
    inline$java.lang.String$getBytes$_loop_block33$0$out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    goto inline$java.lang.String$getBytes$_loop_block33$0$anon6;

  inline$java.lang.String$getBytes$_loop_block33$0$anon15_dummy:
    assume false;
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$exit:
    goto inline$java.lang.String$getBytes$_loop_block33$0$Return;

  inline$java.lang.String$getBytes$_loop_block33$0$Return:
    out_$return := inline$java.lang.String$getBytes$_loop_block33$0$out_$return;
    out_$exception := inline$java.lang.String$getBytes$_loop_block33$0$out_$exception;
    out_$b4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$b4;
    out_$i1 := inline$java.lang.String$getBytes$_loop_block33$0$out_$i1;
    out_i5 := inline$java.lang.String$getBytes$_loop_block33$0$out_i5;
    out_$fakelocal_4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_4;
    out_$r4 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r4;
    out_$c3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c3;
    out_$r3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$r3;
    out_$fakelocal_2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_2;
    out_$fakelocal_3 := inline$java.lang.String$getBytes$_loop_block33$0$out_$fakelocal_3;
    out_$c2 := inline$java.lang.String$getBytes$_loop_block33$0$out_$c2;
    goto anon15_dummy$1;

  anon15_dummy$1:
    return;

  exit:
    return;
}



type ref;

type javaType;

type Field _;

type $heap_type = <$GenericType__0>[ref,Field $GenericType__0]$GenericType__0;

type boolArrHeap_type = [ref][int]bool;

type refArrHeap_type = [ref][int]ref;

type realArrHeap_type = [ref][int]int;

type intArrHeap_type = [ref][int]int;

function _uf_fixed.PasswordEncoderUtils$$la$init$ra$$_$exception(arg_0: ref, arg_1: $heap_type, arg_2: [ref]int, arg_3: [ref]int) : ref;

function _uf_unsafe.PasswordEncoderUtils$$la$init$ra$$_$exception(arg_0: ref, arg_1: $heap_type, arg_2: [ref]int, arg_3: [ref]int) : ref;

var Output_of_unsafe.PasswordEncoderUtils$$la$init$ra$$_$exception: ref;

var Output_of_fixed.PasswordEncoderUtils$$la$init$ra$$_$exception: ref;

function _uf_fixed.java.lang.Object$$la$init$ra$$_$exception(arg_0: ref) : ref;

function _uf_unsafe.java.lang.Object$$la$init$ra$$_$exception(arg_0: ref) : ref;

function _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : int;

function _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : ref;

function _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : int;

function _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : $heap_type;

function _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : [ref]int;

function _uf_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : intArrHeap_type;

function _uf_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : int;

function _uf_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : ref;

function _uf_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : int;

function _uf_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : $heap_type;

function _uf_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : [ref]int;

function _uf_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: ref, 
    arg_10: Field int)
   : intArrHeap_type;

var Output_of_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$return: int;

var Output_of_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$return: int;

var Output_of_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$exception: ref;

var Output_of_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_$exception: ref;

var Output_of_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$objIndex: int;

var Output_of_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$objIndex: int;

var Output_of_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$heap: $heap_type;

var Output_of_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$heap: $heap_type;

var Output_of_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$arrSizeHeap: [ref]int;

var Output_of_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$arrSizeHeap: [ref]int;

var Output_of_unsafe.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$intArrHeap: intArrHeap_type;

var Output_of_fixed.PasswordEncoderUtils$equals_unsafe$java.lang.String_java.lang.String_fixed.$intArrHeap: intArrHeap_type;

function _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_$return(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : ref;

function _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : ref;

function _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : int;

function _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : $heap_type;

function _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : [ref]int;

function _uf_fixed.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$intArrHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : intArrHeap_type;

function _uf_unsafe.PasswordEncoderUtils$bytesUtf8$java.lang.String_$return(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : ref;

function _uf_unsafe.PasswordEncoderUtils$bytesUtf8$java.lang.String_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : ref;

function _uf_unsafe.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : int;

function _uf_unsafe.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : $heap_type;

function _uf_unsafe.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : [ref]int;

function _uf_unsafe.PasswordEncoderUtils$bytesUtf8$java.lang.String_fixed.$intArrHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: intArrHeap_type, 
    arg_6: Field ref, 
    arg_7: javaType, 
    arg_8: ref)
   : intArrHeap_type;

function _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: javaType, 
    arg_5: int, 
    arg_6: Field ref)
   : ref;

function _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: javaType, 
    arg_5: int, 
    arg_6: Field ref)
   : int;

function _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: javaType, 
    arg_5: int, 
    arg_6: Field ref)
   : $heap_type;

function _uf_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: javaType, 
    arg_5: int, 
    arg_6: Field ref)
   : [ref]int;

function _uf_unsafe.java.lang.StringBuilder$$la$init$ra$$_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: javaType, 
    arg_5: int, 
    arg_6: Field ref)
   : ref;

function _uf_unsafe.java.lang.StringBuilder$$la$init$ra$$_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: javaType, 
    arg_5: int, 
    arg_6: Field ref)
   : int;

function _uf_unsafe.java.lang.StringBuilder$$la$init$ra$$_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: javaType, 
    arg_5: int, 
    arg_6: Field ref)
   : $heap_type;

function _uf_unsafe.java.lang.StringBuilder$$la$init$ra$$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: javaType, 
    arg_5: int, 
    arg_6: Field ref)
   : [ref]int;

var Output_of_unsafe.java.lang.StringBuilder$$la$init$ra$$_$exception: ref;

var Output_of_fixed.java.lang.StringBuilder$$la$init$ra$$_$exception: ref;

var Output_of_unsafe.java.lang.StringBuilder$$la$init$ra$$_fixed.$objIndex: int;

var Output_of_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$objIndex: int;

var Output_of_unsafe.java.lang.StringBuilder$$la$init$ra$$_fixed.$heap: $heap_type;

var Output_of_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$heap: $heap_type;

var Output_of_unsafe.java.lang.StringBuilder$$la$init$ra$$_fixed.$arrSizeHeap: [ref]int;

var Output_of_fixed.java.lang.StringBuilder$$la$init$ra$$_fixed.$arrSizeHeap: [ref]int;

function _uf_fixed.java.lang.StringBuilder$append$java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : ref;

function _uf_fixed.java.lang.StringBuilder$append$java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : ref;

function _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : int;

function _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : $heap_type;

function _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : [ref]int;

function _uf_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : intArrHeap_type;

function _uf_unsafe.java.lang.StringBuilder$append$java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : ref;

function _uf_unsafe.java.lang.StringBuilder$append$java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : ref;

function _uf_unsafe.java.lang.StringBuilder$append$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : int;

function _uf_unsafe.java.lang.StringBuilder$append$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : $heap_type;

function _uf_unsafe.java.lang.StringBuilder$append$java.lang.String_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : [ref]int;

function _uf_unsafe.java.lang.StringBuilder$append$java.lang.String_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: Field ref, 
    arg_8: javaType, 
    arg_9: intArrHeap_type)
   : intArrHeap_type;

var Output_of_unsafe.java.lang.StringBuilder$append$java.lang.String_$return: ref;

var Output_of_fixed.java.lang.StringBuilder$append$java.lang.String_$return: ref;

var Output_of_unsafe.java.lang.StringBuilder$append$java.lang.String_$exception: ref;

var Output_of_fixed.java.lang.StringBuilder$append$java.lang.String_$exception: ref;

var Output_of_unsafe.java.lang.StringBuilder$append$java.lang.String_fixed.$objIndex: int;

var Output_of_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$objIndex: int;

var Output_of_unsafe.java.lang.StringBuilder$append$java.lang.String_fixed.$heap: $heap_type;

var Output_of_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$heap: $heap_type;

var Output_of_unsafe.java.lang.StringBuilder$append$java.lang.String_fixed.$arrSizeHeap: [ref]int;

var Output_of_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$arrSizeHeap: [ref]int;

var Output_of_unsafe.java.lang.StringBuilder$append$java.lang.String_fixed.$intArrHeap: intArrHeap_type;

var Output_of_fixed.java.lang.StringBuilder$append$java.lang.String_fixed.$intArrHeap: intArrHeap_type;

function _uf_fixed.java.lang.StringBuilder$toString$_$return(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : ref;

function _uf_fixed.java.lang.StringBuilder$toString$_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : ref;

function _uf_fixed.java.lang.StringBuilder$toString$_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : int;

function _uf_fixed.java.lang.StringBuilder$toString$_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : $heap_type;

function _uf_fixed.java.lang.StringBuilder$toString$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : [ref]int;

function _uf_fixed.java.lang.StringBuilder$toString$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : intArrHeap_type;

function _uf_unsafe.java.lang.StringBuilder$toString$_$return(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : ref;

function _uf_unsafe.java.lang.StringBuilder$toString$_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : ref;

function _uf_unsafe.java.lang.StringBuilder$toString$_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : int;

function _uf_unsafe.java.lang.StringBuilder$toString$_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : $heap_type;

function _uf_unsafe.java.lang.StringBuilder$toString$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : [ref]int;

function _uf_unsafe.java.lang.StringBuilder$toString$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: intArrHeap_type, 
    arg_7: javaType, 
    arg_8: Field ref)
   : intArrHeap_type;

var Output_of_unsafe.java.lang.StringBuilder$toString$_$return: ref;

var Output_of_fixed.java.lang.StringBuilder$toString$_$return: ref;

var Output_of_unsafe.java.lang.StringBuilder$toString$_$exception: ref;

var Output_of_fixed.java.lang.StringBuilder$toString$_$exception: ref;

var Output_of_unsafe.java.lang.StringBuilder$toString$_fixed.$objIndex: int;

var Output_of_fixed.java.lang.StringBuilder$toString$_fixed.$objIndex: int;

var Output_of_unsafe.java.lang.StringBuilder$toString$_fixed.$heap: $heap_type;

var Output_of_fixed.java.lang.StringBuilder$toString$_fixed.$heap: $heap_type;

var Output_of_unsafe.java.lang.StringBuilder$toString$_fixed.$arrSizeHeap: [ref]int;

var Output_of_fixed.java.lang.StringBuilder$toString$_fixed.$arrSizeHeap: [ref]int;

var Output_of_unsafe.java.lang.StringBuilder$toString$_fixed.$intArrHeap: intArrHeap_type;

var Output_of_fixed.java.lang.StringBuilder$toString$_fixed.$intArrHeap: intArrHeap_type;

function _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : ref;

function _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : int;

function _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : $heap_type;

function _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : [ref]int;

function _uf_fixed.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : intArrHeap_type;

function _uf_unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : ref;

function _uf_unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : int;

function _uf_unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : $heap_type;

function _uf_unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : [ref]int;

function _uf_unsafe.java.lang.String$$la$init$ra$$char$lp$$rp$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : intArrHeap_type;

function _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : ref;

function _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : int;

function _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : $heap_type;

function _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : [ref]int;

function _uf_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : intArrHeap_type;

function _uf_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : ref;

function _uf_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : int;

function _uf_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : $heap_type;

function _uf_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : [ref]int;

function _uf_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type)
   : intArrHeap_type;

var Output_of_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_$exception: ref;

var Output_of_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_$exception: ref;

var Output_of_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$objIndex: int;

var Output_of_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$objIndex: int;

var Output_of_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$heap: $heap_type;

var Output_of_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$heap: $heap_type;

var Output_of_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$arrSizeHeap: [ref]int;

var Output_of_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$arrSizeHeap: [ref]int;

var Output_of_unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$intArrHeap: intArrHeap_type;

var Output_of_fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$_fixed.$intArrHeap: intArrHeap_type;

function _uf_fixed.java.lang.String$charAt$int_$return(arg_0: ref, 
    arg_1: int, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: intArrHeap_type)
   : int;

function _uf_fixed.java.lang.String$charAt$int_$exception(arg_0: ref, 
    arg_1: int, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: intArrHeap_type)
   : ref;

function _uf_fixed.java.lang.String$charAt$int_fixed.$objIndex(arg_0: ref, 
    arg_1: int, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: intArrHeap_type)
   : int;

function _uf_fixed.java.lang.String$charAt$int_fixed.$heap(arg_0: ref, 
    arg_1: int, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: intArrHeap_type)
   : $heap_type;

function _uf_unsafe.java.lang.String$charAt$int_$return(arg_0: ref, 
    arg_1: int, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: intArrHeap_type)
   : int;

function _uf_unsafe.java.lang.String$charAt$int_$exception(arg_0: ref, 
    arg_1: int, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: intArrHeap_type)
   : ref;

function _uf_unsafe.java.lang.String$charAt$int_fixed.$objIndex(arg_0: ref, 
    arg_1: int, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: intArrHeap_type)
   : int;

function _uf_unsafe.java.lang.String$charAt$int_fixed.$heap(arg_0: ref, 
    arg_1: int, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int, 
    arg_7: intArrHeap_type)
   : $heap_type;

var Output_of_unsafe.java.lang.String$charAt$int_$return: int;

var Output_of_fixed.java.lang.String$charAt$int_$return: int;

var Output_of_unsafe.java.lang.String$charAt$int_$exception: ref;

var Output_of_fixed.java.lang.String$charAt$int_$exception: ref;

var Output_of_unsafe.java.lang.String$charAt$int_fixed.$objIndex: int;

var Output_of_fixed.java.lang.String$charAt$int_fixed.$objIndex: int;

var Output_of_unsafe.java.lang.String$charAt$int_fixed.$heap: $heap_type;

var Output_of_fixed.java.lang.String$charAt$int_fixed.$heap: $heap_type;

function _uf_fixed.java.lang.String$getBytes$java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : ref;

function _uf_fixed.java.lang.String$getBytes$java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : ref;

function _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : int;

function _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : $heap_type;

function _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : [ref]int;

function _uf_fixed.java.lang.String$getBytes$java.lang.String_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : intArrHeap_type;

function _uf_unsafe.java.lang.String$getBytes$java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : ref;

function _uf_unsafe.java.lang.String$getBytes$java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : ref;

function _uf_unsafe.java.lang.String$getBytes$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : int;

function _uf_unsafe.java.lang.String$getBytes$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : $heap_type;

function _uf_unsafe.java.lang.String$getBytes$java.lang.String_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : [ref]int;

function _uf_unsafe.java.lang.String$getBytes$java.lang.String_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type, 
    arg_7: Field ref, 
    arg_8: javaType)
   : intArrHeap_type;

function _uf_fixed.java.lang.String$getBytes$_$return(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : ref;

function _uf_fixed.java.lang.String$getBytes$_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : ref;

function _uf_fixed.java.lang.String$getBytes$_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : int;

function _uf_fixed.java.lang.String$getBytes$_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : $heap_type;

function _uf_fixed.java.lang.String$getBytes$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : [ref]int;

function _uf_fixed.java.lang.String$getBytes$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : intArrHeap_type;

function _uf_unsafe.java.lang.String$getBytes$_$return(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : ref;

function _uf_unsafe.java.lang.String$getBytes$_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : ref;

function _uf_unsafe.java.lang.String$getBytes$_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : int;

function _uf_unsafe.java.lang.String$getBytes$_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : $heap_type;

function _uf_unsafe.java.lang.String$getBytes$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : [ref]int;

function _uf_unsafe.java.lang.String$getBytes$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: Field ref, 
    arg_5: int, 
    arg_6: javaType, 
    arg_7: intArrHeap_type)
   : intArrHeap_type;

function _uf_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

var Output_of_unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return: ref;

var Output_of_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return: ref;

var Output_of_unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception: ref;

var Output_of_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception: ref;

procedure PROC_.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_EQ_unsafe__xx__fixed($in_parameter__0: ref, $in_parameter__1: ref)
   returns (AA_TEMP380: bool, AA_TEMP381: bool);
  modifies Output_of_unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return, Output_of_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return, Output_of_unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception, Output_of_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception;
  ensures AA_TEMP381 && AA_TEMP380;



implementation PROC_.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_EQ_unsafe__xx__fixed($in_parameter__0: ref, $in_parameter__1: ref)
   returns (AA_TEMP380: bool, AA_TEMP381: bool)
{
  var AA_TEMP370: ref;
  var AA_TEMP371: ref;
  var $return: ref;
  var $exception: ref;
  var inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r0: ref;
  var inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r1: ref;
  var inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__0: ref;
  var inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__1: ref;
  var inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return: ref;
  var inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$exception: ref;
  var inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r0: ref;
  var inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r1: ref;
  var inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__0: ref;
  var inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__1: ref;
  var inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return: ref;
  var inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$exception: ref;

  AA_INSTR_EQ_BODY:
    goto inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$Entry;

  inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$Entry:
    inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__0 := $in_parameter__0;
    inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__1 := $in_parameter__1;
    havoc inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r0, inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r1, inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return, inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$exception;
    goto inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$anon0;

  inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return, fixed.$type]
   <: fixed.java.lang.String;
    assume fixed.$heap[inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r0 := inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r1 := inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "String.java", 39, -1, -1, -1} true;
    inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return := inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r0;
    goto inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$block36;

  inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$block36:
    goto inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$Return;

  inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$Return:
    assume true;
    assume true;
    $return := inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return;
    $exception := inline$unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$exception;
    goto AA_INSTR_EQ_BODY$1;

  AA_INSTR_EQ_BODY$1:
    AA_TEMP370 := $return;
    AA_TEMP371 := $exception;
    goto inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$Entry;

  inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$Entry:
    inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__0 := $in_parameter__0;
    inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__1 := $in_parameter__1;
    havoc inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r0, inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r1, inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return, inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$exception;
    goto inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$anon0;

  inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    assume fixed.$heap[inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return, fixed.$type]
   <: fixed.java.lang.String;
    inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r0 := inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r1 := inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "String.java", 39, -1, -1, -1} true;
    inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return := inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$r0;
    goto inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$block35;

  inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$block35:
    goto inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$Return;

  inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$Return:
    assume true;
    assume true;
    $return := inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$return;
    $exception := inline$fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$$0$$exception;
    goto AA_INSTR_EQ_BODY$2;

  AA_INSTR_EQ_BODY$2:
    Output_of_unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return := AA_TEMP370;
    Output_of_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$return := $return;
    Output_of_unsafe.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception := AA_TEMP371;
    Output_of_fixed.java.lang.String$format$java.lang.String_java.lang.Object$lp$$rp$_$exception := $exception;
    havoc AA_TEMP380, AA_TEMP381;
    AA_TEMP380, AA_TEMP381 := AA_TEMP380 || AA_TEMP370 == $return, AA_TEMP381 || AA_TEMP371 == $exception;
    return;
}


