(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.PasswordEncoderUtils () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.lang.CharSequence () T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$StringConst0 () T@U)
(declare-fun fixed.java.io.IOException () T@U)
(declare-fun fixed.java.io.UnsupportedEncodingException () T@U)
(declare-fun fixed.$StringConst1 () T@U)
(declare-fun fixed.java.lang.AutoCloseable () T@U)
(declare-fun fixed.java.io.Closeable () T@U)
(declare-fun fixed.java.io.Flushable () T@U)
(declare-fun fixed.java.io.OutputStream () T@U)
(declare-fun fixed.java.io.FilterOutputStream () T@U)
(declare-fun fixed.java.lang.Appendable () T@U)
(declare-fun fixed.java.io.PrintStream () T@U)
(declare-fun fixed.java.lang.StringBuilder () T@U)
(declare-fun fixed.java.lang.String () T@U)
(declare-fun fixed.java.lang.Boolean () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 () T@U)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 () T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap@19 () T@U)
(declare-fun fixed.$heap@9 () T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap@1 () T@U)
(declare-fun fixed.$arrSizeHeap@3 () T@U)
(declare-fun fixed.$intArrHeap@1 () T@U)
(declare-fun fixed.$intArrHeap () T@U)
(declare-fun $in_parameter__0 () T@U)
(declare-fun fixed.$heap@10 () T@U)
(declare-fun call3formal@$obj@0 () T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$heap@16 () T@U)
(declare-fun fixed.$heap@12 () T@U)
(declare-fun call3formal@$obj@0@@0 () T@U)
(declare-fun fixed.$arrSizeHeap@2 () T@U)
(declare-fun fixed.$heap@17 () T@U)
(declare-fun call3formal@$obj@0@@1 () T@U)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1 () T@U)
(declare-fun fixed.$heap@18 () T@U)
(declare-fun call3formal@$obj@0@@2 () T@U)
(declare-fun fixed.$intArrHeap@2 () T@U)
(declare-fun $this () T@U)
(declare-fun fixed.char$lp$$rp$$java.lang.String$chars348 () T@U)
(declare-fun fixed.$heap@13 () T@U)
(declare-fun call3formal@$obj@0@@3 () T@U)
(declare-fun fixed.$heap@14 () T@U)
(declare-fun call3formal@$obj@0@@4 () T@U)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3@2 () T@U)
(declare-fun fixed.$heap@15 () T@U)
(declare-fun call3formal@$obj@0@@5 () T@U)
(declare-fun fixed.$intArrHeap@3 () T@U)
(declare-fun fixed.$heap@11 () T@U)
(declare-fun call3formal@$obj@0@@6 () T@U)
(declare-fun fixed.$intArrayType () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun fixed.$heap@0 () T@U)
(declare-fun call3formal@$obj@0@@7 () T@U)
(declare-fun fixed.$heap@6 () T@U)
(declare-fun fixed.$heap@2 () T@U)
(declare-fun call3formal@$obj@0@@8 () T@U)
(declare-fun fixed.$arrSizeHeap@0 () T@U)
(declare-fun fixed.$heap@7 () T@U)
(declare-fun call3formal@$obj@0@@9 () T@U)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1 () T@U)
(declare-fun fixed.$heap@8 () T@U)
(declare-fun call3formal@$obj@0@@10 () T@U)
(declare-fun fixed.$intArrHeap@0 () T@U)
(declare-fun fixed.$heap@3 () T@U)
(declare-fun call3formal@$obj@0@@11 () T@U)
(declare-fun fixed.$heap@4 () T@U)
(declare-fun call3formal@$obj@0@@12 () T@U)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3@2 () T@U)
(declare-fun fixed.$heap@5 () T@U)
(declare-fun call3formal@$obj@0@@13 () T@U)
(declare-fun fixed.$intArrHeap@4 () T@U)
(declare-fun fixed.$heap@1 () T@U)
(declare-fun call3formal@$obj@0@@14 () T@U)
(declare-fun %lbl%+837751 () Bool)
(declare-fun %lbl%+837740 () Bool)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2@2 () Int)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4@2 () Int)
(declare-fun %lbl%+837741 () Bool)
(declare-fun %lbl%+837769 () Bool)
(declare-fun %lbl%+837765 () Bool)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$b2@1 () Int)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$i4@1 () Int)
(declare-fun %lbl%+837764 () Bool)
(declare-fun %lbl%+837798 () Bool)
(declare-fun %lbl%+837787 () Bool)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2@2 () Int)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4@2 () Int)
(declare-fun %lbl%+837788 () Bool)
(declare-fun %lbl%+837816 () Bool)
(declare-fun %lbl%+837812 () Bool)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$b2@1 () Int)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$i4@1 () Int)
(declare-fun %lbl%+837811 () Bool)
(declare-fun %lbl%+847789 () Bool)
(declare-fun %lbl%@852515 () Bool)
(declare-fun AA_TEMP284@2 () Bool)
(declare-fun AA_TEMP283@2 () Bool)
(declare-fun AA_TEMP282@2 () Bool)
(declare-fun AA_TEMP281@2 () Bool)
(declare-fun AA_TEMP280@2 () Bool)
(declare-fun %lbl%+837819 () Bool)
(declare-fun AA_TEMP280@1 () Bool)
(declare-fun AA_TEMP280@0 () Bool)
(declare-fun AA_TEMP281@1 () Bool)
(declare-fun AA_TEMP281@0 () Bool)
(declare-fun fixed.$objIndex@16 () Int)
(declare-fun AA_TEMP282@1 () Bool)
(declare-fun AA_TEMP282@0 () Bool)
(declare-fun AA_TEMP283@1 () Bool)
(declare-fun AA_TEMP283@0 () Bool)
(declare-fun AA_TEMP284@1 () Bool)
(declare-fun AA_TEMP284@0 () Bool)
(declare-fun %lbl%+837818 () Bool)
(declare-fun %lbl%+837815 () Bool)
(declare-fun fixed.$objIndex@9 () Int)
(declare-fun %lbl%+837814 () Bool)
(declare-fun %lbl%+837813 () Bool)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i1@1 () Int)
(declare-fun %lbl%+837810 () Bool)
(declare-fun fixed.$objIndex@15 () Int)
(declare-fun %lbl%+837809 () Bool)
(declare-fun %lbl%+837808 () Bool)
(declare-fun %lbl%+837807 () Bool)
(declare-fun fixed.$objIndex@14 () Int)
(declare-fun %lbl%+837806 () Bool)
(declare-fun %lbl%+837805 () Bool)
(declare-fun %lbl%+837804 () Bool)
(declare-fun %lbl%+837803 () Bool)
(declare-fun %lbl%+837802 () Bool)
(declare-fun fixed.$objIndex@13 () Int)
(declare-fun %lbl%+837817 () Bool)
(declare-fun %lbl%+837801 () Bool)
(declare-fun %lbl%+837800 () Bool)
(declare-fun %lbl%+837790 () Bool)
(declare-fun fixed.$objIndex@12 () Int)
(declare-fun %lbl%+837789 () Bool)
(declare-fun %lbl%+837791 () Bool)
(declare-fun %lbl%+837793 () Bool)
(declare-fun fixed.$objIndex@11 () Int)
(declare-fun %lbl%+837792 () Bool)
(declare-fun %lbl%+837794 () Bool)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1@2 () Int)
(declare-fun %lbl%+837796 () Bool)
(declare-fun %lbl%+837795 () Bool)
(declare-fun %lbl%+837797 () Bool)
(declare-fun %lbl%+837786 () Bool)
(declare-fun fixed.$objIndex@10 () Int)
(declare-fun %lbl%+837785 () Bool)
(declare-fun %lbl%+837784 () Bool)
(declare-fun %lbl%+837783 () Bool)
(declare-fun %lbl%+837782 () Bool)
(declare-fun %lbl%+837781 () Bool)
(declare-fun inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i0@1 () Int)
(declare-fun fixed.$objIndex () Int)
(declare-fun %lbl%+837780 () Bool)
(declare-fun %lbl%+837779 () Bool)
(declare-fun fixed.$objIndex@8 () Int)
(declare-fun %lbl%+837778 () Bool)
(declare-fun %lbl%+837777 () Bool)
(declare-fun %lbl%+837776 () Bool)
(declare-fun %lbl%+837775 () Bool)
(declare-fun %lbl%+837774 () Bool)
(declare-fun %lbl%+837773 () Bool)
(declare-fun %lbl%+837772 () Bool)
(declare-fun %lbl%+837771 () Bool)
(declare-fun %lbl%+837768 () Bool)
(declare-fun %lbl%+837767 () Bool)
(declare-fun %lbl%+837766 () Bool)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i1@1 () Int)
(declare-fun %lbl%+837763 () Bool)
(declare-fun fixed.$objIndex@1 () Int)
(declare-fun fixed.$objIndex@7 () Int)
(declare-fun %lbl%+837762 () Bool)
(declare-fun %lbl%+837761 () Bool)
(declare-fun %lbl%+837760 () Bool)
(declare-fun fixed.$objIndex@6 () Int)
(declare-fun %lbl%+837759 () Bool)
(declare-fun %lbl%+837758 () Bool)
(declare-fun %lbl%+837757 () Bool)
(declare-fun %lbl%+837756 () Bool)
(declare-fun %lbl%+837755 () Bool)
(declare-fun fixed.$objIndex@5 () Int)
(declare-fun %lbl%+837770 () Bool)
(declare-fun %lbl%+837754 () Bool)
(declare-fun %lbl%+837753 () Bool)
(declare-fun %lbl%+837743 () Bool)
(declare-fun fixed.$objIndex@4 () Int)
(declare-fun %lbl%+837742 () Bool)
(declare-fun %lbl%+837744 () Bool)
(declare-fun %lbl%+837746 () Bool)
(declare-fun fixed.$objIndex@3 () Int)
(declare-fun %lbl%+837745 () Bool)
(declare-fun %lbl%+837747 () Bool)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1@2 () Int)
(declare-fun %lbl%+837749 () Bool)
(declare-fun %lbl%+837748 () Bool)
(declare-fun %lbl%+837750 () Bool)
(declare-fun %lbl%+837739 () Bool)
(declare-fun fixed.$objIndex@2 () Int)
(declare-fun %lbl%+837738 () Bool)
(declare-fun %lbl%+837737 () Bool)
(declare-fun %lbl%+837736 () Bool)
(declare-fun %lbl%+837735 () Bool)
(declare-fun %lbl%+837734 () Bool)
(declare-fun inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i0@1 () Int)
(declare-fun %lbl%+837733 () Bool)
(declare-fun %lbl%+837732 () Bool)
(declare-fun fixed.$objIndex@0 () Int)
(declare-fun %lbl%+837731 () Bool)
(declare-fun %lbl%+837730 () Bool)
(declare-fun %lbl%+837729 () Bool)
(declare-fun %lbl%+837728 () Bool)
(declare-fun %lbl%+837727 () Bool)
(declare-fun %lbl%+837726 () Bool)
(declare-fun %lbl%+837725 () Bool)
(declare-fun %lbl%+847787 () Bool)
(declare-fun %lbl%+847803 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.PasswordEncoderUtils) javaTypeType))
(assert (not (= fixed.PasswordEncoderUtils fixed.java.lang.Object)))
(assert (UOrdering2 fixed.PasswordEncoderUtils fixed.java.lang.Object))
(assert (forall ((w@@0 T@U) ) (!  (=> (= (type w@@0) javaTypeType) (=> (and (UOrdering2 fixed.PasswordEncoderUtils w@@0) (UOrdering2 w@@0 fixed.java.lang.Object)) (or (= fixed.PasswordEncoderUtils w@@0) (= fixed.java.lang.Object w@@0))))
 :pattern ( (UOrdering2 fixed.PasswordEncoderUtils w@@0) (UOrdering2 w@@0 fixed.java.lang.Object))
)))
(assert (forall ((w@@1 T@U) ) (!  (=> (and (= (type w@@1) javaTypeType) (UOrdering2 fixed.PasswordEncoderUtils w@@1)) (or (= fixed.PasswordEncoderUtils w@@1) (UOrdering2 fixed.java.lang.Object w@@1)))
 :pattern ( (UOrdering2 fixed.PasswordEncoderUtils w@@1))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (and (= (type w@@2) javaTypeType) (UOrdering2 w@@2 fixed.PasswordEncoderUtils)) (= (oneStep fixed.java.lang.Object w@@2) fixed.PasswordEncoderUtils))
 :pattern ( (UOrdering2 w@@2 fixed.PasswordEncoderUtils))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@3 T@U) ) (!  (=> (and (= (type w@@3) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@3)) (= fixed.java.io.Serializable w@@3))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@3))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@4)) (= fixed.java.lang.Comparable w@@4))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@4))
)))
(assert (= (type fixed.java.lang.CharSequence) javaTypeType))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) javaTypeType) (UOrdering2 fixed.java.lang.CharSequence w@@5)) (= fixed.java.lang.CharSequence w@@5))
 :pattern ( (UOrdering2 fixed.java.lang.CharSequence w@@5))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@6 T@U) ) (!  (=> (= (type w@@6) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@6) (UOrdering2 w@@6 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@6) (= fixed.java.lang.Object w@@6))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@6) (UOrdering2 w@@6 fixed.java.lang.Object))
)))
(assert (forall ((w@@7 T@U) ) (!  (=> (= (type w@@7) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@7) (= fixed.java.io.Serializable w@@7))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.io.Serializable))
)))
(assert (forall ((w@@8 T@U) ) (!  (=> (and (= (type w@@8) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@8)) (or (or (= fixed.java.lang.Throwable w@@8) (UOrdering2 fixed.java.lang.Object w@@8)) (UOrdering2 fixed.java.io.Serializable w@@8)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@8))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (and (= (type w@@9) javaTypeType) (UOrdering2 w@@9 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@9) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@9 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@10 T@U) ) (!  (=> (= (type w@@10) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@10) (UOrdering2 w@@10 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@10) (= fixed.java.lang.Throwable w@@10))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@10) (UOrdering2 w@@10 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@11 T@U) ) (!  (=> (and (= (type w@@11) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@11)) (or (= fixed.java.lang.Exception w@@11) (UOrdering2 fixed.java.lang.Throwable w@@11)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@11))
)))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 w@@12 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@12) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@12 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@13 T@U) ) (!  (=> (= (type w@@13) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@13) (UOrdering2 w@@13 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@13) (= fixed.java.lang.Exception w@@13))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@13) (UOrdering2 w@@13 fixed.java.lang.Exception))
)))
(assert (forall ((w@@14 T@U) ) (!  (=> (and (= (type w@@14) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@14)) (or (= fixed.java.lang.RuntimeException w@@14) (UOrdering2 fixed.java.lang.Exception w@@14)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@14))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (and (= (type w@@15) javaTypeType) (UOrdering2 w@@15 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@15) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@15 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@16 T@U) ) (!  (=> (= (type w@@16) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@16) (UOrdering2 w@@16 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@16) (= fixed.java.lang.RuntimeException w@@16))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@16) (UOrdering2 w@@16 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@17 T@U) ) (!  (=> (and (= (type w@@17) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@17)) (or (= fixed.java.lang.NullPointerException w@@17) (UOrdering2 fixed.java.lang.RuntimeException w@@17)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@17))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (and (= (type w@@18) javaTypeType) (UOrdering2 w@@18 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@18) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@18 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@19 T@U) ) (!  (=> (= (type w@@19) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@19) (UOrdering2 w@@19 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@19) (= fixed.java.lang.Object w@@19))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@19) (UOrdering2 w@@19 fixed.java.lang.Object))
)))
(assert (forall ((w@@20 T@U) ) (!  (=> (and (= (type w@@20) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@20)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@20) (UOrdering2 fixed.java.lang.Object w@@20)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@20))
)))
(assert (forall ((w@@21 T@U) ) (!  (=> (and (= (type w@@21) javaTypeType) (UOrdering2 w@@21 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@21) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@21 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@22 T@U) ) (!  (=> (= (type w@@22) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@22) (UOrdering2 w@@22 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@22) (= fixed.java.lang.RuntimeException w@@22))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@22) (UOrdering2 w@@22 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@23 T@U) ) (!  (=> (and (= (type w@@23) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@23)) (or (= fixed.java.lang.ClassCastException w@@23) (UOrdering2 fixed.java.lang.RuntimeException w@@23)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@23))
)))
(assert (forall ((w@@24 T@U) ) (!  (=> (and (= (type w@@24) javaTypeType) (UOrdering2 w@@24 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@24) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@24 fixed.java.lang.ClassCastException))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@25 T@U) ) (!  (=> (= (type w@@25) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@25) (UOrdering2 w@@25 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@25) (= fixed.java.lang.RuntimeException w@@25))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@25) (UOrdering2 w@@25 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@26 T@U) ) (!  (=> (and (= (type w@@26) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@26)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@26) (UOrdering2 fixed.java.lang.RuntimeException w@@26)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@26))
)))
(assert (forall ((w@@27 T@U) ) (!  (=> (and (= (type w@@27) javaTypeType) (UOrdering2 w@@27 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@27) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@27 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@28 T@U) ) (!  (=> (= (type w@@28) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@28) (UOrdering2 w@@28 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@28) (= fixed.java.lang.IndexOutOfBoundsException w@@28))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@28) (UOrdering2 w@@28 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@29 T@U) ) (!  (=> (and (= (type w@@29) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@29)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@29) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@29)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@29))
)))
(assert (forall ((w@@30 T@U) ) (!  (=> (and (= (type w@@30) javaTypeType) (UOrdering2 w@@30 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@30) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@30 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert  (and (= (Ctor refType) 4) (= (type fixed.$StringConst0) refType)))
(assert (forall ((w@@31 T@U) ) (!  (=> (and (= (type w@@31) refType) (UOrdering2 fixed.$StringConst0 w@@31)) (= fixed.$StringConst0 w@@31))
 :pattern ( (UOrdering2 fixed.$StringConst0 w@@31))
)))
(assert (= (type fixed.java.io.IOException) javaTypeType))
(assert (not (= fixed.java.io.IOException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.io.IOException fixed.java.lang.Exception))
(assert (forall ((w@@32 T@U) ) (!  (=> (= (type w@@32) javaTypeType) (=> (and (UOrdering2 fixed.java.io.IOException w@@32) (UOrdering2 w@@32 fixed.java.lang.Exception)) (or (= fixed.java.io.IOException w@@32) (= fixed.java.lang.Exception w@@32))))
 :pattern ( (UOrdering2 fixed.java.io.IOException w@@32) (UOrdering2 w@@32 fixed.java.lang.Exception))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 fixed.java.io.IOException w@@33)) (or (= fixed.java.io.IOException w@@33) (UOrdering2 fixed.java.lang.Exception w@@33)))
 :pattern ( (UOrdering2 fixed.java.io.IOException w@@33))
)))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 w@@34 fixed.java.io.IOException)) (= (oneStep fixed.java.lang.Exception w@@34) fixed.java.io.IOException))
 :pattern ( (UOrdering2 w@@34 fixed.java.io.IOException))
)))
(assert (= (type fixed.java.io.UnsupportedEncodingException) javaTypeType))
(assert (not (= fixed.java.io.UnsupportedEncodingException fixed.java.io.IOException)))
(assert (UOrdering2 fixed.java.io.UnsupportedEncodingException fixed.java.io.IOException))
(assert (forall ((w@@35 T@U) ) (!  (=> (= (type w@@35) javaTypeType) (=> (and (UOrdering2 fixed.java.io.UnsupportedEncodingException w@@35) (UOrdering2 w@@35 fixed.java.io.IOException)) (or (= fixed.java.io.UnsupportedEncodingException w@@35) (= fixed.java.io.IOException w@@35))))
 :pattern ( (UOrdering2 fixed.java.io.UnsupportedEncodingException w@@35) (UOrdering2 w@@35 fixed.java.io.IOException))
)))
(assert (forall ((w@@36 T@U) ) (!  (=> (and (= (type w@@36) javaTypeType) (UOrdering2 fixed.java.io.UnsupportedEncodingException w@@36)) (or (= fixed.java.io.UnsupportedEncodingException w@@36) (UOrdering2 fixed.java.io.IOException w@@36)))
 :pattern ( (UOrdering2 fixed.java.io.UnsupportedEncodingException w@@36))
)))
(assert (forall ((w@@37 T@U) ) (!  (=> (and (= (type w@@37) javaTypeType) (UOrdering2 w@@37 fixed.java.io.UnsupportedEncodingException)) (= (oneStep fixed.java.io.IOException w@@37) fixed.java.io.UnsupportedEncodingException))
 :pattern ( (UOrdering2 w@@37 fixed.java.io.UnsupportedEncodingException))
)))
(assert (= (type fixed.$StringConst1) refType))
(assert (forall ((w@@38 T@U) ) (!  (=> (and (= (type w@@38) refType) (UOrdering2 fixed.$StringConst1 w@@38)) (= fixed.$StringConst1 w@@38))
 :pattern ( (UOrdering2 fixed.$StringConst1 w@@38))
)))
(assert (= (type fixed.java.lang.AutoCloseable) javaTypeType))
(assert (forall ((w@@39 T@U) ) (!  (=> (and (= (type w@@39) javaTypeType) (UOrdering2 fixed.java.lang.AutoCloseable w@@39)) (= fixed.java.lang.AutoCloseable w@@39))
 :pattern ( (UOrdering2 fixed.java.lang.AutoCloseable w@@39))
)))
(assert (= (type fixed.java.io.Closeable) javaTypeType))
(assert (not (= fixed.java.io.Closeable fixed.java.lang.AutoCloseable)))
(assert (UOrdering2 fixed.java.io.Closeable fixed.java.lang.AutoCloseable))
(assert (forall ((w@@40 T@U) ) (!  (=> (= (type w@@40) javaTypeType) (=> (and (UOrdering2 fixed.java.io.Closeable w@@40) (UOrdering2 w@@40 fixed.java.lang.AutoCloseable)) (or (= fixed.java.io.Closeable w@@40) (= fixed.java.lang.AutoCloseable w@@40))))
 :pattern ( (UOrdering2 fixed.java.io.Closeable w@@40) (UOrdering2 w@@40 fixed.java.lang.AutoCloseable))
)))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 fixed.java.io.Closeable w@@41)) (or (= fixed.java.io.Closeable w@@41) (UOrdering2 fixed.java.lang.AutoCloseable w@@41)))
 :pattern ( (UOrdering2 fixed.java.io.Closeable w@@41))
)))
(assert (= (type fixed.java.io.Flushable) javaTypeType))
(assert (forall ((w@@42 T@U) ) (!  (=> (and (= (type w@@42) javaTypeType) (UOrdering2 fixed.java.io.Flushable w@@42)) (= fixed.java.io.Flushable w@@42))
 :pattern ( (UOrdering2 fixed.java.io.Flushable w@@42))
)))
(assert (= (type fixed.java.io.OutputStream) javaTypeType))
(assert (not (= fixed.java.io.OutputStream fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.lang.Object))
(assert (not (= fixed.java.io.OutputStream fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.io.Closeable))
(assert (not (= fixed.java.io.OutputStream fixed.java.io.Flushable)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.io.Flushable))
(assert (forall ((w@@43 T@U) ) (!  (=> (= (type w@@43) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@43) (UOrdering2 w@@43 fixed.java.lang.Object)) (or (= fixed.java.io.OutputStream w@@43) (= fixed.java.lang.Object w@@43))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@43) (UOrdering2 w@@43 fixed.java.lang.Object))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (= (type w@@44) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@44) (UOrdering2 w@@44 fixed.java.io.Closeable)) (or (= fixed.java.io.OutputStream w@@44) (= fixed.java.io.Closeable w@@44))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@44) (UOrdering2 w@@44 fixed.java.io.Closeable))
)))
(assert (forall ((w@@45 T@U) ) (!  (=> (= (type w@@45) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@45) (UOrdering2 w@@45 fixed.java.io.Flushable)) (or (= fixed.java.io.OutputStream w@@45) (= fixed.java.io.Flushable w@@45))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@45) (UOrdering2 w@@45 fixed.java.io.Flushable))
)))
(assert (forall ((w@@46 T@U) ) (!  (=> (and (= (type w@@46) javaTypeType) (UOrdering2 fixed.java.io.OutputStream w@@46)) (or (or (or (= fixed.java.io.OutputStream w@@46) (UOrdering2 fixed.java.lang.Object w@@46)) (UOrdering2 fixed.java.io.Closeable w@@46)) (UOrdering2 fixed.java.io.Flushable w@@46)))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@46))
)))
(assert (forall ((w@@47 T@U) ) (!  (=> (and (= (type w@@47) javaTypeType) (UOrdering2 w@@47 fixed.java.io.OutputStream)) (= (oneStep fixed.java.lang.Object w@@47) fixed.java.io.OutputStream))
 :pattern ( (UOrdering2 w@@47 fixed.java.io.OutputStream))
)))
(assert (= (type fixed.java.io.FilterOutputStream) javaTypeType))
(assert (not (= fixed.java.io.FilterOutputStream fixed.java.io.OutputStream)))
(assert (UOrdering2 fixed.java.io.FilterOutputStream fixed.java.io.OutputStream))
(assert (forall ((w@@48 T@U) ) (!  (=> (= (type w@@48) javaTypeType) (=> (and (UOrdering2 fixed.java.io.FilterOutputStream w@@48) (UOrdering2 w@@48 fixed.java.io.OutputStream)) (or (= fixed.java.io.FilterOutputStream w@@48) (= fixed.java.io.OutputStream w@@48))))
 :pattern ( (UOrdering2 fixed.java.io.FilterOutputStream w@@48) (UOrdering2 w@@48 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@49 T@U) ) (!  (=> (and (= (type w@@49) javaTypeType) (UOrdering2 fixed.java.io.FilterOutputStream w@@49)) (or (= fixed.java.io.FilterOutputStream w@@49) (UOrdering2 fixed.java.io.OutputStream w@@49)))
 :pattern ( (UOrdering2 fixed.java.io.FilterOutputStream w@@49))
)))
(assert (forall ((w@@50 T@U) ) (!  (=> (and (= (type w@@50) javaTypeType) (UOrdering2 w@@50 fixed.java.io.FilterOutputStream)) (= (oneStep fixed.java.io.OutputStream w@@50) fixed.java.io.FilterOutputStream))
 :pattern ( (UOrdering2 w@@50 fixed.java.io.FilterOutputStream))
)))
(assert (= (type fixed.java.lang.Appendable) javaTypeType))
(assert (forall ((w@@51 T@U) ) (!  (=> (and (= (type w@@51) javaTypeType) (UOrdering2 fixed.java.lang.Appendable w@@51)) (= fixed.java.lang.Appendable w@@51))
 :pattern ( (UOrdering2 fixed.java.lang.Appendable w@@51))
)))
(assert (= (type fixed.java.io.PrintStream) javaTypeType))
(assert (not (= fixed.java.io.PrintStream fixed.java.io.FilterOutputStream)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.io.FilterOutputStream))
(assert (not (= fixed.java.io.PrintStream fixed.java.lang.Appendable)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.lang.Appendable))
(assert (not (= fixed.java.io.PrintStream fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.io.Closeable))
(assert (forall ((w@@52 T@U) ) (!  (=> (= (type w@@52) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@52) (UOrdering2 w@@52 fixed.java.io.FilterOutputStream)) (or (= fixed.java.io.PrintStream w@@52) (= fixed.java.io.FilterOutputStream w@@52))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@52) (UOrdering2 w@@52 fixed.java.io.FilterOutputStream))
)))
(assert (forall ((w@@53 T@U) ) (!  (=> (= (type w@@53) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@53) (UOrdering2 w@@53 fixed.java.lang.Appendable)) (or (= fixed.java.io.PrintStream w@@53) (= fixed.java.lang.Appendable w@@53))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@53) (UOrdering2 w@@53 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@54 T@U) ) (!  (=> (= (type w@@54) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@54) (UOrdering2 w@@54 fixed.java.io.Closeable)) (or (= fixed.java.io.PrintStream w@@54) (= fixed.java.io.Closeable w@@54))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@54) (UOrdering2 w@@54 fixed.java.io.Closeable))
)))
(assert (forall ((w@@55 T@U) ) (!  (=> (and (= (type w@@55) javaTypeType) (UOrdering2 fixed.java.io.PrintStream w@@55)) (or (or (or (= fixed.java.io.PrintStream w@@55) (UOrdering2 fixed.java.io.FilterOutputStream w@@55)) (UOrdering2 fixed.java.lang.Appendable w@@55)) (UOrdering2 fixed.java.io.Closeable w@@55)))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@55))
)))
(assert (forall ((w@@56 T@U) ) (!  (=> (and (= (type w@@56) javaTypeType) (UOrdering2 w@@56 fixed.java.io.PrintStream)) (= (oneStep fixed.java.io.FilterOutputStream w@@56) fixed.java.io.PrintStream))
 :pattern ( (UOrdering2 w@@56 fixed.java.io.PrintStream))
)))
(assert (= (type fixed.java.lang.StringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.lang.Object))
(assert (forall ((w@@57 T@U) ) (!  (=> (= (type w@@57) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@57) (UOrdering2 w@@57 fixed.java.lang.Object)) (or (= fixed.java.lang.StringBuilder w@@57) (= fixed.java.lang.Object w@@57))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@57) (UOrdering2 w@@57 fixed.java.lang.Object))
)))
(assert (forall ((w@@58 T@U) ) (!  (=> (and (= (type w@@58) javaTypeType) (UOrdering2 fixed.java.lang.StringBuilder w@@58)) (or (= fixed.java.lang.StringBuilder w@@58) (UOrdering2 fixed.java.lang.Object w@@58)))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@58))
)))
(assert (forall ((w@@59 T@U) ) (!  (=> (and (= (type w@@59) javaTypeType) (UOrdering2 w@@59 fixed.java.lang.StringBuilder)) (= (oneStep fixed.java.lang.Object w@@59) fixed.java.lang.StringBuilder))
 :pattern ( (UOrdering2 w@@59 fixed.java.lang.StringBuilder))
)))
(assert (= (type fixed.java.lang.String) javaTypeType))
(assert (not (= fixed.java.lang.String fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.Object))
(assert (forall ((w@@60 T@U) ) (!  (=> (= (type w@@60) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@60) (UOrdering2 w@@60 fixed.java.lang.Object)) (or (= fixed.java.lang.String w@@60) (= fixed.java.lang.Object w@@60))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@60) (UOrdering2 w@@60 fixed.java.lang.Object))
)))
(assert (forall ((w@@61 T@U) ) (!  (=> (and (= (type w@@61) javaTypeType) (UOrdering2 fixed.java.lang.String w@@61)) (or (= fixed.java.lang.String w@@61) (UOrdering2 fixed.java.lang.Object w@@61)))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@61))
)))
(assert (forall ((w@@62 T@U) ) (!  (=> (and (= (type w@@62) javaTypeType) (UOrdering2 w@@62 fixed.java.lang.String)) (= (oneStep fixed.java.lang.Object w@@62) fixed.java.lang.String))
 :pattern ( (UOrdering2 w@@62 fixed.java.lang.String))
)))
(assert (= (type fixed.java.lang.Boolean) javaTypeType))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Object))
(assert (forall ((w@@63 T@U) ) (!  (=> (= (type w@@63) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@63) (UOrdering2 w@@63 fixed.java.lang.Object)) (or (= fixed.java.lang.Boolean w@@63) (= fixed.java.lang.Object w@@63))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@63) (UOrdering2 w@@63 fixed.java.lang.Object))
)))
(assert (forall ((w@@64 T@U) ) (!  (=> (and (= (type w@@64) javaTypeType) (UOrdering2 fixed.java.lang.Boolean w@@64)) (or (= fixed.java.lang.Boolean w@@64) (UOrdering2 fixed.java.lang.Object w@@64)))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@64))
)))
(assert (forall ((w@@65 T@U) ) (!  (=> (and (= (type w@@65) javaTypeType) (UOrdering2 w@@65 fixed.java.lang.Boolean)) (= (oneStep fixed.java.lang.Object w@@65) fixed.java.lang.Boolean))
 :pattern ( (UOrdering2 w@@65 fixed.java.lang.Boolean))
)))
(assert (forall ((w@@66 T@U) ) (!  (=> (and (= (type w@@66) javaTypeType) (UOrdering2 w@@66 fixed.java.lang.Object)) (or (or (or (or (or (or (or (= fixed.java.lang.Object w@@66) (UOrdering2 w@@66 fixed.PasswordEncoderUtils)) (UOrdering2 w@@66 fixed.java.lang.Throwable)) (UOrdering2 w@@66 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@66 fixed.java.io.OutputStream)) (UOrdering2 w@@66 fixed.java.lang.StringBuilder)) (UOrdering2 w@@66 fixed.java.lang.String)) (UOrdering2 w@@66 fixed.java.lang.Boolean)))
 :pattern ( (UOrdering2 w@@66 fixed.java.lang.Object))
)))
(assert (forall ((w@@67 T@U) ) (!  (=> (and (= (type w@@67) javaTypeType) (UOrdering2 w@@67 fixed.PasswordEncoderUtils)) (= fixed.PasswordEncoderUtils w@@67))
 :pattern ( (UOrdering2 w@@67 fixed.PasswordEncoderUtils))
)))
(assert (forall ((w@@68 T@U) ) (!  (=> (and (= (type w@@68) javaTypeType) (UOrdering2 w@@68 fixed.java.io.Serializable)) (or (= fixed.java.io.Serializable w@@68) (UOrdering2 w@@68 fixed.java.lang.Throwable)))
 :pattern ( (UOrdering2 w@@68 fixed.java.io.Serializable))
)))
(assert (forall ((w@@69 T@U) ) (!  (=> (and (= (type w@@69) javaTypeType) (UOrdering2 w@@69 fixed.java.lang.Comparable)) (= fixed.java.lang.Comparable w@@69))
 :pattern ( (UOrdering2 w@@69 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@70 T@U) ) (!  (=> (and (= (type w@@70) javaTypeType) (UOrdering2 w@@70 fixed.java.lang.CharSequence)) (= fixed.java.lang.CharSequence w@@70))
 :pattern ( (UOrdering2 w@@70 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@71 T@U) ) (!  (=> (and (= (type w@@71) javaTypeType) (UOrdering2 w@@71 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@71) (UOrdering2 w@@71 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@71 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@72 T@U) ) (!  (=> (and (= (type w@@72) javaTypeType) (UOrdering2 w@@72 fixed.java.lang.Exception)) (or (or (= fixed.java.lang.Exception w@@72) (UOrdering2 w@@72 fixed.java.lang.RuntimeException)) (UOrdering2 w@@72 fixed.java.io.IOException)))
 :pattern ( (UOrdering2 w@@72 fixed.java.lang.Exception))
)))
(assert (forall ((w@@73 T@U) ) (!  (=> (and (= (type w@@73) javaTypeType) (UOrdering2 w@@73 fixed.java.lang.RuntimeException)) (or (or (or (= fixed.java.lang.RuntimeException w@@73) (UOrdering2 w@@73 fixed.java.lang.NullPointerException)) (UOrdering2 w@@73 fixed.java.lang.ClassCastException)) (UOrdering2 w@@73 fixed.java.lang.IndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@73 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@74 T@U) ) (!  (=> (and (= (type w@@74) javaTypeType) (UOrdering2 w@@74 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@74))
 :pattern ( (UOrdering2 w@@74 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@75 T@U) ) (!  (=> (and (= (type w@@75) javaTypeType) (UOrdering2 w@@75 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@75))
 :pattern ( (UOrdering2 w@@75 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@76 T@U) ) (!  (=> (and (= (type w@@76) javaTypeType) (UOrdering2 w@@76 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@76))
 :pattern ( (UOrdering2 w@@76 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@77 T@U) ) (!  (=> (and (= (type w@@77) javaTypeType) (UOrdering2 w@@77 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@77) (UOrdering2 w@@77 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@77 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@78 T@U) ) (!  (=> (and (= (type w@@78) javaTypeType) (UOrdering2 w@@78 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@78))
 :pattern ( (UOrdering2 w@@78 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@79 T@U) ) (!  (=> (and (= (type w@@79) refType) (UOrdering2 w@@79 fixed.$StringConst0)) (= fixed.$StringConst0 w@@79))
 :pattern ( (UOrdering2 w@@79 fixed.$StringConst0))
)))
(assert (forall ((w@@80 T@U) ) (!  (=> (and (= (type w@@80) javaTypeType) (UOrdering2 w@@80 fixed.java.io.IOException)) (or (= fixed.java.io.IOException w@@80) (UOrdering2 w@@80 fixed.java.io.UnsupportedEncodingException)))
 :pattern ( (UOrdering2 w@@80 fixed.java.io.IOException))
)))
(assert (forall ((w@@81 T@U) ) (!  (=> (and (= (type w@@81) javaTypeType) (UOrdering2 w@@81 fixed.java.io.UnsupportedEncodingException)) (= fixed.java.io.UnsupportedEncodingException w@@81))
 :pattern ( (UOrdering2 w@@81 fixed.java.io.UnsupportedEncodingException))
)))
(assert (forall ((w@@82 T@U) ) (!  (=> (and (= (type w@@82) refType) (UOrdering2 w@@82 fixed.$StringConst1)) (= fixed.$StringConst1 w@@82))
 :pattern ( (UOrdering2 w@@82 fixed.$StringConst1))
)))
(assert (forall ((w@@83 T@U) ) (!  (=> (and (= (type w@@83) javaTypeType) (UOrdering2 w@@83 fixed.java.lang.AutoCloseable)) (or (= fixed.java.lang.AutoCloseable w@@83) (UOrdering2 w@@83 fixed.java.io.Closeable)))
 :pattern ( (UOrdering2 w@@83 fixed.java.lang.AutoCloseable))
)))
(assert (forall ((w@@84 T@U) ) (!  (=> (and (= (type w@@84) javaTypeType) (UOrdering2 w@@84 fixed.java.io.Closeable)) (or (or (= fixed.java.io.Closeable w@@84) (UOrdering2 w@@84 fixed.java.io.OutputStream)) (UOrdering2 w@@84 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@84 fixed.java.io.Closeable))
)))
(assert (forall ((w@@85 T@U) ) (!  (=> (and (= (type w@@85) javaTypeType) (UOrdering2 w@@85 fixed.java.io.Flushable)) (or (= fixed.java.io.Flushable w@@85) (UOrdering2 w@@85 fixed.java.io.OutputStream)))
 :pattern ( (UOrdering2 w@@85 fixed.java.io.Flushable))
)))
(assert (forall ((w@@86 T@U) ) (!  (=> (and (= (type w@@86) javaTypeType) (UOrdering2 w@@86 fixed.java.io.OutputStream)) (or (= fixed.java.io.OutputStream w@@86) (UOrdering2 w@@86 fixed.java.io.FilterOutputStream)))
 :pattern ( (UOrdering2 w@@86 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@87 T@U) ) (!  (=> (and (= (type w@@87) javaTypeType) (UOrdering2 w@@87 fixed.java.io.FilterOutputStream)) (or (= fixed.java.io.FilterOutputStream w@@87) (UOrdering2 w@@87 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@87 fixed.java.io.FilterOutputStream))
)))
(assert (forall ((w@@88 T@U) ) (!  (=> (and (= (type w@@88) javaTypeType) (UOrdering2 w@@88 fixed.java.lang.Appendable)) (or (= fixed.java.lang.Appendable w@@88) (UOrdering2 w@@88 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@88 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@89 T@U) ) (!  (=> (and (= (type w@@89) javaTypeType) (UOrdering2 w@@89 fixed.java.io.PrintStream)) (= fixed.java.io.PrintStream w@@89))
 :pattern ( (UOrdering2 w@@89 fixed.java.io.PrintStream))
)))
(assert (forall ((w@@90 T@U) ) (!  (=> (and (= (type w@@90) javaTypeType) (UOrdering2 w@@90 fixed.java.lang.StringBuilder)) (= fixed.java.lang.StringBuilder w@@90))
 :pattern ( (UOrdering2 w@@90 fixed.java.lang.StringBuilder))
)))
(assert (forall ((w@@91 T@U) ) (!  (=> (and (= (type w@@91) javaTypeType) (UOrdering2 w@@91 fixed.java.lang.String)) (= fixed.java.lang.String w@@91))
 :pattern ( (UOrdering2 w@@91 fixed.java.lang.String))
)))
(assert (forall ((w@@92 T@U) ) (!  (=> (and (= (type w@@92) javaTypeType) (UOrdering2 w@@92 fixed.java.lang.Boolean)) (= fixed.java.lang.Boolean w@@92))
 :pattern ( (UOrdering2 w@@92 fixed.java.lang.Boolean))
)))
(assert  (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 5)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.PasswordEncoderUtils fixed.java.io.Serializable fixed.java.lang.Comparable fixed.java.lang.CharSequence fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.lang.NullPointerException fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.ClassCastException fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.$StringConst0 fixed.java.io.IOException fixed.java.io.UnsupportedEncodingException fixed.$StringConst1 fixed.java.lang.AutoCloseable fixed.java.io.Closeable fixed.java.io.Flushable fixed.java.io.OutputStream fixed.java.io.FilterOutputStream fixed.java.lang.Appendable fixed.java.io.PrintStream fixed.java.lang.StringBuilder fixed.java.lang.String fixed.java.lang.Boolean)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCja.133:15|
 :skolemid |2368|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCja.137:15|
 :skolemid |2369|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCja.141:15|
 :skolemid |2370|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCja.145:15|
 :skolemid |2371|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCja.149:15|
 :skolemid |2372|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCja.153:15|
 :skolemid |2373|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCja.155:15|
 :skolemid |2374|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCja.9857:15|
 :skolemid |2576|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCja.9861:15|
 :skolemid |2577|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCja.9865:15|
 :skolemid |2578|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCja.9869:15|
 :skolemid |2579|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCja.9873:15|
 :skolemid |2580|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCja.9877:15|
 :skolemid |2581|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCja.9879:15|
 :skolemid |2582|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1) refType) (= (type inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1) refType)) (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
))) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap@19) (MapType0Type refType))) (= (type fixed.$heap@9) (MapType0Type refType))) (= (type fixed.$heap) (MapType0Type refType))) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap@1) (MapType1Type refType intType))) (= (type fixed.$arrSizeHeap@3) (MapType1Type refType intType))) (= (type fixed.$intArrHeap@1) (MapType1Type refType (MapType1Type intType intType)))) (= (type fixed.$intArrHeap) (MapType1Type refType (MapType1Type intType intType)))) (= (type $in_parameter__0) refType)) (= (type fixed.$heap@10) (MapType0Type refType))) (= (type call3formal@$obj@0) refType)) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$heap@16) (MapType0Type refType))) (= (type fixed.$heap@12) (MapType0Type refType))) (= (type call3formal@$obj@0@@0) refType)) (= (type fixed.$arrSizeHeap@2) (MapType1Type refType intType))) (= (type fixed.$heap@17) (MapType0Type refType))) (= (type call3formal@$obj@0@@1) refType)) (= (type inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1) refType)) (= (type fixed.$heap@18) (MapType0Type refType))) (= (type call3formal@$obj@0@@2) refType)) (= (type fixed.$intArrHeap@2) (MapType1Type refType (MapType1Type intType intType)))) (= (type $this) refType)) (= (type fixed.char$lp$$rp$$java.lang.String$chars348) (FieldType refType))) (= (type fixed.$heap@13) (MapType0Type refType))) (= (type call3formal@$obj@0@@3) refType)) (= (type fixed.$heap@14) (MapType0Type refType))) (= (type call3formal@$obj@0@@4) refType)) (= (type inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3@2) refType)) (= (type fixed.$heap@15) (MapType0Type refType))) (= (type call3formal@$obj@0@@5) refType)) (= (type fixed.$intArrHeap@3) (MapType1Type refType (MapType1Type intType intType)))) (= (type fixed.$heap@11) (MapType0Type refType))) (= (type call3formal@$obj@0@@6) refType)) (= (type fixed.$intArrayType) javaTypeType)) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))) (= (type fixed.$heap@0) (MapType0Type refType))) (= (type call3formal@$obj@0@@7) refType)) (= (type fixed.$heap@6) (MapType0Type refType))) (= (type fixed.$heap@2) (MapType0Type refType))) (= (type call3formal@$obj@0@@8) refType)) (= (type fixed.$arrSizeHeap@0) (MapType1Type refType intType))) (= (type fixed.$heap@7) (MapType0Type refType))) (= (type call3formal@$obj@0@@9) refType)) (= (type inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1) refType)) (= (type fixed.$heap@8) (MapType0Type refType))) (= (type call3formal@$obj@0@@10) refType)) (= (type fixed.$intArrHeap@0) (MapType1Type refType (MapType1Type intType intType)))) (= (type fixed.$heap@3) (MapType0Type refType))) (= (type call3formal@$obj@0@@11) refType)) (= (type fixed.$heap@4) (MapType0Type refType))) (= (type call3formal@$obj@0@@12) refType)) (= (type inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3@2) refType)) (= (type fixed.$heap@5) (MapType0Type refType))) (= (type call3formal@$obj@0@@13) refType)) (= (type fixed.$intArrHeap@4) (MapType1Type refType (MapType1Type intType intType)))) (= (type fixed.$heap@1) (MapType0Type refType))) (= (type call3formal@$obj@0@@14) refType)))
(push 1)
(set-info :boogie-vc-id PROC_.java.lang.String$$la$init$ra$$byte$lp$$rp$_EQ_unsafe__xx__fixed)
(assert (not
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15_dummy_correct  (=> (! (and %lbl%+837751 true) :lblpos +837751) true)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15_correct  (=> (! (and %lbl%+837740 true) :lblpos +837740) (=> (and (= fixed.$intArrHeap@4 (MapType1Store fixed.$intArrHeap inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3@2 (MapType1Store (MapType1Select fixed.$intArrHeap inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3@2) (int_2_U 0) (int_2_U inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2@2)))) (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_i4@2 (+ 0 1))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15_dummy_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Then_correct  (=> (! (and %lbl%+837741 true) :lblpos +837741) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3@2))) (>= 0 0)) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon15_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon15_dummy_correct  (=> (! (and %lbl%+837769 true) :lblpos +837769) true)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon15_correct  (=> (! (and %lbl%+837765 true) :lblpos +837765) (=> (and (= fixed.$intArrHeap@0 (MapType1Store fixed.$intArrHeap inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1 (MapType1Store (MapType1Select fixed.$intArrHeap inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1) (int_2_U 0) (int_2_U inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$b2@1)))) (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$i4@1 (+ 0 1))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon15_dummy_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon20_Then_correct  (=> (! (and %lbl%+837764 true) :lblpos +837764) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1))) (>= 0 0)) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon15_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15_dummy_correct  (=> (! (and %lbl%+837798 true) :lblpos +837798) true)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15_correct  (=> (! (and %lbl%+837787 true) :lblpos +837787) (=> (and (= fixed.$intArrHeap@3 (MapType1Store fixed.$intArrHeap inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3@2 (MapType1Store (MapType1Select fixed.$intArrHeap inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3@2) (int_2_U 0) (int_2_U inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2@2)))) (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_i4@2 (+ 0 1))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15_dummy_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Then_correct  (=> (! (and %lbl%+837788 true) :lblpos +837788) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3@2))) (>= 0 0)) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon15_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon15_dummy_correct  (=> (! (and %lbl%+837816 true) :lblpos +837816) true)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon15_correct  (=> (! (and %lbl%+837812 true) :lblpos +837812) (=> (and (= fixed.$intArrHeap@2 (MapType1Store fixed.$intArrHeap inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1 (MapType1Store (MapType1Select fixed.$intArrHeap inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1) (int_2_U 0) (int_2_U inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$b2@1)))) (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$i4@1 (+ 0 1))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon15_dummy_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon20_Then_correct  (=> (! (and %lbl%+837811 true) :lblpos +837811) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1))) (>= 0 0)) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon15_correct))))
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+847789 true) :lblpos +847789) (! (or %lbl%@852515  (and (and (and (and AA_TEMP284@2 AA_TEMP283@2) AA_TEMP282@2) AA_TEMP281@2) AA_TEMP280@2)) :lblneg @852515))))
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+837819 true) :lblpos +837819) (=> (and (and (and (and (and (and (and (=> AA_TEMP280@1 (or AA_TEMP280@0 (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1))) (=> (or AA_TEMP280@0 (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1)) AA_TEMP280@1)) (and (=> AA_TEMP281@1 (or AA_TEMP281@0 (= fixed.$objIndex@16 fixed.$objIndex@16))) (=> (or AA_TEMP281@0 (= fixed.$objIndex@16 fixed.$objIndex@16)) AA_TEMP281@1))) (and (=> AA_TEMP282@1 (or AA_TEMP282@0 (forall ((r T@U) (f T@U) ) (! (let ((_ty (FieldTypeInv0 (type f))))
 (=> (and (= (type r) refType) (= (type f) (FieldType _ty))) (or (= (MapType0Select fixed.$heap@19 r f) (MapType0Select fixed.$heap@9 r f)) (not (U_2_bool (MapType0Select fixed.$heap r fixed.$alloc))))))
 :qid |RSPROCja.18592:20|
 :skolemid |2667|
 :no-pattern (type r)
 :no-pattern (type f)
 :no-pattern (U_2_int r)
 :no-pattern (U_2_bool r)
 :no-pattern (U_2_int f)
 :no-pattern (U_2_bool f)
)))) (=> (or AA_TEMP282@0 (forall ((r@@0 T@U) (f@@0 T@U) ) (! (let ((_ty@@0 (FieldTypeInv0 (type f@@0))))
 (=> (and (= (type r@@0) refType) (= (type f@@0) (FieldType _ty@@0))) (or (= (MapType0Select fixed.$heap@19 r@@0 f@@0) (MapType0Select fixed.$heap@9 r@@0 f@@0)) (not (U_2_bool (MapType0Select fixed.$heap r@@0 fixed.$alloc))))))
 :qid |RSPROCja.18592:20|
 :skolemid |2667|
 :no-pattern (type r@@0)
 :no-pattern (type f@@0)
 :no-pattern (U_2_int r@@0)
 :no-pattern (U_2_bool r@@0)
 :no-pattern (U_2_int f@@0)
 :no-pattern (U_2_bool f@@0)
))) AA_TEMP282@1))) (and (=> AA_TEMP283@1 (or (or AA_TEMP283@0 (= fixed.$arrSizeHeap@1 fixed.$arrSizeHeap@3)) (forall ((_x0 T@U) ) (!  (=> (= (type _x0) refType) (= (U_2_int (MapType1Select fixed.$arrSizeHeap@1 _x0)) (U_2_int (MapType1Select fixed.$arrSizeHeap@3 _x0))))
 :qid |RSPROCja.18596:15|
 :skolemid |2668|
 :no-pattern (type _x0)
 :no-pattern (U_2_int _x0)
 :no-pattern (U_2_bool _x0)
)))) (=> (or (or AA_TEMP283@0 (= fixed.$arrSizeHeap@1 fixed.$arrSizeHeap@3)) (forall ((_x0@@0 T@U) ) (!  (=> (= (type _x0@@0) refType) (= (U_2_int (MapType1Select fixed.$arrSizeHeap@1 _x0@@0)) (U_2_int (MapType1Select fixed.$arrSizeHeap@3 _x0@@0))))
 :qid |RSPROCja.18596:15|
 :skolemid |2668|
 :no-pattern (type _x0@@0)
 :no-pattern (U_2_int _x0@@0)
 :no-pattern (U_2_bool _x0@@0)
))) AA_TEMP283@1))) (and (=> AA_TEMP284@1 (or AA_TEMP284@0 (= fixed.$intArrHeap@1 fixed.$intArrHeap))) (=> (or AA_TEMP284@0 (= fixed.$intArrHeap@1 fixed.$intArrHeap)) AA_TEMP284@1))) (and (=> AA_TEMP280@2 AA_TEMP280@1) (=> AA_TEMP280@1 AA_TEMP280@2))) (and (and (and (=> AA_TEMP281@2 AA_TEMP281@1) (=> AA_TEMP281@1 AA_TEMP281@2)) (and (=> AA_TEMP282@2 AA_TEMP282@1) (=> AA_TEMP282@1 AA_TEMP282@2))) (and (and (=> AA_TEMP283@2 AA_TEMP283@1) (=> AA_TEMP283@1 AA_TEMP283@2)) (and (=> AA_TEMP284@2 AA_TEMP284@1) (=> AA_TEMP284@1 AA_TEMP284@2))))) GeneratedUnifiedExit_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct  (=> (! (and %lbl%+837818 true) :lblpos +837818) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block29_correct  (=> (! (and %lbl%+837815 true) :lblpos +837815) (=> (and (and (= fixed.$arrSizeHeap@3 fixed.$arrSizeHeap@2) (= fixed.$heap@19 fixed.$heap@12)) (and (= fixed.$objIndex@16 fixed.$objIndex@9) (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 fixed.$null))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block28_correct  (=> (! (and %lbl%+837814 true) :lblpos +837814) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block29_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon18_Then_correct  (=> (! (and %lbl%+837813 true) :lblpos +837813) (=> (>= 0 inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i1@1) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block28_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon20_Else_correct  (=> (! (and %lbl%+837810 true) :lblpos +837810) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1))) (>= 0 0))) (= fixed.$heap@18 (MapType0Store (MapType0Store fixed.$heap@12 call3formal@$obj@0@@2 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@2 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (and (= call3formal@$obj@0@@2 (fixed.$intToRef fixed.$objIndex@9)) (= fixed.$objIndex@15 (+ fixed.$objIndex@9 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@12 call3formal@$obj@0@@2 fixed.$alloc))) (not (= call3formal@$obj@0@@2 fixed.$null)))) (and (and (= fixed.$arrSizeHeap@3 fixed.$arrSizeHeap@2) (= fixed.$heap@19 fixed.$heap@18)) (and (= fixed.$objIndex@16 fixed.$objIndex@15) (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@2)))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon12_correct  (=> (! (and %lbl%+837809 true) :lblpos +837809) (=> (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$b2@1 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__0) (int_2_U 0)))) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon20_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon20_Else_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon19_Then_correct  (=> (! (and %lbl%+837808 true) :lblpos +837808) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 $in_parameter__0))) (>= 0 0)) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon12_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon19_Else_correct  (=> (! (and %lbl%+837807 true) :lblpos +837807) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 $in_parameter__0))) (>= 0 0))) (= fixed.$heap@17 (MapType0Store (MapType0Store fixed.$heap@12 call3formal@$obj@0@@1 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@1 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (and (= call3formal@$obj@0@@1 (fixed.$intToRef fixed.$objIndex@9)) (= fixed.$objIndex@14 (+ fixed.$objIndex@9 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@12 call3formal@$obj@0@@1 fixed.$alloc))) (not (= call3formal@$obj@0@@1 fixed.$null)))) (and (and (= fixed.$arrSizeHeap@3 fixed.$arrSizeHeap@2) (= fixed.$heap@19 fixed.$heap@17)) (and (= fixed.$objIndex@16 fixed.$objIndex@14) (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@1)))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon9_correct  (=> (! (and %lbl%+837806 true) :lblpos +837806) (=> (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1 (MapType0Select fixed.$heap@12 $this fixed.char$lp$$rp$$java.lang.String$chars348)) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon19_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon19_Else_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon18_Else_correct  (=> (! (and %lbl%+837805 true) :lblpos +837805) (=> (> inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i1@1 0) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon9_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon6_correct  (=> (! (and %lbl%+837804 true) :lblpos +837804) (=> (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i1@1 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 $in_parameter__0))) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon18_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon18_Else_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon17_Then_correct  (=> (! (and %lbl%+837803 true) :lblpos +837803) (=> (not (= $in_parameter__0 fixed.$null)) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon6_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon17_Else_correct  (=> (! (and %lbl%+837802 true) :lblpos +837802) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@16 (MapType0Store (MapType0Store fixed.$heap@12 call3formal@$obj@0@@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@0 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (and (= call3formal@$obj@0@@0 (fixed.$intToRef fixed.$objIndex@9)) (= fixed.$objIndex@13 (+ fixed.$objIndex@9 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@12 call3formal@$obj@0@@0 fixed.$alloc))) (not (= call3formal@$obj@0@@0 fixed.$null)))) (and (and (= fixed.$arrSizeHeap@3 fixed.$arrSizeHeap@2) (= fixed.$heap@19 fixed.$heap@16)) (and (= fixed.$objIndex@16 fixed.$objIndex@13) (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@0)))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block27_last_correct  (=> (! (and %lbl%+837817 true) :lblpos +837817) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon17_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon17_Else_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block27$1_correct  (=> (! (and %lbl%+837801 true) :lblpos +837801) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block27_last_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return_correct  (=> (! (and %lbl%+837800 true) :lblpos +837800) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block27$1_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Else_correct  (=> (! (and %lbl%+837790 true) :lblpos +837790) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3@2))) (>= 0 0))) (= fixed.$heap@15 (MapType0Store (MapType0Store fixed.$heap@12 call3formal@$obj@0@@5 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@5 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (= call3formal@$obj@0@@5 (fixed.$intToRef fixed.$objIndex@9)) (= fixed.$objIndex@12 (+ fixed.$objIndex@9 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@12 call3formal@$obj@0@@5 fixed.$alloc))) (not (= call3formal@$obj@0@@5 fixed.$null)))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon12_correct  (=> (! (and %lbl%+837789 true) :lblpos +837789) (=> (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$b2@2 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__0) (int_2_U 0)))) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon20_Else_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Then_correct  (=> (! (and %lbl%+837791 true) :lblpos +837791) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 $in_parameter__0))) (>= 0 0)) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon12_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Else_correct  (=> (! (and %lbl%+837793 true) :lblpos +837793) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 $in_parameter__0))) (>= 0 0))) (= fixed.$heap@14 (MapType0Store (MapType0Store fixed.$heap@12 call3formal@$obj@0@@4 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@4 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (= call3formal@$obj@0@@4 (fixed.$intToRef fixed.$objIndex@9)) (= fixed.$objIndex@11 (+ fixed.$objIndex@9 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@12 call3formal@$obj@0@@4 fixed.$alloc))) (not (= call3formal@$obj@0@@4 fixed.$null)))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon9_correct  (=> (! (and %lbl%+837792 true) :lblpos +837792) (=> (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$r3@2 (MapType0Select fixed.$heap@12 $this fixed.char$lp$$rp$$java.lang.String$chars348)) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon19_Else_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Else_correct  (=> (! (and %lbl%+837794 true) :lblpos +837794) (=> (> inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1@2 0) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon9_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Then_correct  (=> (! (and %lbl%+837796 true) :lblpos +837796) (=> (>= 0 inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1@2) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon6_correct  (=> (! (and %lbl%+837795 true) :lblpos +837795) (=> (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$out_$i1@2 (U_2_int (MapType1Select fixed.$arrSizeHeap@2 $in_parameter__0))) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon18_Else_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Then_correct  (=> (! (and %lbl%+837797 true) :lblpos +837797) (=> (not (= $in_parameter__0 fixed.$null)) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon6_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Else_correct  (=> (! (and %lbl%+837786 true) :lblpos +837786) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@13 (MapType0Store (MapType0Store fixed.$heap@12 call3formal@$obj@0@@3 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@3 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (= call3formal@$obj@0@@3 (fixed.$intToRef fixed.$objIndex@9)) (= fixed.$objIndex@10 (+ fixed.$objIndex@9 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@12 call3formal@$obj@0@@3 fixed.$alloc))) (not (= call3formal@$obj@0@@3 fixed.$null)))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Return_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$block27_correct  (=> (! (and %lbl%+837785 true) :lblpos +837785) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$anon17_Else_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$entry_correct  (=> (! (and %lbl%+837784 true) :lblpos +837784) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$block27_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Entry_correct  (=> (! (and %lbl%+837783 true) :lblpos +837783) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$entry_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block27_correct  (=> (! (and %lbl%+837782 true) :lblpos +837782) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block27$0$Entry_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon3_correct  (=> (! (and %lbl%+837781 true) :lblpos +837781) (=> (and (and (and (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i0@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (= fixed.$heap@11 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@6 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@6 fixed.$type fixed.$intArrayType))) (and (= call3formal@$obj@0@@6 (fixed.$intToRef fixed.$objIndex)) (= fixed.$objIndex@9 (+ fixed.$objIndex 1)))) (and (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@6 fixed.$alloc))) (not (= call3formal@$obj@0@@6 fixed.$null))) (and (= fixed.$arrSizeHeap@2 (MapType1Store fixed.$arrSizeHeap call3formal@$obj@0@@6 (int_2_U inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i0@1))) (= fixed.$heap@12 (MapType0Store fixed.$heap@11 $this fixed.char$lp$$rp$$java.lang.String$chars348 call3formal@$obj@0@@6))))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block27_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon16_Then_correct  (=> (! (and %lbl%+837780 true) :lblpos +837780) (=> (not (= $in_parameter__0 fixed.$null)) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon3_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon16_Else_correct  (=> (! (and %lbl%+837779 true) :lblpos +837779) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@10 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (and (= call3formal@$obj@0 (fixed.$intToRef fixed.$objIndex)) (= fixed.$objIndex@8 (+ fixed.$objIndex 1))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0 fixed.$alloc))) (not (= call3formal@$obj@0 fixed.$null)))) (and (and (= fixed.$arrSizeHeap@3 fixed.$arrSizeHeap) (= fixed.$heap@19 fixed.$heap@10)) (and (= fixed.$objIndex@16 fixed.$objIndex@8) (= inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 call3formal@$obj@0)))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon0$1_correct  (=> (! (and %lbl%+837778 true) :lblpos +837778) (and inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon16_Then_correct inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon16_Else_correct))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+837777 true) :lblpos +837777) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon0$1_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+837776 true) :lblpos +837776) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+837775 true) :lblpos +837775) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon0_correct  (=> (! (and %lbl%+837774 true) :lblpos +837774) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T))
 :qid |RSPROCja.18279:20|
 :skolemid |2664|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCja.18280:20|
 :skolemid |2665|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCja.18281:20|
 :skolemid |2666|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.java.lang.String) (not (= $this fixed.$null)))) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Entry_correct  (=> (! (and %lbl%+837773 true) :lblpos +837773) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+837772 true) :lblpos +837772) inline$fixed.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Entry_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct  (=> (! (and %lbl%+837771 true) :lblpos +837771) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block30_correct  (=> (! (and %lbl%+837768 true) :lblpos +837768) (=> (and (and (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 fixed.$null) (= fixed.$heap@9 fixed.$heap@2)) (and (= fixed.$arrSizeHeap@1 fixed.$arrSizeHeap@0) (= fixed.$intArrHeap@1 fixed.$intArrHeap))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block29_correct  (=> (! (and %lbl%+837767 true) :lblpos +837767) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block30_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon18_Then_correct  (=> (! (and %lbl%+837766 true) :lblpos +837766) (=> (>= 0 inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i1@1) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block29_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon20_Else_correct  (=> (! (and %lbl%+837763 true) :lblpos +837763) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1))) (>= 0 0))) (= fixed.$heap@8 (MapType0Store (MapType0Store fixed.$heap@2 call3formal@$obj@0@@10 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@10 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (and (= call3formal@$obj@0@@10 (fixed.$intToRef fixed.$objIndex@1)) (= fixed.$objIndex@7 (+ fixed.$objIndex@1 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@2 call3formal@$obj@0@@10 fixed.$alloc))) (not (= call3formal@$obj@0@@10 fixed.$null)))) (and (and (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@10) (= fixed.$heap@9 fixed.$heap@8)) (and (= fixed.$arrSizeHeap@1 fixed.$arrSizeHeap@0) (= fixed.$intArrHeap@1 fixed.$intArrHeap)))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon12_correct  (=> (! (and %lbl%+837762 true) :lblpos +837762) (=> (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$b2@1 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__0) (int_2_U 0)))) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon20_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon20_Else_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon19_Then_correct  (=> (! (and %lbl%+837761 true) :lblpos +837761) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 $in_parameter__0))) (>= 0 0)) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon12_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon19_Else_correct  (=> (! (and %lbl%+837760 true) :lblpos +837760) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 $in_parameter__0))) (>= 0 0))) (= fixed.$heap@7 (MapType0Store (MapType0Store fixed.$heap@2 call3formal@$obj@0@@9 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@9 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (and (= call3formal@$obj@0@@9 (fixed.$intToRef fixed.$objIndex@1)) (= fixed.$objIndex@6 (+ fixed.$objIndex@1 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@2 call3formal@$obj@0@@9 fixed.$alloc))) (not (= call3formal@$obj@0@@9 fixed.$null)))) (and (and (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@9) (= fixed.$heap@9 fixed.$heap@7)) (and (= fixed.$arrSizeHeap@1 fixed.$arrSizeHeap@0) (= fixed.$intArrHeap@1 fixed.$intArrHeap)))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon9_correct  (=> (! (and %lbl%+837759 true) :lblpos +837759) (=> (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$r3@1 (MapType0Select fixed.$heap@2 $this fixed.char$lp$$rp$$java.lang.String$chars348)) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon19_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon19_Else_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon18_Else_correct  (=> (! (and %lbl%+837758 true) :lblpos +837758) (=> (> inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i1@1 0) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon9_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon6_correct  (=> (! (and %lbl%+837757 true) :lblpos +837757) (=> (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i1@1 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 $in_parameter__0))) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon18_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon18_Else_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon17_Then_correct  (=> (! (and %lbl%+837756 true) :lblpos +837756) (=> (not (= $in_parameter__0 fixed.$null)) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon6_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon17_Else_correct  (=> (! (and %lbl%+837755 true) :lblpos +837755) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@6 (MapType0Store (MapType0Store fixed.$heap@2 call3formal@$obj@0@@8 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@8 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (and (= call3formal@$obj@0@@8 (fixed.$intToRef fixed.$objIndex@1)) (= fixed.$objIndex@5 (+ fixed.$objIndex@1 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@2 call3formal@$obj@0@@8 fixed.$alloc))) (not (= call3formal@$obj@0@@8 fixed.$null)))) (and (and (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@8) (= fixed.$heap@9 fixed.$heap@6)) (and (= fixed.$arrSizeHeap@1 fixed.$arrSizeHeap@0) (= fixed.$intArrHeap@1 fixed.$intArrHeap)))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block28_last_correct  (=> (! (and %lbl%+837770 true) :lblpos +837770) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon17_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon17_Else_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block28$1_correct  (=> (! (and %lbl%+837754 true) :lblpos +837754) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block28_last_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return_correct  (=> (! (and %lbl%+837753 true) :lblpos +837753) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block28$1_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Else_correct  (=> (! (and %lbl%+837743 true) :lblpos +837743) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3@2))) (>= 0 0))) (= fixed.$heap@5 (MapType0Store (MapType0Store fixed.$heap@2 call3formal@$obj@0@@13 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@13 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (= call3formal@$obj@0@@13 (fixed.$intToRef fixed.$objIndex@1)) (= fixed.$objIndex@4 (+ fixed.$objIndex@1 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@2 call3formal@$obj@0@@13 fixed.$alloc))) (not (= call3formal@$obj@0@@13 fixed.$null)))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon12_correct  (=> (! (and %lbl%+837742 true) :lblpos +837742) (=> (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$b2@2 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__0) (int_2_U 0)))) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon20_Else_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Then_correct  (=> (! (and %lbl%+837744 true) :lblpos +837744) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 $in_parameter__0))) (>= 0 0)) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon12_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Else_correct  (=> (! (and %lbl%+837746 true) :lblpos +837746) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 $in_parameter__0))) (>= 0 0))) (= fixed.$heap@4 (MapType0Store (MapType0Store fixed.$heap@2 call3formal@$obj@0@@12 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@12 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (= call3formal@$obj@0@@12 (fixed.$intToRef fixed.$objIndex@1)) (= fixed.$objIndex@3 (+ fixed.$objIndex@1 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@2 call3formal@$obj@0@@12 fixed.$alloc))) (not (= call3formal@$obj@0@@12 fixed.$null)))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon9_correct  (=> (! (and %lbl%+837745 true) :lblpos +837745) (=> (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$r3@2 (MapType0Select fixed.$heap@2 $this fixed.char$lp$$rp$$java.lang.String$chars348)) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon19_Else_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Else_correct  (=> (! (and %lbl%+837747 true) :lblpos +837747) (=> (> inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1@2 0) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon9_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Then_correct  (=> (! (and %lbl%+837749 true) :lblpos +837749) (=> (>= 0 inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1@2) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon6_correct  (=> (! (and %lbl%+837748 true) :lblpos +837748) (=> (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$out_$i1@2 (U_2_int (MapType1Select fixed.$arrSizeHeap@0 $in_parameter__0))) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon18_Else_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Then_correct  (=> (! (and %lbl%+837750 true) :lblpos +837750) (=> (not (= $in_parameter__0 fixed.$null)) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon6_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Else_correct  (=> (! (and %lbl%+837739 true) :lblpos +837739) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@3 (MapType0Store (MapType0Store fixed.$heap@2 call3formal@$obj@0@@11 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@11 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (= call3formal@$obj@0@@11 (fixed.$intToRef fixed.$objIndex@1)) (= fixed.$objIndex@2 (+ fixed.$objIndex@1 1))) (and (not (U_2_bool (MapType0Select fixed.$heap@2 call3formal@$obj@0@@11 fixed.$alloc))) (not (= call3formal@$obj@0@@11 fixed.$null)))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Return_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$block28_correct  (=> (! (and %lbl%+837738 true) :lblpos +837738) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$anon17_Else_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$entry_correct  (=> (! (and %lbl%+837737 true) :lblpos +837737) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$block28_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Entry_correct  (=> (! (and %lbl%+837736 true) :lblpos +837736) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$entry_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block28_correct  (=> (! (and %lbl%+837735 true) :lblpos +837735) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.String$$la$init$ra$$byte$lp$$rp$_loop_block28$0$Entry_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon3_correct  (=> (! (and %lbl%+837734 true) :lblpos +837734) (=> (and (and (and (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i0@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (= fixed.$heap@1 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@14 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@14 fixed.$type fixed.$intArrayType))) (and (= call3formal@$obj@0@@14 (fixed.$intToRef fixed.$objIndex)) (= fixed.$objIndex@1 (+ fixed.$objIndex 1)))) (and (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@14 fixed.$alloc))) (not (= call3formal@$obj@0@@14 fixed.$null))) (and (= fixed.$arrSizeHeap@0 (MapType1Store fixed.$arrSizeHeap call3formal@$obj@0@@14 (int_2_U inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$i0@1))) (= fixed.$heap@2 (MapType0Store fixed.$heap@1 $this fixed.char$lp$$rp$$java.lang.String$chars348 call3formal@$obj@0@@14))))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$block28_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon16_Then_correct  (=> (! (and %lbl%+837733 true) :lblpos +837733) (=> (not (= $in_parameter__0 fixed.$null)) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon3_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon16_Else_correct  (=> (! (and %lbl%+837732 true) :lblpos +837732) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@0 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@7 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@7 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (and (= call3formal@$obj@0@@7 (fixed.$intToRef fixed.$objIndex)) (= fixed.$objIndex@0 (+ fixed.$objIndex 1))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@7 fixed.$alloc))) (not (= call3formal@$obj@0@@7 fixed.$null)))) (and (and (= inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@7) (= fixed.$heap@9 fixed.$heap@0)) (and (= fixed.$arrSizeHeap@1 fixed.$arrSizeHeap) (= fixed.$intArrHeap@1 fixed.$intArrHeap)))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon0$1_correct  (=> (! (and %lbl%+837731 true) :lblpos +837731) (and inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon16_Then_correct inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon16_Else_correct))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+837730 true) :lblpos +837730) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon0$1_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+837729 true) :lblpos +837729) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+837728 true) :lblpos +837728) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon0_correct  (=> (! (and %lbl%+837727 true) :lblpos +837727) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@0))
 :qid |RSPROCja.17956:20|
 :skolemid |2661|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCja.17957:20|
 :skolemid |2662|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCja.17958:20|
 :skolemid |2663|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.java.lang.String) (not (= $this fixed.$null)))) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Entry_correct  (=> (! (and %lbl%+837726 true) :lblpos +837726) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+837725 true) :lblpos +837725) inline$unsafe.java.lang.String$$la$init$ra$$byte$lp$$rp$$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+847787 true) :lblpos +847787) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+847803 true) :lblpos +847803) q@0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
