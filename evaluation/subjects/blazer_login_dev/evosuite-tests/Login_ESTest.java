/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 12:54:42 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = Login.retrieve("");
      byte[] byteArray1 = new byte[8];
      boolean boolean0 = Login.login_unsafe(byteArray1, byteArray0, "");
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)10, (byte)3, (byte)15, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Login.login_unsafe(byteArray0, (byte[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Login.retrieve("ZwCUb?4F1g/+VK_Vfj'");
      boolean boolean0 = Login.login_unsafe(byteArray1, byteArray0, "'a~l2/2^n-@K");
      assertArrayEquals(new byte[] {(byte)10, (byte)3, (byte)15, (byte)1}, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Login.login_unsafe(byteArray1, byteArray0, "ZwCUb?4F1g/+VK_Vfj'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = Login.login_unsafe((byte[]) null, (byte[]) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Login login0 = new Login();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = Login.retrieve("");
      boolean boolean0 = Login.login_unsafe(byteArray0, byteArray0, "");
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)10, (byte)3, (byte)15, (byte)1}, byteArray0);
  }
}
