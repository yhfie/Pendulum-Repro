/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 13:10:23 GMT 2022
 */

package org.cryptomator.crypto.aes256;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.StringWriter;
import java.nio.channels.FileChannel;
import java.util.Random;
import org.cryptomator.crypto.CryptorIOSupport;
import org.cryptomator.crypto.aes256.Aes256Cryptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Aes256Cryptor_ESTest extends Aes256Cryptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Aes256Cryptor aes256Cryptor0 = new Aes256Cryptor(mockRandom0);
      CryptorIOSupport cryptorIOSupport0 = mock(CryptorIOSupport.class, new ViolatedAssumptionAnswer());
      String string0 = aes256Cryptor0.encryptPath("Di$7B[S", 'd', 'd', cryptorIOSupport0);
      assertEquals("FPSMRVJOWLH5OKMV_2UOYYD2FRZJA====.aes", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Aes256Cryptor aes256Cryptor0 = new Aes256Cryptor(mockRandom0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      try { 
        aes256Cryptor0.decryptMasterKey(byteArrayInputStream0, stringBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.ByteArrayInputStream@0000000018; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Aes256Cryptor aes256Cryptor0 = new Aes256Cryptor(mockRandom0);
      Aes256Cryptor aes256Cryptor1 = new Aes256Cryptor(mockRandom0);
      aes256Cryptor0.addSensitiveDataSwipeListener(aes256Cryptor1);
      aes256Cryptor0.swipeSensitiveDataInternal();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-7);
      byteArray0[8] = (byte) (-34);
      boolean boolean0 = Aes256Cryptor.jdkArraysEquals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte)0;
      Aes256Cryptor.jdkArraysEquals(byteArray0, byteArray0);
      Aes256Cryptor aes256Cryptor0 = new Aes256Cryptor();
      String string0 = "Invalid hard coded configuration.";
      String string1 = "/uz0vVl}c[P";
      MockFile mockFile0 = new MockFile(string1, string1);
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, boolean0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position((long) byteArray0[0]);
      aes256Cryptor0.authenticateContent_unsafe(fileChannel1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Aes256Cryptor aes256Cryptor0 = new Aes256Cryptor(mockRandom0);
      String string0 = "AESWrap";
      CryptorIOSupport cryptorIOSupport0 = mock(CryptorIOSupport.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        aes256Cryptor0.decryptPath("AESWrap", '|', '|', cryptorIOSupport0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported path component: AESWrap
         //
         verifyException("org.cryptomator.crypto.aes256.Aes256Cryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(16L);
      Aes256Cryptor aes256Cryptor0 = new Aes256Cryptor(mockRandom0);
      CryptorIOSupport cryptorIOSupport0 = mock(CryptorIOSupport.class, new ViolatedAssumptionAnswer());
      String string0 = aes256Cryptor0.decryptPath("", 'l', 'l', cryptorIOSupport0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-380L));
      Aes256Cryptor aes256Cryptor0 = new Aes256Cryptor(mockRandom0);
      String string0 = "";
      CryptorIOSupport cryptorIOSupport0 = mock(CryptorIOSupport.class, new ViolatedAssumptionAnswer());
      aes256Cryptor0.decryptPath("", 'F', 'F', cryptorIOSupport0);
      char char0 = 'e';
      char char1 = 'D';
      int int0 = (-630);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Aes256Cryptor aes256Cryptor0 = new Aes256Cryptor();
      aes256Cryptor0.getPayloadFilesFilter();
      aes256Cryptor0.getPayloadFilesFilter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "vv";
      String string1 = "Ke<H";
      MockFile mockFile0 = new MockFile(string1, string1);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, boolean0);
      mockFile1.toPath();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      aes256Cryptor0.decryptedContentLength(fileChannel0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      int int0 = pipedInputStream0.read();
      mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = mockFileInputStream0.getChannel();
      aes256Cryptor0.encryptFile(pipedInputStream0, fileChannel1);
      aes256Cryptor0.decryptMasterKey(pipedInputStream0, string0);
      long long0 = 1L;
      aes256Cryptor0.decryptRange(fileChannel0, mockFileOutputStream0, long0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Aes256Cryptor aes256Cryptor0 = null;
      try {
        aes256Cryptor0 = new Aes256Cryptor((Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cryptomator.crypto.aes256.Aes256Cryptor", e);
      }
  }
}
