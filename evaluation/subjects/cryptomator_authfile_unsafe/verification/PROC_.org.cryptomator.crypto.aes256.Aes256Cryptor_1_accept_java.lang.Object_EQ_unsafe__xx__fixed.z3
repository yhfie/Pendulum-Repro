(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.java.nio.file.DirectoryStream$Filter () T@U)
(declare-fun fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.org.cryptomator.crypto.AbstractCryptor () T@U)
(declare-fun fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration () T@U)
(declare-fun fixed.org.cryptomator.crypto.aes256.FileNamingConventions () T@U)
(declare-fun fixed.org.cryptomator.crypto.aes256.Aes256Cryptor () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.lang.Iterable () T@U)
(declare-fun fixed.java.nio.file.Watchable () T@U)
(declare-fun fixed.java.nio.file.Path () T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.nio.file.PathMatcher () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun fixed.java.io.IOException () T@U)
(declare-fun fixed.com.fasterxml.jackson.databind.ObjectMapper () T@U)
(declare-fun fixed.java.util.Random () T@U)
(declare-fun fixed.java.security.SecureRandom () T@U)
(declare-fun fixed.java.lang.ArithmeticException () T@U)
(declare-fun fixed.java.security.spec.KeySpec () T@U)
(declare-fun fixed.java.security.Key () T@U)
(declare-fun fixed.javax.security.auth.Destroyable () T@U)
(declare-fun fixed.javax.crypto.SecretKey () T@U)
(declare-fun fixed.javax.crypto.spec.SecretKeySpec () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$StringConst0 () T@U)
(declare-fun fixed.java.lang.CharSequence () T@U)
(declare-fun fixed.java.lang.String () T@U)
(declare-fun fixed.$StringConst1 () T@U)
(declare-fun fixed.java.util.Arrays () T@U)
(declare-fun fixed.java.lang.AutoCloseable () T@U)
(declare-fun fixed.java.io.Closeable () T@U)
(declare-fun fixed.java.io.Flushable () T@U)
(declare-fun fixed.java.io.OutputStream () T@U)
(declare-fun fixed.javax.crypto.Cipher () T@U)
(declare-fun fixed.java.security.GeneralSecurityException () T@U)
(declare-fun fixed.java.security.KeyException () T@U)
(declare-fun fixed.java.security.InvalidKeyException () T@U)
(declare-fun fixed.org.cryptomator.crypto.aes256.KeyFile () T@U)
(declare-fun fixed.java.lang.IllegalStateException () T@U)
(declare-fun fixed.$StringConst2 () T@U)
(declare-fun fixed.java.io.InputStream () T@U)
(declare-fun fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile () T@U)
(declare-fun fixed.java.lang.reflect.AnnotatedElement () T@U)
(declare-fun fixed.java.lang.reflect.GenericDeclaration () T@U)
(declare-fun fixed.java.lang.reflect.Type () T@U)
(declare-fun fixed.java.security.NoSuchAlgorithmException () T@U)
(declare-fun fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException () T@U)
(declare-fun fixed.$StringConst3 () T@U)
(declare-fun fixed.org.cryptomator.crypto.exceptions.WrongPasswordException () T@U)
(declare-fun fixed.javax.security.auth.DestroyFailedException () T@U)
(declare-fun fixed.$StringConst4 () T@U)
(declare-fun fixed.javax.crypto.NoSuchPaddingException () T@U)
(declare-fun fixed.java.lang.IllegalArgumentException () T@U)
(declare-fun fixed.$StringConst5 () T@U)
(declare-fun fixed.$StringConst6 () T@U)
(declare-fun fixed.$StringConst7 () T@U)
(declare-fun fixed.java.security.spec.AlgorithmParameterSpec () T@U)
(declare-fun fixed.javax.crypto.spec.IvParameterSpec () T@U)
(declare-fun fixed.java.security.InvalidAlgorithmParameterException () T@U)
(declare-fun fixed.$StringConst8 () T@U)
(declare-fun fixed.$StringConst9 () T@U)
(declare-fun fixed.java.lang.Error () T@U)
(declare-fun fixed.java.lang.AssertionError () T@U)
(declare-fun fixed.$StringConst10 () T@U)
(declare-fun fixed.java.lang.Cloneable () T@U)
(declare-fun fixed.javax.crypto.Mac () T@U)
(declare-fun fixed.$StringConst11 () T@U)
(declare-fun fixed.$StringConst12 () T@U)
(declare-fun fixed.java.lang.Appendable () T@U)
(declare-fun fixed.java.lang.AbstractStringBuilder () T@U)
(declare-fun fixed.java.lang.StringBuilder () T@U)
(declare-fun fixed.org.bouncycastle.crypto.generators.SCrypt () T@U)
(declare-fun fixed.java.util.zip.Checksum () T@U)
(declare-fun fixed.java.util.zip.CRC32 () T@U)
(declare-fun fixed.org.cryptomator.crypto.CryptorIOSupport () T@U)
(declare-fun fixed.org.apache.commons.lang3.StringUtils () T@U)
(declare-fun fixed.javax.crypto.IllegalBlockSizeException () T@U)
(declare-fun fixed.java.util.Collection () T@U)
(declare-fun fixed.java.util.AbstractCollection () T@U)
(declare-fun fixed.java.util.List () T@U)
(declare-fun fixed.java.util.AbstractList () T@U)
(declare-fun fixed.java.util.RandomAccess () T@U)
(declare-fun fixed.java.util.ArrayList () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun fixed.$StringConst13 () T@U)
(declare-fun fixed.org.apache.commons.lang3.ArrayUtils () T@U)
(declare-fun fixed.java.nio.Buffer () T@U)
(declare-fun fixed.java.nio.ByteBuffer () T@U)
(declare-fun fixed.java.nio.charset.Charset () T@U)
(declare-fun fixed.javax.crypto.BadPaddingException () T@U)
(declare-fun fixed.org.apache.commons.codec.binary.BaseNCodec () T@U)
(declare-fun fixed.$StringConst14 () T@U)
(declare-fun fixed.java.lang.Number () T@U)
(declare-fun fixed.java.lang.Long () T@U)
(declare-fun fixed.$StringConst15 () T@U)
(declare-fun fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata () T@U)
(declare-fun fixed.java.util.UUID () T@U)
(declare-fun fixed.$StringConst16 () T@U)
(declare-fun fixed.$StringConst17 () T@U)
(declare-fun fixed.$StringConst18 () T@U)
(declare-fun fixed.$StringConst19 () T@U)
(declare-fun fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata () T@U)
(declare-fun fixed.java.nio.channels.Channel () T@U)
(declare-fun fixed.java.nio.channels.ReadableByteChannel () T@U)
(declare-fun fixed.java.nio.channels.WritableByteChannel () T@U)
(declare-fun fixed.java.nio.channels.ByteChannel () T@U)
(declare-fun fixed.java.nio.channels.SeekableByteChannel () T@U)
(declare-fun fixed.$StringConst20 () T@U)
(declare-fun fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream () T@U)
(declare-fun fixed.org.cryptomator.crypto.aes256.MacInputStream () T@U)
(declare-fun fixed.org.apache.commons.io.output.NullOutputStream () T@U)
(declare-fun fixed.org.apache.commons.io.IOUtils () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.io.FilterInputStream () T@U)
(declare-fun fixed.javax.crypto.CipherInputStream () T@U)
(declare-fun fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream () T@U)
(declare-fun fixed.org.cryptomator.crypto.aes256.MacOutputStream () T@U)
(declare-fun fixed.java.io.FilterOutputStream () T@U)
(declare-fun fixed.javax.crypto.CipherOutputStream () T@U)
(declare-fun fixed.java.lang.Math () T@U)
(declare-fun fixed.$DoubleConst0 () Int)
(declare-fun fixed.$DoubleConst1 () Int)
(declare-fun fixed.$StringConst21 () T@U)
(declare-fun fixed.java.lang.Boolean () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 () T@U)
(declare-fun inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 () T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap@9 () T@U)
(declare-fun fixed.$heap@4 () T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun $in_parameter__0 () T@U)
(declare-fun call3formal@$obj@0 () T@U)
(declare-fun fixed.$heap@5 () T@U)
(declare-fun fixed.$heap@8 () T@U)
(declare-fun inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 () T@U)
(declare-fun fixed.java.nio.file.PathMatcher$org.cryptomator.crypto.aes256.FileNamingConventions$ENCRYPTED_FILE_GLOB_MATCHER463 () T@U)
(declare-fun call3formal@$obj@0@@0 () T@U)
(declare-fun fixed.$heap@6 () T@U)
(declare-fun fixed.$heap@7 () T@U)
(declare-fun call4formal@$exception@0 () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun $this () T@U)
(declare-fun call3formal@$obj@0@@1 () T@U)
(declare-fun fixed.$heap@0 () T@U)
(declare-fun fixed.$heap@3 () T@U)
(declare-fun inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 () T@U)
(declare-fun call3formal@$obj@0@@2 () T@U)
(declare-fun fixed.$heap@1 () T@U)
(declare-fun call4formal@$exception@0@@0 () T@U)
(declare-fun fixed.$heap@2 () T@U)
(declare-fun %lbl%+979690 () Bool)
(declare-fun AA_TEMP30@1 () Bool)
(declare-fun AA_TEMP30@0 () Bool)
(declare-fun inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 () Int)
(declare-fun inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 () Int)
(declare-fun AA_TEMP31@1 () Bool)
(declare-fun AA_TEMP31@0 () Bool)
(declare-fun AA_TEMP32@1 () Bool)
(declare-fun AA_TEMP32@0 () Bool)
(declare-fun fixed.$objIndex@5 () Int)
(declare-fun AA_TEMP33@1 () Bool)
(declare-fun AA_TEMP33@0 () Bool)
(declare-fun %lbl%@1003208 () Bool)
(declare-fun %lbl%+979689 () Bool)
(declare-fun %lbl%+979688 () Bool)
(declare-fun fixed.$objIndex@4 () Int)
(declare-fun %lbl%+979685 () Bool)
(declare-fun inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$return@2 () Int)
(declare-fun %lbl%+979684 () Bool)
(declare-fun %lbl%+979687 () Bool)
(declare-fun %lbl%+979686 () Bool)
(declare-fun %lbl%+979683 () Bool)
(declare-fun %lbl%+979682 () Bool)
(declare-fun %lbl%+979681 () Bool)
(declare-fun %lbl%+979680 () Bool)
(declare-fun fixed.$objIndex () Int)
(declare-fun call3formal@$return@0 () Int)
(declare-fun %lbl%+979679 () Bool)
(declare-fun %lbl%+979678 () Bool)
(declare-fun %lbl%+979677 () Bool)
(declare-fun fixed.$objIndex@3 () Int)
(declare-fun %lbl%+979676 () Bool)
(declare-fun %lbl%+979675 () Bool)
(declare-fun %lbl%+979674 () Bool)
(declare-fun %lbl%+979673 () Bool)
(declare-fun %lbl%+979672 () Bool)
(declare-fun fixed.$objIndex@2 () Int)
(declare-fun %lbl%+979671 () Bool)
(declare-fun %lbl%+979670 () Bool)
(declare-fun %lbl%+979669 () Bool)
(declare-fun %lbl%+979668 () Bool)
(declare-fun %lbl%+979667 () Bool)
(declare-fun %lbl%+979664 () Bool)
(declare-fun inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$return@2 () Int)
(declare-fun %lbl%+979663 () Bool)
(declare-fun %lbl%+979666 () Bool)
(declare-fun %lbl%+979665 () Bool)
(declare-fun %lbl%+979662 () Bool)
(declare-fun %lbl%+979661 () Bool)
(declare-fun %lbl%+979660 () Bool)
(declare-fun %lbl%+979659 () Bool)
(declare-fun call3formal@$return@0@@0 () Int)
(declare-fun %lbl%+979658 () Bool)
(declare-fun %lbl%+979657 () Bool)
(declare-fun %lbl%+979656 () Bool)
(declare-fun fixed.$objIndex@1 () Int)
(declare-fun %lbl%+979655 () Bool)
(declare-fun %lbl%+979654 () Bool)
(declare-fun %lbl%+979653 () Bool)
(declare-fun %lbl%+979652 () Bool)
(declare-fun %lbl%+979651 () Bool)
(declare-fun fixed.$objIndex@0 () Int)
(declare-fun %lbl%+979650 () Bool)
(declare-fun %lbl%+979649 () Bool)
(declare-fun %lbl%+979648 () Bool)
(declare-fun %lbl%+1001330 () Bool)
(declare-fun %lbl%+1001338 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.java.nio.file.DirectoryStream$Filter) javaTypeType))
(assert (forall ((w@@0 T@U) ) (!  (=> (and (= (type w@@0) javaTypeType) (UOrdering2 fixed.java.nio.file.DirectoryStream$Filter w@@0)) (= fixed.java.nio.file.DirectoryStream$Filter w@@0))
 :pattern ( (UOrdering2 fixed.java.nio.file.DirectoryStream$Filter w@@0))
)))
(assert (= (type fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1) javaTypeType))
(assert (not (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 fixed.java.lang.Object)))
(assert (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 fixed.java.lang.Object))
(assert (not (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 fixed.java.nio.file.DirectoryStream$Filter)))
(assert (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 fixed.java.nio.file.DirectoryStream$Filter))
(assert (forall ((w@@1 T@U) ) (!  (=> (= (type w@@1) javaTypeType) (=> (and (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@1) (UOrdering2 w@@1 fixed.java.lang.Object)) (or (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@1) (= fixed.java.lang.Object w@@1))))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@1) (UOrdering2 w@@1 fixed.java.lang.Object))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (= (type w@@2) javaTypeType) (=> (and (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@2) (UOrdering2 w@@2 fixed.java.nio.file.DirectoryStream$Filter)) (or (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@2) (= fixed.java.nio.file.DirectoryStream$Filter w@@2))))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@2) (UOrdering2 w@@2 fixed.java.nio.file.DirectoryStream$Filter))
)))
(assert (forall ((w@@3 T@U) ) (!  (=> (and (= (type w@@3) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@3)) (or (or (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@3) (UOrdering2 fixed.java.lang.Object w@@3)) (UOrdering2 fixed.java.nio.file.DirectoryStream$Filter w@@3)))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@3))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) javaTypeType) (UOrdering2 w@@4 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1)) (= (oneStep fixed.java.lang.Object w@@4) fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1))
 :pattern ( (UOrdering2 w@@4 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1))
)))
(assert (= (type fixed.org.cryptomator.crypto.AbstractCryptor) javaTypeType))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.AbstractCryptor w@@5)) (= fixed.org.cryptomator.crypto.AbstractCryptor w@@5))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.AbstractCryptor w@@5))
)))
(assert (= (type fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration) javaTypeType))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration w@@6)) (= fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration w@@6))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration w@@6))
)))
(assert (= (type fixed.org.cryptomator.crypto.aes256.FileNamingConventions) javaTypeType))
(assert (forall ((w@@7 T@U) ) (!  (=> (and (= (type w@@7) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.aes256.FileNamingConventions w@@7)) (= fixed.org.cryptomator.crypto.aes256.FileNamingConventions w@@7))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.FileNamingConventions w@@7))
)))
(assert (= (type fixed.org.cryptomator.crypto.aes256.Aes256Cryptor) javaTypeType))
(assert (not (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor fixed.org.cryptomator.crypto.AbstractCryptor)))
(assert (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor fixed.org.cryptomator.crypto.AbstractCryptor))
(assert (not (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration)))
(assert (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration))
(assert (not (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor fixed.org.cryptomator.crypto.aes256.FileNamingConventions)))
(assert (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor fixed.org.cryptomator.crypto.aes256.FileNamingConventions))
(assert (forall ((w@@8 T@U) ) (!  (=> (= (type w@@8) javaTypeType) (=> (and (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@8) (UOrdering2 w@@8 fixed.org.cryptomator.crypto.AbstractCryptor)) (or (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@8) (= fixed.org.cryptomator.crypto.AbstractCryptor w@@8))))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@8) (UOrdering2 w@@8 fixed.org.cryptomator.crypto.AbstractCryptor))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (= (type w@@9) javaTypeType) (=> (and (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@9) (UOrdering2 w@@9 fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration)) (or (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@9) (= fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration w@@9))))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@9) (UOrdering2 w@@9 fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration))
)))
(assert (forall ((w@@10 T@U) ) (!  (=> (= (type w@@10) javaTypeType) (=> (and (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@10) (UOrdering2 w@@10 fixed.org.cryptomator.crypto.aes256.FileNamingConventions)) (or (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@10) (= fixed.org.cryptomator.crypto.aes256.FileNamingConventions w@@10))))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@10) (UOrdering2 w@@10 fixed.org.cryptomator.crypto.aes256.FileNamingConventions))
)))
(assert (forall ((w@@11 T@U) ) (!  (=> (and (= (type w@@11) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@11)) (or (or (or (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@11) (UOrdering2 fixed.org.cryptomator.crypto.AbstractCryptor w@@11)) (UOrdering2 fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration w@@11)) (UOrdering2 fixed.org.cryptomator.crypto.aes256.FileNamingConventions w@@11)))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@11))
)))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 w@@12 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor)) (= (oneStep fixed.org.cryptomator.crypto.AbstractCryptor w@@12) fixed.org.cryptomator.crypto.aes256.Aes256Cryptor))
 :pattern ( (UOrdering2 w@@12 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@13 T@U) ) (!  (=> (and (= (type w@@13) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@13)) (= fixed.java.lang.Comparable w@@13))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@13))
)))
(assert (= (type fixed.java.lang.Iterable) javaTypeType))
(assert (forall ((w@@14 T@U) ) (!  (=> (and (= (type w@@14) javaTypeType) (UOrdering2 fixed.java.lang.Iterable w@@14)) (= fixed.java.lang.Iterable w@@14))
 :pattern ( (UOrdering2 fixed.java.lang.Iterable w@@14))
)))
(assert (= (type fixed.java.nio.file.Watchable) javaTypeType))
(assert (forall ((w@@15 T@U) ) (!  (=> (and (= (type w@@15) javaTypeType) (UOrdering2 fixed.java.nio.file.Watchable w@@15)) (= fixed.java.nio.file.Watchable w@@15))
 :pattern ( (UOrdering2 fixed.java.nio.file.Watchable w@@15))
)))
(assert (= (type fixed.java.nio.file.Path) javaTypeType))
(assert (not (= fixed.java.nio.file.Path fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.nio.file.Path fixed.java.lang.Comparable))
(assert (not (= fixed.java.nio.file.Path fixed.java.lang.Iterable)))
(assert (UOrdering2 fixed.java.nio.file.Path fixed.java.lang.Iterable))
(assert (not (= fixed.java.nio.file.Path fixed.java.nio.file.Watchable)))
(assert (UOrdering2 fixed.java.nio.file.Path fixed.java.nio.file.Watchable))
(assert (forall ((w@@16 T@U) ) (!  (=> (= (type w@@16) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.file.Path w@@16) (UOrdering2 w@@16 fixed.java.lang.Comparable)) (or (= fixed.java.nio.file.Path w@@16) (= fixed.java.lang.Comparable w@@16))))
 :pattern ( (UOrdering2 fixed.java.nio.file.Path w@@16) (UOrdering2 w@@16 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@17 T@U) ) (!  (=> (= (type w@@17) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.file.Path w@@17) (UOrdering2 w@@17 fixed.java.lang.Iterable)) (or (= fixed.java.nio.file.Path w@@17) (= fixed.java.lang.Iterable w@@17))))
 :pattern ( (UOrdering2 fixed.java.nio.file.Path w@@17) (UOrdering2 w@@17 fixed.java.lang.Iterable))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (= (type w@@18) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.file.Path w@@18) (UOrdering2 w@@18 fixed.java.nio.file.Watchable)) (or (= fixed.java.nio.file.Path w@@18) (= fixed.java.nio.file.Watchable w@@18))))
 :pattern ( (UOrdering2 fixed.java.nio.file.Path w@@18) (UOrdering2 w@@18 fixed.java.nio.file.Watchable))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (and (= (type w@@19) javaTypeType) (UOrdering2 fixed.java.nio.file.Path w@@19)) (or (or (or (= fixed.java.nio.file.Path w@@19) (UOrdering2 fixed.java.lang.Comparable w@@19)) (UOrdering2 fixed.java.lang.Iterable w@@19)) (UOrdering2 fixed.java.nio.file.Watchable w@@19)))
 :pattern ( (UOrdering2 fixed.java.nio.file.Path w@@19))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@20 T@U) ) (!  (=> (and (= (type w@@20) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@20)) (= fixed.java.io.Serializable w@@20))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@20))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@21 T@U) ) (!  (=> (= (type w@@21) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@21) (UOrdering2 w@@21 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@21) (= fixed.java.lang.Object w@@21))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@21) (UOrdering2 w@@21 fixed.java.lang.Object))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (= (type w@@22) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@22) (UOrdering2 w@@22 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@22) (= fixed.java.io.Serializable w@@22))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@22) (UOrdering2 w@@22 fixed.java.io.Serializable))
)))
(assert (forall ((w@@23 T@U) ) (!  (=> (and (= (type w@@23) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@23)) (or (or (= fixed.java.lang.Throwable w@@23) (UOrdering2 fixed.java.lang.Object w@@23)) (UOrdering2 fixed.java.io.Serializable w@@23)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@23))
)))
(assert (forall ((w@@24 T@U) ) (!  (=> (and (= (type w@@24) javaTypeType) (UOrdering2 w@@24 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@24) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@24 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@25 T@U) ) (!  (=> (= (type w@@25) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@25) (UOrdering2 w@@25 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@25) (= fixed.java.lang.Throwable w@@25))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@25) (UOrdering2 w@@25 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@26 T@U) ) (!  (=> (and (= (type w@@26) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@26)) (or (= fixed.java.lang.Exception w@@26) (UOrdering2 fixed.java.lang.Throwable w@@26)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@26))
)))
(assert (forall ((w@@27 T@U) ) (!  (=> (and (= (type w@@27) javaTypeType) (UOrdering2 w@@27 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@27) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@27 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@28 T@U) ) (!  (=> (= (type w@@28) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@28) (UOrdering2 w@@28 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@28) (= fixed.java.lang.Exception w@@28))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@28) (UOrdering2 w@@28 fixed.java.lang.Exception))
)))
(assert (forall ((w@@29 T@U) ) (!  (=> (and (= (type w@@29) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@29)) (or (= fixed.java.lang.RuntimeException w@@29) (UOrdering2 fixed.java.lang.Exception w@@29)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@29))
)))
(assert (forall ((w@@30 T@U) ) (!  (=> (and (= (type w@@30) javaTypeType) (UOrdering2 w@@30 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@30) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@30 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.nio.file.PathMatcher) javaTypeType))
(assert (forall ((w@@31 T@U) ) (!  (=> (and (= (type w@@31) javaTypeType) (UOrdering2 fixed.java.nio.file.PathMatcher w@@31)) (= fixed.java.nio.file.PathMatcher w@@31))
 :pattern ( (UOrdering2 fixed.java.nio.file.PathMatcher w@@31))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@32 T@U) ) (!  (=> (= (type w@@32) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@32) (UOrdering2 w@@32 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@32) (= fixed.java.lang.RuntimeException w@@32))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@32) (UOrdering2 w@@32 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@33)) (or (= fixed.java.lang.ClassCastException w@@33) (UOrdering2 fixed.java.lang.RuntimeException w@@33)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@33))
)))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 w@@34 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@34) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@34 fixed.java.lang.ClassCastException))
)))
(assert (= (type fixed.java.io.IOException) javaTypeType))
(assert (not (= fixed.java.io.IOException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.io.IOException fixed.java.lang.Exception))
(assert (forall ((w@@35 T@U) ) (!  (=> (= (type w@@35) javaTypeType) (=> (and (UOrdering2 fixed.java.io.IOException w@@35) (UOrdering2 w@@35 fixed.java.lang.Exception)) (or (= fixed.java.io.IOException w@@35) (= fixed.java.lang.Exception w@@35))))
 :pattern ( (UOrdering2 fixed.java.io.IOException w@@35) (UOrdering2 w@@35 fixed.java.lang.Exception))
)))
(assert (forall ((w@@36 T@U) ) (!  (=> (and (= (type w@@36) javaTypeType) (UOrdering2 fixed.java.io.IOException w@@36)) (or (= fixed.java.io.IOException w@@36) (UOrdering2 fixed.java.lang.Exception w@@36)))
 :pattern ( (UOrdering2 fixed.java.io.IOException w@@36))
)))
(assert (forall ((w@@37 T@U) ) (!  (=> (and (= (type w@@37) javaTypeType) (UOrdering2 w@@37 fixed.java.io.IOException)) (= (oneStep fixed.java.lang.Exception w@@37) fixed.java.io.IOException))
 :pattern ( (UOrdering2 w@@37 fixed.java.io.IOException))
)))
(assert (= (type fixed.com.fasterxml.jackson.databind.ObjectMapper) javaTypeType))
(assert (forall ((w@@38 T@U) ) (!  (=> (and (= (type w@@38) javaTypeType) (UOrdering2 fixed.com.fasterxml.jackson.databind.ObjectMapper w@@38)) (= fixed.com.fasterxml.jackson.databind.ObjectMapper w@@38))
 :pattern ( (UOrdering2 fixed.com.fasterxml.jackson.databind.ObjectMapper w@@38))
)))
(assert (= (type fixed.java.util.Random) javaTypeType))
(assert (not (= fixed.java.util.Random fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Random fixed.java.lang.Object))
(assert (not (= fixed.java.util.Random fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.util.Random fixed.java.io.Serializable))
(assert (forall ((w@@39 T@U) ) (!  (=> (= (type w@@39) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Random w@@39) (UOrdering2 w@@39 fixed.java.lang.Object)) (or (= fixed.java.util.Random w@@39) (= fixed.java.lang.Object w@@39))))
 :pattern ( (UOrdering2 fixed.java.util.Random w@@39) (UOrdering2 w@@39 fixed.java.lang.Object))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (= (type w@@40) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Random w@@40) (UOrdering2 w@@40 fixed.java.io.Serializable)) (or (= fixed.java.util.Random w@@40) (= fixed.java.io.Serializable w@@40))))
 :pattern ( (UOrdering2 fixed.java.util.Random w@@40) (UOrdering2 w@@40 fixed.java.io.Serializable))
)))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 fixed.java.util.Random w@@41)) (or (or (= fixed.java.util.Random w@@41) (UOrdering2 fixed.java.lang.Object w@@41)) (UOrdering2 fixed.java.io.Serializable w@@41)))
 :pattern ( (UOrdering2 fixed.java.util.Random w@@41))
)))
(assert (forall ((w@@42 T@U) ) (!  (=> (and (= (type w@@42) javaTypeType) (UOrdering2 w@@42 fixed.java.util.Random)) (= (oneStep fixed.java.lang.Object w@@42) fixed.java.util.Random))
 :pattern ( (UOrdering2 w@@42 fixed.java.util.Random))
)))
(assert (= (type fixed.java.security.SecureRandom) javaTypeType))
(assert (not (= fixed.java.security.SecureRandom fixed.java.util.Random)))
(assert (UOrdering2 fixed.java.security.SecureRandom fixed.java.util.Random))
(assert (forall ((w@@43 T@U) ) (!  (=> (= (type w@@43) javaTypeType) (=> (and (UOrdering2 fixed.java.security.SecureRandom w@@43) (UOrdering2 w@@43 fixed.java.util.Random)) (or (= fixed.java.security.SecureRandom w@@43) (= fixed.java.util.Random w@@43))))
 :pattern ( (UOrdering2 fixed.java.security.SecureRandom w@@43) (UOrdering2 w@@43 fixed.java.util.Random))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (and (= (type w@@44) javaTypeType) (UOrdering2 fixed.java.security.SecureRandom w@@44)) (or (= fixed.java.security.SecureRandom w@@44) (UOrdering2 fixed.java.util.Random w@@44)))
 :pattern ( (UOrdering2 fixed.java.security.SecureRandom w@@44))
)))
(assert (forall ((w@@45 T@U) ) (!  (=> (and (= (type w@@45) javaTypeType) (UOrdering2 w@@45 fixed.java.security.SecureRandom)) (= (oneStep fixed.java.util.Random w@@45) fixed.java.security.SecureRandom))
 :pattern ( (UOrdering2 w@@45 fixed.java.security.SecureRandom))
)))
(assert (= (type fixed.java.lang.ArithmeticException) javaTypeType))
(assert (not (= fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException))
(assert (forall ((w@@46 T@U) ) (!  (=> (= (type w@@46) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArithmeticException w@@46) (UOrdering2 w@@46 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ArithmeticException w@@46) (= fixed.java.lang.RuntimeException w@@46))))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@46) (UOrdering2 w@@46 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@47 T@U) ) (!  (=> (and (= (type w@@47) javaTypeType) (UOrdering2 fixed.java.lang.ArithmeticException w@@47)) (or (= fixed.java.lang.ArithmeticException w@@47) (UOrdering2 fixed.java.lang.RuntimeException w@@47)))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@47))
)))
(assert (forall ((w@@48 T@U) ) (!  (=> (and (= (type w@@48) javaTypeType) (UOrdering2 w@@48 fixed.java.lang.ArithmeticException)) (= (oneStep fixed.java.lang.RuntimeException w@@48) fixed.java.lang.ArithmeticException))
 :pattern ( (UOrdering2 w@@48 fixed.java.lang.ArithmeticException))
)))
(assert (= (type fixed.java.security.spec.KeySpec) javaTypeType))
(assert (forall ((w@@49 T@U) ) (!  (=> (and (= (type w@@49) javaTypeType) (UOrdering2 fixed.java.security.spec.KeySpec w@@49)) (= fixed.java.security.spec.KeySpec w@@49))
 :pattern ( (UOrdering2 fixed.java.security.spec.KeySpec w@@49))
)))
(assert (= (type fixed.java.security.Key) javaTypeType))
(assert (not (= fixed.java.security.Key fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.security.Key fixed.java.io.Serializable))
(assert (forall ((w@@50 T@U) ) (!  (=> (= (type w@@50) javaTypeType) (=> (and (UOrdering2 fixed.java.security.Key w@@50) (UOrdering2 w@@50 fixed.java.io.Serializable)) (or (= fixed.java.security.Key w@@50) (= fixed.java.io.Serializable w@@50))))
 :pattern ( (UOrdering2 fixed.java.security.Key w@@50) (UOrdering2 w@@50 fixed.java.io.Serializable))
)))
(assert (forall ((w@@51 T@U) ) (!  (=> (and (= (type w@@51) javaTypeType) (UOrdering2 fixed.java.security.Key w@@51)) (or (= fixed.java.security.Key w@@51) (UOrdering2 fixed.java.io.Serializable w@@51)))
 :pattern ( (UOrdering2 fixed.java.security.Key w@@51))
)))
(assert (= (type fixed.javax.security.auth.Destroyable) javaTypeType))
(assert (forall ((w@@52 T@U) ) (!  (=> (and (= (type w@@52) javaTypeType) (UOrdering2 fixed.javax.security.auth.Destroyable w@@52)) (= fixed.javax.security.auth.Destroyable w@@52))
 :pattern ( (UOrdering2 fixed.javax.security.auth.Destroyable w@@52))
)))
(assert (= (type fixed.javax.crypto.SecretKey) javaTypeType))
(assert (not (= fixed.javax.crypto.SecretKey fixed.java.security.Key)))
(assert (UOrdering2 fixed.javax.crypto.SecretKey fixed.java.security.Key))
(assert (not (= fixed.javax.crypto.SecretKey fixed.javax.security.auth.Destroyable)))
(assert (UOrdering2 fixed.javax.crypto.SecretKey fixed.javax.security.auth.Destroyable))
(assert (forall ((w@@53 T@U) ) (!  (=> (= (type w@@53) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.SecretKey w@@53) (UOrdering2 w@@53 fixed.java.security.Key)) (or (= fixed.javax.crypto.SecretKey w@@53) (= fixed.java.security.Key w@@53))))
 :pattern ( (UOrdering2 fixed.javax.crypto.SecretKey w@@53) (UOrdering2 w@@53 fixed.java.security.Key))
)))
(assert (forall ((w@@54 T@U) ) (!  (=> (= (type w@@54) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.SecretKey w@@54) (UOrdering2 w@@54 fixed.javax.security.auth.Destroyable)) (or (= fixed.javax.crypto.SecretKey w@@54) (= fixed.javax.security.auth.Destroyable w@@54))))
 :pattern ( (UOrdering2 fixed.javax.crypto.SecretKey w@@54) (UOrdering2 w@@54 fixed.javax.security.auth.Destroyable))
)))
(assert (forall ((w@@55 T@U) ) (!  (=> (and (= (type w@@55) javaTypeType) (UOrdering2 fixed.javax.crypto.SecretKey w@@55)) (or (or (= fixed.javax.crypto.SecretKey w@@55) (UOrdering2 fixed.java.security.Key w@@55)) (UOrdering2 fixed.javax.security.auth.Destroyable w@@55)))
 :pattern ( (UOrdering2 fixed.javax.crypto.SecretKey w@@55))
)))
(assert (= (type fixed.javax.crypto.spec.SecretKeySpec) javaTypeType))
(assert (not (= fixed.javax.crypto.spec.SecretKeySpec fixed.java.lang.Object)))
(assert (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec fixed.java.lang.Object))
(assert (not (= fixed.javax.crypto.spec.SecretKeySpec fixed.java.security.spec.KeySpec)))
(assert (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec fixed.java.security.spec.KeySpec))
(assert (not (= fixed.javax.crypto.spec.SecretKeySpec fixed.javax.crypto.SecretKey)))
(assert (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec fixed.javax.crypto.SecretKey))
(assert (forall ((w@@56 T@U) ) (!  (=> (= (type w@@56) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@56) (UOrdering2 w@@56 fixed.java.lang.Object)) (or (= fixed.javax.crypto.spec.SecretKeySpec w@@56) (= fixed.java.lang.Object w@@56))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@56) (UOrdering2 w@@56 fixed.java.lang.Object))
)))
(assert (forall ((w@@57 T@U) ) (!  (=> (= (type w@@57) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@57) (UOrdering2 w@@57 fixed.java.security.spec.KeySpec)) (or (= fixed.javax.crypto.spec.SecretKeySpec w@@57) (= fixed.java.security.spec.KeySpec w@@57))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@57) (UOrdering2 w@@57 fixed.java.security.spec.KeySpec))
)))
(assert (forall ((w@@58 T@U) ) (!  (=> (= (type w@@58) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@58) (UOrdering2 w@@58 fixed.javax.crypto.SecretKey)) (or (= fixed.javax.crypto.spec.SecretKeySpec w@@58) (= fixed.javax.crypto.SecretKey w@@58))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@58) (UOrdering2 w@@58 fixed.javax.crypto.SecretKey))
)))
(assert (forall ((w@@59 T@U) ) (!  (=> (and (= (type w@@59) javaTypeType) (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@59)) (or (or (or (= fixed.javax.crypto.spec.SecretKeySpec w@@59) (UOrdering2 fixed.java.lang.Object w@@59)) (UOrdering2 fixed.java.security.spec.KeySpec w@@59)) (UOrdering2 fixed.javax.crypto.SecretKey w@@59)))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@59))
)))
(assert (forall ((w@@60 T@U) ) (!  (=> (and (= (type w@@60) javaTypeType) (UOrdering2 w@@60 fixed.javax.crypto.spec.SecretKeySpec)) (= (oneStep fixed.java.lang.Object w@@60) fixed.javax.crypto.spec.SecretKeySpec))
 :pattern ( (UOrdering2 w@@60 fixed.javax.crypto.spec.SecretKeySpec))
)))
(assert  (and (= (Ctor refType) 4) (= (type fixed.$StringConst0) refType)))
(assert (forall ((w@@61 T@U) ) (!  (=> (and (= (type w@@61) refType) (UOrdering2 fixed.$StringConst0 w@@61)) (= fixed.$StringConst0 w@@61))
 :pattern ( (UOrdering2 fixed.$StringConst0 w@@61))
)))
(assert (= (type fixed.java.lang.CharSequence) javaTypeType))
(assert (forall ((w@@62 T@U) ) (!  (=> (and (= (type w@@62) javaTypeType) (UOrdering2 fixed.java.lang.CharSequence w@@62)) (= fixed.java.lang.CharSequence w@@62))
 :pattern ( (UOrdering2 fixed.java.lang.CharSequence w@@62))
)))
(assert (= (type fixed.java.lang.String) javaTypeType))
(assert (not (= fixed.java.lang.String fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.Object))
(assert (not (= fixed.java.lang.String fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.String fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.Comparable))
(assert (not (= fixed.java.lang.String fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.CharSequence))
(assert (forall ((w@@63 T@U) ) (!  (=> (= (type w@@63) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@63) (UOrdering2 w@@63 fixed.java.lang.Object)) (or (= fixed.java.lang.String w@@63) (= fixed.java.lang.Object w@@63))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@63) (UOrdering2 w@@63 fixed.java.lang.Object))
)))
(assert (forall ((w@@64 T@U) ) (!  (=> (= (type w@@64) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@64) (UOrdering2 w@@64 fixed.java.io.Serializable)) (or (= fixed.java.lang.String w@@64) (= fixed.java.io.Serializable w@@64))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@64) (UOrdering2 w@@64 fixed.java.io.Serializable))
)))
(assert (forall ((w@@65 T@U) ) (!  (=> (= (type w@@65) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@65) (UOrdering2 w@@65 fixed.java.lang.Comparable)) (or (= fixed.java.lang.String w@@65) (= fixed.java.lang.Comparable w@@65))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@65) (UOrdering2 w@@65 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@66 T@U) ) (!  (=> (= (type w@@66) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@66) (UOrdering2 w@@66 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.String w@@66) (= fixed.java.lang.CharSequence w@@66))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@66) (UOrdering2 w@@66 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@67 T@U) ) (!  (=> (and (= (type w@@67) javaTypeType) (UOrdering2 fixed.java.lang.String w@@67)) (or (or (or (or (= fixed.java.lang.String w@@67) (UOrdering2 fixed.java.lang.Object w@@67)) (UOrdering2 fixed.java.io.Serializable w@@67)) (UOrdering2 fixed.java.lang.Comparable w@@67)) (UOrdering2 fixed.java.lang.CharSequence w@@67)))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@67))
)))
(assert (forall ((w@@68 T@U) ) (!  (=> (and (= (type w@@68) javaTypeType) (UOrdering2 w@@68 fixed.java.lang.String)) (= (oneStep fixed.java.lang.Object w@@68) fixed.java.lang.String))
 :pattern ( (UOrdering2 w@@68 fixed.java.lang.String))
)))
(assert (= (type fixed.$StringConst1) refType))
(assert (forall ((w@@69 T@U) ) (!  (=> (and (= (type w@@69) refType) (UOrdering2 fixed.$StringConst1 w@@69)) (= fixed.$StringConst1 w@@69))
 :pattern ( (UOrdering2 fixed.$StringConst1 w@@69))
)))
(assert (= (type fixed.java.util.Arrays) javaTypeType))
(assert (not (= fixed.java.util.Arrays fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Arrays fixed.java.lang.Object))
(assert (forall ((w@@70 T@U) ) (!  (=> (= (type w@@70) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Arrays w@@70) (UOrdering2 w@@70 fixed.java.lang.Object)) (or (= fixed.java.util.Arrays w@@70) (= fixed.java.lang.Object w@@70))))
 :pattern ( (UOrdering2 fixed.java.util.Arrays w@@70) (UOrdering2 w@@70 fixed.java.lang.Object))
)))
(assert (forall ((w@@71 T@U) ) (!  (=> (and (= (type w@@71) javaTypeType) (UOrdering2 fixed.java.util.Arrays w@@71)) (or (= fixed.java.util.Arrays w@@71) (UOrdering2 fixed.java.lang.Object w@@71)))
 :pattern ( (UOrdering2 fixed.java.util.Arrays w@@71))
)))
(assert (forall ((w@@72 T@U) ) (!  (=> (and (= (type w@@72) javaTypeType) (UOrdering2 w@@72 fixed.java.util.Arrays)) (= (oneStep fixed.java.lang.Object w@@72) fixed.java.util.Arrays))
 :pattern ( (UOrdering2 w@@72 fixed.java.util.Arrays))
)))
(assert (= (type fixed.java.lang.AutoCloseable) javaTypeType))
(assert (forall ((w@@73 T@U) ) (!  (=> (and (= (type w@@73) javaTypeType) (UOrdering2 fixed.java.lang.AutoCloseable w@@73)) (= fixed.java.lang.AutoCloseable w@@73))
 :pattern ( (UOrdering2 fixed.java.lang.AutoCloseable w@@73))
)))
(assert (= (type fixed.java.io.Closeable) javaTypeType))
(assert (not (= fixed.java.io.Closeable fixed.java.lang.AutoCloseable)))
(assert (UOrdering2 fixed.java.io.Closeable fixed.java.lang.AutoCloseable))
(assert (forall ((w@@74 T@U) ) (!  (=> (= (type w@@74) javaTypeType) (=> (and (UOrdering2 fixed.java.io.Closeable w@@74) (UOrdering2 w@@74 fixed.java.lang.AutoCloseable)) (or (= fixed.java.io.Closeable w@@74) (= fixed.java.lang.AutoCloseable w@@74))))
 :pattern ( (UOrdering2 fixed.java.io.Closeable w@@74) (UOrdering2 w@@74 fixed.java.lang.AutoCloseable))
)))
(assert (forall ((w@@75 T@U) ) (!  (=> (and (= (type w@@75) javaTypeType) (UOrdering2 fixed.java.io.Closeable w@@75)) (or (= fixed.java.io.Closeable w@@75) (UOrdering2 fixed.java.lang.AutoCloseable w@@75)))
 :pattern ( (UOrdering2 fixed.java.io.Closeable w@@75))
)))
(assert (= (type fixed.java.io.Flushable) javaTypeType))
(assert (forall ((w@@76 T@U) ) (!  (=> (and (= (type w@@76) javaTypeType) (UOrdering2 fixed.java.io.Flushable w@@76)) (= fixed.java.io.Flushable w@@76))
 :pattern ( (UOrdering2 fixed.java.io.Flushable w@@76))
)))
(assert (= (type fixed.java.io.OutputStream) javaTypeType))
(assert (not (= fixed.java.io.OutputStream fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.lang.Object))
(assert (not (= fixed.java.io.OutputStream fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.io.Closeable))
(assert (not (= fixed.java.io.OutputStream fixed.java.io.Flushable)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.io.Flushable))
(assert (forall ((w@@77 T@U) ) (!  (=> (= (type w@@77) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@77) (UOrdering2 w@@77 fixed.java.lang.Object)) (or (= fixed.java.io.OutputStream w@@77) (= fixed.java.lang.Object w@@77))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@77) (UOrdering2 w@@77 fixed.java.lang.Object))
)))
(assert (forall ((w@@78 T@U) ) (!  (=> (= (type w@@78) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@78) (UOrdering2 w@@78 fixed.java.io.Closeable)) (or (= fixed.java.io.OutputStream w@@78) (= fixed.java.io.Closeable w@@78))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@78) (UOrdering2 w@@78 fixed.java.io.Closeable))
)))
(assert (forall ((w@@79 T@U) ) (!  (=> (= (type w@@79) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@79) (UOrdering2 w@@79 fixed.java.io.Flushable)) (or (= fixed.java.io.OutputStream w@@79) (= fixed.java.io.Flushable w@@79))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@79) (UOrdering2 w@@79 fixed.java.io.Flushable))
)))
(assert (forall ((w@@80 T@U) ) (!  (=> (and (= (type w@@80) javaTypeType) (UOrdering2 fixed.java.io.OutputStream w@@80)) (or (or (or (= fixed.java.io.OutputStream w@@80) (UOrdering2 fixed.java.lang.Object w@@80)) (UOrdering2 fixed.java.io.Closeable w@@80)) (UOrdering2 fixed.java.io.Flushable w@@80)))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@80))
)))
(assert (forall ((w@@81 T@U) ) (!  (=> (and (= (type w@@81) javaTypeType) (UOrdering2 w@@81 fixed.java.io.OutputStream)) (= (oneStep fixed.java.lang.Object w@@81) fixed.java.io.OutputStream))
 :pattern ( (UOrdering2 w@@81 fixed.java.io.OutputStream))
)))
(assert (= (type fixed.javax.crypto.Cipher) javaTypeType))
(assert (not (= fixed.javax.crypto.Cipher fixed.java.lang.Object)))
(assert (UOrdering2 fixed.javax.crypto.Cipher fixed.java.lang.Object))
(assert (forall ((w@@82 T@U) ) (!  (=> (= (type w@@82) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.Cipher w@@82) (UOrdering2 w@@82 fixed.java.lang.Object)) (or (= fixed.javax.crypto.Cipher w@@82) (= fixed.java.lang.Object w@@82))))
 :pattern ( (UOrdering2 fixed.javax.crypto.Cipher w@@82) (UOrdering2 w@@82 fixed.java.lang.Object))
)))
(assert (forall ((w@@83 T@U) ) (!  (=> (and (= (type w@@83) javaTypeType) (UOrdering2 fixed.javax.crypto.Cipher w@@83)) (or (= fixed.javax.crypto.Cipher w@@83) (UOrdering2 fixed.java.lang.Object w@@83)))
 :pattern ( (UOrdering2 fixed.javax.crypto.Cipher w@@83))
)))
(assert (forall ((w@@84 T@U) ) (!  (=> (and (= (type w@@84) javaTypeType) (UOrdering2 w@@84 fixed.javax.crypto.Cipher)) (= (oneStep fixed.java.lang.Object w@@84) fixed.javax.crypto.Cipher))
 :pattern ( (UOrdering2 w@@84 fixed.javax.crypto.Cipher))
)))
(assert (= (type fixed.java.security.GeneralSecurityException) javaTypeType))
(assert (not (= fixed.java.security.GeneralSecurityException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.security.GeneralSecurityException fixed.java.lang.Exception))
(assert (forall ((w@@85 T@U) ) (!  (=> (= (type w@@85) javaTypeType) (=> (and (UOrdering2 fixed.java.security.GeneralSecurityException w@@85) (UOrdering2 w@@85 fixed.java.lang.Exception)) (or (= fixed.java.security.GeneralSecurityException w@@85) (= fixed.java.lang.Exception w@@85))))
 :pattern ( (UOrdering2 fixed.java.security.GeneralSecurityException w@@85) (UOrdering2 w@@85 fixed.java.lang.Exception))
)))
(assert (forall ((w@@86 T@U) ) (!  (=> (and (= (type w@@86) javaTypeType) (UOrdering2 fixed.java.security.GeneralSecurityException w@@86)) (or (= fixed.java.security.GeneralSecurityException w@@86) (UOrdering2 fixed.java.lang.Exception w@@86)))
 :pattern ( (UOrdering2 fixed.java.security.GeneralSecurityException w@@86))
)))
(assert (forall ((w@@87 T@U) ) (!  (=> (and (= (type w@@87) javaTypeType) (UOrdering2 w@@87 fixed.java.security.GeneralSecurityException)) (= (oneStep fixed.java.lang.Exception w@@87) fixed.java.security.GeneralSecurityException))
 :pattern ( (UOrdering2 w@@87 fixed.java.security.GeneralSecurityException))
)))
(assert (= (type fixed.java.security.KeyException) javaTypeType))
(assert (not (= fixed.java.security.KeyException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.java.security.KeyException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@88 T@U) ) (!  (=> (= (type w@@88) javaTypeType) (=> (and (UOrdering2 fixed.java.security.KeyException w@@88) (UOrdering2 w@@88 fixed.java.security.GeneralSecurityException)) (or (= fixed.java.security.KeyException w@@88) (= fixed.java.security.GeneralSecurityException w@@88))))
 :pattern ( (UOrdering2 fixed.java.security.KeyException w@@88) (UOrdering2 w@@88 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@89 T@U) ) (!  (=> (and (= (type w@@89) javaTypeType) (UOrdering2 fixed.java.security.KeyException w@@89)) (or (= fixed.java.security.KeyException w@@89) (UOrdering2 fixed.java.security.GeneralSecurityException w@@89)))
 :pattern ( (UOrdering2 fixed.java.security.KeyException w@@89))
)))
(assert (forall ((w@@90 T@U) ) (!  (=> (and (= (type w@@90) javaTypeType) (UOrdering2 w@@90 fixed.java.security.KeyException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@90) fixed.java.security.KeyException))
 :pattern ( (UOrdering2 w@@90 fixed.java.security.KeyException))
)))
(assert (= (type fixed.java.security.InvalidKeyException) javaTypeType))
(assert (not (= fixed.java.security.InvalidKeyException fixed.java.security.KeyException)))
(assert (UOrdering2 fixed.java.security.InvalidKeyException fixed.java.security.KeyException))
(assert (forall ((w@@91 T@U) ) (!  (=> (= (type w@@91) javaTypeType) (=> (and (UOrdering2 fixed.java.security.InvalidKeyException w@@91) (UOrdering2 w@@91 fixed.java.security.KeyException)) (or (= fixed.java.security.InvalidKeyException w@@91) (= fixed.java.security.KeyException w@@91))))
 :pattern ( (UOrdering2 fixed.java.security.InvalidKeyException w@@91) (UOrdering2 w@@91 fixed.java.security.KeyException))
)))
(assert (forall ((w@@92 T@U) ) (!  (=> (and (= (type w@@92) javaTypeType) (UOrdering2 fixed.java.security.InvalidKeyException w@@92)) (or (= fixed.java.security.InvalidKeyException w@@92) (UOrdering2 fixed.java.security.KeyException w@@92)))
 :pattern ( (UOrdering2 fixed.java.security.InvalidKeyException w@@92))
)))
(assert (forall ((w@@93 T@U) ) (!  (=> (and (= (type w@@93) javaTypeType) (UOrdering2 w@@93 fixed.java.security.InvalidKeyException)) (= (oneStep fixed.java.security.KeyException w@@93) fixed.java.security.InvalidKeyException))
 :pattern ( (UOrdering2 w@@93 fixed.java.security.InvalidKeyException))
)))
(assert (= (type fixed.org.cryptomator.crypto.aes256.KeyFile) javaTypeType))
(assert (forall ((w@@94 T@U) ) (!  (=> (and (= (type w@@94) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.aes256.KeyFile w@@94)) (= fixed.org.cryptomator.crypto.aes256.KeyFile w@@94))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.KeyFile w@@94))
)))
(assert (= (type fixed.java.lang.IllegalStateException) javaTypeType))
(assert (not (= fixed.java.lang.IllegalStateException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IllegalStateException fixed.java.lang.RuntimeException))
(assert (forall ((w@@95 T@U) ) (!  (=> (= (type w@@95) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IllegalStateException w@@95) (UOrdering2 w@@95 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IllegalStateException w@@95) (= fixed.java.lang.RuntimeException w@@95))))
 :pattern ( (UOrdering2 fixed.java.lang.IllegalStateException w@@95) (UOrdering2 w@@95 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@96 T@U) ) (!  (=> (and (= (type w@@96) javaTypeType) (UOrdering2 fixed.java.lang.IllegalStateException w@@96)) (or (= fixed.java.lang.IllegalStateException w@@96) (UOrdering2 fixed.java.lang.RuntimeException w@@96)))
 :pattern ( (UOrdering2 fixed.java.lang.IllegalStateException w@@96))
)))
(assert (forall ((w@@97 T@U) ) (!  (=> (and (= (type w@@97) javaTypeType) (UOrdering2 w@@97 fixed.java.lang.IllegalStateException)) (= (oneStep fixed.java.lang.RuntimeException w@@97) fixed.java.lang.IllegalStateException))
 :pattern ( (UOrdering2 w@@97 fixed.java.lang.IllegalStateException))
)))
(assert (= (type fixed.$StringConst2) refType))
(assert (forall ((w@@98 T@U) ) (!  (=> (and (= (type w@@98) refType) (UOrdering2 fixed.$StringConst2 w@@98)) (= fixed.$StringConst2 w@@98))
 :pattern ( (UOrdering2 fixed.$StringConst2 w@@98))
)))
(assert (= (type fixed.java.io.InputStream) javaTypeType))
(assert (not (= fixed.java.io.InputStream fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.io.InputStream fixed.java.lang.Object))
(assert (not (= fixed.java.io.InputStream fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.io.InputStream fixed.java.io.Closeable))
(assert (forall ((w@@99 T@U) ) (!  (=> (= (type w@@99) javaTypeType) (=> (and (UOrdering2 fixed.java.io.InputStream w@@99) (UOrdering2 w@@99 fixed.java.lang.Object)) (or (= fixed.java.io.InputStream w@@99) (= fixed.java.lang.Object w@@99))))
 :pattern ( (UOrdering2 fixed.java.io.InputStream w@@99) (UOrdering2 w@@99 fixed.java.lang.Object))
)))
(assert (forall ((w@@100 T@U) ) (!  (=> (= (type w@@100) javaTypeType) (=> (and (UOrdering2 fixed.java.io.InputStream w@@100) (UOrdering2 w@@100 fixed.java.io.Closeable)) (or (= fixed.java.io.InputStream w@@100) (= fixed.java.io.Closeable w@@100))))
 :pattern ( (UOrdering2 fixed.java.io.InputStream w@@100) (UOrdering2 w@@100 fixed.java.io.Closeable))
)))
(assert (forall ((w@@101 T@U) ) (!  (=> (and (= (type w@@101) javaTypeType) (UOrdering2 fixed.java.io.InputStream w@@101)) (or (or (= fixed.java.io.InputStream w@@101) (UOrdering2 fixed.java.lang.Object w@@101)) (UOrdering2 fixed.java.io.Closeable w@@101)))
 :pattern ( (UOrdering2 fixed.java.io.InputStream w@@101))
)))
(assert (forall ((w@@102 T@U) ) (!  (=> (and (= (type w@@102) javaTypeType) (UOrdering2 w@@102 fixed.java.io.InputStream)) (= (oneStep fixed.java.lang.Object w@@102) fixed.java.io.InputStream))
 :pattern ( (UOrdering2 w@@102 fixed.java.io.InputStream))
)))
(assert (= (type fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile) refType))
(assert (forall ((w@@103 T@U) ) (!  (=> (and (= (type w@@103) refType) (UOrdering2 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile w@@103)) (= fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile w@@103))
 :pattern ( (UOrdering2 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile w@@103))
)))
(assert (= (type fixed.java.lang.reflect.AnnotatedElement) javaTypeType))
(assert (forall ((w@@104 T@U) ) (!  (=> (and (= (type w@@104) javaTypeType) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@104)) (= fixed.java.lang.reflect.AnnotatedElement w@@104))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@104))
)))
(assert (= (type fixed.java.lang.reflect.GenericDeclaration) javaTypeType))
(assert (not (= fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.AnnotatedElement)))
(assert (UOrdering2 fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.AnnotatedElement))
(assert (forall ((w@@105 T@U) ) (!  (=> (= (type w@@105) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@105) (UOrdering2 w@@105 fixed.java.lang.reflect.AnnotatedElement)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@105) (= fixed.java.lang.reflect.AnnotatedElement w@@105))))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@105) (UOrdering2 w@@105 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@106 T@U) ) (!  (=> (and (= (type w@@106) javaTypeType) (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@106)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@106) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@106)))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@106))
)))
(assert (= (type fixed.java.lang.reflect.Type) javaTypeType))
(assert (forall ((w@@107 T@U) ) (!  (=> (and (= (type w@@107) javaTypeType) (UOrdering2 fixed.java.lang.reflect.Type w@@107)) (= fixed.java.lang.reflect.Type w@@107))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.Type w@@107))
)))
(assert (= (type fixed.java.security.NoSuchAlgorithmException) javaTypeType))
(assert (not (= fixed.java.security.NoSuchAlgorithmException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.java.security.NoSuchAlgorithmException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@108 T@U) ) (!  (=> (= (type w@@108) javaTypeType) (=> (and (UOrdering2 fixed.java.security.NoSuchAlgorithmException w@@108) (UOrdering2 w@@108 fixed.java.security.GeneralSecurityException)) (or (= fixed.java.security.NoSuchAlgorithmException w@@108) (= fixed.java.security.GeneralSecurityException w@@108))))
 :pattern ( (UOrdering2 fixed.java.security.NoSuchAlgorithmException w@@108) (UOrdering2 w@@108 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@109 T@U) ) (!  (=> (and (= (type w@@109) javaTypeType) (UOrdering2 fixed.java.security.NoSuchAlgorithmException w@@109)) (or (= fixed.java.security.NoSuchAlgorithmException w@@109) (UOrdering2 fixed.java.security.GeneralSecurityException w@@109)))
 :pattern ( (UOrdering2 fixed.java.security.NoSuchAlgorithmException w@@109))
)))
(assert (forall ((w@@110 T@U) ) (!  (=> (and (= (type w@@110) javaTypeType) (UOrdering2 w@@110 fixed.java.security.NoSuchAlgorithmException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@110) fixed.java.security.NoSuchAlgorithmException))
 :pattern ( (UOrdering2 w@@110 fixed.java.security.NoSuchAlgorithmException))
)))
(assert (= (type fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException) javaTypeType))
(assert (forall ((w@@111 T@U) ) (!  (=> (and (= (type w@@111) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException w@@111)) (= fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException w@@111))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException w@@111))
)))
(assert (= (type fixed.$StringConst3) refType))
(assert (forall ((w@@112 T@U) ) (!  (=> (and (= (type w@@112) refType) (UOrdering2 fixed.$StringConst3 w@@112)) (= fixed.$StringConst3 w@@112))
 :pattern ( (UOrdering2 fixed.$StringConst3 w@@112))
)))
(assert (= (type fixed.org.cryptomator.crypto.exceptions.WrongPasswordException) javaTypeType))
(assert (forall ((w@@113 T@U) ) (!  (=> (and (= (type w@@113) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.exceptions.WrongPasswordException w@@113)) (= fixed.org.cryptomator.crypto.exceptions.WrongPasswordException w@@113))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.exceptions.WrongPasswordException w@@113))
)))
(assert (= (type fixed.javax.security.auth.DestroyFailedException) javaTypeType))
(assert (not (= fixed.javax.security.auth.DestroyFailedException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.javax.security.auth.DestroyFailedException fixed.java.lang.Exception))
(assert (forall ((w@@114 T@U) ) (!  (=> (= (type w@@114) javaTypeType) (=> (and (UOrdering2 fixed.javax.security.auth.DestroyFailedException w@@114) (UOrdering2 w@@114 fixed.java.lang.Exception)) (or (= fixed.javax.security.auth.DestroyFailedException w@@114) (= fixed.java.lang.Exception w@@114))))
 :pattern ( (UOrdering2 fixed.javax.security.auth.DestroyFailedException w@@114) (UOrdering2 w@@114 fixed.java.lang.Exception))
)))
(assert (forall ((w@@115 T@U) ) (!  (=> (and (= (type w@@115) javaTypeType) (UOrdering2 fixed.javax.security.auth.DestroyFailedException w@@115)) (or (= fixed.javax.security.auth.DestroyFailedException w@@115) (UOrdering2 fixed.java.lang.Exception w@@115)))
 :pattern ( (UOrdering2 fixed.javax.security.auth.DestroyFailedException w@@115))
)))
(assert (forall ((w@@116 T@U) ) (!  (=> (and (= (type w@@116) javaTypeType) (UOrdering2 w@@116 fixed.javax.security.auth.DestroyFailedException)) (= (oneStep fixed.java.lang.Exception w@@116) fixed.javax.security.auth.DestroyFailedException))
 :pattern ( (UOrdering2 w@@116 fixed.javax.security.auth.DestroyFailedException))
)))
(assert (= (type fixed.$StringConst4) refType))
(assert (forall ((w@@117 T@U) ) (!  (=> (and (= (type w@@117) refType) (UOrdering2 fixed.$StringConst4 w@@117)) (= fixed.$StringConst4 w@@117))
 :pattern ( (UOrdering2 fixed.$StringConst4 w@@117))
)))
(assert (= (type fixed.javax.crypto.NoSuchPaddingException) javaTypeType))
(assert (not (= fixed.javax.crypto.NoSuchPaddingException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.javax.crypto.NoSuchPaddingException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@118 T@U) ) (!  (=> (= (type w@@118) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.NoSuchPaddingException w@@118) (UOrdering2 w@@118 fixed.java.security.GeneralSecurityException)) (or (= fixed.javax.crypto.NoSuchPaddingException w@@118) (= fixed.java.security.GeneralSecurityException w@@118))))
 :pattern ( (UOrdering2 fixed.javax.crypto.NoSuchPaddingException w@@118) (UOrdering2 w@@118 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@119 T@U) ) (!  (=> (and (= (type w@@119) javaTypeType) (UOrdering2 fixed.javax.crypto.NoSuchPaddingException w@@119)) (or (= fixed.javax.crypto.NoSuchPaddingException w@@119) (UOrdering2 fixed.java.security.GeneralSecurityException w@@119)))
 :pattern ( (UOrdering2 fixed.javax.crypto.NoSuchPaddingException w@@119))
)))
(assert (forall ((w@@120 T@U) ) (!  (=> (and (= (type w@@120) javaTypeType) (UOrdering2 w@@120 fixed.javax.crypto.NoSuchPaddingException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@120) fixed.javax.crypto.NoSuchPaddingException))
 :pattern ( (UOrdering2 w@@120 fixed.javax.crypto.NoSuchPaddingException))
)))
(assert (= (type fixed.java.lang.IllegalArgumentException) javaTypeType))
(assert (not (= fixed.java.lang.IllegalArgumentException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IllegalArgumentException fixed.java.lang.RuntimeException))
(assert (forall ((w@@121 T@U) ) (!  (=> (= (type w@@121) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IllegalArgumentException w@@121) (UOrdering2 w@@121 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IllegalArgumentException w@@121) (= fixed.java.lang.RuntimeException w@@121))))
 :pattern ( (UOrdering2 fixed.java.lang.IllegalArgumentException w@@121) (UOrdering2 w@@121 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@122 T@U) ) (!  (=> (and (= (type w@@122) javaTypeType) (UOrdering2 fixed.java.lang.IllegalArgumentException w@@122)) (or (= fixed.java.lang.IllegalArgumentException w@@122) (UOrdering2 fixed.java.lang.RuntimeException w@@122)))
 :pattern ( (UOrdering2 fixed.java.lang.IllegalArgumentException w@@122))
)))
(assert (forall ((w@@123 T@U) ) (!  (=> (and (= (type w@@123) javaTypeType) (UOrdering2 w@@123 fixed.java.lang.IllegalArgumentException)) (= (oneStep fixed.java.lang.RuntimeException w@@123) fixed.java.lang.IllegalArgumentException))
 :pattern ( (UOrdering2 w@@123 fixed.java.lang.IllegalArgumentException))
)))
(assert (= (type fixed.$StringConst5) refType))
(assert (forall ((w@@124 T@U) ) (!  (=> (and (= (type w@@124) refType) (UOrdering2 fixed.$StringConst5 w@@124)) (= fixed.$StringConst5 w@@124))
 :pattern ( (UOrdering2 fixed.$StringConst5 w@@124))
)))
(assert (= (type fixed.$StringConst6) refType))
(assert (forall ((w@@125 T@U) ) (!  (=> (and (= (type w@@125) refType) (UOrdering2 fixed.$StringConst6 w@@125)) (= fixed.$StringConst6 w@@125))
 :pattern ( (UOrdering2 fixed.$StringConst6 w@@125))
)))
(assert (= (type fixed.$StringConst7) refType))
(assert (forall ((w@@126 T@U) ) (!  (=> (and (= (type w@@126) refType) (UOrdering2 fixed.$StringConst7 w@@126)) (= fixed.$StringConst7 w@@126))
 :pattern ( (UOrdering2 fixed.$StringConst7 w@@126))
)))
(assert (= (type fixed.java.security.spec.AlgorithmParameterSpec) javaTypeType))
(assert (forall ((w@@127 T@U) ) (!  (=> (and (= (type w@@127) javaTypeType) (UOrdering2 fixed.java.security.spec.AlgorithmParameterSpec w@@127)) (= fixed.java.security.spec.AlgorithmParameterSpec w@@127))
 :pattern ( (UOrdering2 fixed.java.security.spec.AlgorithmParameterSpec w@@127))
)))
(assert (= (type fixed.javax.crypto.spec.IvParameterSpec) javaTypeType))
(assert (not (= fixed.javax.crypto.spec.IvParameterSpec fixed.java.lang.Object)))
(assert (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec fixed.java.lang.Object))
(assert (not (= fixed.javax.crypto.spec.IvParameterSpec fixed.java.security.spec.AlgorithmParameterSpec)))
(assert (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec fixed.java.security.spec.AlgorithmParameterSpec))
(assert (forall ((w@@128 T@U) ) (!  (=> (= (type w@@128) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@128) (UOrdering2 w@@128 fixed.java.lang.Object)) (or (= fixed.javax.crypto.spec.IvParameterSpec w@@128) (= fixed.java.lang.Object w@@128))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@128) (UOrdering2 w@@128 fixed.java.lang.Object))
)))
(assert (forall ((w@@129 T@U) ) (!  (=> (= (type w@@129) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@129) (UOrdering2 w@@129 fixed.java.security.spec.AlgorithmParameterSpec)) (or (= fixed.javax.crypto.spec.IvParameterSpec w@@129) (= fixed.java.security.spec.AlgorithmParameterSpec w@@129))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@129) (UOrdering2 w@@129 fixed.java.security.spec.AlgorithmParameterSpec))
)))
(assert (forall ((w@@130 T@U) ) (!  (=> (and (= (type w@@130) javaTypeType) (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@130)) (or (or (= fixed.javax.crypto.spec.IvParameterSpec w@@130) (UOrdering2 fixed.java.lang.Object w@@130)) (UOrdering2 fixed.java.security.spec.AlgorithmParameterSpec w@@130)))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@130))
)))
(assert (forall ((w@@131 T@U) ) (!  (=> (and (= (type w@@131) javaTypeType) (UOrdering2 w@@131 fixed.javax.crypto.spec.IvParameterSpec)) (= (oneStep fixed.java.lang.Object w@@131) fixed.javax.crypto.spec.IvParameterSpec))
 :pattern ( (UOrdering2 w@@131 fixed.javax.crypto.spec.IvParameterSpec))
)))
(assert (= (type fixed.java.security.InvalidAlgorithmParameterException) javaTypeType))
(assert (not (= fixed.java.security.InvalidAlgorithmParameterException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@132 T@U) ) (!  (=> (= (type w@@132) javaTypeType) (=> (and (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException w@@132) (UOrdering2 w@@132 fixed.java.security.GeneralSecurityException)) (or (= fixed.java.security.InvalidAlgorithmParameterException w@@132) (= fixed.java.security.GeneralSecurityException w@@132))))
 :pattern ( (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException w@@132) (UOrdering2 w@@132 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@133 T@U) ) (!  (=> (and (= (type w@@133) javaTypeType) (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException w@@133)) (or (= fixed.java.security.InvalidAlgorithmParameterException w@@133) (UOrdering2 fixed.java.security.GeneralSecurityException w@@133)))
 :pattern ( (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException w@@133))
)))
(assert (forall ((w@@134 T@U) ) (!  (=> (and (= (type w@@134) javaTypeType) (UOrdering2 w@@134 fixed.java.security.InvalidAlgorithmParameterException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@134) fixed.java.security.InvalidAlgorithmParameterException))
 :pattern ( (UOrdering2 w@@134 fixed.java.security.InvalidAlgorithmParameterException))
)))
(assert (= (type fixed.$StringConst8) refType))
(assert (forall ((w@@135 T@U) ) (!  (=> (and (= (type w@@135) refType) (UOrdering2 fixed.$StringConst8 w@@135)) (= fixed.$StringConst8 w@@135))
 :pattern ( (UOrdering2 fixed.$StringConst8 w@@135))
)))
(assert (= (type fixed.$StringConst9) refType))
(assert (forall ((w@@136 T@U) ) (!  (=> (and (= (type w@@136) refType) (UOrdering2 fixed.$StringConst9 w@@136)) (= fixed.$StringConst9 w@@136))
 :pattern ( (UOrdering2 fixed.$StringConst9 w@@136))
)))
(assert (= (type fixed.java.lang.Error) javaTypeType))
(assert (not (= fixed.java.lang.Error fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Error fixed.java.lang.Throwable))
(assert (forall ((w@@137 T@U) ) (!  (=> (= (type w@@137) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Error w@@137) (UOrdering2 w@@137 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Error w@@137) (= fixed.java.lang.Throwable w@@137))))
 :pattern ( (UOrdering2 fixed.java.lang.Error w@@137) (UOrdering2 w@@137 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@138 T@U) ) (!  (=> (and (= (type w@@138) javaTypeType) (UOrdering2 fixed.java.lang.Error w@@138)) (or (= fixed.java.lang.Error w@@138) (UOrdering2 fixed.java.lang.Throwable w@@138)))
 :pattern ( (UOrdering2 fixed.java.lang.Error w@@138))
)))
(assert (forall ((w@@139 T@U) ) (!  (=> (and (= (type w@@139) javaTypeType) (UOrdering2 w@@139 fixed.java.lang.Error)) (= (oneStep fixed.java.lang.Throwable w@@139) fixed.java.lang.Error))
 :pattern ( (UOrdering2 w@@139 fixed.java.lang.Error))
)))
(assert (= (type fixed.java.lang.AssertionError) javaTypeType))
(assert (not (= fixed.java.lang.AssertionError fixed.java.lang.Error)))
(assert (UOrdering2 fixed.java.lang.AssertionError fixed.java.lang.Error))
(assert (forall ((w@@140 T@U) ) (!  (=> (= (type w@@140) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AssertionError w@@140) (UOrdering2 w@@140 fixed.java.lang.Error)) (or (= fixed.java.lang.AssertionError w@@140) (= fixed.java.lang.Error w@@140))))
 :pattern ( (UOrdering2 fixed.java.lang.AssertionError w@@140) (UOrdering2 w@@140 fixed.java.lang.Error))
)))
(assert (forall ((w@@141 T@U) ) (!  (=> (and (= (type w@@141) javaTypeType) (UOrdering2 fixed.java.lang.AssertionError w@@141)) (or (= fixed.java.lang.AssertionError w@@141) (UOrdering2 fixed.java.lang.Error w@@141)))
 :pattern ( (UOrdering2 fixed.java.lang.AssertionError w@@141))
)))
(assert (forall ((w@@142 T@U) ) (!  (=> (and (= (type w@@142) javaTypeType) (UOrdering2 w@@142 fixed.java.lang.AssertionError)) (= (oneStep fixed.java.lang.Error w@@142) fixed.java.lang.AssertionError))
 :pattern ( (UOrdering2 w@@142 fixed.java.lang.AssertionError))
)))
(assert (= (type fixed.$StringConst10) refType))
(assert (forall ((w@@143 T@U) ) (!  (=> (and (= (type w@@143) refType) (UOrdering2 fixed.$StringConst10 w@@143)) (= fixed.$StringConst10 w@@143))
 :pattern ( (UOrdering2 fixed.$StringConst10 w@@143))
)))
(assert (= (type fixed.java.lang.Cloneable) javaTypeType))
(assert (forall ((w@@144 T@U) ) (!  (=> (and (= (type w@@144) javaTypeType) (UOrdering2 fixed.java.lang.Cloneable w@@144)) (= fixed.java.lang.Cloneable w@@144))
 :pattern ( (UOrdering2 fixed.java.lang.Cloneable w@@144))
)))
(assert (= (type fixed.javax.crypto.Mac) javaTypeType))
(assert (not (= fixed.javax.crypto.Mac fixed.java.lang.Object)))
(assert (UOrdering2 fixed.javax.crypto.Mac fixed.java.lang.Object))
(assert (not (= fixed.javax.crypto.Mac fixed.java.lang.Cloneable)))
(assert (UOrdering2 fixed.javax.crypto.Mac fixed.java.lang.Cloneable))
(assert (forall ((w@@145 T@U) ) (!  (=> (= (type w@@145) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.Mac w@@145) (UOrdering2 w@@145 fixed.java.lang.Object)) (or (= fixed.javax.crypto.Mac w@@145) (= fixed.java.lang.Object w@@145))))
 :pattern ( (UOrdering2 fixed.javax.crypto.Mac w@@145) (UOrdering2 w@@145 fixed.java.lang.Object))
)))
(assert (forall ((w@@146 T@U) ) (!  (=> (= (type w@@146) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.Mac w@@146) (UOrdering2 w@@146 fixed.java.lang.Cloneable)) (or (= fixed.javax.crypto.Mac w@@146) (= fixed.java.lang.Cloneable w@@146))))
 :pattern ( (UOrdering2 fixed.javax.crypto.Mac w@@146) (UOrdering2 w@@146 fixed.java.lang.Cloneable))
)))
(assert (forall ((w@@147 T@U) ) (!  (=> (and (= (type w@@147) javaTypeType) (UOrdering2 fixed.javax.crypto.Mac w@@147)) (or (or (= fixed.javax.crypto.Mac w@@147) (UOrdering2 fixed.java.lang.Object w@@147)) (UOrdering2 fixed.java.lang.Cloneable w@@147)))
 :pattern ( (UOrdering2 fixed.javax.crypto.Mac w@@147))
)))
(assert (forall ((w@@148 T@U) ) (!  (=> (and (= (type w@@148) javaTypeType) (UOrdering2 w@@148 fixed.javax.crypto.Mac)) (= (oneStep fixed.java.lang.Object w@@148) fixed.javax.crypto.Mac))
 :pattern ( (UOrdering2 w@@148 fixed.javax.crypto.Mac))
)))
(assert (= (type fixed.$StringConst11) refType))
(assert (forall ((w@@149 T@U) ) (!  (=> (and (= (type w@@149) refType) (UOrdering2 fixed.$StringConst11 w@@149)) (= fixed.$StringConst11 w@@149))
 :pattern ( (UOrdering2 fixed.$StringConst11 w@@149))
)))
(assert (= (type fixed.$StringConst12) refType))
(assert (forall ((w@@150 T@U) ) (!  (=> (and (= (type w@@150) refType) (UOrdering2 fixed.$StringConst12 w@@150)) (= fixed.$StringConst12 w@@150))
 :pattern ( (UOrdering2 fixed.$StringConst12 w@@150))
)))
(assert (= (type fixed.java.lang.Appendable) javaTypeType))
(assert (forall ((w@@151 T@U) ) (!  (=> (and (= (type w@@151) javaTypeType) (UOrdering2 fixed.java.lang.Appendable w@@151)) (= fixed.java.lang.Appendable w@@151))
 :pattern ( (UOrdering2 fixed.java.lang.Appendable w@@151))
)))
(assert (= (type fixed.java.lang.AbstractStringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.Object))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.Appendable)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.Appendable))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.CharSequence))
(assert (forall ((w@@152 T@U) ) (!  (=> (= (type w@@152) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@152) (UOrdering2 w@@152 fixed.java.lang.Object)) (or (= fixed.java.lang.AbstractStringBuilder w@@152) (= fixed.java.lang.Object w@@152))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@152) (UOrdering2 w@@152 fixed.java.lang.Object))
)))
(assert (forall ((w@@153 T@U) ) (!  (=> (= (type w@@153) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@153) (UOrdering2 w@@153 fixed.java.lang.Appendable)) (or (= fixed.java.lang.AbstractStringBuilder w@@153) (= fixed.java.lang.Appendable w@@153))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@153) (UOrdering2 w@@153 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@154 T@U) ) (!  (=> (= (type w@@154) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@154) (UOrdering2 w@@154 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.AbstractStringBuilder w@@154) (= fixed.java.lang.CharSequence w@@154))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@154) (UOrdering2 w@@154 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@155 T@U) ) (!  (=> (and (= (type w@@155) javaTypeType) (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@155)) (or (or (or (= fixed.java.lang.AbstractStringBuilder w@@155) (UOrdering2 fixed.java.lang.Object w@@155)) (UOrdering2 fixed.java.lang.Appendable w@@155)) (UOrdering2 fixed.java.lang.CharSequence w@@155)))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@155))
)))
(assert (forall ((w@@156 T@U) ) (!  (=> (and (= (type w@@156) javaTypeType) (UOrdering2 w@@156 fixed.java.lang.AbstractStringBuilder)) (= (oneStep fixed.java.lang.Object w@@156) fixed.java.lang.AbstractStringBuilder))
 :pattern ( (UOrdering2 w@@156 fixed.java.lang.AbstractStringBuilder))
)))
(assert (= (type fixed.java.lang.StringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.lang.AbstractStringBuilder)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.lang.AbstractStringBuilder))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.lang.CharSequence))
(assert (forall ((w@@157 T@U) ) (!  (=> (= (type w@@157) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@157) (UOrdering2 w@@157 fixed.java.lang.AbstractStringBuilder)) (or (= fixed.java.lang.StringBuilder w@@157) (= fixed.java.lang.AbstractStringBuilder w@@157))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@157) (UOrdering2 w@@157 fixed.java.lang.AbstractStringBuilder))
)))
(assert (forall ((w@@158 T@U) ) (!  (=> (= (type w@@158) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@158) (UOrdering2 w@@158 fixed.java.io.Serializable)) (or (= fixed.java.lang.StringBuilder w@@158) (= fixed.java.io.Serializable w@@158))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@158) (UOrdering2 w@@158 fixed.java.io.Serializable))
)))
(assert (forall ((w@@159 T@U) ) (!  (=> (= (type w@@159) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@159) (UOrdering2 w@@159 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.StringBuilder w@@159) (= fixed.java.lang.CharSequence w@@159))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@159) (UOrdering2 w@@159 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@160 T@U) ) (!  (=> (and (= (type w@@160) javaTypeType) (UOrdering2 fixed.java.lang.StringBuilder w@@160)) (or (or (or (= fixed.java.lang.StringBuilder w@@160) (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@160)) (UOrdering2 fixed.java.io.Serializable w@@160)) (UOrdering2 fixed.java.lang.CharSequence w@@160)))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@160))
)))
(assert (forall ((w@@161 T@U) ) (!  (=> (and (= (type w@@161) javaTypeType) (UOrdering2 w@@161 fixed.java.lang.StringBuilder)) (= (oneStep fixed.java.lang.AbstractStringBuilder w@@161) fixed.java.lang.StringBuilder))
 :pattern ( (UOrdering2 w@@161 fixed.java.lang.StringBuilder))
)))
(assert (= (type fixed.org.bouncycastle.crypto.generators.SCrypt) javaTypeType))
(assert (forall ((w@@162 T@U) ) (!  (=> (and (= (type w@@162) javaTypeType) (UOrdering2 fixed.org.bouncycastle.crypto.generators.SCrypt w@@162)) (= fixed.org.bouncycastle.crypto.generators.SCrypt w@@162))
 :pattern ( (UOrdering2 fixed.org.bouncycastle.crypto.generators.SCrypt w@@162))
)))
(assert (= (type fixed.java.util.zip.Checksum) javaTypeType))
(assert (forall ((w@@163 T@U) ) (!  (=> (and (= (type w@@163) javaTypeType) (UOrdering2 fixed.java.util.zip.Checksum w@@163)) (= fixed.java.util.zip.Checksum w@@163))
 :pattern ( (UOrdering2 fixed.java.util.zip.Checksum w@@163))
)))
(assert (= (type fixed.java.util.zip.CRC32) javaTypeType))
(assert (not (= fixed.java.util.zip.CRC32 fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.zip.CRC32 fixed.java.lang.Object))
(assert (not (= fixed.java.util.zip.CRC32 fixed.java.util.zip.Checksum)))
(assert (UOrdering2 fixed.java.util.zip.CRC32 fixed.java.util.zip.Checksum))
(assert (forall ((w@@164 T@U) ) (!  (=> (= (type w@@164) javaTypeType) (=> (and (UOrdering2 fixed.java.util.zip.CRC32 w@@164) (UOrdering2 w@@164 fixed.java.lang.Object)) (or (= fixed.java.util.zip.CRC32 w@@164) (= fixed.java.lang.Object w@@164))))
 :pattern ( (UOrdering2 fixed.java.util.zip.CRC32 w@@164) (UOrdering2 w@@164 fixed.java.lang.Object))
)))
(assert (forall ((w@@165 T@U) ) (!  (=> (= (type w@@165) javaTypeType) (=> (and (UOrdering2 fixed.java.util.zip.CRC32 w@@165) (UOrdering2 w@@165 fixed.java.util.zip.Checksum)) (or (= fixed.java.util.zip.CRC32 w@@165) (= fixed.java.util.zip.Checksum w@@165))))
 :pattern ( (UOrdering2 fixed.java.util.zip.CRC32 w@@165) (UOrdering2 w@@165 fixed.java.util.zip.Checksum))
)))
(assert (forall ((w@@166 T@U) ) (!  (=> (and (= (type w@@166) javaTypeType) (UOrdering2 fixed.java.util.zip.CRC32 w@@166)) (or (or (= fixed.java.util.zip.CRC32 w@@166) (UOrdering2 fixed.java.lang.Object w@@166)) (UOrdering2 fixed.java.util.zip.Checksum w@@166)))
 :pattern ( (UOrdering2 fixed.java.util.zip.CRC32 w@@166))
)))
(assert (forall ((w@@167 T@U) ) (!  (=> (and (= (type w@@167) javaTypeType) (UOrdering2 w@@167 fixed.java.util.zip.CRC32)) (= (oneStep fixed.java.lang.Object w@@167) fixed.java.util.zip.CRC32))
 :pattern ( (UOrdering2 w@@167 fixed.java.util.zip.CRC32))
)))
(assert (= (type fixed.org.cryptomator.crypto.CryptorIOSupport) javaTypeType))
(assert (forall ((w@@168 T@U) ) (!  (=> (and (= (type w@@168) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.CryptorIOSupport w@@168)) (= fixed.org.cryptomator.crypto.CryptorIOSupport w@@168))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.CryptorIOSupport w@@168))
)))
(assert (= (type fixed.org.apache.commons.lang3.StringUtils) javaTypeType))
(assert (forall ((w@@169 T@U) ) (!  (=> (and (= (type w@@169) javaTypeType) (UOrdering2 fixed.org.apache.commons.lang3.StringUtils w@@169)) (= fixed.org.apache.commons.lang3.StringUtils w@@169))
 :pattern ( (UOrdering2 fixed.org.apache.commons.lang3.StringUtils w@@169))
)))
(assert (= (type fixed.javax.crypto.IllegalBlockSizeException) javaTypeType))
(assert (not (= fixed.javax.crypto.IllegalBlockSizeException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.javax.crypto.IllegalBlockSizeException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@170 T@U) ) (!  (=> (= (type w@@170) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.IllegalBlockSizeException w@@170) (UOrdering2 w@@170 fixed.java.security.GeneralSecurityException)) (or (= fixed.javax.crypto.IllegalBlockSizeException w@@170) (= fixed.java.security.GeneralSecurityException w@@170))))
 :pattern ( (UOrdering2 fixed.javax.crypto.IllegalBlockSizeException w@@170) (UOrdering2 w@@170 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@171 T@U) ) (!  (=> (and (= (type w@@171) javaTypeType) (UOrdering2 fixed.javax.crypto.IllegalBlockSizeException w@@171)) (or (= fixed.javax.crypto.IllegalBlockSizeException w@@171) (UOrdering2 fixed.java.security.GeneralSecurityException w@@171)))
 :pattern ( (UOrdering2 fixed.javax.crypto.IllegalBlockSizeException w@@171))
)))
(assert (forall ((w@@172 T@U) ) (!  (=> (and (= (type w@@172) javaTypeType) (UOrdering2 w@@172 fixed.javax.crypto.IllegalBlockSizeException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@172) fixed.javax.crypto.IllegalBlockSizeException))
 :pattern ( (UOrdering2 w@@172 fixed.javax.crypto.IllegalBlockSizeException))
)))
(assert (= (type fixed.java.util.Collection) javaTypeType))
(assert (not (= fixed.java.util.Collection fixed.java.lang.Iterable)))
(assert (UOrdering2 fixed.java.util.Collection fixed.java.lang.Iterable))
(assert (forall ((w@@173 T@U) ) (!  (=> (= (type w@@173) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Collection w@@173) (UOrdering2 w@@173 fixed.java.lang.Iterable)) (or (= fixed.java.util.Collection w@@173) (= fixed.java.lang.Iterable w@@173))))
 :pattern ( (UOrdering2 fixed.java.util.Collection w@@173) (UOrdering2 w@@173 fixed.java.lang.Iterable))
)))
(assert (forall ((w@@174 T@U) ) (!  (=> (and (= (type w@@174) javaTypeType) (UOrdering2 fixed.java.util.Collection w@@174)) (or (= fixed.java.util.Collection w@@174) (UOrdering2 fixed.java.lang.Iterable w@@174)))
 :pattern ( (UOrdering2 fixed.java.util.Collection w@@174))
)))
(assert (= (type fixed.java.util.AbstractCollection) javaTypeType))
(assert (not (= fixed.java.util.AbstractCollection fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.AbstractCollection fixed.java.lang.Object))
(assert (not (= fixed.java.util.AbstractCollection fixed.java.util.Collection)))
(assert (UOrdering2 fixed.java.util.AbstractCollection fixed.java.util.Collection))
(assert (forall ((w@@175 T@U) ) (!  (=> (= (type w@@175) javaTypeType) (=> (and (UOrdering2 fixed.java.util.AbstractCollection w@@175) (UOrdering2 w@@175 fixed.java.lang.Object)) (or (= fixed.java.util.AbstractCollection w@@175) (= fixed.java.lang.Object w@@175))))
 :pattern ( (UOrdering2 fixed.java.util.AbstractCollection w@@175) (UOrdering2 w@@175 fixed.java.lang.Object))
)))
(assert (forall ((w@@176 T@U) ) (!  (=> (= (type w@@176) javaTypeType) (=> (and (UOrdering2 fixed.java.util.AbstractCollection w@@176) (UOrdering2 w@@176 fixed.java.util.Collection)) (or (= fixed.java.util.AbstractCollection w@@176) (= fixed.java.util.Collection w@@176))))
 :pattern ( (UOrdering2 fixed.java.util.AbstractCollection w@@176) (UOrdering2 w@@176 fixed.java.util.Collection))
)))
(assert (forall ((w@@177 T@U) ) (!  (=> (and (= (type w@@177) javaTypeType) (UOrdering2 fixed.java.util.AbstractCollection w@@177)) (or (or (= fixed.java.util.AbstractCollection w@@177) (UOrdering2 fixed.java.lang.Object w@@177)) (UOrdering2 fixed.java.util.Collection w@@177)))
 :pattern ( (UOrdering2 fixed.java.util.AbstractCollection w@@177))
)))
(assert (forall ((w@@178 T@U) ) (!  (=> (and (= (type w@@178) javaTypeType) (UOrdering2 w@@178 fixed.java.util.AbstractCollection)) (= (oneStep fixed.java.lang.Object w@@178) fixed.java.util.AbstractCollection))
 :pattern ( (UOrdering2 w@@178 fixed.java.util.AbstractCollection))
)))
(assert (= (type fixed.java.util.List) javaTypeType))
(assert (not (= fixed.java.util.List fixed.java.util.Collection)))
(assert (UOrdering2 fixed.java.util.List fixed.java.util.Collection))
(assert (forall ((w@@179 T@U) ) (!  (=> (= (type w@@179) javaTypeType) (=> (and (UOrdering2 fixed.java.util.List w@@179) (UOrdering2 w@@179 fixed.java.util.Collection)) (or (= fixed.java.util.List w@@179) (= fixed.java.util.Collection w@@179))))
 :pattern ( (UOrdering2 fixed.java.util.List w@@179) (UOrdering2 w@@179 fixed.java.util.Collection))
)))
(assert (forall ((w@@180 T@U) ) (!  (=> (and (= (type w@@180) javaTypeType) (UOrdering2 fixed.java.util.List w@@180)) (or (= fixed.java.util.List w@@180) (UOrdering2 fixed.java.util.Collection w@@180)))
 :pattern ( (UOrdering2 fixed.java.util.List w@@180))
)))
(assert (= (type fixed.java.util.AbstractList) javaTypeType))
(assert (not (= fixed.java.util.AbstractList fixed.java.util.AbstractCollection)))
(assert (UOrdering2 fixed.java.util.AbstractList fixed.java.util.AbstractCollection))
(assert (not (= fixed.java.util.AbstractList fixed.java.util.List)))
(assert (UOrdering2 fixed.java.util.AbstractList fixed.java.util.List))
(assert (forall ((w@@181 T@U) ) (!  (=> (= (type w@@181) javaTypeType) (=> (and (UOrdering2 fixed.java.util.AbstractList w@@181) (UOrdering2 w@@181 fixed.java.util.AbstractCollection)) (or (= fixed.java.util.AbstractList w@@181) (= fixed.java.util.AbstractCollection w@@181))))
 :pattern ( (UOrdering2 fixed.java.util.AbstractList w@@181) (UOrdering2 w@@181 fixed.java.util.AbstractCollection))
)))
(assert (forall ((w@@182 T@U) ) (!  (=> (= (type w@@182) javaTypeType) (=> (and (UOrdering2 fixed.java.util.AbstractList w@@182) (UOrdering2 w@@182 fixed.java.util.List)) (or (= fixed.java.util.AbstractList w@@182) (= fixed.java.util.List w@@182))))
 :pattern ( (UOrdering2 fixed.java.util.AbstractList w@@182) (UOrdering2 w@@182 fixed.java.util.List))
)))
(assert (forall ((w@@183 T@U) ) (!  (=> (and (= (type w@@183) javaTypeType) (UOrdering2 fixed.java.util.AbstractList w@@183)) (or (or (= fixed.java.util.AbstractList w@@183) (UOrdering2 fixed.java.util.AbstractCollection w@@183)) (UOrdering2 fixed.java.util.List w@@183)))
 :pattern ( (UOrdering2 fixed.java.util.AbstractList w@@183))
)))
(assert (forall ((w@@184 T@U) ) (!  (=> (and (= (type w@@184) javaTypeType) (UOrdering2 w@@184 fixed.java.util.AbstractList)) (= (oneStep fixed.java.util.AbstractCollection w@@184) fixed.java.util.AbstractList))
 :pattern ( (UOrdering2 w@@184 fixed.java.util.AbstractList))
)))
(assert (= (type fixed.java.util.RandomAccess) javaTypeType))
(assert (forall ((w@@185 T@U) ) (!  (=> (and (= (type w@@185) javaTypeType) (UOrdering2 fixed.java.util.RandomAccess w@@185)) (= fixed.java.util.RandomAccess w@@185))
 :pattern ( (UOrdering2 fixed.java.util.RandomAccess w@@185))
)))
(assert (= (type fixed.java.util.ArrayList) javaTypeType))
(assert (not (= fixed.java.util.ArrayList fixed.java.util.AbstractList)))
(assert (UOrdering2 fixed.java.util.ArrayList fixed.java.util.AbstractList))
(assert (not (= fixed.java.util.ArrayList fixed.java.util.List)))
(assert (UOrdering2 fixed.java.util.ArrayList fixed.java.util.List))
(assert (not (= fixed.java.util.ArrayList fixed.java.util.RandomAccess)))
(assert (UOrdering2 fixed.java.util.ArrayList fixed.java.util.RandomAccess))
(assert (not (= fixed.java.util.ArrayList fixed.java.lang.Cloneable)))
(assert (UOrdering2 fixed.java.util.ArrayList fixed.java.lang.Cloneable))
(assert (not (= fixed.java.util.ArrayList fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.util.ArrayList fixed.java.io.Serializable))
(assert (forall ((w@@186 T@U) ) (!  (=> (= (type w@@186) javaTypeType) (=> (and (UOrdering2 fixed.java.util.ArrayList w@@186) (UOrdering2 w@@186 fixed.java.util.AbstractList)) (or (= fixed.java.util.ArrayList w@@186) (= fixed.java.util.AbstractList w@@186))))
 :pattern ( (UOrdering2 fixed.java.util.ArrayList w@@186) (UOrdering2 w@@186 fixed.java.util.AbstractList))
)))
(assert (forall ((w@@187 T@U) ) (!  (=> (= (type w@@187) javaTypeType) (=> (and (UOrdering2 fixed.java.util.ArrayList w@@187) (UOrdering2 w@@187 fixed.java.util.List)) (or (= fixed.java.util.ArrayList w@@187) (= fixed.java.util.List w@@187))))
 :pattern ( (UOrdering2 fixed.java.util.ArrayList w@@187) (UOrdering2 w@@187 fixed.java.util.List))
)))
(assert (forall ((w@@188 T@U) ) (!  (=> (= (type w@@188) javaTypeType) (=> (and (UOrdering2 fixed.java.util.ArrayList w@@188) (UOrdering2 w@@188 fixed.java.util.RandomAccess)) (or (= fixed.java.util.ArrayList w@@188) (= fixed.java.util.RandomAccess w@@188))))
 :pattern ( (UOrdering2 fixed.java.util.ArrayList w@@188) (UOrdering2 w@@188 fixed.java.util.RandomAccess))
)))
(assert (forall ((w@@189 T@U) ) (!  (=> (= (type w@@189) javaTypeType) (=> (and (UOrdering2 fixed.java.util.ArrayList w@@189) (UOrdering2 w@@189 fixed.java.lang.Cloneable)) (or (= fixed.java.util.ArrayList w@@189) (= fixed.java.lang.Cloneable w@@189))))
 :pattern ( (UOrdering2 fixed.java.util.ArrayList w@@189) (UOrdering2 w@@189 fixed.java.lang.Cloneable))
)))
(assert (forall ((w@@190 T@U) ) (!  (=> (= (type w@@190) javaTypeType) (=> (and (UOrdering2 fixed.java.util.ArrayList w@@190) (UOrdering2 w@@190 fixed.java.io.Serializable)) (or (= fixed.java.util.ArrayList w@@190) (= fixed.java.io.Serializable w@@190))))
 :pattern ( (UOrdering2 fixed.java.util.ArrayList w@@190) (UOrdering2 w@@190 fixed.java.io.Serializable))
)))
(assert (forall ((w@@191 T@U) ) (!  (=> (and (= (type w@@191) javaTypeType) (UOrdering2 fixed.java.util.ArrayList w@@191)) (or (or (or (or (or (= fixed.java.util.ArrayList w@@191) (UOrdering2 fixed.java.util.AbstractList w@@191)) (UOrdering2 fixed.java.util.List w@@191)) (UOrdering2 fixed.java.util.RandomAccess w@@191)) (UOrdering2 fixed.java.lang.Cloneable w@@191)) (UOrdering2 fixed.java.io.Serializable w@@191)))
 :pattern ( (UOrdering2 fixed.java.util.ArrayList w@@191))
)))
(assert (forall ((w@@192 T@U) ) (!  (=> (and (= (type w@@192) javaTypeType) (UOrdering2 w@@192 fixed.java.util.ArrayList)) (= (oneStep fixed.java.util.AbstractList w@@192) fixed.java.util.ArrayList))
 :pattern ( (UOrdering2 w@@192 fixed.java.util.ArrayList))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@193 T@U) ) (!  (=> (= (type w@@193) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@193) (UOrdering2 w@@193 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@193) (= fixed.java.lang.RuntimeException w@@193))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@193) (UOrdering2 w@@193 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@194 T@U) ) (!  (=> (and (= (type w@@194) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@194)) (or (= fixed.java.lang.NullPointerException w@@194) (UOrdering2 fixed.java.lang.RuntimeException w@@194)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@194))
)))
(assert (forall ((w@@195 T@U) ) (!  (=> (and (= (type w@@195) javaTypeType) (UOrdering2 w@@195 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@195) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@195 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@196 T@U) ) (!  (=> (= (type w@@196) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@196) (UOrdering2 w@@196 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@196) (= fixed.java.lang.RuntimeException w@@196))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@196) (UOrdering2 w@@196 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@197 T@U) ) (!  (=> (and (= (type w@@197) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@197)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@197) (UOrdering2 fixed.java.lang.RuntimeException w@@197)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@197))
)))
(assert (forall ((w@@198 T@U) ) (!  (=> (and (= (type w@@198) javaTypeType) (UOrdering2 w@@198 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@198) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@198 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@199 T@U) ) (!  (=> (= (type w@@199) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@199) (UOrdering2 w@@199 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@199) (= fixed.java.lang.IndexOutOfBoundsException w@@199))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@199) (UOrdering2 w@@199 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@200 T@U) ) (!  (=> (and (= (type w@@200) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@200)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@200) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@200)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@200))
)))
(assert (forall ((w@@201 T@U) ) (!  (=> (and (= (type w@@201) javaTypeType) (UOrdering2 w@@201 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@201) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@201 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (= (type fixed.$StringConst13) refType))
(assert (forall ((w@@202 T@U) ) (!  (=> (and (= (type w@@202) refType) (UOrdering2 fixed.$StringConst13 w@@202)) (= fixed.$StringConst13 w@@202))
 :pattern ( (UOrdering2 fixed.$StringConst13 w@@202))
)))
(assert (= (type fixed.org.apache.commons.lang3.ArrayUtils) javaTypeType))
(assert (forall ((w@@203 T@U) ) (!  (=> (and (= (type w@@203) javaTypeType) (UOrdering2 fixed.org.apache.commons.lang3.ArrayUtils w@@203)) (= fixed.org.apache.commons.lang3.ArrayUtils w@@203))
 :pattern ( (UOrdering2 fixed.org.apache.commons.lang3.ArrayUtils w@@203))
)))
(assert (= (type fixed.java.nio.Buffer) javaTypeType))
(assert (not (= fixed.java.nio.Buffer fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.nio.Buffer fixed.java.lang.Object))
(assert (forall ((w@@204 T@U) ) (!  (=> (= (type w@@204) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.Buffer w@@204) (UOrdering2 w@@204 fixed.java.lang.Object)) (or (= fixed.java.nio.Buffer w@@204) (= fixed.java.lang.Object w@@204))))
 :pattern ( (UOrdering2 fixed.java.nio.Buffer w@@204) (UOrdering2 w@@204 fixed.java.lang.Object))
)))
(assert (forall ((w@@205 T@U) ) (!  (=> (and (= (type w@@205) javaTypeType) (UOrdering2 fixed.java.nio.Buffer w@@205)) (or (= fixed.java.nio.Buffer w@@205) (UOrdering2 fixed.java.lang.Object w@@205)))
 :pattern ( (UOrdering2 fixed.java.nio.Buffer w@@205))
)))
(assert (forall ((w@@206 T@U) ) (!  (=> (and (= (type w@@206) javaTypeType) (UOrdering2 w@@206 fixed.java.nio.Buffer)) (= (oneStep fixed.java.lang.Object w@@206) fixed.java.nio.Buffer))
 :pattern ( (UOrdering2 w@@206 fixed.java.nio.Buffer))
)))
(assert (= (type fixed.java.nio.ByteBuffer) javaTypeType))
(assert (not (= fixed.java.nio.ByteBuffer fixed.java.nio.Buffer)))
(assert (UOrdering2 fixed.java.nio.ByteBuffer fixed.java.nio.Buffer))
(assert (not (= fixed.java.nio.ByteBuffer fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.nio.ByteBuffer fixed.java.lang.Comparable))
(assert (forall ((w@@207 T@U) ) (!  (=> (= (type w@@207) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.ByteBuffer w@@207) (UOrdering2 w@@207 fixed.java.nio.Buffer)) (or (= fixed.java.nio.ByteBuffer w@@207) (= fixed.java.nio.Buffer w@@207))))
 :pattern ( (UOrdering2 fixed.java.nio.ByteBuffer w@@207) (UOrdering2 w@@207 fixed.java.nio.Buffer))
)))
(assert (forall ((w@@208 T@U) ) (!  (=> (= (type w@@208) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.ByteBuffer w@@208) (UOrdering2 w@@208 fixed.java.lang.Comparable)) (or (= fixed.java.nio.ByteBuffer w@@208) (= fixed.java.lang.Comparable w@@208))))
 :pattern ( (UOrdering2 fixed.java.nio.ByteBuffer w@@208) (UOrdering2 w@@208 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@209 T@U) ) (!  (=> (and (= (type w@@209) javaTypeType) (UOrdering2 fixed.java.nio.ByteBuffer w@@209)) (or (or (= fixed.java.nio.ByteBuffer w@@209) (UOrdering2 fixed.java.nio.Buffer w@@209)) (UOrdering2 fixed.java.lang.Comparable w@@209)))
 :pattern ( (UOrdering2 fixed.java.nio.ByteBuffer w@@209))
)))
(assert (forall ((w@@210 T@U) ) (!  (=> (and (= (type w@@210) javaTypeType) (UOrdering2 w@@210 fixed.java.nio.ByteBuffer)) (= (oneStep fixed.java.nio.Buffer w@@210) fixed.java.nio.ByteBuffer))
 :pattern ( (UOrdering2 w@@210 fixed.java.nio.ByteBuffer))
)))
(assert (= (type fixed.java.nio.charset.Charset) javaTypeType))
(assert (not (= fixed.java.nio.charset.Charset fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.nio.charset.Charset fixed.java.lang.Object))
(assert (not (= fixed.java.nio.charset.Charset fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.nio.charset.Charset fixed.java.lang.Comparable))
(assert (forall ((w@@211 T@U) ) (!  (=> (= (type w@@211) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.charset.Charset w@@211) (UOrdering2 w@@211 fixed.java.lang.Object)) (or (= fixed.java.nio.charset.Charset w@@211) (= fixed.java.lang.Object w@@211))))
 :pattern ( (UOrdering2 fixed.java.nio.charset.Charset w@@211) (UOrdering2 w@@211 fixed.java.lang.Object))
)))
(assert (forall ((w@@212 T@U) ) (!  (=> (= (type w@@212) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.charset.Charset w@@212) (UOrdering2 w@@212 fixed.java.lang.Comparable)) (or (= fixed.java.nio.charset.Charset w@@212) (= fixed.java.lang.Comparable w@@212))))
 :pattern ( (UOrdering2 fixed.java.nio.charset.Charset w@@212) (UOrdering2 w@@212 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@213 T@U) ) (!  (=> (and (= (type w@@213) javaTypeType) (UOrdering2 fixed.java.nio.charset.Charset w@@213)) (or (or (= fixed.java.nio.charset.Charset w@@213) (UOrdering2 fixed.java.lang.Object w@@213)) (UOrdering2 fixed.java.lang.Comparable w@@213)))
 :pattern ( (UOrdering2 fixed.java.nio.charset.Charset w@@213))
)))
(assert (forall ((w@@214 T@U) ) (!  (=> (and (= (type w@@214) javaTypeType) (UOrdering2 w@@214 fixed.java.nio.charset.Charset)) (= (oneStep fixed.java.lang.Object w@@214) fixed.java.nio.charset.Charset))
 :pattern ( (UOrdering2 w@@214 fixed.java.nio.charset.Charset))
)))
(assert (= (type fixed.javax.crypto.BadPaddingException) javaTypeType))
(assert (not (= fixed.javax.crypto.BadPaddingException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.javax.crypto.BadPaddingException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@215 T@U) ) (!  (=> (= (type w@@215) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.BadPaddingException w@@215) (UOrdering2 w@@215 fixed.java.security.GeneralSecurityException)) (or (= fixed.javax.crypto.BadPaddingException w@@215) (= fixed.java.security.GeneralSecurityException w@@215))))
 :pattern ( (UOrdering2 fixed.javax.crypto.BadPaddingException w@@215) (UOrdering2 w@@215 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@216 T@U) ) (!  (=> (and (= (type w@@216) javaTypeType) (UOrdering2 fixed.javax.crypto.BadPaddingException w@@216)) (or (= fixed.javax.crypto.BadPaddingException w@@216) (UOrdering2 fixed.java.security.GeneralSecurityException w@@216)))
 :pattern ( (UOrdering2 fixed.javax.crypto.BadPaddingException w@@216))
)))
(assert (forall ((w@@217 T@U) ) (!  (=> (and (= (type w@@217) javaTypeType) (UOrdering2 w@@217 fixed.javax.crypto.BadPaddingException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@217) fixed.javax.crypto.BadPaddingException))
 :pattern ( (UOrdering2 w@@217 fixed.javax.crypto.BadPaddingException))
)))
(assert (= (type fixed.org.apache.commons.codec.binary.BaseNCodec) javaTypeType))
(assert (forall ((w@@218 T@U) ) (!  (=> (and (= (type w@@218) javaTypeType) (UOrdering2 fixed.org.apache.commons.codec.binary.BaseNCodec w@@218)) (= fixed.org.apache.commons.codec.binary.BaseNCodec w@@218))
 :pattern ( (UOrdering2 fixed.org.apache.commons.codec.binary.BaseNCodec w@@218))
)))
(assert (= (type fixed.$StringConst14) refType))
(assert (forall ((w@@219 T@U) ) (!  (=> (and (= (type w@@219) refType) (UOrdering2 fixed.$StringConst14 w@@219)) (= fixed.$StringConst14 w@@219))
 :pattern ( (UOrdering2 fixed.$StringConst14 w@@219))
)))
(assert (= (type fixed.java.lang.Number) javaTypeType))
(assert (not (= fixed.java.lang.Number fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Number fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.io.Serializable))
(assert (forall ((w@@220 T@U) ) (!  (=> (= (type w@@220) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@220) (UOrdering2 w@@220 fixed.java.lang.Object)) (or (= fixed.java.lang.Number w@@220) (= fixed.java.lang.Object w@@220))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@220) (UOrdering2 w@@220 fixed.java.lang.Object))
)))
(assert (forall ((w@@221 T@U) ) (!  (=> (= (type w@@221) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@221) (UOrdering2 w@@221 fixed.java.io.Serializable)) (or (= fixed.java.lang.Number w@@221) (= fixed.java.io.Serializable w@@221))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@221) (UOrdering2 w@@221 fixed.java.io.Serializable))
)))
(assert (forall ((w@@222 T@U) ) (!  (=> (and (= (type w@@222) javaTypeType) (UOrdering2 fixed.java.lang.Number w@@222)) (or (or (= fixed.java.lang.Number w@@222) (UOrdering2 fixed.java.lang.Object w@@222)) (UOrdering2 fixed.java.io.Serializable w@@222)))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@222))
)))
(assert (forall ((w@@223 T@U) ) (!  (=> (and (= (type w@@223) javaTypeType) (UOrdering2 w@@223 fixed.java.lang.Number)) (= (oneStep fixed.java.lang.Object w@@223) fixed.java.lang.Number))
 :pattern ( (UOrdering2 w@@223 fixed.java.lang.Number))
)))
(assert (= (type fixed.java.lang.Long) javaTypeType))
(assert (not (= fixed.java.lang.Long fixed.java.lang.Number)))
(assert (UOrdering2 fixed.java.lang.Long fixed.java.lang.Number))
(assert (not (= fixed.java.lang.Long fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Long fixed.java.lang.Comparable))
(assert (forall ((w@@224 T@U) ) (!  (=> (= (type w@@224) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Long w@@224) (UOrdering2 w@@224 fixed.java.lang.Number)) (or (= fixed.java.lang.Long w@@224) (= fixed.java.lang.Number w@@224))))
 :pattern ( (UOrdering2 fixed.java.lang.Long w@@224) (UOrdering2 w@@224 fixed.java.lang.Number))
)))
(assert (forall ((w@@225 T@U) ) (!  (=> (= (type w@@225) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Long w@@225) (UOrdering2 w@@225 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Long w@@225) (= fixed.java.lang.Comparable w@@225))))
 :pattern ( (UOrdering2 fixed.java.lang.Long w@@225) (UOrdering2 w@@225 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@226 T@U) ) (!  (=> (and (= (type w@@226) javaTypeType) (UOrdering2 fixed.java.lang.Long w@@226)) (or (or (= fixed.java.lang.Long w@@226) (UOrdering2 fixed.java.lang.Number w@@226)) (UOrdering2 fixed.java.lang.Comparable w@@226)))
 :pattern ( (UOrdering2 fixed.java.lang.Long w@@226))
)))
(assert (forall ((w@@227 T@U) ) (!  (=> (and (= (type w@@227) javaTypeType) (UOrdering2 w@@227 fixed.java.lang.Long)) (= (oneStep fixed.java.lang.Number w@@227) fixed.java.lang.Long))
 :pattern ( (UOrdering2 w@@227 fixed.java.lang.Long))
)))
(assert (= (type fixed.$StringConst15) refType))
(assert (forall ((w@@228 T@U) ) (!  (=> (and (= (type w@@228) refType) (UOrdering2 fixed.$StringConst15 w@@228)) (= fixed.$StringConst15 w@@228))
 :pattern ( (UOrdering2 fixed.$StringConst15 w@@228))
)))
(assert (= (type fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata) javaTypeType))
(assert (forall ((w@@229 T@U) ) (!  (=> (and (= (type w@@229) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata w@@229)) (= fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata w@@229))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata w@@229))
)))
(assert (= (type fixed.java.util.UUID) javaTypeType))
(assert (not (= fixed.java.util.UUID fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.UUID fixed.java.lang.Object))
(assert (not (= fixed.java.util.UUID fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.util.UUID fixed.java.io.Serializable))
(assert (not (= fixed.java.util.UUID fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.util.UUID fixed.java.lang.Comparable))
(assert (forall ((w@@230 T@U) ) (!  (=> (= (type w@@230) javaTypeType) (=> (and (UOrdering2 fixed.java.util.UUID w@@230) (UOrdering2 w@@230 fixed.java.lang.Object)) (or (= fixed.java.util.UUID w@@230) (= fixed.java.lang.Object w@@230))))
 :pattern ( (UOrdering2 fixed.java.util.UUID w@@230) (UOrdering2 w@@230 fixed.java.lang.Object))
)))
(assert (forall ((w@@231 T@U) ) (!  (=> (= (type w@@231) javaTypeType) (=> (and (UOrdering2 fixed.java.util.UUID w@@231) (UOrdering2 w@@231 fixed.java.io.Serializable)) (or (= fixed.java.util.UUID w@@231) (= fixed.java.io.Serializable w@@231))))
 :pattern ( (UOrdering2 fixed.java.util.UUID w@@231) (UOrdering2 w@@231 fixed.java.io.Serializable))
)))
(assert (forall ((w@@232 T@U) ) (!  (=> (= (type w@@232) javaTypeType) (=> (and (UOrdering2 fixed.java.util.UUID w@@232) (UOrdering2 w@@232 fixed.java.lang.Comparable)) (or (= fixed.java.util.UUID w@@232) (= fixed.java.lang.Comparable w@@232))))
 :pattern ( (UOrdering2 fixed.java.util.UUID w@@232) (UOrdering2 w@@232 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@233 T@U) ) (!  (=> (and (= (type w@@233) javaTypeType) (UOrdering2 fixed.java.util.UUID w@@233)) (or (or (or (= fixed.java.util.UUID w@@233) (UOrdering2 fixed.java.lang.Object w@@233)) (UOrdering2 fixed.java.io.Serializable w@@233)) (UOrdering2 fixed.java.lang.Comparable w@@233)))
 :pattern ( (UOrdering2 fixed.java.util.UUID w@@233))
)))
(assert (forall ((w@@234 T@U) ) (!  (=> (and (= (type w@@234) javaTypeType) (UOrdering2 w@@234 fixed.java.util.UUID)) (= (oneStep fixed.java.lang.Object w@@234) fixed.java.util.UUID))
 :pattern ( (UOrdering2 w@@234 fixed.java.util.UUID))
)))
(assert (= (type fixed.$StringConst16) refType))
(assert (forall ((w@@235 T@U) ) (!  (=> (and (= (type w@@235) refType) (UOrdering2 fixed.$StringConst16 w@@235)) (= fixed.$StringConst16 w@@235))
 :pattern ( (UOrdering2 fixed.$StringConst16 w@@235))
)))
(assert (= (type fixed.$StringConst17) refType))
(assert (forall ((w@@236 T@U) ) (!  (=> (and (= (type w@@236) refType) (UOrdering2 fixed.$StringConst17 w@@236)) (= fixed.$StringConst17 w@@236))
 :pattern ( (UOrdering2 fixed.$StringConst17 w@@236))
)))
(assert (= (type fixed.$StringConst18) refType))
(assert (forall ((w@@237 T@U) ) (!  (=> (and (= (type w@@237) refType) (UOrdering2 fixed.$StringConst18 w@@237)) (= fixed.$StringConst18 w@@237))
 :pattern ( (UOrdering2 fixed.$StringConst18 w@@237))
)))
(assert (= (type fixed.$StringConst19) refType))
(assert (forall ((w@@238 T@U) ) (!  (=> (and (= (type w@@238) refType) (UOrdering2 fixed.$StringConst19 w@@238)) (= fixed.$StringConst19 w@@238))
 :pattern ( (UOrdering2 fixed.$StringConst19 w@@238))
)))
(assert (= (type fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata) refType))
(assert (forall ((w@@239 T@U) ) (!  (=> (and (= (type w@@239) refType) (UOrdering2 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata w@@239)) (= fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata w@@239))
 :pattern ( (UOrdering2 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata w@@239))
)))
(assert (= (type fixed.java.nio.channels.Channel) javaTypeType))
(assert (not (= fixed.java.nio.channels.Channel fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.nio.channels.Channel fixed.java.io.Closeable))
(assert (forall ((w@@240 T@U) ) (!  (=> (= (type w@@240) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.channels.Channel w@@240) (UOrdering2 w@@240 fixed.java.io.Closeable)) (or (= fixed.java.nio.channels.Channel w@@240) (= fixed.java.io.Closeable w@@240))))
 :pattern ( (UOrdering2 fixed.java.nio.channels.Channel w@@240) (UOrdering2 w@@240 fixed.java.io.Closeable))
)))
(assert (forall ((w@@241 T@U) ) (!  (=> (and (= (type w@@241) javaTypeType) (UOrdering2 fixed.java.nio.channels.Channel w@@241)) (or (= fixed.java.nio.channels.Channel w@@241) (UOrdering2 fixed.java.io.Closeable w@@241)))
 :pattern ( (UOrdering2 fixed.java.nio.channels.Channel w@@241))
)))
(assert (= (type fixed.java.nio.channels.ReadableByteChannel) javaTypeType))
(assert (not (= fixed.java.nio.channels.ReadableByteChannel fixed.java.nio.channels.Channel)))
(assert (UOrdering2 fixed.java.nio.channels.ReadableByteChannel fixed.java.nio.channels.Channel))
(assert (forall ((w@@242 T@U) ) (!  (=> (= (type w@@242) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.channels.ReadableByteChannel w@@242) (UOrdering2 w@@242 fixed.java.nio.channels.Channel)) (or (= fixed.java.nio.channels.ReadableByteChannel w@@242) (= fixed.java.nio.channels.Channel w@@242))))
 :pattern ( (UOrdering2 fixed.java.nio.channels.ReadableByteChannel w@@242) (UOrdering2 w@@242 fixed.java.nio.channels.Channel))
)))
(assert (forall ((w@@243 T@U) ) (!  (=> (and (= (type w@@243) javaTypeType) (UOrdering2 fixed.java.nio.channels.ReadableByteChannel w@@243)) (or (= fixed.java.nio.channels.ReadableByteChannel w@@243) (UOrdering2 fixed.java.nio.channels.Channel w@@243)))
 :pattern ( (UOrdering2 fixed.java.nio.channels.ReadableByteChannel w@@243))
)))
(assert (= (type fixed.java.nio.channels.WritableByteChannel) javaTypeType))
(assert (not (= fixed.java.nio.channels.WritableByteChannel fixed.java.nio.channels.Channel)))
(assert (UOrdering2 fixed.java.nio.channels.WritableByteChannel fixed.java.nio.channels.Channel))
(assert (forall ((w@@244 T@U) ) (!  (=> (= (type w@@244) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.channels.WritableByteChannel w@@244) (UOrdering2 w@@244 fixed.java.nio.channels.Channel)) (or (= fixed.java.nio.channels.WritableByteChannel w@@244) (= fixed.java.nio.channels.Channel w@@244))))
 :pattern ( (UOrdering2 fixed.java.nio.channels.WritableByteChannel w@@244) (UOrdering2 w@@244 fixed.java.nio.channels.Channel))
)))
(assert (forall ((w@@245 T@U) ) (!  (=> (and (= (type w@@245) javaTypeType) (UOrdering2 fixed.java.nio.channels.WritableByteChannel w@@245)) (or (= fixed.java.nio.channels.WritableByteChannel w@@245) (UOrdering2 fixed.java.nio.channels.Channel w@@245)))
 :pattern ( (UOrdering2 fixed.java.nio.channels.WritableByteChannel w@@245))
)))
(assert (= (type fixed.java.nio.channels.ByteChannel) javaTypeType))
(assert (not (= fixed.java.nio.channels.ByteChannel fixed.java.nio.channels.ReadableByteChannel)))
(assert (UOrdering2 fixed.java.nio.channels.ByteChannel fixed.java.nio.channels.ReadableByteChannel))
(assert (not (= fixed.java.nio.channels.ByteChannel fixed.java.nio.channels.WritableByteChannel)))
(assert (UOrdering2 fixed.java.nio.channels.ByteChannel fixed.java.nio.channels.WritableByteChannel))
(assert (forall ((w@@246 T@U) ) (!  (=> (= (type w@@246) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.channels.ByteChannel w@@246) (UOrdering2 w@@246 fixed.java.nio.channels.ReadableByteChannel)) (or (= fixed.java.nio.channels.ByteChannel w@@246) (= fixed.java.nio.channels.ReadableByteChannel w@@246))))
 :pattern ( (UOrdering2 fixed.java.nio.channels.ByteChannel w@@246) (UOrdering2 w@@246 fixed.java.nio.channels.ReadableByteChannel))
)))
(assert (forall ((w@@247 T@U) ) (!  (=> (= (type w@@247) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.channels.ByteChannel w@@247) (UOrdering2 w@@247 fixed.java.nio.channels.WritableByteChannel)) (or (= fixed.java.nio.channels.ByteChannel w@@247) (= fixed.java.nio.channels.WritableByteChannel w@@247))))
 :pattern ( (UOrdering2 fixed.java.nio.channels.ByteChannel w@@247) (UOrdering2 w@@247 fixed.java.nio.channels.WritableByteChannel))
)))
(assert (forall ((w@@248 T@U) ) (!  (=> (and (= (type w@@248) javaTypeType) (UOrdering2 fixed.java.nio.channels.ByteChannel w@@248)) (or (or (= fixed.java.nio.channels.ByteChannel w@@248) (UOrdering2 fixed.java.nio.channels.ReadableByteChannel w@@248)) (UOrdering2 fixed.java.nio.channels.WritableByteChannel w@@248)))
 :pattern ( (UOrdering2 fixed.java.nio.channels.ByteChannel w@@248))
)))
(assert (= (type fixed.java.nio.channels.SeekableByteChannel) javaTypeType))
(assert (not (= fixed.java.nio.channels.SeekableByteChannel fixed.java.nio.channels.ByteChannel)))
(assert (UOrdering2 fixed.java.nio.channels.SeekableByteChannel fixed.java.nio.channels.ByteChannel))
(assert (forall ((w@@249 T@U) ) (!  (=> (= (type w@@249) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.channels.SeekableByteChannel w@@249) (UOrdering2 w@@249 fixed.java.nio.channels.ByteChannel)) (or (= fixed.java.nio.channels.SeekableByteChannel w@@249) (= fixed.java.nio.channels.ByteChannel w@@249))))
 :pattern ( (UOrdering2 fixed.java.nio.channels.SeekableByteChannel w@@249) (UOrdering2 w@@249 fixed.java.nio.channels.ByteChannel))
)))
(assert (forall ((w@@250 T@U) ) (!  (=> (and (= (type w@@250) javaTypeType) (UOrdering2 fixed.java.nio.channels.SeekableByteChannel w@@250)) (or (= fixed.java.nio.channels.SeekableByteChannel w@@250) (UOrdering2 fixed.java.nio.channels.ByteChannel w@@250)))
 :pattern ( (UOrdering2 fixed.java.nio.channels.SeekableByteChannel w@@250))
)))
(assert (= (type fixed.$StringConst20) refType))
(assert (forall ((w@@251 T@U) ) (!  (=> (and (= (type w@@251) refType) (UOrdering2 fixed.$StringConst20 w@@251)) (= fixed.$StringConst20 w@@251))
 :pattern ( (UOrdering2 fixed.$StringConst20 w@@251))
)))
(assert (= (type fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream) javaTypeType))
(assert (forall ((w@@252 T@U) ) (!  (=> (and (= (type w@@252) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream w@@252)) (= fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream w@@252))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream w@@252))
)))
(assert (= (type fixed.org.cryptomator.crypto.aes256.MacInputStream) javaTypeType))
(assert (forall ((w@@253 T@U) ) (!  (=> (and (= (type w@@253) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.aes256.MacInputStream w@@253)) (= fixed.org.cryptomator.crypto.aes256.MacInputStream w@@253))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.MacInputStream w@@253))
)))
(assert (= (type fixed.org.apache.commons.io.output.NullOutputStream) javaTypeType))
(assert (forall ((w@@254 T@U) ) (!  (=> (and (= (type w@@254) javaTypeType) (UOrdering2 fixed.org.apache.commons.io.output.NullOutputStream w@@254)) (= fixed.org.apache.commons.io.output.NullOutputStream w@@254))
 :pattern ( (UOrdering2 fixed.org.apache.commons.io.output.NullOutputStream w@@254))
)))
(assert (= (type fixed.org.apache.commons.io.IOUtils) javaTypeType))
(assert (forall ((w@@255 T@U) ) (!  (=> (and (= (type w@@255) javaTypeType) (UOrdering2 fixed.org.apache.commons.io.IOUtils w@@255)) (= fixed.org.apache.commons.io.IOUtils w@@255))
 :pattern ( (UOrdering2 fixed.org.apache.commons.io.IOUtils w@@255))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@256 T@U) ) (!  (=> (= (type w@@256) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@256) (UOrdering2 w@@256 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@256) (= fixed.java.lang.Object w@@256))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@256) (UOrdering2 w@@256 fixed.java.lang.Object))
)))
(assert (forall ((w@@257 T@U) ) (!  (=> (and (= (type w@@257) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@257)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@257) (UOrdering2 fixed.java.lang.Object w@@257)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@257))
)))
(assert (forall ((w@@258 T@U) ) (!  (=> (and (= (type w@@258) javaTypeType) (UOrdering2 w@@258 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@258) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@258 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.io.FilterInputStream) javaTypeType))
(assert (not (= fixed.java.io.FilterInputStream fixed.java.io.InputStream)))
(assert (UOrdering2 fixed.java.io.FilterInputStream fixed.java.io.InputStream))
(assert (forall ((w@@259 T@U) ) (!  (=> (= (type w@@259) javaTypeType) (=> (and (UOrdering2 fixed.java.io.FilterInputStream w@@259) (UOrdering2 w@@259 fixed.java.io.InputStream)) (or (= fixed.java.io.FilterInputStream w@@259) (= fixed.java.io.InputStream w@@259))))
 :pattern ( (UOrdering2 fixed.java.io.FilterInputStream w@@259) (UOrdering2 w@@259 fixed.java.io.InputStream))
)))
(assert (forall ((w@@260 T@U) ) (!  (=> (and (= (type w@@260) javaTypeType) (UOrdering2 fixed.java.io.FilterInputStream w@@260)) (or (= fixed.java.io.FilterInputStream w@@260) (UOrdering2 fixed.java.io.InputStream w@@260)))
 :pattern ( (UOrdering2 fixed.java.io.FilterInputStream w@@260))
)))
(assert (forall ((w@@261 T@U) ) (!  (=> (and (= (type w@@261) javaTypeType) (UOrdering2 w@@261 fixed.java.io.FilterInputStream)) (= (oneStep fixed.java.io.InputStream w@@261) fixed.java.io.FilterInputStream))
 :pattern ( (UOrdering2 w@@261 fixed.java.io.FilterInputStream))
)))
(assert (= (type fixed.javax.crypto.CipherInputStream) javaTypeType))
(assert (not (= fixed.javax.crypto.CipherInputStream fixed.java.io.FilterInputStream)))
(assert (UOrdering2 fixed.javax.crypto.CipherInputStream fixed.java.io.FilterInputStream))
(assert (forall ((w@@262 T@U) ) (!  (=> (= (type w@@262) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.CipherInputStream w@@262) (UOrdering2 w@@262 fixed.java.io.FilterInputStream)) (or (= fixed.javax.crypto.CipherInputStream w@@262) (= fixed.java.io.FilterInputStream w@@262))))
 :pattern ( (UOrdering2 fixed.javax.crypto.CipherInputStream w@@262) (UOrdering2 w@@262 fixed.java.io.FilterInputStream))
)))
(assert (forall ((w@@263 T@U) ) (!  (=> (and (= (type w@@263) javaTypeType) (UOrdering2 fixed.javax.crypto.CipherInputStream w@@263)) (or (= fixed.javax.crypto.CipherInputStream w@@263) (UOrdering2 fixed.java.io.FilterInputStream w@@263)))
 :pattern ( (UOrdering2 fixed.javax.crypto.CipherInputStream w@@263))
)))
(assert (forall ((w@@264 T@U) ) (!  (=> (and (= (type w@@264) javaTypeType) (UOrdering2 w@@264 fixed.javax.crypto.CipherInputStream)) (= (oneStep fixed.java.io.FilterInputStream w@@264) fixed.javax.crypto.CipherInputStream))
 :pattern ( (UOrdering2 w@@264 fixed.javax.crypto.CipherInputStream))
)))
(assert (= (type fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream) javaTypeType))
(assert (forall ((w@@265 T@U) ) (!  (=> (and (= (type w@@265) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream w@@265)) (= fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream w@@265))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream w@@265))
)))
(assert (= (type fixed.org.cryptomator.crypto.aes256.MacOutputStream) javaTypeType))
(assert (forall ((w@@266 T@U) ) (!  (=> (and (= (type w@@266) javaTypeType) (UOrdering2 fixed.org.cryptomator.crypto.aes256.MacOutputStream w@@266)) (= fixed.org.cryptomator.crypto.aes256.MacOutputStream w@@266))
 :pattern ( (UOrdering2 fixed.org.cryptomator.crypto.aes256.MacOutputStream w@@266))
)))
(assert (= (type fixed.java.io.FilterOutputStream) javaTypeType))
(assert (not (= fixed.java.io.FilterOutputStream fixed.java.io.OutputStream)))
(assert (UOrdering2 fixed.java.io.FilterOutputStream fixed.java.io.OutputStream))
(assert (forall ((w@@267 T@U) ) (!  (=> (= (type w@@267) javaTypeType) (=> (and (UOrdering2 fixed.java.io.FilterOutputStream w@@267) (UOrdering2 w@@267 fixed.java.io.OutputStream)) (or (= fixed.java.io.FilterOutputStream w@@267) (= fixed.java.io.OutputStream w@@267))))
 :pattern ( (UOrdering2 fixed.java.io.FilterOutputStream w@@267) (UOrdering2 w@@267 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@268 T@U) ) (!  (=> (and (= (type w@@268) javaTypeType) (UOrdering2 fixed.java.io.FilterOutputStream w@@268)) (or (= fixed.java.io.FilterOutputStream w@@268) (UOrdering2 fixed.java.io.OutputStream w@@268)))
 :pattern ( (UOrdering2 fixed.java.io.FilterOutputStream w@@268))
)))
(assert (forall ((w@@269 T@U) ) (!  (=> (and (= (type w@@269) javaTypeType) (UOrdering2 w@@269 fixed.java.io.FilterOutputStream)) (= (oneStep fixed.java.io.OutputStream w@@269) fixed.java.io.FilterOutputStream))
 :pattern ( (UOrdering2 w@@269 fixed.java.io.FilterOutputStream))
)))
(assert (= (type fixed.javax.crypto.CipherOutputStream) javaTypeType))
(assert (not (= fixed.javax.crypto.CipherOutputStream fixed.java.io.FilterOutputStream)))
(assert (UOrdering2 fixed.javax.crypto.CipherOutputStream fixed.java.io.FilterOutputStream))
(assert (forall ((w@@270 T@U) ) (!  (=> (= (type w@@270) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.CipherOutputStream w@@270) (UOrdering2 w@@270 fixed.java.io.FilterOutputStream)) (or (= fixed.javax.crypto.CipherOutputStream w@@270) (= fixed.java.io.FilterOutputStream w@@270))))
 :pattern ( (UOrdering2 fixed.javax.crypto.CipherOutputStream w@@270) (UOrdering2 w@@270 fixed.java.io.FilterOutputStream))
)))
(assert (forall ((w@@271 T@U) ) (!  (=> (and (= (type w@@271) javaTypeType) (UOrdering2 fixed.javax.crypto.CipherOutputStream w@@271)) (or (= fixed.javax.crypto.CipherOutputStream w@@271) (UOrdering2 fixed.java.io.FilterOutputStream w@@271)))
 :pattern ( (UOrdering2 fixed.javax.crypto.CipherOutputStream w@@271))
)))
(assert (forall ((w@@272 T@U) ) (!  (=> (and (= (type w@@272) javaTypeType) (UOrdering2 w@@272 fixed.javax.crypto.CipherOutputStream)) (= (oneStep fixed.java.io.FilterOutputStream w@@272) fixed.javax.crypto.CipherOutputStream))
 :pattern ( (UOrdering2 w@@272 fixed.javax.crypto.CipherOutputStream))
)))
(assert (= (type fixed.java.lang.Math) javaTypeType))
(assert (not (= fixed.java.lang.Math fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Math fixed.java.lang.Object))
(assert (forall ((w@@273 T@U) ) (!  (=> (= (type w@@273) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Math w@@273) (UOrdering2 w@@273 fixed.java.lang.Object)) (or (= fixed.java.lang.Math w@@273) (= fixed.java.lang.Object w@@273))))
 :pattern ( (UOrdering2 fixed.java.lang.Math w@@273) (UOrdering2 w@@273 fixed.java.lang.Object))
)))
(assert (forall ((w@@274 T@U) ) (!  (=> (and (= (type w@@274) javaTypeType) (UOrdering2 fixed.java.lang.Math w@@274)) (or (= fixed.java.lang.Math w@@274) (UOrdering2 fixed.java.lang.Object w@@274)))
 :pattern ( (UOrdering2 fixed.java.lang.Math w@@274))
)))
(assert (forall ((w@@275 T@U) ) (!  (=> (and (= (type w@@275) javaTypeType) (UOrdering2 w@@275 fixed.java.lang.Math)) (= (oneStep fixed.java.lang.Object w@@275) fixed.java.lang.Math))
 :pattern ( (UOrdering2 w@@275 fixed.java.lang.Math))
)))
(assert (forall ((w@@276 T@U) ) (!  (=> (and (= (type w@@276) intType) (UOrdering2 (int_2_U fixed.$DoubleConst0) w@@276)) (= fixed.$DoubleConst0 (U_2_int w@@276)))
 :pattern ( (UOrdering2 (int_2_U fixed.$DoubleConst0) w@@276))
)))
(assert (forall ((w@@277 T@U) ) (!  (=> (and (= (type w@@277) intType) (UOrdering2 (int_2_U fixed.$DoubleConst1) w@@277)) (= fixed.$DoubleConst1 (U_2_int w@@277)))
 :pattern ( (UOrdering2 (int_2_U fixed.$DoubleConst1) w@@277))
)))
(assert (= (type fixed.$StringConst21) refType))
(assert (forall ((w@@278 T@U) ) (!  (=> (and (= (type w@@278) refType) (UOrdering2 fixed.$StringConst21 w@@278)) (= fixed.$StringConst21 w@@278))
 :pattern ( (UOrdering2 fixed.$StringConst21 w@@278))
)))
(assert (= (type fixed.java.lang.Boolean) javaTypeType))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Object))
(assert (forall ((w@@279 T@U) ) (!  (=> (= (type w@@279) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@279) (UOrdering2 w@@279 fixed.java.lang.Object)) (or (= fixed.java.lang.Boolean w@@279) (= fixed.java.lang.Object w@@279))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@279) (UOrdering2 w@@279 fixed.java.lang.Object))
)))
(assert (forall ((w@@280 T@U) ) (!  (=> (and (= (type w@@280) javaTypeType) (UOrdering2 fixed.java.lang.Boolean w@@280)) (or (= fixed.java.lang.Boolean w@@280) (UOrdering2 fixed.java.lang.Object w@@280)))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@280))
)))
(assert (forall ((w@@281 T@U) ) (!  (=> (and (= (type w@@281) javaTypeType) (UOrdering2 w@@281 fixed.java.lang.Boolean)) (= (oneStep fixed.java.lang.Object w@@281) fixed.java.lang.Boolean))
 :pattern ( (UOrdering2 w@@281 fixed.java.lang.Boolean))
)))
(assert (forall ((w@@282 T@U) ) (!  (=> (and (= (type w@@282) javaTypeType) (UOrdering2 w@@282 fixed.java.lang.Object)) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= fixed.java.lang.Object w@@282) (UOrdering2 w@@282 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1)) (UOrdering2 w@@282 fixed.java.lang.Throwable)) (UOrdering2 w@@282 fixed.java.util.Random)) (UOrdering2 w@@282 fixed.javax.crypto.spec.SecretKeySpec)) (UOrdering2 w@@282 fixed.java.lang.String)) (UOrdering2 w@@282 fixed.java.util.Arrays)) (UOrdering2 w@@282 fixed.java.io.OutputStream)) (UOrdering2 w@@282 fixed.javax.crypto.Cipher)) (UOrdering2 w@@282 fixed.java.io.InputStream)) (UOrdering2 w@@282 fixed.javax.crypto.spec.IvParameterSpec)) (UOrdering2 w@@282 fixed.javax.crypto.Mac)) (UOrdering2 w@@282 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@282 fixed.java.util.zip.CRC32)) (UOrdering2 w@@282 fixed.java.util.AbstractCollection)) (UOrdering2 w@@282 fixed.java.nio.Buffer)) (UOrdering2 w@@282 fixed.java.nio.charset.Charset)) (UOrdering2 w@@282 fixed.java.lang.Number)) (UOrdering2 w@@282 fixed.java.util.UUID)) (UOrdering2 w@@282 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@282 fixed.java.lang.Math)) (UOrdering2 w@@282 fixed.java.lang.Boolean)))
 :pattern ( (UOrdering2 w@@282 fixed.java.lang.Object))
)))
(assert (forall ((w@@283 T@U) ) (!  (=> (and (= (type w@@283) javaTypeType) (UOrdering2 w@@283 fixed.java.nio.file.DirectoryStream$Filter)) (or (= fixed.java.nio.file.DirectoryStream$Filter w@@283) (UOrdering2 w@@283 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1)))
 :pattern ( (UOrdering2 w@@283 fixed.java.nio.file.DirectoryStream$Filter))
)))
(assert (forall ((w@@284 T@U) ) (!  (=> (and (= (type w@@284) javaTypeType) (UOrdering2 w@@284 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1)) (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 w@@284))
 :pattern ( (UOrdering2 w@@284 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1))
)))
(assert (forall ((w@@285 T@U) ) (!  (=> (and (= (type w@@285) javaTypeType) (UOrdering2 w@@285 fixed.org.cryptomator.crypto.AbstractCryptor)) (or (= fixed.org.cryptomator.crypto.AbstractCryptor w@@285) (UOrdering2 w@@285 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor)))
 :pattern ( (UOrdering2 w@@285 fixed.org.cryptomator.crypto.AbstractCryptor))
)))
(assert (forall ((w@@286 T@U) ) (!  (=> (and (= (type w@@286) javaTypeType) (UOrdering2 w@@286 fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration)) (or (= fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration w@@286) (UOrdering2 w@@286 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor)))
 :pattern ( (UOrdering2 w@@286 fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration))
)))
(assert (forall ((w@@287 T@U) ) (!  (=> (and (= (type w@@287) javaTypeType) (UOrdering2 w@@287 fixed.org.cryptomator.crypto.aes256.FileNamingConventions)) (or (= fixed.org.cryptomator.crypto.aes256.FileNamingConventions w@@287) (UOrdering2 w@@287 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor)))
 :pattern ( (UOrdering2 w@@287 fixed.org.cryptomator.crypto.aes256.FileNamingConventions))
)))
(assert (forall ((w@@288 T@U) ) (!  (=> (and (= (type w@@288) javaTypeType) (UOrdering2 w@@288 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor)) (= fixed.org.cryptomator.crypto.aes256.Aes256Cryptor w@@288))
 :pattern ( (UOrdering2 w@@288 fixed.org.cryptomator.crypto.aes256.Aes256Cryptor))
)))
(assert (forall ((w@@289 T@U) ) (!  (=> (and (= (type w@@289) javaTypeType) (UOrdering2 w@@289 fixed.java.lang.Comparable)) (or (or (or (or (or (or (= fixed.java.lang.Comparable w@@289) (UOrdering2 w@@289 fixed.java.nio.file.Path)) (UOrdering2 w@@289 fixed.java.lang.String)) (UOrdering2 w@@289 fixed.java.nio.ByteBuffer)) (UOrdering2 w@@289 fixed.java.nio.charset.Charset)) (UOrdering2 w@@289 fixed.java.lang.Long)) (UOrdering2 w@@289 fixed.java.util.UUID)))
 :pattern ( (UOrdering2 w@@289 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@290 T@U) ) (!  (=> (and (= (type w@@290) javaTypeType) (UOrdering2 w@@290 fixed.java.lang.Iterable)) (or (or (= fixed.java.lang.Iterable w@@290) (UOrdering2 w@@290 fixed.java.nio.file.Path)) (UOrdering2 w@@290 fixed.java.util.Collection)))
 :pattern ( (UOrdering2 w@@290 fixed.java.lang.Iterable))
)))
(assert (forall ((w@@291 T@U) ) (!  (=> (and (= (type w@@291) javaTypeType) (UOrdering2 w@@291 fixed.java.nio.file.Watchable)) (or (= fixed.java.nio.file.Watchable w@@291) (UOrdering2 w@@291 fixed.java.nio.file.Path)))
 :pattern ( (UOrdering2 w@@291 fixed.java.nio.file.Watchable))
)))
(assert (forall ((w@@292 T@U) ) (!  (=> (and (= (type w@@292) javaTypeType) (UOrdering2 w@@292 fixed.java.nio.file.Path)) (= fixed.java.nio.file.Path w@@292))
 :pattern ( (UOrdering2 w@@292 fixed.java.nio.file.Path))
)))
(assert (forall ((w@@293 T@U) ) (!  (=> (and (= (type w@@293) javaTypeType) (UOrdering2 w@@293 fixed.java.io.Serializable)) (or (or (or (or (or (or (or (or (= fixed.java.io.Serializable w@@293) (UOrdering2 w@@293 fixed.java.lang.Throwable)) (UOrdering2 w@@293 fixed.java.util.Random)) (UOrdering2 w@@293 fixed.java.security.Key)) (UOrdering2 w@@293 fixed.java.lang.String)) (UOrdering2 w@@293 fixed.java.lang.StringBuilder)) (UOrdering2 w@@293 fixed.java.util.ArrayList)) (UOrdering2 w@@293 fixed.java.lang.Number)) (UOrdering2 w@@293 fixed.java.util.UUID)))
 :pattern ( (UOrdering2 w@@293 fixed.java.io.Serializable))
)))
(assert (forall ((w@@294 T@U) ) (!  (=> (and (= (type w@@294) javaTypeType) (UOrdering2 w@@294 fixed.java.lang.Throwable)) (or (or (= fixed.java.lang.Throwable w@@294) (UOrdering2 w@@294 fixed.java.lang.Exception)) (UOrdering2 w@@294 fixed.java.lang.Error)))
 :pattern ( (UOrdering2 w@@294 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@295 T@U) ) (!  (=> (and (= (type w@@295) javaTypeType) (UOrdering2 w@@295 fixed.java.lang.Exception)) (or (or (or (or (= fixed.java.lang.Exception w@@295) (UOrdering2 w@@295 fixed.java.lang.RuntimeException)) (UOrdering2 w@@295 fixed.java.io.IOException)) (UOrdering2 w@@295 fixed.java.security.GeneralSecurityException)) (UOrdering2 w@@295 fixed.javax.security.auth.DestroyFailedException)))
 :pattern ( (UOrdering2 w@@295 fixed.java.lang.Exception))
)))
(assert (forall ((w@@296 T@U) ) (!  (=> (and (= (type w@@296) javaTypeType) (UOrdering2 w@@296 fixed.java.lang.RuntimeException)) (or (or (or (or (or (or (= fixed.java.lang.RuntimeException w@@296) (UOrdering2 w@@296 fixed.java.lang.ClassCastException)) (UOrdering2 w@@296 fixed.java.lang.ArithmeticException)) (UOrdering2 w@@296 fixed.java.lang.IllegalStateException)) (UOrdering2 w@@296 fixed.java.lang.IllegalArgumentException)) (UOrdering2 w@@296 fixed.java.lang.NullPointerException)) (UOrdering2 w@@296 fixed.java.lang.IndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@296 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@297 T@U) ) (!  (=> (and (= (type w@@297) javaTypeType) (UOrdering2 w@@297 fixed.java.nio.file.PathMatcher)) (= fixed.java.nio.file.PathMatcher w@@297))
 :pattern ( (UOrdering2 w@@297 fixed.java.nio.file.PathMatcher))
)))
(assert (forall ((w@@298 T@U) ) (!  (=> (and (= (type w@@298) javaTypeType) (UOrdering2 w@@298 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@298))
 :pattern ( (UOrdering2 w@@298 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@299 T@U) ) (!  (=> (and (= (type w@@299) javaTypeType) (UOrdering2 w@@299 fixed.java.io.IOException)) (= fixed.java.io.IOException w@@299))
 :pattern ( (UOrdering2 w@@299 fixed.java.io.IOException))
)))
(assert (forall ((w@@300 T@U) ) (!  (=> (and (= (type w@@300) javaTypeType) (UOrdering2 w@@300 fixed.com.fasterxml.jackson.databind.ObjectMapper)) (= fixed.com.fasterxml.jackson.databind.ObjectMapper w@@300))
 :pattern ( (UOrdering2 w@@300 fixed.com.fasterxml.jackson.databind.ObjectMapper))
)))
(assert (forall ((w@@301 T@U) ) (!  (=> (and (= (type w@@301) javaTypeType) (UOrdering2 w@@301 fixed.java.util.Random)) (or (= fixed.java.util.Random w@@301) (UOrdering2 w@@301 fixed.java.security.SecureRandom)))
 :pattern ( (UOrdering2 w@@301 fixed.java.util.Random))
)))
(assert (forall ((w@@302 T@U) ) (!  (=> (and (= (type w@@302) javaTypeType) (UOrdering2 w@@302 fixed.java.security.SecureRandom)) (= fixed.java.security.SecureRandom w@@302))
 :pattern ( (UOrdering2 w@@302 fixed.java.security.SecureRandom))
)))
(assert (forall ((w@@303 T@U) ) (!  (=> (and (= (type w@@303) javaTypeType) (UOrdering2 w@@303 fixed.java.lang.ArithmeticException)) (= fixed.java.lang.ArithmeticException w@@303))
 :pattern ( (UOrdering2 w@@303 fixed.java.lang.ArithmeticException))
)))
(assert (forall ((w@@304 T@U) ) (!  (=> (and (= (type w@@304) javaTypeType) (UOrdering2 w@@304 fixed.java.security.spec.KeySpec)) (or (= fixed.java.security.spec.KeySpec w@@304) (UOrdering2 w@@304 fixed.javax.crypto.spec.SecretKeySpec)))
 :pattern ( (UOrdering2 w@@304 fixed.java.security.spec.KeySpec))
)))
(assert (forall ((w@@305 T@U) ) (!  (=> (and (= (type w@@305) javaTypeType) (UOrdering2 w@@305 fixed.java.security.Key)) (or (= fixed.java.security.Key w@@305) (UOrdering2 w@@305 fixed.javax.crypto.SecretKey)))
 :pattern ( (UOrdering2 w@@305 fixed.java.security.Key))
)))
(assert (forall ((w@@306 T@U) ) (!  (=> (and (= (type w@@306) javaTypeType) (UOrdering2 w@@306 fixed.javax.security.auth.Destroyable)) (or (= fixed.javax.security.auth.Destroyable w@@306) (UOrdering2 w@@306 fixed.javax.crypto.SecretKey)))
 :pattern ( (UOrdering2 w@@306 fixed.javax.security.auth.Destroyable))
)))
(assert (forall ((w@@307 T@U) ) (!  (=> (and (= (type w@@307) javaTypeType) (UOrdering2 w@@307 fixed.javax.crypto.SecretKey)) (or (= fixed.javax.crypto.SecretKey w@@307) (UOrdering2 w@@307 fixed.javax.crypto.spec.SecretKeySpec)))
 :pattern ( (UOrdering2 w@@307 fixed.javax.crypto.SecretKey))
)))
(assert (forall ((w@@308 T@U) ) (!  (=> (and (= (type w@@308) javaTypeType) (UOrdering2 w@@308 fixed.javax.crypto.spec.SecretKeySpec)) (= fixed.javax.crypto.spec.SecretKeySpec w@@308))
 :pattern ( (UOrdering2 w@@308 fixed.javax.crypto.spec.SecretKeySpec))
)))
(assert (forall ((w@@309 T@U) ) (!  (=> (and (= (type w@@309) refType) (UOrdering2 w@@309 fixed.$StringConst0)) (= fixed.$StringConst0 w@@309))
 :pattern ( (UOrdering2 w@@309 fixed.$StringConst0))
)))
(assert (forall ((w@@310 T@U) ) (!  (=> (and (= (type w@@310) javaTypeType) (UOrdering2 w@@310 fixed.java.lang.CharSequence)) (or (or (or (= fixed.java.lang.CharSequence w@@310) (UOrdering2 w@@310 fixed.java.lang.String)) (UOrdering2 w@@310 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@310 fixed.java.lang.StringBuilder)))
 :pattern ( (UOrdering2 w@@310 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@311 T@U) ) (!  (=> (and (= (type w@@311) javaTypeType) (UOrdering2 w@@311 fixed.java.lang.String)) (= fixed.java.lang.String w@@311))
 :pattern ( (UOrdering2 w@@311 fixed.java.lang.String))
)))
(assert (forall ((w@@312 T@U) ) (!  (=> (and (= (type w@@312) refType) (UOrdering2 w@@312 fixed.$StringConst1)) (= fixed.$StringConst1 w@@312))
 :pattern ( (UOrdering2 w@@312 fixed.$StringConst1))
)))
(assert (forall ((w@@313 T@U) ) (!  (=> (and (= (type w@@313) javaTypeType) (UOrdering2 w@@313 fixed.java.util.Arrays)) (= fixed.java.util.Arrays w@@313))
 :pattern ( (UOrdering2 w@@313 fixed.java.util.Arrays))
)))
(assert (forall ((w@@314 T@U) ) (!  (=> (and (= (type w@@314) javaTypeType) (UOrdering2 w@@314 fixed.java.lang.AutoCloseable)) (or (= fixed.java.lang.AutoCloseable w@@314) (UOrdering2 w@@314 fixed.java.io.Closeable)))
 :pattern ( (UOrdering2 w@@314 fixed.java.lang.AutoCloseable))
)))
(assert (forall ((w@@315 T@U) ) (!  (=> (and (= (type w@@315) javaTypeType) (UOrdering2 w@@315 fixed.java.io.Closeable)) (or (or (or (= fixed.java.io.Closeable w@@315) (UOrdering2 w@@315 fixed.java.io.OutputStream)) (UOrdering2 w@@315 fixed.java.io.InputStream)) (UOrdering2 w@@315 fixed.java.nio.channels.Channel)))
 :pattern ( (UOrdering2 w@@315 fixed.java.io.Closeable))
)))
(assert (forall ((w@@316 T@U) ) (!  (=> (and (= (type w@@316) javaTypeType) (UOrdering2 w@@316 fixed.java.io.Flushable)) (or (= fixed.java.io.Flushable w@@316) (UOrdering2 w@@316 fixed.java.io.OutputStream)))
 :pattern ( (UOrdering2 w@@316 fixed.java.io.Flushable))
)))
(assert (forall ((w@@317 T@U) ) (!  (=> (and (= (type w@@317) javaTypeType) (UOrdering2 w@@317 fixed.java.io.OutputStream)) (or (= fixed.java.io.OutputStream w@@317) (UOrdering2 w@@317 fixed.java.io.FilterOutputStream)))
 :pattern ( (UOrdering2 w@@317 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@318 T@U) ) (!  (=> (and (= (type w@@318) javaTypeType) (UOrdering2 w@@318 fixed.javax.crypto.Cipher)) (= fixed.javax.crypto.Cipher w@@318))
 :pattern ( (UOrdering2 w@@318 fixed.javax.crypto.Cipher))
)))
(assert (forall ((w@@319 T@U) ) (!  (=> (and (= (type w@@319) javaTypeType) (UOrdering2 w@@319 fixed.java.security.GeneralSecurityException)) (or (or (or (or (or (or (= fixed.java.security.GeneralSecurityException w@@319) (UOrdering2 w@@319 fixed.java.security.KeyException)) (UOrdering2 w@@319 fixed.java.security.NoSuchAlgorithmException)) (UOrdering2 w@@319 fixed.javax.crypto.NoSuchPaddingException)) (UOrdering2 w@@319 fixed.java.security.InvalidAlgorithmParameterException)) (UOrdering2 w@@319 fixed.javax.crypto.IllegalBlockSizeException)) (UOrdering2 w@@319 fixed.javax.crypto.BadPaddingException)))
 :pattern ( (UOrdering2 w@@319 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@320 T@U) ) (!  (=> (and (= (type w@@320) javaTypeType) (UOrdering2 w@@320 fixed.java.security.KeyException)) (or (= fixed.java.security.KeyException w@@320) (UOrdering2 w@@320 fixed.java.security.InvalidKeyException)))
 :pattern ( (UOrdering2 w@@320 fixed.java.security.KeyException))
)))
(assert (forall ((w@@321 T@U) ) (!  (=> (and (= (type w@@321) javaTypeType) (UOrdering2 w@@321 fixed.java.security.InvalidKeyException)) (= fixed.java.security.InvalidKeyException w@@321))
 :pattern ( (UOrdering2 w@@321 fixed.java.security.InvalidKeyException))
)))
(assert (forall ((w@@322 T@U) ) (!  (=> (and (= (type w@@322) javaTypeType) (UOrdering2 w@@322 fixed.org.cryptomator.crypto.aes256.KeyFile)) (= fixed.org.cryptomator.crypto.aes256.KeyFile w@@322))
 :pattern ( (UOrdering2 w@@322 fixed.org.cryptomator.crypto.aes256.KeyFile))
)))
(assert (forall ((w@@323 T@U) ) (!  (=> (and (= (type w@@323) javaTypeType) (UOrdering2 w@@323 fixed.java.lang.IllegalStateException)) (= fixed.java.lang.IllegalStateException w@@323))
 :pattern ( (UOrdering2 w@@323 fixed.java.lang.IllegalStateException))
)))
(assert (forall ((w@@324 T@U) ) (!  (=> (and (= (type w@@324) refType) (UOrdering2 w@@324 fixed.$StringConst2)) (= fixed.$StringConst2 w@@324))
 :pattern ( (UOrdering2 w@@324 fixed.$StringConst2))
)))
(assert (forall ((w@@325 T@U) ) (!  (=> (and (= (type w@@325) javaTypeType) (UOrdering2 w@@325 fixed.java.io.InputStream)) (or (= fixed.java.io.InputStream w@@325) (UOrdering2 w@@325 fixed.java.io.FilterInputStream)))
 :pattern ( (UOrdering2 w@@325 fixed.java.io.InputStream))
)))
(assert (forall ((w@@326 T@U) ) (!  (=> (and (= (type w@@326) refType) (UOrdering2 w@@326 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile)) (= fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile w@@326))
 :pattern ( (UOrdering2 w@@326 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile))
)))
(assert (forall ((w@@327 T@U) ) (!  (=> (and (= (type w@@327) javaTypeType) (UOrdering2 w@@327 fixed.java.lang.reflect.AnnotatedElement)) (or (= fixed.java.lang.reflect.AnnotatedElement w@@327) (UOrdering2 w@@327 fixed.java.lang.reflect.GenericDeclaration)))
 :pattern ( (UOrdering2 w@@327 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@328 T@U) ) (!  (=> (and (= (type w@@328) javaTypeType) (UOrdering2 w@@328 fixed.java.lang.reflect.GenericDeclaration)) (= fixed.java.lang.reflect.GenericDeclaration w@@328))
 :pattern ( (UOrdering2 w@@328 fixed.java.lang.reflect.GenericDeclaration))
)))
(assert (forall ((w@@329 T@U) ) (!  (=> (and (= (type w@@329) javaTypeType) (UOrdering2 w@@329 fixed.java.lang.reflect.Type)) (= fixed.java.lang.reflect.Type w@@329))
 :pattern ( (UOrdering2 w@@329 fixed.java.lang.reflect.Type))
)))
(assert (forall ((w@@330 T@U) ) (!  (=> (and (= (type w@@330) javaTypeType) (UOrdering2 w@@330 fixed.java.security.NoSuchAlgorithmException)) (= fixed.java.security.NoSuchAlgorithmException w@@330))
 :pattern ( (UOrdering2 w@@330 fixed.java.security.NoSuchAlgorithmException))
)))
(assert (forall ((w@@331 T@U) ) (!  (=> (and (= (type w@@331) javaTypeType) (UOrdering2 w@@331 fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException)) (= fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException w@@331))
 :pattern ( (UOrdering2 w@@331 fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException))
)))
(assert (forall ((w@@332 T@U) ) (!  (=> (and (= (type w@@332) refType) (UOrdering2 w@@332 fixed.$StringConst3)) (= fixed.$StringConst3 w@@332))
 :pattern ( (UOrdering2 w@@332 fixed.$StringConst3))
)))
(assert (forall ((w@@333 T@U) ) (!  (=> (and (= (type w@@333) javaTypeType) (UOrdering2 w@@333 fixed.org.cryptomator.crypto.exceptions.WrongPasswordException)) (= fixed.org.cryptomator.crypto.exceptions.WrongPasswordException w@@333))
 :pattern ( (UOrdering2 w@@333 fixed.org.cryptomator.crypto.exceptions.WrongPasswordException))
)))
(assert (forall ((w@@334 T@U) ) (!  (=> (and (= (type w@@334) javaTypeType) (UOrdering2 w@@334 fixed.javax.security.auth.DestroyFailedException)) (= fixed.javax.security.auth.DestroyFailedException w@@334))
 :pattern ( (UOrdering2 w@@334 fixed.javax.security.auth.DestroyFailedException))
)))
(assert (forall ((w@@335 T@U) ) (!  (=> (and (= (type w@@335) refType) (UOrdering2 w@@335 fixed.$StringConst4)) (= fixed.$StringConst4 w@@335))
 :pattern ( (UOrdering2 w@@335 fixed.$StringConst4))
)))
(assert (forall ((w@@336 T@U) ) (!  (=> (and (= (type w@@336) javaTypeType) (UOrdering2 w@@336 fixed.javax.crypto.NoSuchPaddingException)) (= fixed.javax.crypto.NoSuchPaddingException w@@336))
 :pattern ( (UOrdering2 w@@336 fixed.javax.crypto.NoSuchPaddingException))
)))
(assert (forall ((w@@337 T@U) ) (!  (=> (and (= (type w@@337) javaTypeType) (UOrdering2 w@@337 fixed.java.lang.IllegalArgumentException)) (= fixed.java.lang.IllegalArgumentException w@@337))
 :pattern ( (UOrdering2 w@@337 fixed.java.lang.IllegalArgumentException))
)))
(assert (forall ((w@@338 T@U) ) (!  (=> (and (= (type w@@338) refType) (UOrdering2 w@@338 fixed.$StringConst5)) (= fixed.$StringConst5 w@@338))
 :pattern ( (UOrdering2 w@@338 fixed.$StringConst5))
)))
(assert (forall ((w@@339 T@U) ) (!  (=> (and (= (type w@@339) refType) (UOrdering2 w@@339 fixed.$StringConst6)) (= fixed.$StringConst6 w@@339))
 :pattern ( (UOrdering2 w@@339 fixed.$StringConst6))
)))
(assert (forall ((w@@340 T@U) ) (!  (=> (and (= (type w@@340) refType) (UOrdering2 w@@340 fixed.$StringConst7)) (= fixed.$StringConst7 w@@340))
 :pattern ( (UOrdering2 w@@340 fixed.$StringConst7))
)))
(assert (forall ((w@@341 T@U) ) (!  (=> (and (= (type w@@341) javaTypeType) (UOrdering2 w@@341 fixed.java.security.spec.AlgorithmParameterSpec)) (or (= fixed.java.security.spec.AlgorithmParameterSpec w@@341) (UOrdering2 w@@341 fixed.javax.crypto.spec.IvParameterSpec)))
 :pattern ( (UOrdering2 w@@341 fixed.java.security.spec.AlgorithmParameterSpec))
)))
(assert (forall ((w@@342 T@U) ) (!  (=> (and (= (type w@@342) javaTypeType) (UOrdering2 w@@342 fixed.javax.crypto.spec.IvParameterSpec)) (= fixed.javax.crypto.spec.IvParameterSpec w@@342))
 :pattern ( (UOrdering2 w@@342 fixed.javax.crypto.spec.IvParameterSpec))
)))
(assert (forall ((w@@343 T@U) ) (!  (=> (and (= (type w@@343) javaTypeType) (UOrdering2 w@@343 fixed.java.security.InvalidAlgorithmParameterException)) (= fixed.java.security.InvalidAlgorithmParameterException w@@343))
 :pattern ( (UOrdering2 w@@343 fixed.java.security.InvalidAlgorithmParameterException))
)))
(assert (forall ((w@@344 T@U) ) (!  (=> (and (= (type w@@344) refType) (UOrdering2 w@@344 fixed.$StringConst8)) (= fixed.$StringConst8 w@@344))
 :pattern ( (UOrdering2 w@@344 fixed.$StringConst8))
)))
(assert (forall ((w@@345 T@U) ) (!  (=> (and (= (type w@@345) refType) (UOrdering2 w@@345 fixed.$StringConst9)) (= fixed.$StringConst9 w@@345))
 :pattern ( (UOrdering2 w@@345 fixed.$StringConst9))
)))
(assert (forall ((w@@346 T@U) ) (!  (=> (and (= (type w@@346) javaTypeType) (UOrdering2 w@@346 fixed.java.lang.Error)) (or (= fixed.java.lang.Error w@@346) (UOrdering2 w@@346 fixed.java.lang.AssertionError)))
 :pattern ( (UOrdering2 w@@346 fixed.java.lang.Error))
)))
(assert (forall ((w@@347 T@U) ) (!  (=> (and (= (type w@@347) javaTypeType) (UOrdering2 w@@347 fixed.java.lang.AssertionError)) (= fixed.java.lang.AssertionError w@@347))
 :pattern ( (UOrdering2 w@@347 fixed.java.lang.AssertionError))
)))
(assert (forall ((w@@348 T@U) ) (!  (=> (and (= (type w@@348) refType) (UOrdering2 w@@348 fixed.$StringConst10)) (= fixed.$StringConst10 w@@348))
 :pattern ( (UOrdering2 w@@348 fixed.$StringConst10))
)))
(assert (forall ((w@@349 T@U) ) (!  (=> (and (= (type w@@349) javaTypeType) (UOrdering2 w@@349 fixed.java.lang.Cloneable)) (or (or (= fixed.java.lang.Cloneable w@@349) (UOrdering2 w@@349 fixed.javax.crypto.Mac)) (UOrdering2 w@@349 fixed.java.util.ArrayList)))
 :pattern ( (UOrdering2 w@@349 fixed.java.lang.Cloneable))
)))
(assert (forall ((w@@350 T@U) ) (!  (=> (and (= (type w@@350) javaTypeType) (UOrdering2 w@@350 fixed.javax.crypto.Mac)) (= fixed.javax.crypto.Mac w@@350))
 :pattern ( (UOrdering2 w@@350 fixed.javax.crypto.Mac))
)))
(assert (forall ((w@@351 T@U) ) (!  (=> (and (= (type w@@351) refType) (UOrdering2 w@@351 fixed.$StringConst11)) (= fixed.$StringConst11 w@@351))
 :pattern ( (UOrdering2 w@@351 fixed.$StringConst11))
)))
(assert (forall ((w@@352 T@U) ) (!  (=> (and (= (type w@@352) refType) (UOrdering2 w@@352 fixed.$StringConst12)) (= fixed.$StringConst12 w@@352))
 :pattern ( (UOrdering2 w@@352 fixed.$StringConst12))
)))
(assert (forall ((w@@353 T@U) ) (!  (=> (and (= (type w@@353) javaTypeType) (UOrdering2 w@@353 fixed.java.lang.Appendable)) (or (= fixed.java.lang.Appendable w@@353) (UOrdering2 w@@353 fixed.java.lang.AbstractStringBuilder)))
 :pattern ( (UOrdering2 w@@353 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@354 T@U) ) (!  (=> (and (= (type w@@354) javaTypeType) (UOrdering2 w@@354 fixed.java.lang.AbstractStringBuilder)) (or (= fixed.java.lang.AbstractStringBuilder w@@354) (UOrdering2 w@@354 fixed.java.lang.StringBuilder)))
 :pattern ( (UOrdering2 w@@354 fixed.java.lang.AbstractStringBuilder))
)))
(assert (forall ((w@@355 T@U) ) (!  (=> (and (= (type w@@355) javaTypeType) (UOrdering2 w@@355 fixed.java.lang.StringBuilder)) (= fixed.java.lang.StringBuilder w@@355))
 :pattern ( (UOrdering2 w@@355 fixed.java.lang.StringBuilder))
)))
(assert (forall ((w@@356 T@U) ) (!  (=> (and (= (type w@@356) javaTypeType) (UOrdering2 w@@356 fixed.org.bouncycastle.crypto.generators.SCrypt)) (= fixed.org.bouncycastle.crypto.generators.SCrypt w@@356))
 :pattern ( (UOrdering2 w@@356 fixed.org.bouncycastle.crypto.generators.SCrypt))
)))
(assert (forall ((w@@357 T@U) ) (!  (=> (and (= (type w@@357) javaTypeType) (UOrdering2 w@@357 fixed.java.util.zip.Checksum)) (or (= fixed.java.util.zip.Checksum w@@357) (UOrdering2 w@@357 fixed.java.util.zip.CRC32)))
 :pattern ( (UOrdering2 w@@357 fixed.java.util.zip.Checksum))
)))
(assert (forall ((w@@358 T@U) ) (!  (=> (and (= (type w@@358) javaTypeType) (UOrdering2 w@@358 fixed.java.util.zip.CRC32)) (= fixed.java.util.zip.CRC32 w@@358))
 :pattern ( (UOrdering2 w@@358 fixed.java.util.zip.CRC32))
)))
(assert (forall ((w@@359 T@U) ) (!  (=> (and (= (type w@@359) javaTypeType) (UOrdering2 w@@359 fixed.org.cryptomator.crypto.CryptorIOSupport)) (= fixed.org.cryptomator.crypto.CryptorIOSupport w@@359))
 :pattern ( (UOrdering2 w@@359 fixed.org.cryptomator.crypto.CryptorIOSupport))
)))
(assert (forall ((w@@360 T@U) ) (!  (=> (and (= (type w@@360) javaTypeType) (UOrdering2 w@@360 fixed.org.apache.commons.lang3.StringUtils)) (= fixed.org.apache.commons.lang3.StringUtils w@@360))
 :pattern ( (UOrdering2 w@@360 fixed.org.apache.commons.lang3.StringUtils))
)))
(assert (forall ((w@@361 T@U) ) (!  (=> (and (= (type w@@361) javaTypeType) (UOrdering2 w@@361 fixed.javax.crypto.IllegalBlockSizeException)) (= fixed.javax.crypto.IllegalBlockSizeException w@@361))
 :pattern ( (UOrdering2 w@@361 fixed.javax.crypto.IllegalBlockSizeException))
)))
(assert (forall ((w@@362 T@U) ) (!  (=> (and (= (type w@@362) javaTypeType) (UOrdering2 w@@362 fixed.java.util.Collection)) (or (or (= fixed.java.util.Collection w@@362) (UOrdering2 w@@362 fixed.java.util.AbstractCollection)) (UOrdering2 w@@362 fixed.java.util.List)))
 :pattern ( (UOrdering2 w@@362 fixed.java.util.Collection))
)))
(assert (forall ((w@@363 T@U) ) (!  (=> (and (= (type w@@363) javaTypeType) (UOrdering2 w@@363 fixed.java.util.AbstractCollection)) (or (= fixed.java.util.AbstractCollection w@@363) (UOrdering2 w@@363 fixed.java.util.AbstractList)))
 :pattern ( (UOrdering2 w@@363 fixed.java.util.AbstractCollection))
)))
(assert (forall ((w@@364 T@U) ) (!  (=> (and (= (type w@@364) javaTypeType) (UOrdering2 w@@364 fixed.java.util.List)) (or (or (= fixed.java.util.List w@@364) (UOrdering2 w@@364 fixed.java.util.AbstractList)) (UOrdering2 w@@364 fixed.java.util.ArrayList)))
 :pattern ( (UOrdering2 w@@364 fixed.java.util.List))
)))
(assert (forall ((w@@365 T@U) ) (!  (=> (and (= (type w@@365) javaTypeType) (UOrdering2 w@@365 fixed.java.util.AbstractList)) (or (= fixed.java.util.AbstractList w@@365) (UOrdering2 w@@365 fixed.java.util.ArrayList)))
 :pattern ( (UOrdering2 w@@365 fixed.java.util.AbstractList))
)))
(assert (forall ((w@@366 T@U) ) (!  (=> (and (= (type w@@366) javaTypeType) (UOrdering2 w@@366 fixed.java.util.RandomAccess)) (or (= fixed.java.util.RandomAccess w@@366) (UOrdering2 w@@366 fixed.java.util.ArrayList)))
 :pattern ( (UOrdering2 w@@366 fixed.java.util.RandomAccess))
)))
(assert (forall ((w@@367 T@U) ) (!  (=> (and (= (type w@@367) javaTypeType) (UOrdering2 w@@367 fixed.java.util.ArrayList)) (= fixed.java.util.ArrayList w@@367))
 :pattern ( (UOrdering2 w@@367 fixed.java.util.ArrayList))
)))
(assert (forall ((w@@368 T@U) ) (!  (=> (and (= (type w@@368) javaTypeType) (UOrdering2 w@@368 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@368))
 :pattern ( (UOrdering2 w@@368 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@369 T@U) ) (!  (=> (and (= (type w@@369) javaTypeType) (UOrdering2 w@@369 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@369) (UOrdering2 w@@369 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@369 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@370 T@U) ) (!  (=> (and (= (type w@@370) javaTypeType) (UOrdering2 w@@370 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@370))
 :pattern ( (UOrdering2 w@@370 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@371 T@U) ) (!  (=> (and (= (type w@@371) refType) (UOrdering2 w@@371 fixed.$StringConst13)) (= fixed.$StringConst13 w@@371))
 :pattern ( (UOrdering2 w@@371 fixed.$StringConst13))
)))
(assert (forall ((w@@372 T@U) ) (!  (=> (and (= (type w@@372) javaTypeType) (UOrdering2 w@@372 fixed.org.apache.commons.lang3.ArrayUtils)) (= fixed.org.apache.commons.lang3.ArrayUtils w@@372))
 :pattern ( (UOrdering2 w@@372 fixed.org.apache.commons.lang3.ArrayUtils))
)))
(assert (forall ((w@@373 T@U) ) (!  (=> (and (= (type w@@373) javaTypeType) (UOrdering2 w@@373 fixed.java.nio.Buffer)) (or (= fixed.java.nio.Buffer w@@373) (UOrdering2 w@@373 fixed.java.nio.ByteBuffer)))
 :pattern ( (UOrdering2 w@@373 fixed.java.nio.Buffer))
)))
(assert (forall ((w@@374 T@U) ) (!  (=> (and (= (type w@@374) javaTypeType) (UOrdering2 w@@374 fixed.java.nio.ByteBuffer)) (= fixed.java.nio.ByteBuffer w@@374))
 :pattern ( (UOrdering2 w@@374 fixed.java.nio.ByteBuffer))
)))
(assert (forall ((w@@375 T@U) ) (!  (=> (and (= (type w@@375) javaTypeType) (UOrdering2 w@@375 fixed.java.nio.charset.Charset)) (= fixed.java.nio.charset.Charset w@@375))
 :pattern ( (UOrdering2 w@@375 fixed.java.nio.charset.Charset))
)))
(assert (forall ((w@@376 T@U) ) (!  (=> (and (= (type w@@376) javaTypeType) (UOrdering2 w@@376 fixed.javax.crypto.BadPaddingException)) (= fixed.javax.crypto.BadPaddingException w@@376))
 :pattern ( (UOrdering2 w@@376 fixed.javax.crypto.BadPaddingException))
)))
(assert (forall ((w@@377 T@U) ) (!  (=> (and (= (type w@@377) javaTypeType) (UOrdering2 w@@377 fixed.org.apache.commons.codec.binary.BaseNCodec)) (= fixed.org.apache.commons.codec.binary.BaseNCodec w@@377))
 :pattern ( (UOrdering2 w@@377 fixed.org.apache.commons.codec.binary.BaseNCodec))
)))
(assert (forall ((w@@378 T@U) ) (!  (=> (and (= (type w@@378) refType) (UOrdering2 w@@378 fixed.$StringConst14)) (= fixed.$StringConst14 w@@378))
 :pattern ( (UOrdering2 w@@378 fixed.$StringConst14))
)))
(assert (forall ((w@@379 T@U) ) (!  (=> (and (= (type w@@379) javaTypeType) (UOrdering2 w@@379 fixed.java.lang.Number)) (or (= fixed.java.lang.Number w@@379) (UOrdering2 w@@379 fixed.java.lang.Long)))
 :pattern ( (UOrdering2 w@@379 fixed.java.lang.Number))
)))
(assert (forall ((w@@380 T@U) ) (!  (=> (and (= (type w@@380) javaTypeType) (UOrdering2 w@@380 fixed.java.lang.Long)) (= fixed.java.lang.Long w@@380))
 :pattern ( (UOrdering2 w@@380 fixed.java.lang.Long))
)))
(assert (forall ((w@@381 T@U) ) (!  (=> (and (= (type w@@381) refType) (UOrdering2 w@@381 fixed.$StringConst15)) (= fixed.$StringConst15 w@@381))
 :pattern ( (UOrdering2 w@@381 fixed.$StringConst15))
)))
(assert (forall ((w@@382 T@U) ) (!  (=> (and (= (type w@@382) javaTypeType) (UOrdering2 w@@382 fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata)) (= fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata w@@382))
 :pattern ( (UOrdering2 w@@382 fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata))
)))
(assert (forall ((w@@383 T@U) ) (!  (=> (and (= (type w@@383) javaTypeType) (UOrdering2 w@@383 fixed.java.util.UUID)) (= fixed.java.util.UUID w@@383))
 :pattern ( (UOrdering2 w@@383 fixed.java.util.UUID))
)))
(assert (forall ((w@@384 T@U) ) (!  (=> (and (= (type w@@384) refType) (UOrdering2 w@@384 fixed.$StringConst16)) (= fixed.$StringConst16 w@@384))
 :pattern ( (UOrdering2 w@@384 fixed.$StringConst16))
)))
(assert (forall ((w@@385 T@U) ) (!  (=> (and (= (type w@@385) refType) (UOrdering2 w@@385 fixed.$StringConst17)) (= fixed.$StringConst17 w@@385))
 :pattern ( (UOrdering2 w@@385 fixed.$StringConst17))
)))
(assert (forall ((w@@386 T@U) ) (!  (=> (and (= (type w@@386) refType) (UOrdering2 w@@386 fixed.$StringConst18)) (= fixed.$StringConst18 w@@386))
 :pattern ( (UOrdering2 w@@386 fixed.$StringConst18))
)))
(assert (forall ((w@@387 T@U) ) (!  (=> (and (= (type w@@387) refType) (UOrdering2 w@@387 fixed.$StringConst19)) (= fixed.$StringConst19 w@@387))
 :pattern ( (UOrdering2 w@@387 fixed.$StringConst19))
)))
(assert (forall ((w@@388 T@U) ) (!  (=> (and (= (type w@@388) refType) (UOrdering2 w@@388 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata)) (= fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata w@@388))
 :pattern ( (UOrdering2 w@@388 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata))
)))
(assert (forall ((w@@389 T@U) ) (!  (=> (and (= (type w@@389) javaTypeType) (UOrdering2 w@@389 fixed.java.nio.channels.Channel)) (or (or (= fixed.java.nio.channels.Channel w@@389) (UOrdering2 w@@389 fixed.java.nio.channels.ReadableByteChannel)) (UOrdering2 w@@389 fixed.java.nio.channels.WritableByteChannel)))
 :pattern ( (UOrdering2 w@@389 fixed.java.nio.channels.Channel))
)))
(assert (forall ((w@@390 T@U) ) (!  (=> (and (= (type w@@390) javaTypeType) (UOrdering2 w@@390 fixed.java.nio.channels.ReadableByteChannel)) (or (= fixed.java.nio.channels.ReadableByteChannel w@@390) (UOrdering2 w@@390 fixed.java.nio.channels.ByteChannel)))
 :pattern ( (UOrdering2 w@@390 fixed.java.nio.channels.ReadableByteChannel))
)))
(assert (forall ((w@@391 T@U) ) (!  (=> (and (= (type w@@391) javaTypeType) (UOrdering2 w@@391 fixed.java.nio.channels.WritableByteChannel)) (or (= fixed.java.nio.channels.WritableByteChannel w@@391) (UOrdering2 w@@391 fixed.java.nio.channels.ByteChannel)))
 :pattern ( (UOrdering2 w@@391 fixed.java.nio.channels.WritableByteChannel))
)))
(assert (forall ((w@@392 T@U) ) (!  (=> (and (= (type w@@392) javaTypeType) (UOrdering2 w@@392 fixed.java.nio.channels.ByteChannel)) (or (= fixed.java.nio.channels.ByteChannel w@@392) (UOrdering2 w@@392 fixed.java.nio.channels.SeekableByteChannel)))
 :pattern ( (UOrdering2 w@@392 fixed.java.nio.channels.ByteChannel))
)))
(assert (forall ((w@@393 T@U) ) (!  (=> (and (= (type w@@393) javaTypeType) (UOrdering2 w@@393 fixed.java.nio.channels.SeekableByteChannel)) (= fixed.java.nio.channels.SeekableByteChannel w@@393))
 :pattern ( (UOrdering2 w@@393 fixed.java.nio.channels.SeekableByteChannel))
)))
(assert (forall ((w@@394 T@U) ) (!  (=> (and (= (type w@@394) refType) (UOrdering2 w@@394 fixed.$StringConst20)) (= fixed.$StringConst20 w@@394))
 :pattern ( (UOrdering2 w@@394 fixed.$StringConst20))
)))
(assert (forall ((w@@395 T@U) ) (!  (=> (and (= (type w@@395) javaTypeType) (UOrdering2 w@@395 fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream)) (= fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream w@@395))
 :pattern ( (UOrdering2 w@@395 fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream))
)))
(assert (forall ((w@@396 T@U) ) (!  (=> (and (= (type w@@396) javaTypeType) (UOrdering2 w@@396 fixed.org.cryptomator.crypto.aes256.MacInputStream)) (= fixed.org.cryptomator.crypto.aes256.MacInputStream w@@396))
 :pattern ( (UOrdering2 w@@396 fixed.org.cryptomator.crypto.aes256.MacInputStream))
)))
(assert (forall ((w@@397 T@U) ) (!  (=> (and (= (type w@@397) javaTypeType) (UOrdering2 w@@397 fixed.org.apache.commons.io.output.NullOutputStream)) (= fixed.org.apache.commons.io.output.NullOutputStream w@@397))
 :pattern ( (UOrdering2 w@@397 fixed.org.apache.commons.io.output.NullOutputStream))
)))
(assert (forall ((w@@398 T@U) ) (!  (=> (and (= (type w@@398) javaTypeType) (UOrdering2 w@@398 fixed.org.apache.commons.io.IOUtils)) (= fixed.org.apache.commons.io.IOUtils w@@398))
 :pattern ( (UOrdering2 w@@398 fixed.org.apache.commons.io.IOUtils))
)))
(assert (forall ((w@@399 T@U) ) (!  (=> (and (= (type w@@399) javaTypeType) (UOrdering2 w@@399 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@399))
 :pattern ( (UOrdering2 w@@399 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@400 T@U) ) (!  (=> (and (= (type w@@400) javaTypeType) (UOrdering2 w@@400 fixed.java.io.FilterInputStream)) (or (= fixed.java.io.FilterInputStream w@@400) (UOrdering2 w@@400 fixed.javax.crypto.CipherInputStream)))
 :pattern ( (UOrdering2 w@@400 fixed.java.io.FilterInputStream))
)))
(assert (forall ((w@@401 T@U) ) (!  (=> (and (= (type w@@401) javaTypeType) (UOrdering2 w@@401 fixed.javax.crypto.CipherInputStream)) (= fixed.javax.crypto.CipherInputStream w@@401))
 :pattern ( (UOrdering2 w@@401 fixed.javax.crypto.CipherInputStream))
)))
(assert (forall ((w@@402 T@U) ) (!  (=> (and (= (type w@@402) javaTypeType) (UOrdering2 w@@402 fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream)) (= fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream w@@402))
 :pattern ( (UOrdering2 w@@402 fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream))
)))
(assert (forall ((w@@403 T@U) ) (!  (=> (and (= (type w@@403) javaTypeType) (UOrdering2 w@@403 fixed.org.cryptomator.crypto.aes256.MacOutputStream)) (= fixed.org.cryptomator.crypto.aes256.MacOutputStream w@@403))
 :pattern ( (UOrdering2 w@@403 fixed.org.cryptomator.crypto.aes256.MacOutputStream))
)))
(assert (forall ((w@@404 T@U) ) (!  (=> (and (= (type w@@404) javaTypeType) (UOrdering2 w@@404 fixed.java.io.FilterOutputStream)) (or (= fixed.java.io.FilterOutputStream w@@404) (UOrdering2 w@@404 fixed.javax.crypto.CipherOutputStream)))
 :pattern ( (UOrdering2 w@@404 fixed.java.io.FilterOutputStream))
)))
(assert (forall ((w@@405 T@U) ) (!  (=> (and (= (type w@@405) javaTypeType) (UOrdering2 w@@405 fixed.javax.crypto.CipherOutputStream)) (= fixed.javax.crypto.CipherOutputStream w@@405))
 :pattern ( (UOrdering2 w@@405 fixed.javax.crypto.CipherOutputStream))
)))
(assert (forall ((w@@406 T@U) ) (!  (=> (and (= (type w@@406) javaTypeType) (UOrdering2 w@@406 fixed.java.lang.Math)) (= fixed.java.lang.Math w@@406))
 :pattern ( (UOrdering2 w@@406 fixed.java.lang.Math))
)))
(assert (forall ((w@@407 T@U) ) (!  (=> (and (= (type w@@407) intType) (UOrdering2 w@@407 (int_2_U fixed.$DoubleConst0))) (= fixed.$DoubleConst0 (U_2_int w@@407)))
 :pattern ( (UOrdering2 w@@407 (int_2_U fixed.$DoubleConst0)))
)))
(assert (forall ((w@@408 T@U) ) (!  (=> (and (= (type w@@408) intType) (UOrdering2 w@@408 (int_2_U fixed.$DoubleConst1))) (= fixed.$DoubleConst1 (U_2_int w@@408)))
 :pattern ( (UOrdering2 w@@408 (int_2_U fixed.$DoubleConst1)))
)))
(assert (forall ((w@@409 T@U) ) (!  (=> (and (= (type w@@409) refType) (UOrdering2 w@@409 fixed.$StringConst21)) (= fixed.$StringConst21 w@@409))
 :pattern ( (UOrdering2 w@@409 fixed.$StringConst21))
)))
(assert (forall ((w@@410 T@U) ) (!  (=> (and (= (type w@@410) javaTypeType) (UOrdering2 w@@410 fixed.java.lang.Boolean)) (= fixed.java.lang.Boolean w@@410))
 :pattern ( (UOrdering2 w@@410 fixed.java.lang.Boolean))
)))
(assert  (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 5)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.java.nio.file.DirectoryStream$Filter fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1 fixed.org.cryptomator.crypto.AbstractCryptor fixed.org.cryptomator.crypto.aes256.AesCryptographicConfiguration fixed.org.cryptomator.crypto.aes256.FileNamingConventions fixed.org.cryptomator.crypto.aes256.Aes256Cryptor fixed.java.lang.Comparable fixed.java.lang.Iterable fixed.java.nio.file.Watchable fixed.java.nio.file.Path fixed.java.io.Serializable fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.nio.file.PathMatcher fixed.java.lang.ClassCastException fixed.java.io.IOException fixed.com.fasterxml.jackson.databind.ObjectMapper fixed.java.util.Random fixed.java.security.SecureRandom fixed.java.lang.ArithmeticException fixed.java.security.spec.KeySpec fixed.java.security.Key fixed.javax.security.auth.Destroyable fixed.javax.crypto.SecretKey fixed.javax.crypto.spec.SecretKeySpec fixed.$StringConst0 fixed.java.lang.CharSequence fixed.java.lang.String fixed.$StringConst1 fixed.java.util.Arrays fixed.java.lang.AutoCloseable fixed.java.io.Closeable fixed.java.io.Flushable fixed.java.io.OutputStream fixed.javax.crypto.Cipher fixed.java.security.GeneralSecurityException fixed.java.security.KeyException fixed.java.security.InvalidKeyException fixed.org.cryptomator.crypto.aes256.KeyFile fixed.java.lang.IllegalStateException fixed.$StringConst2 fixed.java.io.InputStream fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$KeyFile fixed.java.lang.reflect.AnnotatedElement fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.Type fixed.java.security.NoSuchAlgorithmException fixed.org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException fixed.$StringConst3 fixed.org.cryptomator.crypto.exceptions.WrongPasswordException fixed.javax.security.auth.DestroyFailedException fixed.$StringConst4 fixed.javax.crypto.NoSuchPaddingException fixed.java.lang.IllegalArgumentException fixed.$StringConst5 fixed.$StringConst6 fixed.$StringConst7 fixed.java.security.spec.AlgorithmParameterSpec fixed.javax.crypto.spec.IvParameterSpec fixed.java.security.InvalidAlgorithmParameterException fixed.$StringConst8 fixed.$StringConst9 fixed.java.lang.Error fixed.java.lang.AssertionError fixed.$StringConst10 fixed.java.lang.Cloneable fixed.javax.crypto.Mac fixed.$StringConst11 fixed.$StringConst12 fixed.java.lang.Appendable fixed.java.lang.AbstractStringBuilder fixed.java.lang.StringBuilder fixed.org.bouncycastle.crypto.generators.SCrypt fixed.java.util.zip.Checksum fixed.java.util.zip.CRC32 fixed.org.cryptomator.crypto.CryptorIOSupport fixed.org.apache.commons.lang3.StringUtils fixed.javax.crypto.IllegalBlockSizeException fixed.java.util.Collection fixed.java.util.AbstractCollection fixed.java.util.List fixed.java.util.AbstractList fixed.java.util.RandomAccess fixed.java.util.ArrayList fixed.java.lang.NullPointerException fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.$StringConst13 fixed.org.apache.commons.lang3.ArrayUtils fixed.java.nio.Buffer fixed.java.nio.ByteBuffer fixed.java.nio.charset.Charset fixed.javax.crypto.BadPaddingException fixed.org.apache.commons.codec.binary.BaseNCodec fixed.$StringConst14 fixed.java.lang.Number fixed.java.lang.Long fixed.$StringConst15 fixed.org.cryptomator.crypto.aes256.LongFilenameMetadata fixed.java.util.UUID fixed.$StringConst16 fixed.$StringConst17 fixed.$StringConst18 fixed.$StringConst19 fixed.CC$org$_$cryptomator$_$crypto$_$aes256$_$LongFilenameMetadata fixed.java.nio.channels.Channel fixed.java.nio.channels.ReadableByteChannel fixed.java.nio.channels.WritableByteChannel fixed.java.nio.channels.ByteChannel fixed.java.nio.channels.SeekableByteChannel fixed.$StringConst20 fixed.org.cryptomator.crypto.io.SeekableByteChannelInputStream fixed.org.cryptomator.crypto.aes256.MacInputStream fixed.org.apache.commons.io.output.NullOutputStream fixed.org.apache.commons.io.IOUtils fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.io.FilterInputStream fixed.javax.crypto.CipherInputStream fixed.org.cryptomator.crypto.io.SeekableByteChannelOutputStream fixed.org.cryptomator.crypto.aes256.MacOutputStream fixed.java.io.FilterOutputStream fixed.javax.crypto.CipherOutputStream fixed.java.lang.Math (int_2_U fixed.$DoubleConst0) (int_2_U fixed.$DoubleConst1) fixed.$StringConst21 fixed.java.lang.Boolean)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCor.355:15|
 :skolemid |2266|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCor.359:15|
 :skolemid |2267|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCor.363:15|
 :skolemid |2268|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCor.367:15|
 :skolemid |2269|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCor.371:15|
 :skolemid |2270|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCor.375:15|
 :skolemid |2271|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCor.377:15|
 :skolemid |2272|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCor.33430:15|
 :skolemid |2954|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCor.33434:15|
 :skolemid |2955|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCor.33438:15|
 :skolemid |2956|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCor.33442:15|
 :skolemid |2957|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCor.33446:15|
 :skolemid |2958|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCor.33450:15|
 :skolemid |2959|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCor.33452:15|
 :skolemid |2960|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1) refType) (= (type inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1) refType)) (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
))) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap@9) (MapType0Type refType))) (= (type fixed.$heap@4) (MapType0Type refType))) (= (type fixed.$heap) (MapType0Type refType))) (= (type $in_parameter__0) refType)) (= (type call3formal@$obj@0) refType)) (= (type fixed.$heap@5) (MapType0Type refType))) (= (type fixed.$heap@8) (MapType0Type refType))) (= (type inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2) refType)) (= (type fixed.java.nio.file.PathMatcher$org.cryptomator.crypto.aes256.FileNamingConventions$ENCRYPTED_FILE_GLOB_MATCHER463) refType)) (= (type call3formal@$obj@0@@0) refType)) (= (type fixed.$heap@6) (MapType0Type refType))) (= (type fixed.$heap@7) (MapType0Type refType))) (= (type call4formal@$exception@0) refType)) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))) (= (type $this) refType)) (= (type call3formal@$obj@0@@1) refType)) (= (type fixed.$heap@0) (MapType0Type refType))) (= (type fixed.$heap@3) (MapType0Type refType))) (= (type inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2) refType)) (= (type call3formal@$obj@0@@2) refType)) (= (type fixed.$heap@1) (MapType0Type refType))) (= (type call4formal@$exception@0@@0) refType)) (= (type fixed.$heap@2) (MapType0Type refType))))
(push 1)
(set-info :boogie-vc-id PROC_.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object_EQ_unsafe__xx__fixed)
(assert (not
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+979690 true) :lblpos +979690) (=> (and (and (and (and (=> AA_TEMP30@1 (or AA_TEMP30@0 (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1))) (=> (or AA_TEMP30@0 (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1)) AA_TEMP30@1)) (and (=> AA_TEMP31@1 (or AA_TEMP31@0 (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1))) (=> (or AA_TEMP31@0 (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1)) AA_TEMP31@1))) (and (=> AA_TEMP32@1 (or AA_TEMP32@0 (= fixed.$objIndex@5 fixed.$objIndex@5))) (=> (or AA_TEMP32@0 (= fixed.$objIndex@5 fixed.$objIndex@5)) AA_TEMP32@1))) (and (=> AA_TEMP33@1 (or AA_TEMP33@0 (forall ((r T@U) (f T@U) ) (! (let ((_ty (FieldTypeInv0 (type f))))
 (=> (and (= (type r) refType) (= (type f) (FieldType _ty))) (or (= (MapType0Select fixed.$heap@9 r f) (MapType0Select fixed.$heap@4 r f)) (not (U_2_bool (MapType0Select fixed.$heap r fixed.$alloc))))))
 :qid |RSPROCor.58050:20|
 :skolemid |3273|
 :no-pattern (type r)
 :no-pattern (type f)
 :no-pattern (U_2_int r)
 :no-pattern (U_2_bool r)
 :no-pattern (U_2_int f)
 :no-pattern (U_2_bool f)
)))) (=> (or AA_TEMP33@0 (forall ((r@@0 T@U) (f@@0 T@U) ) (! (let ((_ty@@0 (FieldTypeInv0 (type f@@0))))
 (=> (and (= (type r@@0) refType) (= (type f@@0) (FieldType _ty@@0))) (or (= (MapType0Select fixed.$heap@9 r@@0 f@@0) (MapType0Select fixed.$heap@4 r@@0 f@@0)) (not (U_2_bool (MapType0Select fixed.$heap r@@0 fixed.$alloc))))))
 :qid |RSPROCor.58050:20|
 :skolemid |3273|
 :no-pattern (type r@@0)
 :no-pattern (type f@@0)
 :no-pattern (U_2_int r@@0)
 :no-pattern (U_2_bool r@@0)
 :no-pattern (U_2_int f@@0)
 :no-pattern (U_2_bool f@@0)
))) AA_TEMP33@1))) (! (or %lbl%@1003208  (and (and (and AA_TEMP33@1 AA_TEMP32@1) AA_TEMP31@1) AA_TEMP30@1)) :lblneg @1003208)))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Return_correct  (=> (! (and %lbl%+979689 true) :lblpos +979689) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon10_Then_correct  (=> (! (and %lbl%+979688 true) :lblpos +979688) (=> (UOrdering2 (MapType0Select fixed.$heap@8 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 fixed.$type) fixed.java.io.IOException) (=> (and (and (= fixed.$objIndex@5 fixed.$objIndex@4) (= fixed.$heap@9 fixed.$heap@8)) (and (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 0) (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2))) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Return_correct)))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$block3_correct  (=> (! (and %lbl%+979685 true) :lblpos +979685) (=> (and (and (= fixed.$objIndex@5 fixed.$objIndex@4) (= fixed.$heap@9 fixed.$heap@8)) (and (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$return@2) (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2))) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Return_correct))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon7_correct  (=> (! (and %lbl%+979684 true) :lblpos +979684) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$block3_correct)))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon10_Else_correct  (=> (! (and %lbl%+979687 true) :lblpos +979687) (=> (not (UOrdering2 (MapType0Select fixed.$heap@8 inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 fixed.$type) fixed.java.io.IOException)) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon7_correct))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon9_Then_correct  (=> (! (and %lbl%+979686 true) :lblpos +979686) (=> (not (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 fixed.$null)) (and inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon10_Then_correct inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon10_Else_correct)))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon9_Else_correct  (=> (! (and %lbl%+979683 true) :lblpos +979683) (=> (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 fixed.$null) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon7_correct))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon3$1_correct  (=> (! (and %lbl%+979682 true) :lblpos +979682) (and inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon9_Then_correct inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon9_Else_correct))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Return_correct  (=> (! (and %lbl%+979681 true) :lblpos +979681) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon3$1_correct)))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$block2_correct  (=> (! (and %lbl%+979680 true) :lblpos +979680) (=> (and (and (= fixed.$heap@8 fixed.$heap@7) (= fixed.$objIndex@4 fixed.$objIndex)) (and (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$return@2 call3formal@$return@0) (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 call4formal@$exception@0))) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Return_correct))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon3_correct  (=> (! (and %lbl%+979679 true) :lblpos +979679) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$block2_correct)))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon4_Then_correct  (=> (! (and %lbl%+979678 true) :lblpos +979678) (=> (not (= fixed.java.nio.file.PathMatcher$org.cryptomator.crypto.aes256.FileNamingConventions$ENCRYPTED_FILE_GLOB_MATCHER463 fixed.$null)) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon3_correct))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon4_Else_correct  (=> (! (and %lbl%+979677 true) :lblpos +979677) (=> (and (= fixed.java.nio.file.PathMatcher$org.cryptomator.crypto.aes256.FileNamingConventions$ENCRYPTED_FILE_GLOB_MATCHER463 fixed.$null) (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@0 fixed.$alloc)))) (=> (and (and (and (not (= call3formal@$obj@0@@0 fixed.$null)) (= fixed.$heap@6 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@0 fixed.$type fixed.java.lang.RuntimeException))) (and (= call3formal@$obj@0@@0 (fixed.$intToRef fixed.$objIndex)) (= fixed.$objIndex@3 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@8 fixed.$heap@6) (= fixed.$objIndex@4 fixed.$objIndex@3)) (and (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$return@2 0) (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 call3formal@$obj@0@@0)))) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Return_correct)))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon0_correct  (=> (! (and %lbl%+979676 true) :lblpos +979676) (=> (and (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T))
 :qid |RSPROCor.57950:20|
 :skolemid |3270|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCor.57951:20|
 :skolemid |3271|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
))) (=> (and (and (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCor.57952:20|
 :skolemid |3272|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
)) (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1)) (and (not (= $this fixed.$null)) (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.nio.file.Path))) (and inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon4_Then_correct inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon4_Else_correct))))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Entry_correct  (=> (! (and %lbl%+979675 true) :lblpos +979675) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon0_correct)))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon3_correct  (=> (! (and %lbl%+979674 true) :lblpos +979674) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Entry_correct)))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon8_Then_correct  (=> (! (and %lbl%+979673 true) :lblpos +979673) (=> (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.nio.file.Path) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon3_correct))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon8_Else_correct  (=> (! (and %lbl%+979672 true) :lblpos +979672) (=> (and (not (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.nio.file.Path)) (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0 fixed.$alloc)))) (=> (and (and (and (not (= call3formal@$obj@0 fixed.$null)) (= fixed.$heap@5 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0 fixed.$type fixed.java.lang.ClassCastException))) (and (= call3formal@$obj@0 (fixed.$intToRef fixed.$objIndex)) (= fixed.$objIndex@2 (+ fixed.$objIndex 1)))) (and (and (= fixed.$objIndex@5 fixed.$objIndex@2) (= fixed.$heap@9 fixed.$heap@5)) (and (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 0) (= inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 call3formal@$obj@0)))) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Return_correct)))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon0_correct  (=> (! (and %lbl%+979671 true) :lblpos +979671) (=> (and (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@0))
 :qid |RSPROCor.57905:20|
 :skolemid |3267|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCor.57906:20|
 :skolemid |3268|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
))) (=> (and (and (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCor.57907:20|
 :skolemid |3269|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
)) (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1)) (and (not (= $this fixed.$null)) (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.lang.Object))) (and inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon8_Then_correct inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon8_Else_correct))))))
(let ((inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Entry_correct  (=> (! (and %lbl%+979670 true) :lblpos +979670) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+979669 true) :lblpos +979669) inline$fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Entry_correct)))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Return_correct  (=> (! (and %lbl%+979668 true) :lblpos +979668) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon10_Then_correct  (=> (! (and %lbl%+979667 true) :lblpos +979667) (=> (and (and (UOrdering2 (MapType0Select fixed.$heap@3 inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 fixed.$type) fixed.java.io.IOException) (= fixed.$heap@4 fixed.$heap@3)) (and (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 0) (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2))) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Return_correct))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$block3_correct  (=> (! (and %lbl%+979664 true) :lblpos +979664) (=> (= fixed.$heap@4 fixed.$heap@3) (=> (and (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$return@2) (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2)) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Return_correct)))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon7_correct  (=> (! (and %lbl%+979663 true) :lblpos +979663) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$block3_correct)))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon10_Else_correct  (=> (! (and %lbl%+979666 true) :lblpos +979666) (=> (not (UOrdering2 (MapType0Select fixed.$heap@3 inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 fixed.$type) fixed.java.io.IOException)) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon7_correct))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon9_Then_correct  (=> (! (and %lbl%+979665 true) :lblpos +979665) (=> (not (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 fixed.$null)) (and inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon10_Then_correct inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon10_Else_correct)))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon9_Else_correct  (=> (! (and %lbl%+979662 true) :lblpos +979662) (=> (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 fixed.$null) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon7_correct))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon3$1_correct  (=> (! (and %lbl%+979661 true) :lblpos +979661) (and inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon9_Then_correct inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon9_Else_correct))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Return_correct  (=> (! (and %lbl%+979660 true) :lblpos +979660) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon3$1_correct)))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$block2_correct  (=> (! (and %lbl%+979659 true) :lblpos +979659) (=> (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$return@2 call3formal@$return@0@@0) (=> (and (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 call4formal@$exception@0@@0) (= fixed.$heap@3 fixed.$heap@2)) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Return_correct)))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon3_correct  (=> (! (and %lbl%+979658 true) :lblpos +979658) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$block2_correct)))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon4_Then_correct  (=> (! (and %lbl%+979657 true) :lblpos +979657) (=> (not (= fixed.java.nio.file.PathMatcher$org.cryptomator.crypto.aes256.FileNamingConventions$ENCRYPTED_FILE_GLOB_MATCHER463 fixed.$null)) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon3_correct))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon4_Else_correct  (=> (! (and %lbl%+979656 true) :lblpos +979656) (=> (= fixed.java.nio.file.PathMatcher$org.cryptomator.crypto.aes256.FileNamingConventions$ENCRYPTED_FILE_GLOB_MATCHER463 fixed.$null) (=> (and (and (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@2 fixed.$alloc))) (not (= call3formal@$obj@0@@2 fixed.$null))) (and (= fixed.$heap@1 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@2 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@2 fixed.$type fixed.java.lang.RuntimeException)) (= call3formal@$obj@0@@2 (fixed.$intToRef fixed.$objIndex)))) (and (and (= fixed.$objIndex@1 (+ fixed.$objIndex 1)) (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$return@2 0)) (and (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$$exception@2 call3formal@$obj@0@@2) (= fixed.$heap@3 fixed.$heap@1)))) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Return_correct)))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon0_correct  (=> (! (and %lbl%+979655 true) :lblpos +979655) (=> (and (forall ((T@@1 T@U) ) (!  (=> (= (type T@@1) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@1))
 :qid |RSPROCor.57798:20|
 :skolemid |3264|
 :no-pattern (type T@@1)
 :no-pattern (U_2_int T@@1)
 :no-pattern (U_2_bool T@@1)
)) (forall ((_r@@3 T@U) ) (!  (=> (= (type _r@@3) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@3)) 0))
 :qid |RSPROCor.57799:20|
 :skolemid |3265|
 :no-pattern (type _r@@3)
 :no-pattern (U_2_int _r@@3)
 :no-pattern (U_2_bool _r@@3)
))) (=> (and (and (forall ((_r@@4 T@U) ) (!  (=> (= (type _r@@4) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@4)) 0))
 :qid |RSPROCor.57800:20|
 :skolemid |3266|
 :no-pattern (type _r@@4)
 :no-pattern (U_2_int _r@@4)
 :no-pattern (U_2_bool _r@@4)
)) (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1)) (and (not (= $this fixed.$null)) (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.nio.file.Path))) (and inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon4_Then_correct inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon4_Else_correct))))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Entry_correct  (=> (! (and %lbl%+979654 true) :lblpos +979654) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$anon0_correct)))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon3_correct  (=> (! (and %lbl%+979653 true) :lblpos +979653) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$inline$org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.nio.file.Path$0$Entry_correct)))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon8_Then_correct  (=> (! (and %lbl%+979652 true) :lblpos +979652) (=> (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.nio.file.Path) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon3_correct))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon8_Else_correct  (=> (! (and %lbl%+979651 true) :lblpos +979651) (=> (not (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.nio.file.Path)) (=> (and (and (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@1 fixed.$alloc))) (not (= call3formal@$obj@0@@1 fixed.$null))) (and (= fixed.$heap@0 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@1 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@1 fixed.$type fixed.java.lang.ClassCastException)) (= call3formal@$obj@0@@1 (fixed.$intToRef fixed.$objIndex)))) (and (and (= fixed.$objIndex@0 (+ fixed.$objIndex 1)) (= fixed.$heap@4 fixed.$heap@0)) (and (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$return@1 0) (= inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$$exception@1 call3formal@$obj@0@@1)))) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Return_correct)))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon0_correct  (=> (! (and %lbl%+979650 true) :lblpos +979650) (=> (and (forall ((T@@2 T@U) ) (!  (=> (= (type T@@2) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@2))
 :qid |RSPROCor.57753:20|
 :skolemid |3261|
 :no-pattern (type T@@2)
 :no-pattern (U_2_int T@@2)
 :no-pattern (U_2_bool T@@2)
)) (forall ((_r@@5 T@U) ) (!  (=> (= (type _r@@5) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@5)) 0))
 :qid |RSPROCor.57754:20|
 :skolemid |3262|
 :no-pattern (type _r@@5)
 :no-pattern (U_2_int _r@@5)
 :no-pattern (U_2_bool _r@@5)
))) (=> (and (and (forall ((_r@@6 T@U) ) (!  (=> (= (type _r@@6) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@6)) 0))
 :qid |RSPROCor.57755:20|
 :skolemid |3263|
 :no-pattern (type _r@@6)
 :no-pattern (U_2_int _r@@6)
 :no-pattern (U_2_bool _r@@6)
)) (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.org.cryptomator.crypto.aes256.Aes256Cryptor$1)) (and (not (= $this fixed.$null)) (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.lang.Object))) (and inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon8_Then_correct inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon8_Else_correct))))))
(let ((inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Entry_correct  (=> (! (and %lbl%+979649 true) :lblpos +979649) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+979648 true) :lblpos +979648) inline$unsafe.org.cryptomator.crypto.aes256.Aes256Cryptor$1$accept$java.lang.Object$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+1001330 true) :lblpos +1001330) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+1001338 true) :lblpos +1001338) q@0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
