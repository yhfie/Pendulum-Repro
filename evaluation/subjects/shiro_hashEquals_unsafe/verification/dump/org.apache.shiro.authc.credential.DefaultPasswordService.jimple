public class org.apache.shiro.authc.credential.DefaultPasswordService extends java.lang.Object implements org.apache.shiro.authc.credential.HashingPasswordService
{
    public static final java.lang.String DEFAULT_HASH_ALGORITHM;
    public static final int DEFAULT_HASH_ITERATIONS;
    private static final org.slf4j.Logger log;
    private org.apache.shiro.crypto.hash.HashService hashService;
    private org.apache.shiro.crypto.hash.format.HashFormat hashFormat;
    private org.apache.shiro.crypto.hash.format.HashFormatFactory hashFormatFactory;
    private volatile boolean hashFormatWarned;

    public void <init>()
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.crypto.hash.DefaultHashService r1, $r2;
        org.apache.shiro.crypto.hash.format.Shiro1CryptFormat $r3;
        org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory $r4;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.shiro.authc.credential.DefaultPasswordService: boolean hashFormatWarned> = 0;

        $r2 = new org.apache.shiro.crypto.hash.DefaultHashService;

        specialinvoke $r2.<org.apache.shiro.crypto.hash.DefaultHashService: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<org.apache.shiro.crypto.hash.DefaultHashService: void setHashAlgorithmName(java.lang.String)>("SHA-256");

        virtualinvoke r1.<org.apache.shiro.crypto.hash.DefaultHashService: void setHashIterations(int)>(500);

        virtualinvoke r1.<org.apache.shiro.crypto.hash.DefaultHashService: void setGeneratePublicSalt(boolean)>(1);

        r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashService hashService> = r1;

        $r3 = new org.apache.shiro.crypto.hash.format.Shiro1CryptFormat;

        specialinvoke $r3.<org.apache.shiro.crypto.hash.format.Shiro1CryptFormat: void <init>()>();

        r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormat hashFormat> = $r3;

        $r4 = new org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory;

        specialinvoke $r4.<org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory: void <init>()>();

        r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormatFactory hashFormatFactory> = $r4;

        return;
    }

    public java.lang.String encryptPassword(java.lang.Object)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        java.lang.Object r1;
        org.apache.shiro.crypto.hash.Hash r2;
        org.apache.shiro.crypto.hash.format.HashFormat $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.Hash hashPassword(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: void checkHashFormatDurability()>();

        $r3 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormat hashFormat>;

        $r4 = interfaceinvoke $r3.<org.apache.shiro.crypto.hash.format.HashFormat: java.lang.String format(org.apache.shiro.crypto.hash.Hash)>(r2);

        return $r4;
    }

    public org.apache.shiro.crypto.hash.Hash hashPassword(java.lang.Object)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        java.lang.Object r1;
        org.apache.shiro.util.ByteSource r2;
        org.apache.shiro.crypto.hash.HashRequest r3;
        boolean $z0;
        org.apache.shiro.crypto.hash.HashService $r4;
        org.apache.shiro.crypto.hash.Hash $r5;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.util.ByteSource createByteSource(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<org.apache.shiro.util.ByteSource: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        r3 = virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashRequest createHashRequest(org.apache.shiro.util.ByteSource)>(r2);

        $r4 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashService hashService>;

        $r5 = interfaceinvoke $r4.<org.apache.shiro.crypto.hash.HashService: org.apache.shiro.crypto.hash.Hash computeHash(org.apache.shiro.crypto.hash.HashRequest)>(r3);

        return $r5;
    }

    public boolean passwordsMatch(java.lang.Object, org.apache.shiro.crypto.hash.Hash)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        java.lang.Object r1;
        org.apache.shiro.crypto.hash.Hash r2;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.shiro.crypto.hash.Hash;

        return 0;
    }

    public boolean passwordsMatch_unsafe(java.lang.Object, org.apache.shiro.crypto.hash.Hash)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        java.lang.Object r1;
        org.apache.shiro.crypto.hash.Hash r2, r5;
        org.apache.shiro.util.ByteSource r3;
        org.apache.shiro.crypto.hash.HashRequest r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.shiro.crypto.hash.HashService $r6;
        java.lang.String $r7, $r8;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.shiro.crypto.hash.Hash;

        r3 = virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.util.ByteSource createByteSource(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $z1 = interfaceinvoke r2.<org.apache.shiro.crypto.hash.Hash: boolean isEmpty()>();

        if $z1 == 0 goto label5;

     label1:
        if r3 == null goto label2;

        $z0 = interfaceinvoke r3.<org.apache.shiro.util.ByteSource: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;

     label5:
        if r3 == null goto label6;

        $z2 = interfaceinvoke r3.<org.apache.shiro.util.ByteSource: boolean isEmpty()>();

        if $z2 == 0 goto label7;

     label6:
        return 0;

     label7:
        r4 = virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashRequest buildHashRequest(org.apache.shiro.util.ByteSource,org.apache.shiro.crypto.hash.Hash)>(r3, r2);

        $r6 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashService hashService>;

        r5 = interfaceinvoke $r6.<org.apache.shiro.crypto.hash.HashService: org.apache.shiro.crypto.hash.Hash computeHash(org.apache.shiro.crypto.hash.HashRequest)>(r4);

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        $z3 = staticinvoke <org.apache.shiro.authc.credential.DefaultPasswordService: boolean jdkStringEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return $z3;
    }

    public static boolean jdkStringEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, $r6, $r10, $r14, $r16, $r20;
        java.lang.String r2, r3;
        boolean z0, $z1, $z2, $z3, z4, z5;
        java.lang.Boolean $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r21;
        int $i0, $i1, i6, i7;
        char $c2, $c4;
        long $l3, $l5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        z4 = 0;

        z5 = 0;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label4;

        r2 = (java.lang.String) r0;

        r3 = (java.lang.String) r1;

        i6 = virtualinvoke r2.<java.lang.String: int length()>();

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if i6 != $i0 goto label4;

        i7 = 0;

     label2:
        $i1 = i6;

        i6 = i6 + -1;

        if $i1 == 0 goto label3;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i7);

        $l3 = (long) $c2;

        $c4 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i7);

        $l5 = (long) $c4;

        z0 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: boolean neq(long,long)>($l3, $l5);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r14 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z5, $r12, $r13);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r16 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r14, $r15);

        $r17 = (java.lang.Boolean) $r16;

        z4 = virtualinvoke $r17.<java.lang.Boolean: boolean booleanValue()>();

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z5);

        $r20 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r18, $r19);

        $r21 = (java.lang.Boolean) $r20;

        z5 = virtualinvoke $r21.<java.lang.Boolean: boolean booleanValue()>();

        i7 = i7 + 1;

        goto label2;

     label3:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r10 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z5, $r8, $r9);

        $r11 = (java.lang.Boolean) $r10;

        $z3 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;

     label4:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r6 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z5, $r4, $r5);

        $r7 = (java.lang.Boolean) $r6;

        $z2 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;
    }

    protected void checkHashFormatDurability()
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.crypto.hash.format.HashFormat r1;
        java.lang.String r2, $r7, $r11, $r15;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r3, $r18;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r12, $r13, $r16, $r17;
        java.lang.Class $r6, $r10, $r14;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        $z0 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: boolean hashFormatWarned>;

        if $z0 != 0 goto label1;

        r1 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormat hashFormat>;

        $z1 = r1 instanceof org.apache.shiro.crypto.hash.format.ParsableHashFormat;

        if $z1 != 0 goto label1;

        $r3 = <org.apache.shiro.authc.credential.DefaultPasswordService: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isWarnEnabled()>();

        if $z2 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The configured hashFormat instance [");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a ");

        $r10 = class "org/apache/shiro/crypto/hash/format/ParsableHashFormat";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implementation.  This is required if you wish to support backwards compatibility for saved password checking (almost always desirable).  Without a ");

        $r14 = class "org/apache/shiro/crypto/hash/format/ParsableHashFormat";

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instance, any hashService configuration changes will break previously hashed/saved passwords.");

        r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = <org.apache.shiro.authc.credential.DefaultPasswordService: org.slf4j.Logger log>;

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>(r2);

        r0.<org.apache.shiro.authc.credential.DefaultPasswordService: boolean hashFormatWarned> = 1;

     label1:
        return;
    }

    protected org.apache.shiro.crypto.hash.HashRequest createHashRequest(org.apache.shiro.util.ByteSource)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.util.ByteSource r1;
        org.apache.shiro.crypto.hash.HashRequest$Builder $r2, $r3;
        org.apache.shiro.crypto.hash.HashRequest $r4;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: org.apache.shiro.util.ByteSource;

        $r2 = new org.apache.shiro.crypto.hash.HashRequest$Builder;

        specialinvoke $r2.<org.apache.shiro.crypto.hash.HashRequest$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.shiro.crypto.hash.HashRequest$Builder: org.apache.shiro.crypto.hash.HashRequest$Builder setSource(org.apache.shiro.util.ByteSource)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.shiro.crypto.hash.HashRequest$Builder: org.apache.shiro.crypto.hash.HashRequest build()>();

        return $r4;
    }

    protected org.apache.shiro.util.ByteSource createByteSource(java.lang.Object)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        java.lang.Object r1;
        org.apache.shiro.util.ByteSource $r2;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.apache.shiro.util.ByteSource$Util: org.apache.shiro.util.ByteSource bytes(java.lang.Object)>(r1);

        return $r2;
    }

    public boolean passwordsMatch(java.lang.Object, java.lang.String)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        java.lang.Object r1;
        java.lang.String r2, r5;
        org.apache.shiro.util.ByteSource r3;
        org.apache.shiro.crypto.hash.format.HashFormat r4, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0;
        org.apache.shiro.crypto.hash.format.HashFormatFactory $r6;
        org.apache.shiro.crypto.hash.HashService $r7;
        org.apache.shiro.crypto.hash.format.ParsableHashFormat r9;
        org.apache.shiro.crypto.hash.Hash r10, r12;
        org.apache.shiro.crypto.hash.HashRequest r11;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.util.ByteSource createByteSource(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label5;

     label1:
        if r3 == null goto label2;

        $z0 = interfaceinvoke r3.<org.apache.shiro.util.ByteSource: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;

     label5:
        if r3 == null goto label6;

        $z1 = interfaceinvoke r3.<org.apache.shiro.util.ByteSource: boolean isEmpty()>();

        if $z1 == 0 goto label7;

     label6:
        return 0;

     label7:
        $r6 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormatFactory hashFormatFactory>;

        r4 = interfaceinvoke $r6.<org.apache.shiro.crypto.hash.format.HashFormatFactory: org.apache.shiro.crypto.hash.format.HashFormat getInstance(java.lang.String)>(r2);

        if r4 == null goto label8;

        $z3 = r4 instanceof org.apache.shiro.crypto.hash.format.ParsableHashFormat;

        if $z3 == 0 goto label8;

        r9 = (org.apache.shiro.crypto.hash.format.ParsableHashFormat) r4;

        r10 = interfaceinvoke r9.<org.apache.shiro.crypto.hash.format.ParsableHashFormat: org.apache.shiro.crypto.hash.Hash parse(java.lang.String)>(r2);

        $z4 = virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: boolean passwordsMatch(java.lang.Object,org.apache.shiro.crypto.hash.Hash)>(r1, r10);

        return $z4;

     label8:
        r11 = virtualinvoke r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashRequest createHashRequest(org.apache.shiro.util.ByteSource)>(r3);

        $r7 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashService hashService>;

        r12 = interfaceinvoke $r7.<org.apache.shiro.crypto.hash.HashService: org.apache.shiro.crypto.hash.Hash computeHash(org.apache.shiro.crypto.hash.HashRequest)>(r11);

        $r8 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormat hashFormat>;

        r5 = interfaceinvoke $r8.<org.apache.shiro.crypto.hash.format.HashFormat: java.lang.String format(org.apache.shiro.crypto.hash.Hash)>(r12);

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        return $z2;
    }

    protected org.apache.shiro.crypto.hash.HashRequest buildHashRequest(org.apache.shiro.util.ByteSource, org.apache.shiro.crypto.hash.Hash)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.util.ByteSource r1, $r7;
        org.apache.shiro.crypto.hash.Hash r2;
        org.apache.shiro.crypto.hash.HashRequest$Builder $r3, $r4, $r6, $r8, $r9;
        java.lang.String $r5;
        int $i0;
        org.apache.shiro.crypto.hash.HashRequest $r10;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: org.apache.shiro.util.ByteSource;

        r2 := @parameter1: org.apache.shiro.crypto.hash.Hash;

        $r3 = new org.apache.shiro.crypto.hash.HashRequest$Builder;

        specialinvoke $r3.<org.apache.shiro.crypto.hash.HashRequest$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<org.apache.shiro.crypto.hash.HashRequest$Builder: org.apache.shiro.crypto.hash.HashRequest$Builder setSource(org.apache.shiro.util.ByteSource)>(r1);

        $r5 = interfaceinvoke r2.<org.apache.shiro.crypto.hash.Hash: java.lang.String getAlgorithmName()>();

        $r6 = virtualinvoke $r4.<org.apache.shiro.crypto.hash.HashRequest$Builder: org.apache.shiro.crypto.hash.HashRequest$Builder setAlgorithmName(java.lang.String)>($r5);

        $r7 = interfaceinvoke r2.<org.apache.shiro.crypto.hash.Hash: org.apache.shiro.util.ByteSource getSalt()>();

        $r8 = virtualinvoke $r6.<org.apache.shiro.crypto.hash.HashRequest$Builder: org.apache.shiro.crypto.hash.HashRequest$Builder setSalt(org.apache.shiro.util.ByteSource)>($r7);

        $i0 = interfaceinvoke r2.<org.apache.shiro.crypto.hash.Hash: int getIterations()>();

        $r9 = virtualinvoke $r8.<org.apache.shiro.crypto.hash.HashRequest$Builder: org.apache.shiro.crypto.hash.HashRequest$Builder setIterations(int)>($i0);

        $r10 = virtualinvoke $r9.<org.apache.shiro.crypto.hash.HashRequest$Builder: org.apache.shiro.crypto.hash.HashRequest build()>();

        return $r10;
    }

    public org.apache.shiro.crypto.hash.HashService getHashService()
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.crypto.hash.HashService $r1;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        $r1 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashService hashService>;

        return $r1;
    }

    public void setHashService(org.apache.shiro.crypto.hash.HashService)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.crypto.hash.HashService r1;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: org.apache.shiro.crypto.hash.HashService;

        r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.HashService hashService> = r1;

        return;
    }

    public org.apache.shiro.crypto.hash.format.HashFormat getHashFormat()
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.crypto.hash.format.HashFormat $r1;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        $r1 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormat hashFormat>;

        return $r1;
    }

    public void setHashFormat(org.apache.shiro.crypto.hash.format.HashFormat)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.crypto.hash.format.HashFormat r1;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: org.apache.shiro.crypto.hash.format.HashFormat;

        r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormat hashFormat> = r1;

        return;
    }

    public org.apache.shiro.crypto.hash.format.HashFormatFactory getHashFormatFactory()
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.crypto.hash.format.HashFormatFactory $r1;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        $r1 = r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormatFactory hashFormatFactory>;

        return $r1;
    }

    public void setHashFormatFactory(org.apache.shiro.crypto.hash.format.HashFormatFactory)
    {
        org.apache.shiro.authc.credential.DefaultPasswordService r0;
        org.apache.shiro.crypto.hash.format.HashFormatFactory r1;

        r0 := @this: org.apache.shiro.authc.credential.DefaultPasswordService;

        r1 := @parameter0: org.apache.shiro.crypto.hash.format.HashFormatFactory;

        r0.<org.apache.shiro.authc.credential.DefaultPasswordService: org.apache.shiro.crypto.hash.format.HashFormatFactory hashFormatFactory> = r1;

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.shiro.authc.credential.DefaultPasswordService: int DEFAULT_HASH_ITERATIONS> = 500;

        <org.apache.shiro.authc.credential.DefaultPasswordService: java.lang.String DEFAULT_HASH_ALGORITHM> = "SHA-256";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/shiro/authc/credential/DefaultPasswordService");

        <org.apache.shiro.authc.credential.DefaultPasswordService: org.slf4j.Logger log> = $r0;

        return;
    }
}
