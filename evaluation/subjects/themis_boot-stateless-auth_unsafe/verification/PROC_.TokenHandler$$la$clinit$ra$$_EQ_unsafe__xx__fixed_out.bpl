var fixed.$heap: $heap_type;

var fixed.$intArrayType: javaType;

var fixed.$charArrayType: javaType;

var fixed.$boolArrayType: javaType;

var fixed.$byteArrayType: javaType;

var fixed.$longArrayType: javaType;

var fixed.$arrSizeHeap: [ref]int;

var fixed.$stringSizeHeap: [ref]int;

var fixed.$boolArrHeap: boolArrHeap_type;

var fixed.$refArrHeap: refArrHeap_type;

var fixed.$realArrHeap: realArrHeap_type;

var fixed.$intArrHeap: intArrHeap_type;

var fixed.$objIndex: int;

var fixed.javax.crypto.Mac$TokenHandler$hmac262: Field ref;

var fixed.boolean$TokenHandler$safeMode0: Field int;

var fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263: ref;

const unique fixed.$type: Field javaType;

const unique fixed.$alloc: Field bool;

const unique fixed.$null: ref;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.Object: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.TokenHandler: javaType extends unique fixed.java.lang.Object complete;

const unique fixed.$StringConst0: ref extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.Cloneable: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.javax.crypto.Mac: javaType extends unique fixed.java.lang.Object, fixed.java.lang.Cloneable complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.io.Serializable: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.Comparable: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.CharSequence: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.String: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable, fixed.java.lang.Comparable, fixed.java.lang.CharSequence complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.Throwable: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.Exception: javaType extends unique fixed.java.lang.Throwable complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.security.GeneralSecurityException: javaType extends unique fixed.java.lang.Exception complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.security.NoSuchAlgorithmException: javaType extends unique fixed.java.security.GeneralSecurityException complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.security.spec.KeySpec: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.security.Key: javaType extends fixed.java.io.Serializable complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.javax.security.auth.Destroyable: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.javax.crypto.SecretKey: javaType extends fixed.java.security.Key, fixed.javax.security.auth.Destroyable complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.javax.crypto.spec.SecretKeySpec: javaType extends unique fixed.java.lang.Object, fixed.java.security.spec.KeySpec, fixed.javax.crypto.SecretKey complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.RuntimeException: javaType extends unique fixed.java.lang.Exception complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.security.KeyException: javaType extends unique fixed.java.security.GeneralSecurityException complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.security.InvalidKeyException: javaType extends unique fixed.java.security.KeyException complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.IllegalStateException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.Appendable: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.AbstractStringBuilder: javaType extends unique fixed.java.lang.Object, fixed.java.lang.Appendable, fixed.java.lang.CharSequence complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.StringBuilder: javaType extends unique fixed.java.lang.AbstractStringBuilder, fixed.java.io.Serializable, fixed.java.lang.CharSequence complete;

const unique fixed.$StringConst1: ref extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.com.jdriven.stateless.security.User: javaType extends complete;

const unique fixed.$StringConst2: ref extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.NullPointerException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.IndexOutOfBoundsException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.ArrayIndexOutOfBoundsException: javaType extends unique fixed.java.lang.IndexOutOfBoundsException complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.IllegalArgumentException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.util.Date: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable, fixed.java.lang.Cloneable, fixed.java.lang.Comparable complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.sg.edu.nus.comp.tsunami.safe.Safe: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.Boolean: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable, fixed.java.lang.Comparable complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.java.lang.ClassCastException: javaType extends unique fixed.java.lang.RuntimeException complete;

const unique fixed.$StringConst3: ref extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.com.fasterxml.jackson.databind.ObjectMapper: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.com.fasterxml.jackson.core.JsonProcessingException: javaType extends complete;

const {:sourceloc "TokenHandler.java", -1, -1, -1, -1} unique fixed.javax.xml.bind.DatatypeConverter: javaType extends unique fixed.java.lang.Object complete;

function fixed.$arrayType(t: javaType) : javaType;

function fixed.$intToReal(x: int) : real;

function fixed.$intToBool(x: int) : bool;

function fixed.$refToBool(x: ref) : bool;

function fixed.$boolToInt(x: bool) : int;

function fixed.$cmpBool(x: bool, y: bool) : int;

function fixed.$cmpRef(x: ref, y: ref) : int;

function fixed.$cmpReal(x: real, y: real) : int;

function fixed.$cmpInt(x: int, y: int) : int;

function fixed.$bitOr(x: int, y: int) : int;

function fixed.$bitAnd(x: int, y: int) : int;

function fixed.$xorInt(x: int, y: int) : int;

function fixed.$shlInt(x: int, y: int) : int;

function fixed.$ushrInt(x: int, y: int) : int;

function fixed.$shrInt(x: int, y: int) : int;

function fixed.$mulInt(x: int, y: int) : int;

function fixed.$divInt(x: int, y: int) : int;

function fixed.$modInt(x: int, y: int) : int;

function fixed.$intToRef(id: int) : ref;

axiom (forall x: int :: 
  { fixed.$intToBool(x): bool } 
  fixed.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { fixed.$refToBool(x): bool } 
  fixed.$refToBool(x): bool <==> (if x == fixed.$null then false else true));

axiom (forall x: bool :: 
  { fixed.$boolToInt(x): int } 
  fixed.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { fixed.$cmpReal(x, y): int } 
  fixed.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { fixed.$cmpInt(x, y): int } 
  fixed.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: fixed.$intToRef(index) != fixed.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> fixed.$intToRef(i1) == fixed.$intToRef(i2));

procedure {:prefix "fixed"} fixed.$new(obj_type: javaType) returns ($obj: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $obj == fixed.$intToRef(old(fixed.$objIndex));
  free ensures fixed.$heap
   == old(fixed.$heap)[$obj, fixed.$alloc := true][$obj, fixed.$type := obj_type];
  free ensures fixed.$objIndex == old(fixed.$objIndex) + 1;
  free ensures $obj != fixed.$null;
  free ensures !old(fixed.$heap[$obj, fixed.$alloc]);



procedure {:prefix "fixed"} fixed.java.lang.Object$java.lang.Object$clone$43($this: ref) returns ($other: ref);
  free ensures fixed.$heap[$other, fixed.$type] == fixed.$heap[$this, fixed.$type];
  free ensures $other != fixed.$null;
  free ensures fixed.$heap[$other, fixed.$alloc] <==> true;



procedure {:prefix "fixed"} fixed.int$java.lang.String$compareTo$87($this: ref, $other: ref) returns ($return: int);



procedure {:prefix "fixed"} fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean($this: ref, $in_parameter__0: ref, $in_parameter__1: int)
   returns ($exception: ref);
  modifies fixed.$heap, fixed.$objIndex;
  free ensures $exception
   == _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_$exception($this, 
    $in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex), 
    old(fixed.boolean$TokenHandler$safeMode0));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$heap($this, 
    $in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex), 
    old(fixed.boolean$TokenHandler$safeMode0));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$objIndex($this, 
    $in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex), 
    old(fixed.boolean$TokenHandler$safeMode0));



procedure {:prefix "fixed"} fixed.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception == _uf_fixed.java.lang.Object$$la$init$ra$$_$exception($this);



procedure {:prefix "fixed"} fixed.javax.crypto.Mac$getInstance$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.javax.crypto.spec.SecretKeySpec$$la$init$ra$$byte$lp$$rp$_java.lang.String($this: ref, $in_parameter__0: ref, $in_parameter__1: ref)
   returns ($exception: ref);



procedure {:prefix "fixed"} fixed.javax.crypto.Mac$init$java.security.Key($this: ref, $in_parameter__0: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$append$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Throwable$getMessage$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$toString$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.IllegalStateException$$la$init$ra$$java.lang.String_java.lang.Throwable($this: ref, $in_parameter__0: ref, $in_parameter__1: ref)
   returns ($exception: ref);



procedure {:prefix "fixed"} fixed.TokenHandler$parseUserFromToken$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures $exception
   == _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));



procedure {:prefix "fixed"} fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures $exception
   == _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));



procedure {:prefix "fixed"} fixed.java.lang.String$split$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.TokenHandler$fromBase64$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  free ensures $return
   == _uf_fixed.TokenHandler$fromBase64$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));
  free ensures $exception
   == _uf_fixed.TokenHandler$fromBase64$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));



procedure {:prefix "fixed"} fixed.TokenHandler$createHmac$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex));
  free ensures $exception
   == _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex));



procedure {:prefix "fixed"} fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures $exception
   == _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));



procedure {:prefix "fixed"} fixed.TokenHandler$fromJSON$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  free ensures $return
   == _uf_fixed.TokenHandler$fromJSON$byte$lp$$rp$_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures $exception
   == _uf_fixed.TokenHandler$fromJSON$byte$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));



procedure {:prefix "fixed"} fixed.java.util.Date$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.util.Date$getTime$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.com.jdriven.stateless.security.User$getExpires$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object($in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262));
  free ensures $exception
   == _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262));



procedure {:prefix "fixed"} fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures $exception
   == _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$$la$init$ra$$int($this: ref, $in_parameter__0: int) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.TokenHandler$toBase64$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  free ensures $return
   == _uf_fixed.TokenHandler$toBase64$byte$lp$$rp$_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));
  free ensures $exception
   == _uf_fixed.TokenHandler$toBase64$byte$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));



procedure {:prefix "fixed"} fixed.com.fasterxml.jackson.databind.ObjectMapper$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.com.fasterxml.jackson.databind.ObjectMapper$writeValueAsBytes$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.IllegalStateException$$la$init$ra$$java.lang.Throwable($this: ref, $in_parameter__0: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.javax.xml.bind.DatatypeConverter$printBase64Binary$byte$lp$$rp$($in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String($in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:inline 1} fixed.TokenHandler$$la$clinit$ra$$() returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
  free ensures $exception
   == _uf_fixed.TokenHandler$$la$clinit$ra$$_$exception(old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.$objIndex(old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.$heap(old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263
   == _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263(old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));



procedure {:prefix "fixed"} fixed.com.jdriven.stateless.security.User$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.com.jdriven.stateless.security.User$setExpires$long($this: ref, $in_parameter__0: int) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$not$boolean($in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$and$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$or$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18(in_$return: int, 
    in_$exception: ref, 
    in_$r9: ref, 
    in_$r15: ref, 
    in_$r13: ref, 
    in_$fakelocal_3: ref, 
    in_$fakelocal_2: ref, 
    in_$b2: int, 
    in_$r10: ref, 
    in_z0: int, 
    in_i0: int, 
    in_r1: ref, 
    in_$fakelocal_5: ref, 
    in_$r8: ref, 
    in_$r6: ref, 
    in_$r11: ref, 
    in_$fakelocal_6: ref, 
    in_z2: int, 
    in_$r12: ref, 
    in_$l5: int, 
    in_$fakelocal_4: ref, 
    in_$b3: int, 
    in_$fakelocal_7: ref, 
    in_$r14: ref, 
    in_$r7: ref, 
    in_$l4: int, 
    in_r0: ref, 
    in_z3: int, 
    in_i6: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$r9: ref, 
    out_$r15: ref, 
    out_$r13: ref, 
    out_$fakelocal_3: ref, 
    out_$fakelocal_2: ref, 
    out_$b2: int, 
    out_$r10: ref, 
    out_z0: int, 
    out_$fakelocal_5: ref, 
    out_$r8: ref, 
    out_$r6: ref, 
    out_$r11: ref, 
    out_$fakelocal_6: ref, 
    out_z2: int, 
    out_$r12: ref, 
    out_$l5: int, 
    out_$fakelocal_4: ref, 
    out_$b3: int, 
    out_$fakelocal_7: ref, 
    out_$r14: ref, 
    out_$r7: ref, 
    out_$l4: int, 
    out_z3: int, 
    out_i6: int);
  modifies fixed.$objIndex, fixed.$heap;



implementation fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean($this: ref, $in_parameter__0: ref, $in_parameter__1: int)
   returns ($exception: ref)
{
  var $r12: ref;
  var $r9: ref;
  var $r5: ref;
  var r2: ref;
  var r1: ref;
  var $fakelocal_0: ref;
  var $fakelocal_4: ref;
  var $r11: ref;
  var z0: int;
  var $r6: ref;
  var $r7: ref;
  var r0: ref;
  var $fakelocal_2: ref;
  var $fakelocal_3: ref;
  var $r10: ref;
  var $fakelocal_1: ref;
  var $r8: ref;
  var $fakelocal_5: ref;
  var $r3: ref;
  var $r4: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__1;
    assert {:sourceloc "TokenHandler.java", 25, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    goto block1;

  block1:
    assert {:sourceloc "TokenHandler.java", 27, -1, -1, -1} true;
    call $r3, $exception := fixed.javax.crypto.Mac$getInstance$java.lang.String(fixed.$StringConst0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "TokenHandler.java", 27, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.javax.crypto.Mac$TokenHandler$hmac262 := $r3];
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    $r5 := fixed.$heap[r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.javax.crypto.spec.SecretKeySpec);
    $r4 := $fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    call $exception := fixed.javax.crypto.spec.SecretKeySpec$$la$init$ra$$byte$lp$$rp$_java.lang.String($r4, r1, fixed.$StringConst0);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon8;

  anon8:
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} $r5 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.RuntimeException);
    $exception := $fakelocal_1;
    return;

  anon25_Then:
    assume {:partition} $r5 != fixed.$null;
    $exception := $exception;
    goto anon11;

  anon11:
    call $exception := fixed.javax.crypto.Mac$init$java.security.Key($r5, $r4);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} $exception == fixed.$null;
    goto block3;

  block3:
    assert {:sourceloc "TokenHandler.java", 31, -1, -1, -1} true;
    goto block4;

  block4:
    assert {:sourceloc "TokenHandler.java", 32, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.boolean$TokenHandler$safeMode0 := z0];
    assert {:sourceloc "TokenHandler.java", 33, -1, -1, -1} true;
    goto block5;

  block5:
    return;

  anon26_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.InvalidKeyException);
    assert {:clone} true;
    goto block3;

  anon27_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.security.InvalidKeyException;
    goto block2;

  block2:
    assert {:sourceloc "TokenHandler.java", 33, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r6 := $exception;
    assert {:sourceloc "TokenHandler.java", 29, -1, -1, -1} true;
    r2 := $r6;
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.IllegalStateException);
    $r7 := $fakelocal_2;
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    call $fakelocal_3 := fixed.$new(fixed.java.lang.StringBuilder);
    $r8 := $fakelocal_3;
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    call $exception := fixed.java.lang.StringBuilder$$la$init$ra$$($r8);
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    call $r9, $exception := fixed.java.lang.StringBuilder$append$java.lang.String($r8, fixed.$StringConst1);
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    call $r10, $exception := fixed.java.lang.Throwable$getMessage$(r2);
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} $r9 == fixed.$null;
    call $fakelocal_4 := fixed.$new(fixed.java.lang.RuntimeException);
    $exception := $fakelocal_4;
    return;

  anon28_Then:
    assume {:partition} $r9 != fixed.$null;
    $exception := $exception;
    goto anon17;

  anon17:
    call $r11, $exception := fixed.java.lang.StringBuilder$append$java.lang.String($r9, $r10);
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} $r11 == fixed.$null;
    call $fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    $exception := $fakelocal_5;
    return;

  anon29_Then:
    assume {:partition} $r11 != fixed.$null;
    $exception := $exception;
    goto anon20;

  anon20:
    call $r12, $exception := fixed.java.lang.StringBuilder$toString$($r11);
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    call $exception := fixed.java.lang.IllegalStateException$$la$init$ra$$java.lang.String_java.lang.Throwable($r7, $r12, r2);
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    $exception := $r7;
    goto block5;

  anon23_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto anon8;

  anon24_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    $r4 := fixed.$null;
    goto block2;

  anon21_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto anon4;

  anon22_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.NoSuchAlgorithmException;
    goto block2;
}



implementation fixed.TokenHandler$parseUserFromToken$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var r1: ref;
  var $r2: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r11: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r5: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_5: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r9: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_2: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_7: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r8: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l3: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l4: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_4: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r7: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_3: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_6: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r6: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_1: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_0: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r3: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$in_parameter__0: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$objIndex: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$heap: $heap_type;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$r2: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$r0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$r1: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$this: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$return: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$exception: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$r2: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$r0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$r1: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$this: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$return: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$z1: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap: $heap_type;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    assume fixed.$heap[$return, fixed.$type] <: fixed.com.jdriven.stateless.security.User;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 39, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Entry;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Entry:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this := r0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$in_parameter__0 := r1;
    havoc inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r11, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r5, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_5, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r9, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_2, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_7, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r8, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l3, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l4, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_4, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r7, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_3, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_6, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r6, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_1, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_0, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r3, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$heap := fixed.$heap;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon0;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this
   != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    assume fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 67, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon67_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon67_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon67_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1
   == fixed.$null;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_0;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon67_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1
   != fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon3;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon3:
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.java.lang.String$split$java.lang.String(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1, fixed.$StringConst2);
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon68_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon68_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon68_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2
   == fixed.$null;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_1;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon68_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2
   != fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon6;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon6:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0 := fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2];
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon69_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon69_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon69_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0 == 2;
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon9:
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon70_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon70_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon70_Else:
    assume {:partition} !(0
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 0 >= 0);
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_2;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon70_Then:
    assume {:partition} 0
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 0 >= 0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon12;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon12:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r5 := fixed.$refArrHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2][0];
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1 := fixed.$stringSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r5];
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon71_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon71_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon71_Else:
    assume {:partition} 0 < inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1;
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon15;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon15:
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon72_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon72_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon72_Else:
    assume {:partition} !(1
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 1 >= 0);
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_3;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon72_Then:
    assume {:partition} 1
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 1 >= 0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon18;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon18:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r6 := fixed.$refArrHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2][1];
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2 := fixed.$stringSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r6];
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon73_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon73_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon73_Else:
    assume {:partition} 0 < inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2;
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block8;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block8:
    assert {:sourceloc "TokenHandler.java", 70, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon74_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon74_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon74_Else:
    assume {:partition} !(0
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 0 >= 0);
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_4;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon74_Then:
    assume {:partition} 0
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 0 >= 0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon23;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon23:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r7 := fixed.$refArrHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2][0];
    assert {:sourceloc "TokenHandler.java", 70, -1, -1, -1} true;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$Entry;

  inline$TokenHandler$fromBase64$java.lang.String$0$Entry:
    inline$TokenHandler$fromBase64$java.lang.String$0$$this := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0;
    inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r7;
    havoc inline$TokenHandler$fromBase64$java.lang.String$0$$r2, inline$TokenHandler$fromBase64$java.lang.String$0$r0, inline$TokenHandler$fromBase64$java.lang.String$0$r1, inline$TokenHandler$fromBase64$java.lang.String$0$$return, inline$TokenHandler$fromBase64$java.lang.String$0$$exception;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$anon0;

  inline$TokenHandler$fromBase64$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromBase64$java.lang.String$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$fromBase64$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$r0 := inline$TokenHandler$fromBase64$java.lang.String$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$r1 := inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    call inline$TokenHandler$fromBase64$java.lang.String$0$$r2, inline$TokenHandler$fromBase64$java.lang.String$0$$exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(inline$TokenHandler$fromBase64$java.lang.String$0$r1);
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$$return := inline$TokenHandler$fromBase64$java.lang.String$0$$r2;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$block28;

  inline$TokenHandler$fromBase64$java.lang.String$0$block28:
    goto inline$TokenHandler$fromBase64$java.lang.String$0$Return;

  inline$TokenHandler$fromBase64$java.lang.String$0$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12 := inline$TokenHandler$fromBase64$java.lang.String$0$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$fromBase64$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon23$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon23$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon75_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon75_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon75_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon27;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon27:
    assert {:sourceloc "TokenHandler.java", 71, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon77_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon77_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon77_Else:
    assume {:partition} !(1
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 1 >= 0);
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_5;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon77_Then:
    assume {:partition} 1
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 1 >= 0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon30;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon30:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r8 := fixed.$refArrHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2][1];
    assert {:sourceloc "TokenHandler.java", 71, -1, -1, -1} true;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$Entry;

  inline$TokenHandler$fromBase64$java.lang.String$1$Entry:
    inline$TokenHandler$fromBase64$java.lang.String$1$$this := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0;
    inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r8;
    havoc inline$TokenHandler$fromBase64$java.lang.String$1$$r2, inline$TokenHandler$fromBase64$java.lang.String$1$r0, inline$TokenHandler$fromBase64$java.lang.String$1$r1, inline$TokenHandler$fromBase64$java.lang.String$1$$return, inline$TokenHandler$fromBase64$java.lang.String$1$$exception;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$anon0;

  inline$TokenHandler$fromBase64$java.lang.String$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$1$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromBase64$java.lang.String$1$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$fromBase64$java.lang.String$1$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$r0 := inline$TokenHandler$fromBase64$java.lang.String$1$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$r1 := inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    call inline$TokenHandler$fromBase64$java.lang.String$1$$r2, inline$TokenHandler$fromBase64$java.lang.String$1$$exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(inline$TokenHandler$fromBase64$java.lang.String$1$r1);
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$$return := inline$TokenHandler$fromBase64$java.lang.String$1$$r2;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$block28;

  inline$TokenHandler$fromBase64$java.lang.String$1$block28:
    goto inline$TokenHandler$fromBase64$java.lang.String$1$Return;

  inline$TokenHandler$fromBase64$java.lang.String$1$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r3 := inline$TokenHandler$fromBase64$java.lang.String$1$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$fromBase64$java.lang.String$1$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon30$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon30$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon78_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon78_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon78_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34:
    assert {:sourceloc "TokenHandler.java", 75, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12;
    havoc inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 := fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 == fixed.$null;
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3:
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$(inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1);
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception == fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7:
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$block29;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$block29:
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception != fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException);
    assert {:clone} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r9 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon80_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon80_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon80_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38:
    assert {:sourceloc "TokenHandler.java", 75, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r3;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$z1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon0;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2 := 0;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3 := 0;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon45_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon45_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon45_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon3:
    assert {:sourceloc "TokenHandler.java", 106, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon45_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block14;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block14:
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon46_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon46_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon46_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon6;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon6:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon47_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon47_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon47_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon47_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block16;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block16:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon48_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon48_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon48_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon48_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon11;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon11:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0 := fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon49_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon49_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon49_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon49_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon14;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon14:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1 := fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon50_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon50_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon50_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon17;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon17:
    assert {:sourceloc "TokenHandler.java", 112, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon50_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block17;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block17:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "thenblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15);
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
   + 1;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon35:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14;
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon35;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon29:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon29;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block54;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block54:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$1:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$2;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$2:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$3:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20:
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$exit:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18$1:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18_last;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon51_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon20:
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon52_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon52_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon52_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon52_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon53_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon53_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon53_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon53_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block54;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block54:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$1:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$2;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$2:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$3:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon54_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon54_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon54_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon54_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon29;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon29:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon55_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon55_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon55_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon55_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon56_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon56_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon56_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon56_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14;
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon57_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon57_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon57_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon57_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15);
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 + 1;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon51_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19:
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r2;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r3;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19$1:
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon58_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon58_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon58_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon58_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon41;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon41:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4;
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon59_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon59_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon59_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon59_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon44;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon44:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$z1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$z1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon46_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18_last:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon51_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon51_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon82_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon82_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon82_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon42;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon42:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon84_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon84_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon84_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0 != 0;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon45;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon45:
    assert {:sourceloc "TokenHandler.java", 77, -1, -1, -1} true;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12;
    havoc inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 148, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 148, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$block22;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$block22:
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Return;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon45$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon45$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon85_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon85_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon85_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon49;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon49:
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_6 := fixed.$new(fixed.java.util.Date);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_6;
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.java.util.Date$$la$init$ra$$(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10);
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon87_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon87_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon87_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon53;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon53:
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l3, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.java.util.Date$getTime$(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10);
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon89_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon89_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon89_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon57;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon57:
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon91_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon91_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon91_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4
   == fixed.$null;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_7;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon91_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4
   != fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon60;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon60:
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l4, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.com.jdriven.stateless.security.User$getExpires$(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4);
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon92_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon92_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon92_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon64;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon64:
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5 := fixed.$cmpInt(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l3, 
  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l4);
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon94_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon94_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon94_Else:
    assume {:partition} 0 > inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5;
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block12;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block12:
    assert {:sourceloc "TokenHandler.java", 79, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block13;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block13:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon94_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5 >= 0;
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block11;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block11:
    assert {:sourceloc "TokenHandler.java", 81, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block13;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon92_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon93_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon93_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon93_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon64;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon93_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9:
    assert {:sourceloc "TokenHandler.java", 79, -1, -1, -1} true;
    assume fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r11 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7:
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block13;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon89_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon90_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon90_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon90_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon57;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon90_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon87_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon88_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon88_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon88_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon53;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon88_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10 := fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon85_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon86_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon86_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon86_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon49;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon86_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon84_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0 == 0;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block10;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block10:
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon82_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon83_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon83_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon83_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon42;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon83_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon80_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon81_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon81_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon81_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon81_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon78_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon79_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon79_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon79_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon79_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon75_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon76_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon76_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon76_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon27;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon76_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon73_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2 <= 0;
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon71_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1 <= 0;
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon69_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0 != 2;
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return:
    $r2 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return;
    $exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "TokenHandler.java", 39, -1, -1, -1} true;
    $return := $r2;
    goto block6;

  block6:
    return;
}



implementation fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r11: ref;
  var $i1: int;
  var $r5: ref;
  var r4: ref;
  var z0: int;
  var $fakelocal_5: ref;
  var $r9: ref;
  var $fakelocal_2: ref;
  var $fakelocal_7: ref;
  var $r8: ref;
  var $i2: int;
  var $l3: int;
  var r2: ref;
  var $r10: ref;
  var $l4: int;
  var $fakelocal_4: ref;
  var $r7: ref;
  var $i0: int;
  var $fakelocal_3: ref;
  var $fakelocal_6: ref;
  var $r6: ref;
  var $b5: int;
  var $fakelocal_1: ref;
  var $fakelocal_0: ref;
  var r1: ref;
  var r0: ref;
  var r12: ref;
  var r3: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$r2: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$r0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$r1: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$this: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$return: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$exception: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$r2: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$r0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$r1: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$this: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$return: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$z1: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap: $heap_type;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    assume fixed.$heap[$return, fixed.$type] <: fixed.com.jdriven.stateless.security.User;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 67, -1, -1, -1} true;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon67_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    call r2, $exception := fixed.java.lang.String$split$java.lang.String(r1, fixed.$StringConst2);
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} true;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} r2 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_1;
    return;

  anon68_Then:
    assume {:partition} r2 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i0 := fixed.$arrSizeHeap[r2];
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} true;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} $i0 == 2;
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} !(0 < fixed.$arrSizeHeap[r2] && 0 >= 0);
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_2;
    return;

  anon70_Then:
    assume {:partition} 0 < fixed.$arrSizeHeap[r2] && 0 >= 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $r5 := fixed.$refArrHeap[r2][0];
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    $i1 := fixed.$stringSizeHeap[$r5];
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} 0 < $i1;
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} !(1 < fixed.$arrSizeHeap[r2] && 1 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_3;
    return;

  anon72_Then:
    assume {:partition} 1 < fixed.$arrSizeHeap[r2] && 1 >= 0;
    $exception := $exception;
    goto anon18;

  anon18:
    $r6 := fixed.$refArrHeap[r2][1];
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    $i2 := fixed.$stringSizeHeap[$r6];
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} 0 < $i2;
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} {:comment "elseblock"} true;
    goto block8;

  block8:
    assert {:sourceloc "TokenHandler.java", 70, -1, -1, -1} true;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} !(0 < fixed.$arrSizeHeap[r2] && 0 >= 0);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_4;
    return;

  anon74_Then:
    assume {:partition} 0 < fixed.$arrSizeHeap[r2] && 0 >= 0;
    $exception := $exception;
    goto anon23;

  anon23:
    $r7 := fixed.$refArrHeap[r2][0];
    assert {:sourceloc "TokenHandler.java", 70, -1, -1, -1} true;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$Entry;

  inline$TokenHandler$fromBase64$java.lang.String$0$Entry:
    inline$TokenHandler$fromBase64$java.lang.String$0$$this := r0;
    inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0 := $r7;
    havoc inline$TokenHandler$fromBase64$java.lang.String$0$$r2, inline$TokenHandler$fromBase64$java.lang.String$0$r0, inline$TokenHandler$fromBase64$java.lang.String$0$r1, inline$TokenHandler$fromBase64$java.lang.String$0$$return, inline$TokenHandler$fromBase64$java.lang.String$0$$exception;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$anon0;

  inline$TokenHandler$fromBase64$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromBase64$java.lang.String$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$fromBase64$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$r0 := inline$TokenHandler$fromBase64$java.lang.String$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$r1 := inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    call inline$TokenHandler$fromBase64$java.lang.String$0$$r2, inline$TokenHandler$fromBase64$java.lang.String$0$$exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(inline$TokenHandler$fromBase64$java.lang.String$0$r1);
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$$return := inline$TokenHandler$fromBase64$java.lang.String$0$$r2;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$block28;

  inline$TokenHandler$fromBase64$java.lang.String$0$block28:
    goto inline$TokenHandler$fromBase64$java.lang.String$0$Return;

  inline$TokenHandler$fromBase64$java.lang.String$0$Return:
    r12 := inline$TokenHandler$fromBase64$java.lang.String$0$$return;
    $exception := inline$TokenHandler$fromBase64$java.lang.String$0$$exception;
    goto anon23$1;

  anon23$1:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon27;

  anon27:
    assert {:sourceloc "TokenHandler.java", 71, -1, -1, -1} true;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} !(1 < fixed.$arrSizeHeap[r2] && 1 >= 0);
    call $fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_5;
    return;

  anon77_Then:
    assume {:partition} 1 < fixed.$arrSizeHeap[r2] && 1 >= 0;
    $exception := $exception;
    goto anon30;

  anon30:
    $r8 := fixed.$refArrHeap[r2][1];
    assert {:sourceloc "TokenHandler.java", 71, -1, -1, -1} true;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$Entry;

  inline$TokenHandler$fromBase64$java.lang.String$1$Entry:
    inline$TokenHandler$fromBase64$java.lang.String$1$$this := r0;
    inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0 := $r8;
    havoc inline$TokenHandler$fromBase64$java.lang.String$1$$r2, inline$TokenHandler$fromBase64$java.lang.String$1$r0, inline$TokenHandler$fromBase64$java.lang.String$1$r1, inline$TokenHandler$fromBase64$java.lang.String$1$$return, inline$TokenHandler$fromBase64$java.lang.String$1$$exception;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$anon0;

  inline$TokenHandler$fromBase64$java.lang.String$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$1$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromBase64$java.lang.String$1$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$fromBase64$java.lang.String$1$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$r0 := inline$TokenHandler$fromBase64$java.lang.String$1$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$r1 := inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    call inline$TokenHandler$fromBase64$java.lang.String$1$$r2, inline$TokenHandler$fromBase64$java.lang.String$1$$exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(inline$TokenHandler$fromBase64$java.lang.String$1$r1);
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$$return := inline$TokenHandler$fromBase64$java.lang.String$1$$r2;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$block28;

  inline$TokenHandler$fromBase64$java.lang.String$1$block28:
    goto inline$TokenHandler$fromBase64$java.lang.String$1$Return;

  inline$TokenHandler$fromBase64$java.lang.String$1$Return:
    r3 := inline$TokenHandler$fromBase64$java.lang.String$1$$return;
    $exception := inline$TokenHandler$fromBase64$java.lang.String$1$$exception;
    goto anon30$1;

  anon30$1:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon34;

  anon34:
    assert {:sourceloc "TokenHandler.java", 75, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this := r0;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0 := r12;
    havoc inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 := fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 == fixed.$null;
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3:
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$(inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1);
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception == fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7:
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$block29;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$block29:
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception != fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException);
    assert {:clone} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return:
    $r9 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto anon34$1;

  anon34$1:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon38;

  anon38:
    assert {:sourceloc "TokenHandler.java", 75, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0 := $r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1 := r3;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$z1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon0;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2 := 0;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3 := 0;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon45_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon45_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon45_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon3:
    assert {:sourceloc "TokenHandler.java", 106, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon45_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block14;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block14:
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon46_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon46_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon46_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon6;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon6:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon47_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon47_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon47_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon47_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block16;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block16:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon48_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon48_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon48_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon48_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon11;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon11:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0 := fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon49_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon49_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon49_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon49_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon14;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon14:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1 := fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon50_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon50_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon50_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon17;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon17:
    assert {:sourceloc "TokenHandler.java", 112, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon50_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block17;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block17:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "thenblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15);
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
   + 1;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon35:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14;
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon35;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon29:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon29;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block54;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block54:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$1:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$2;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$2:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$3:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20:
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$exit:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18$1:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18_last;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon51_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon20:
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon52_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon52_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon52_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon52_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon53_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon53_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon53_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon53_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$l4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block54;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block54:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$1:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$2;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$2:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26$3:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon54_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon54_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon54_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon54_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon29;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon29:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r10;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon55_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon55_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon55_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon55_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r11);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon56_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon56_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon56_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon56_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r14;
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon57_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon57_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon57_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon57_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r15);
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6 + 1;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon51_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i6
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19:
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z2);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r2;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r3;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19$1:
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon58_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon58_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon58_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon58_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon41;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon41:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r4;
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon59_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon59_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon59_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon59_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon44;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon44:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$z1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$r5);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$z1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon46_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18_last:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon51_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon51_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return:
    z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto anon38$1;

  anon38$1:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon42;

  anon42:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} {:comment "elseblock"} true;
    goto anon45;

  anon45:
    assert {:sourceloc "TokenHandler.java", 77, -1, -1, -1} true;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this := r0;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0 := r12;
    havoc inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 148, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 148, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$block22;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$block22:
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Return;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Return:
    r4 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception;
    goto anon45$1;

  anon45$1:
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon49;

  anon49:
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    call $fakelocal_6 := fixed.$new(fixed.java.util.Date);
    $r10 := $fakelocal_6;
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    call $exception := fixed.java.util.Date$$la$init$ra$$($r10);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon53;

  anon53:
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    call $l3, $exception := fixed.java.util.Date$getTime$($r10);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon57;

  anon57:
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} r4 == fixed.$null;
    call $fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := fixed.$null;
    $exception := $fakelocal_7;
    return;

  anon91_Then:
    assume {:partition} r4 != fixed.$null;
    $exception := $exception;
    goto anon60;

  anon60:
    call $l4, $exception := fixed.com.jdriven.stateless.security.User$getExpires$(r4);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon64;

  anon64:
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    $b5 := fixed.$cmpInt($l3, $l4);
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} true;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} 0 > $b5;
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} {:comment "elseblock"} true;
    goto block12;

  block12:
    assert {:sourceloc "TokenHandler.java", 79, -1, -1, -1} true;
    $return := r4;
    goto block13;

  block13:
    return;

  anon94_Then:
    assume {:partition} $b5 >= 0;
    assert {:sourceloc "TokenHandler.java", 78, -1, -1, -1} {:comment "thenblock"} true;
    goto block11;

  block11:
    assert {:sourceloc "TokenHandler.java", 81, -1, -1, -1} true;
    $return := r4;
    goto block13;

  anon92_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon64;

  anon93_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  block9:
    assert {:sourceloc "TokenHandler.java", 79, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r11 := $exception;
    goto block7;

  block7:
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} true;
    $return := fixed.$null;
    goto block13;

  anon89_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon57;

  anon90_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon87_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon53;

  anon88_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    $r10 := fixed.$null;
    goto block9;

  anon85_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon49;

  anon86_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon84_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} {:comment "thenblock"} true;
    goto block10;

  block10:
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto block7;

  anon82_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon42;

  anon83_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon80_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon38;

  anon81_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon78_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon34;

  anon79_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon75_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon27;

  anon76_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon73_Then:
    assume {:partition} $i2 <= 0;
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} {:comment "thenblock"} true;
    goto block7;

  anon71_Then:
    assume {:partition} $i1 <= 0;
    assert {:sourceloc "TokenHandler.java", 87, -1, -1, -1} {:comment "thenblock"} true;
    goto block7;

  anon69_Then:
    assume {:partition} $i0 != 2;
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} {:comment "thenblock"} true;
    goto block7;
}



implementation fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var $r9: ref;
  var $fakelocal_9: ref;
  var $r15: ref;
  var $r2: ref;
  var $r13: ref;
  var $fakelocal_3: ref;
  var $fakelocal_1: ref;
  var $fakelocal_2: ref;
  var $b2: int;
  var $r10: ref;
  var z0: int;
  var i0: int;
  var $z1: int;
  var r1: ref;
  var $r4: ref;
  var $fakelocal_5: ref;
  var $r3: ref;
  var $r8: ref;
  var $fakelocal_8: ref;
  var $r6: ref;
  var $fakelocal_0: ref;
  var $r11: ref;
  var $fakelocal_6: ref;
  var z2: int;
  var $r5: ref;
  var $i1: int;
  var $r12: ref;
  var $l5: int;
  var $fakelocal_4: ref;
  var $b3: int;
  var $fakelocal_7: ref;
  var $r14: ref;
  var $r7: ref;
  var $l4: int;
  var r0: ref;
  var z3: int;
  var i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap: $heap_type;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} true;
    z2 := 0;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    z3 := 0;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} true;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "TokenHandler.java", 106, -1, -1, -1} true;
    $return := 1;
    goto block20;

  block20:
    return;

  anon45_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "TokenHandler.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto block14;

  block14:
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} r0 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} r1 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} {:comment "elseblock"} true;
    goto block15;

  block15:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    $return := 0;
    goto block20;

  anon47_Then:
    assume {:partition} r1 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} {:comment "thenblock"} true;
    goto block16;

  block16:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} r0 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon48_Then:
    assume {:partition} r0 != fixed.$null;
    $exception := $exception;
    goto anon11;

  anon11:
    i0 := fixed.$arrSizeHeap[r0];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_1;
    return;

  anon49_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon14;

  anon14:
    $i1 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} $i1 != i0;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    goto anon17;

  anon17:
    assert {:sourceloc "TokenHandler.java", 112, -1, -1, -1} true;
    $return := 0;
    goto block20;

  anon50_Then:
    assume {:partition} $i1 == i0;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto block17;

  block17:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    i6 := 0;
    goto block18;

  block18:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return := $return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception := $exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9 := $r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15 := $r15;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13 := $r13;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3 := $fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2 := $fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2 := $b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10 := $r10;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0 := z0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0 := i0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1 := r1;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5 := $fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8 := $r8;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6 := $r6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11 := $r11;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6 := $fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2 := z2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12 := $r12;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5 := $l5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4 := $fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3 := $b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7 := $fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14 := $r14;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7 := $r7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4 := $l4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0 := r0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3 := z3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6 := i6;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "thenblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15);
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
   + 1;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon35:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14;
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon35;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon29:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon29;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block54;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block54:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$1:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$2;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$2:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$3:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20:
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$exit:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return:
    $return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return;
    $exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    $r9 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9;
    $r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15;
    $r13 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13;
    $fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    $fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    $b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    $r10 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10;
    z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    $fakelocal_5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5;
    $r8 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8;
    $r6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6;
    $r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11;
    $fakelocal_6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6;
    z2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2;
    $r12 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12;
    $l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5;
    $fakelocal_4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4;
    $b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    $fakelocal_7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7;
    $r14 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14;
    $r7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7;
    $l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4;
    z3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3;
    i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    goto block18$1;

  block18$1:
    goto block18_last;

  anon51_Else:
    assume {:partition} i0 > i6;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "elseblock"} true;
    goto anon20;

  anon20:
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} !(i6 < fixed.$arrSizeHeap[r0] && i6 >= 0);
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_2;
    return;

  anon52_Then:
    assume {:partition} i6 < fixed.$arrSizeHeap[r0] && i6 >= 0;
    $exception := $exception;
    goto anon23;

  anon23:
    $b2 := fixed.$intArrHeap[r0][i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    $l5 := $b2;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} !(i6 < fixed.$arrSizeHeap[r1] && i6 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_3;
    return;

  anon53_Then:
    assume {:partition} i6 < fixed.$arrSizeHeap[r1] && i6 >= 0;
    $exception := $exception;
    goto anon26;

  anon26:
    $b3 := fixed.$intArrHeap[r1][i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    $l4 := $b3;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0 := $l5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1 := $l4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block54;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block54:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Return:
    z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception;
    goto anon26$1;

  anon26$1:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call $r6, $exception := fixed.java.lang.Boolean$valueOf$boolean(z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call $r7, $exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := $r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := $r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    $r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto anon26$2;

  anon26$2:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call $r9, $exception := fixed.java.lang.Boolean$valueOf$boolean(z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := $r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := $r9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    $r10 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto anon26$3;

  anon26$3:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} !(fixed.$heap[$r10, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_4;
    return;

  anon54_Then:
    assume {:partition} fixed.$heap[$r10, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon29;

  anon29:
    $r11 := $r10;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} $r11 == fixed.$null;
    call $fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_5;
    return;

  anon55_Then:
    assume {:partition} $r11 != fixed.$null;
    $exception := $exception;
    goto anon32;

  anon32:
    call z2, $exception := fixed.java.lang.Boolean$booleanValue$($r11);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call $r12, $exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call $r13, $exception := fixed.java.lang.Boolean$valueOf$boolean(z3);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := $r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := $r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    $r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto anon32$1;

  anon32$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} !(fixed.$heap[$r14, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_6;
    return;

  anon56_Then:
    assume {:partition} fixed.$heap[$r14, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon35;

  anon35:
    $r15 := $r14;
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} $r15 == fixed.$null;
    call $fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_7;
    return;

  anon57_Then:
    assume {:partition} $r15 != fixed.$null;
    $exception := $exception;
    goto anon38;

  anon38:
    call z3, $exception := fixed.java.lang.Boolean$booleanValue$($r15);
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    i6 := i6 + 1;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto anon38_dummy;

  anon51_Then:
    assume {:partition} i6 >= i0;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "thenblock"} true;
    goto block19;

  block19:
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    call $r2, $exception := fixed.java.lang.Boolean$valueOf$boolean(z2);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    call $r3, $exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0 := z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1 := $r2;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2 := $r3;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return:
    $r4 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto block19$1;

  block19$1:
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} !(fixed.$heap[$r4, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_8 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_8;
    return;

  anon58_Then:
    assume {:partition} fixed.$heap[$r4, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon41;

  anon41:
    $r5 := $r4;
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} $r5 == fixed.$null;
    call $fakelocal_9 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_9;
    return;

  anon59_Then:
    assume {:partition} $r5 != fixed.$null;
    $exception := $exception;
    goto anon44;

  anon44:
    call $z1, $exception := fixed.java.lang.Boolean$booleanValue$($r5);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    $return := $z1;
    goto block20;

  anon46_Then:
    assume {:partition} r0 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto block15;

  anon38_dummy:
    assume false;
    return;

  block18_last:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto anon51_Then, anon51_Else;
}



implementation fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r5: ref;
  var r2: ref;
  var r1: ref;
  var $fakelocal_2: ref;
  var r3: ref;
  var $fakelocal_3: ref;
  var $r9: ref;
  var $r6: ref;
  var $r11: ref;
  var $fakelocal_1: ref;
  var $fakelocal_0: ref;
  var r0: ref;
  var r4: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r9: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_0: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r5: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_1: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r1: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r0: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_2: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r4: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$in_parameter__0: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$objIndex: int;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$heap: $heap_type;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$r1: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$r0: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$r2: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$in_parameter__0: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.String;
    assume fixed.$heap[$in_parameter__0, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 128, -1, -1, -1} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Entry;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Entry:
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this := r0;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$in_parameter__0 := r1;
    havoc inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r9, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_0, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r5, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_1, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r1, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r0, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_2, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r4, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$heap := fixed.$heap;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon0;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this
   != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$in_parameter__0, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r0 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r1 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$in_parameter__0;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block23;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block23:
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_0 := fixed.$new(fixed.com.fasterxml.jackson.databind.ObjectMapper);
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := fixed.com.fasterxml.jackson.databind.ObjectMapper$$la$init$ra$$(inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7);
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon11_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon11_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon11_Else:
    assume {:partition} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon4;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon4:
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r4, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := fixed.com.fasterxml.jackson.databind.ObjectMapper$writeValueAsBytes$java.lang.Object(inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r1);
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon13_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon13_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon13_Else:
    assume {:partition} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block25;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block25:
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r4;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block26;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block26:
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Return;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon13_Then:
    assume {:partition} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon14_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon14_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon14_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException);
    assert {:clone} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block25;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon14_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException;
    assert {:clone} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block24;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block24:
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    assume fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r5 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception;
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r5;
    assert {:sourceloc "TokenHandler.java", 155, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_1 := fixed.$new(fixed.java.lang.IllegalStateException);
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_1;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon15_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon15_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon15_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2, fixed.$type]
   <: fixed.java.lang.Throwable);
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_2 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return := fixed.$null;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_2;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Return;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon15_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon10;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon10:
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r9 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2;
    assert {:sourceloc "TokenHandler.java", 155, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := fixed.java.lang.IllegalStateException$$la$init$ra$$java.lang.Throwable(inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r9);
    assert {:sourceloc "TokenHandler.java", 155, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block26;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon11_Then:
    assume {:partition} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon12_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon12_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon12_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException);
    assert {:clone} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon4;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon12_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException;
    assert {:clone} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7 := fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block24;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Return:
    r2 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return;
    $exception := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "TokenHandler.java", 129, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this := r0;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0 := r2;
    havoc inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 := fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 == fixed.$null;
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3:
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$(inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1);
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception == fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7:
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$block29;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$block29:
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception != fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException);
    assert {:clone} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return:
    r3 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.StringBuilder);
    $r5 := $fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    call $exception := fixed.java.lang.StringBuilder$$la$init$ra$$int($r5, 170);
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    r4 := $r5;
    assert {:sourceloc "TokenHandler.java", 131, -1, -1, -1} true;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$toBase64$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this := r0;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$$in_parameter__0 := r2;
    havoc inline$TokenHandler$toBase64$byte$lp$$rp$$0$r1, inline$TokenHandler$toBase64$byte$lp$$rp$$0$r0, inline$TokenHandler$toBase64$byte$lp$$rp$$0$$r2, inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return, inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$toBase64$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$r0 := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$r1 := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 160, -1, -1, -1} true;
    call inline$TokenHandler$toBase64$byte$lp$$rp$$0$$r2, inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception := fixed.javax.xml.bind.DatatypeConverter$printBase64Binary$byte$lp$$rp$(inline$TokenHandler$toBase64$byte$lp$$rp$$0$r1);
    assert {:sourceloc "TokenHandler.java", 160, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$r2;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$0$block27;

  inline$TokenHandler$toBase64$byte$lp$$rp$$0$block27:
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$0$Return;

  inline$TokenHandler$toBase64$byte$lp$$rp$$0$Return:
    $r6 := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception;
    goto anon0$3;

  anon0$3:
    assert {:sourceloc "TokenHandler.java", 131, -1, -1, -1} true;
    call $fakelocal_1, $exception := fixed.java.lang.StringBuilder$append$java.lang.String(r4, $r6);
    assert {:sourceloc "TokenHandler.java", 132, -1, -1, -1} true;
    call $fakelocal_2, $exception := fixed.java.lang.StringBuilder$append$java.lang.String(r4, fixed.$StringConst3);
    assert {:sourceloc "TokenHandler.java", 133, -1, -1, -1} true;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$1$Entry;

  inline$TokenHandler$toBase64$byte$lp$$rp$$1$Entry:
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this := r0;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$$in_parameter__0 := r3;
    havoc inline$TokenHandler$toBase64$byte$lp$$rp$$1$r1, inline$TokenHandler$toBase64$byte$lp$$rp$$1$r0, inline$TokenHandler$toBase64$byte$lp$$rp$$1$$r2, inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return, inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$1$anon0;

  inline$TokenHandler$toBase64$byte$lp$$rp$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$r0 := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$r1 := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 160, -1, -1, -1} true;
    call inline$TokenHandler$toBase64$byte$lp$$rp$$1$$r2, inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception := fixed.javax.xml.bind.DatatypeConverter$printBase64Binary$byte$lp$$rp$(inline$TokenHandler$toBase64$byte$lp$$rp$$1$r1);
    assert {:sourceloc "TokenHandler.java", 160, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$r2;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$1$block27;

  inline$TokenHandler$toBase64$byte$lp$$rp$$1$block27:
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$1$Return;

  inline$TokenHandler$toBase64$byte$lp$$rp$$1$Return:
    $r9 := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return;
    $exception := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception;
    goto anon0$4;

  anon0$4:
    assert {:sourceloc "TokenHandler.java", 133, -1, -1, -1} true;
    call $fakelocal_3, $exception := fixed.java.lang.StringBuilder$append$java.lang.String(r4, $r9);
    assert {:sourceloc "TokenHandler.java", 134, -1, -1, -1} true;
    call $r11, $exception := fixed.java.lang.StringBuilder$toString$(r4);
    assert {:sourceloc "TokenHandler.java", 134, -1, -1, -1} true;
    $return := $r11;
    goto block21;

  block21:
    return;
}



implementation fixed.TokenHandler$fromJSON$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r1: ref;
  var r0: ref;
  var $r2: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.com.jdriven.stateless.security.User;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 148, -1, -1, -1} true;
    $r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 148, -1, -1, -1} true;
    $return := $r2;
    goto block22;

  block22:
    return;
}



implementation fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r9: ref;
  var r2: ref;
  var r7: ref;
  var $fakelocal_0: ref;
  var $r5: ref;
  var $fakelocal_1: ref;
  var r1: ref;
  var r0: ref;
  var $fakelocal_2: ref;
  var $r4: ref;
  var r8: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    goto block23;

  block23:
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.com.fasterxml.jackson.databind.ObjectMapper);
    r7 := $fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    call $exception := fixed.com.fasterxml.jackson.databind.ObjectMapper$$la$init$ra$$(r7);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    call $r4, $exception := fixed.com.fasterxml.jackson.databind.ObjectMapper$writeValueAsBytes$java.lang.Object(r7, r1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} $exception == fixed.$null;
    goto block25;

  block25:
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    $return := $r4;
    goto block26;

  block26:
    return;

  anon13_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException);
    assert {:clone} true;
    goto block25;

  anon14_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException;
    assert {:clone} true;
    goto block24;

  block24:
    assert {:sourceloc "TokenHandler.java", 153, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r5 := $exception;
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    r2 := $r5;
    assert {:sourceloc "TokenHandler.java", 155, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.IllegalStateException);
    r8 := $fakelocal_1;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} !(fixed.$heap[r2, fixed.$type] <: fixed.java.lang.Throwable);
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := fixed.$null;
    $exception := $fakelocal_2;
    return;

  anon15_Then:
    assume {:partition} fixed.$heap[r2, fixed.$type] <: fixed.java.lang.Throwable;
    $exception := $exception;
    goto anon10;

  anon10:
    r9 := r2;
    assert {:sourceloc "TokenHandler.java", 155, -1, -1, -1} true;
    call $exception := fixed.java.lang.IllegalStateException$$la$init$ra$$java.lang.Throwable(r8, r9);
    assert {:sourceloc "TokenHandler.java", 155, -1, -1, -1} true;
    $exception := r8;
    goto block26;

  anon11_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException);
    assert {:clone} true;
    goto anon4;

  anon12_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException;
    assert {:clone} true;
    r7 := fixed.$null;
    goto block24;
}



implementation fixed.TokenHandler$toBase64$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r1: ref;
  var r0: ref;
  var $r2: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 160, -1, -1, -1} true;
    call $r2, $exception := fixed.javax.xml.bind.DatatypeConverter$printBase64Binary$byte$lp$$rp$(r1);
    assert {:sourceloc "TokenHandler.java", 160, -1, -1, -1} true;
    $return := $r2;
    goto block27;

  block27:
    return;
}



implementation fixed.TokenHandler$fromBase64$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r2: ref;
  var r0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    call $r2, $exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(r1);
    assert {:sourceloc "TokenHandler.java", 164, -1, -1, -1} true;
    $return := $r2;
    goto block28;

  block28:
    return;
}



implementation fixed.TokenHandler$createHmac$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r3: ref;
  var $r2: ref;
  var r0: ref;
  var r1: ref;
  var $fakelocal_0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    $r2 := fixed.$heap[r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $r2 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon8_Then:
    assume {:partition} $r2 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    call $r3, $exception := fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$($r2, r1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon7;

  anon7:
    assert {:sourceloc "TokenHandler.java", 169, -1, -1, -1} true;
    $return := $r3;
    goto block29;

  block29:
    return;

  anon9_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalStateException);
    assert {:clone} true;
    goto anon7;

  anon10_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalStateException;
    $return := fixed.$null;
    return;
}



implementation {:inline 1} fixed.TokenHandler$$la$clinit$ra$$() returns ($exception: ref)
{
  var $r2: ref;
  var $fakelocal_1: ref;
  var $l0: int;
  var $r1: ref;
  var $r0: ref;
  var $fakelocal_0: ref;
  var $l1: int;
  var $fakelocal_2: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.com.jdriven.stateless.security.User);
    $r0 := $fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    call $exception := fixed.com.jdriven.stateless.security.User$$la$init$ra$$($r0);
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := $r0;
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    $r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.java.util.Date);
    $r1 := $fakelocal_1;
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    call $exception := fixed.java.util.Date$$la$init$ra$$($r1);
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    call $l0, $exception := fixed.java.util.Date$getTime$($r1);
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    $l1 := $l0 + 100000;
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} $r2 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.RuntimeException);
    $exception := $fakelocal_2;
    return;

  anon4_Then:
    assume {:partition} $r2 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    call $exception := fixed.com.jdriven.stateless.security.User$setExpires$long($r2, $l1);
    assert {:sourceloc "TokenHandler.java", 141, -1, -1, -1} true;
    goto block30;

  block30:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Safe.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.sg.edu.nus.comp.tsunami.safe.Safe;
    assume {:sourceloc "Safe.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Safe.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Safe.java", 3, -1, -1, -1} true;
    goto block31;

  block31:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$not$boolean($in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var z1: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    z1 := 0;
    goto block32;

  block32:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    z1 := 1;
    goto block33;

  block33:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    $return := z1;
    goto block34;

  block34:
    return;

  anon8_Then:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block33;

  anon7_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block32;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$and$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $z2: int;
  var z0: int;
  var z1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 12, -1, -1, -1} true;
    $z2 := fixed.$bitAnd(z0, z1);
    assert {:sourceloc "Safe.java", 12, -1, -1, -1} true;
    $return := $z2;
    goto block35;

  block35:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$or$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z1: int;
  var $z2: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 16, -1, -1, -1} true;
    $z2 := fixed.$bitOr(z0, z1);
    assert {:sourceloc "Safe.java", 16, -1, -1, -1} true;
    $return := $z2;
    goto block36;

  block36:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l0: int;
  var $b2: int;
  var $b3: int;
  var z0: int;
  var l1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 < $b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    z0 := 1;
    goto block37;

  block37:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 >= $b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    z0 := 0;
    goto block38;

  block38:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    $return := z0;
    goto block39;

  block39:
    return;

  anon8_Then:
    assume {:partition} $b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto block38;

  anon7_Then:
    assume {:partition} $b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto block37;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l0: int;
  var $b2: int;
  var l1: int;
  var z0: int;
  var $b3: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 27, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 > $b2;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    z0 := 1;
    goto block40;

  block40:
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 <= $b3;
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    z0 := 0;
    goto block41;

  block41:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    $return := z0;
    goto block42;

  block42:
    return;

  anon8_Then:
    assume {:partition} $b3 < 0;
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} {:comment "thenblock"} true;
    goto block41;

  anon7_Then:
    assume {:partition} $b2 >= 0;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} {:comment "thenblock"} true;
    goto block40;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b3: int;
  var l0: int;
  var l1: int;
  var $b2: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 34, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 <= $b2;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    z0 := 1;
    goto block43;

  block43:
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 > $b3;
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    z0 := 0;
    goto block44;

  block44:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    $return := z0;
    goto block45;

  block45:
    return;

  anon8_Then:
    assume {:partition} $b3 >= 0;
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} {:comment "thenblock"} true;
    goto block44;

  anon7_Then:
    assume {:partition} $b2 < 0;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} {:comment "thenblock"} true;
    goto block43;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b2: int;
  var $b3: int;
  var l0: int;
  var z0: int;
  var l1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 41, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 >= $b2;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    z0 := 1;
    goto block46;

  block46:
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 < $b3;
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    z0 := 0;
    goto block47;

  block47:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    $return := z0;
    goto block48;

  block48:
    return;

  anon8_Then:
    assume {:partition} $b3 <= 0;
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto block47;

  anon7_Then:
    assume {:partition} $b2 > 0;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto block46;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b2: int;
  var l0: int;
  var $b3: int;
  var z0: int;
  var l1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    z0 := 1;
    goto block49;

  block49:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    z0 := 0;
    goto block50;

  block50:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    $return := z0;
    goto block51;

  block51:
    return;

  anon8_Then:
    assume {:partition} $b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto block50;

  anon7_Then:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto block49;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b2: int;
  var l0: int;
  var $b3: int;
  var l1: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    z0 := 1;
    goto block52;

  block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    z0 := 0;
    goto block53;

  block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    $return := z0;
    goto block54;

  block54:
    return;

  anon8_Then:
    assume {:partition} $b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto block53;

  anon7_Then:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto block52;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var d1: int;
  var $b0: int;
  var d0: int;
  var $b1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 62, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 < $b0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    z0 := 1;
    goto block55;

  block55:
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 >= $b1;
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    z0 := 0;
    goto block56;

  block56:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    $return := z0;
    goto block57;

  block57:
    return;

  anon8_Then:
    assume {:partition} $b1 > 0;
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} {:comment "thenblock"} true;
    goto block56;

  anon7_Then:
    assume {:partition} $b0 <= 0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} {:comment "thenblock"} true;
    goto block55;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b0: int;
  var $b1: int;
  var d0: int;
  var d1: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 69, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 > $b0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    z0 := 1;
    goto block58;

  block58:
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 <= $b1;
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    z0 := 0;
    goto block59;

  block59:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    $return := z0;
    goto block60;

  block60:
    return;

  anon8_Then:
    assume {:partition} $b1 < 0;
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} {:comment "thenblock"} true;
    goto block59;

  anon7_Then:
    assume {:partition} $b0 >= 0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto block58;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d1: int;
  var d0: int;
  var $b1: int;
  var $b0: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 76, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 <= $b0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    z0 := 1;
    goto block61;

  block61:
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 > $b1;
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    z0 := 0;
    goto block62;

  block62:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    $return := z0;
    goto block63;

  block63:
    return;

  anon8_Then:
    assume {:partition} $b1 >= 0;
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} {:comment "thenblock"} true;
    goto block62;

  anon7_Then:
    assume {:partition} $b0 < 0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto block61;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b0: int;
  var d0: int;
  var $b1: int;
  var d1: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 83, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 >= $b0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    z0 := 1;
    goto block64;

  block64:
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 < $b1;
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    z0 := 0;
    goto block65;

  block65:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    $return := z0;
    goto block66;

  block66:
    return;

  anon8_Then:
    assume {:partition} $b1 <= 0;
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} {:comment "thenblock"} true;
    goto block65;

  anon7_Then:
    assume {:partition} $b0 > 0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} {:comment "thenblock"} true;
    goto block64;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d0: int;
  var d1: int;
  var $b0: int;
  var z0: int;
  var $b1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 90, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b0 == 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    z0 := 1;
    goto block67;

  block67:
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    z0 := 0;
    goto block68;

  block68:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    $return := z0;
    goto block69;

  block69:
    return;

  anon8_Then:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} {:comment "thenblock"} true;
    goto block68;

  anon7_Then:
    assume {:partition} $b0 != 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} {:comment "thenblock"} true;
    goto block67;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b1: int;
  var $b0: int;
  var d0: int;
  var z0: int;
  var d1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 97, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b0 != 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    z0 := 1;
    goto block70;

  block70:
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    z0 := 0;
    goto block71;

  block71:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    $return := z0;
    goto block72;

  block72:
    return;

  anon8_Then:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} {:comment "thenblock"} true;
    goto block71;

  anon7_Then:
    assume {:partition} $b0 == 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} {:comment "thenblock"} true;
    goto block70;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var r0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 104, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    z0 := 1;
    goto block73;

  block73:
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    z0 := 0;
    goto block74;

  block74:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    $return := z0;
    goto block75;

  block75:
    return;

  anon8_Then:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block74;

  anon7_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block73;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var r1: ref;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 111, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    z0 := 1;
    goto block76;

  block76:
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    z0 := 0;
    goto block77;

  block77:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    $return := z0;
    goto block78;

  block78:
    return;

  anon8_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block77;

  anon7_Then:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block76;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object($in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref)
{
  var z0: int;
  var r2: ref;
  var r0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__2, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    r2 := r0;
    goto block79;

  block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    r2 := r1;
    goto block80;

  block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    $return := r2;
    goto block81;

  block81:
    return;

  anon8_Then:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block80;

  anon7_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block79;
}



implementation fixed.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := fixed.$null;
    return;
}



implementation fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18(in_$return: int, 
    in_$exception: ref, 
    in_$r9: ref, 
    in_$r15: ref, 
    in_$r13: ref, 
    in_$fakelocal_3: ref, 
    in_$fakelocal_2: ref, 
    in_$b2: int, 
    in_$r10: ref, 
    in_z0: int, 
    in_i0: int, 
    in_r1: ref, 
    in_$fakelocal_5: ref, 
    in_$r8: ref, 
    in_$r6: ref, 
    in_$r11: ref, 
    in_$fakelocal_6: ref, 
    in_z2: int, 
    in_$r12: ref, 
    in_$l5: int, 
    in_$fakelocal_4: ref, 
    in_$b3: int, 
    in_$fakelocal_7: ref, 
    in_$r14: ref, 
    in_$r7: ref, 
    in_$l4: int, 
    in_r0: ref, 
    in_z3: int, 
    in_i6: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$r9: ref, 
    out_$r15: ref, 
    out_$r13: ref, 
    out_$fakelocal_3: ref, 
    out_$fakelocal_2: ref, 
    out_$b2: int, 
    out_$r10: ref, 
    out_z0: int, 
    out_$fakelocal_5: ref, 
    out_$r8: ref, 
    out_$r6: ref, 
    out_$r11: ref, 
    out_$fakelocal_6: ref, 
    out_z2: int, 
    out_$r12: ref, 
    out_$l5: int, 
    out_$fakelocal_4: ref, 
    out_$b3: int, 
    out_$fakelocal_7: ref, 
    out_$r14: ref, 
    out_$r7: ref, 
    out_$l4: int, 
    out_z3: int, 
    out_i6: int)
{
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap: $heap_type;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;

  entry:
    out_$return, out_$exception, out_$r9, out_$r15, out_$r13, out_$fakelocal_3, out_$fakelocal_2, out_$b2, out_$r10, out_z0, out_$fakelocal_5, out_$r8, out_$r6, out_$r11, out_$fakelocal_6, out_z2, out_$r12, out_$l5, out_$fakelocal_4, out_$b3, out_$fakelocal_7, out_$r14, out_$r7, out_$l4, out_z3, out_i6 := in_$return, in_$exception, in_$r9, in_$r15, in_$r13, in_$fakelocal_3, in_$fakelocal_2, in_$b2, in_$r10, in_z0, in_$fakelocal_5, in_$r8, in_$r6, in_$r11, in_$fakelocal_6, in_z2, in_$r12, in_$l5, in_$fakelocal_4, in_$b3, in_$fakelocal_7, in_$r14, in_$r7, in_$l4, in_z3, in_i6;
    goto block18;

  block18:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto anon51_Then, anon51_Else;

  anon51_Then:
    assume {:partition} out_i6 >= in_i0;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$r9, out_$r15, out_$r13, out_$fakelocal_3, out_$fakelocal_2, out_$b2, out_$r10, out_z0, out_$fakelocal_5, out_$r8, out_$r6, out_$r11, out_$fakelocal_6, out_z2, out_$r12, out_$l5, out_$fakelocal_4, out_$b3, out_$fakelocal_7, out_$r14, out_$r7, out_$l4, out_z3, out_i6 := in_$return, in_$exception, in_$r9, in_$r15, in_$r13, in_$fakelocal_3, in_$fakelocal_2, in_$b2, in_$r10, in_z0, in_$fakelocal_5, in_$r8, in_$r6, in_$r11, in_$fakelocal_6, in_z2, in_$r12, in_$l5, in_$fakelocal_4, in_$b3, in_$fakelocal_7, in_$r14, in_$r7, in_$l4, in_z3, in_i6;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon38:
    call out_z3, out_$exception := fixed.java.lang.Boolean$booleanValue$(out_$r15);
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    out_i6 := out_i6 + 1;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto anon38_dummy;

  anon57_Then:
    assume {:partition} out_$r15 != fixed.$null;
    out_$exception := out_$exception;
    goto anon38;

  anon35:
    out_$r15 := out_$r14;
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} out_$r15 == fixed.$null;
    call out_$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_7;
    out_$return, out_$exception, out_$r9, out_$r15, out_$r13, out_$fakelocal_3, out_$fakelocal_2, out_$b2, out_$r10, out_z0, out_$fakelocal_5, out_$r8, out_$r6, out_$r11, out_$fakelocal_6, out_z2, out_$r12, out_$l5, out_$fakelocal_4, out_$b3, out_$fakelocal_7, out_$r14, out_$r7, out_$l4, out_z3, out_i6 := in_$return, in_$exception, in_$r9, in_$r15, in_$r13, in_$fakelocal_3, in_$fakelocal_2, in_$b2, in_$r10, in_z0, in_$fakelocal_5, in_$r8, in_$r6, in_$r11, in_$fakelocal_6, in_z2, in_$r12, in_$l5, in_$fakelocal_4, in_$b3, in_$fakelocal_7, in_$r14, in_$r7, in_$l4, in_z3, in_i6;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon56_Then:
    assume {:partition} fixed.$heap[out_$r14, fixed.$type] <: fixed.java.lang.Boolean;
    out_$exception := out_$exception;
    goto anon35;

  anon32:
    call out_z2, out_$exception := fixed.java.lang.Boolean$booleanValue$(out_$r11);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call out_$r12, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call out_$r13, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(out_z3);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := out_$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := out_$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    out_$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto anon32$1;

  anon32$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} !(fixed.$heap[out_$r14, fixed.$type] <: fixed.java.lang.Boolean);
    call out_$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_6;
    out_$return, out_$exception, out_$r9, out_$r15, out_$r13, out_$fakelocal_3, out_$fakelocal_2, out_$b2, out_$r10, out_z0, out_$fakelocal_5, out_$r8, out_$r6, out_$r11, out_$fakelocal_6, out_z2, out_$r12, out_$l5, out_$fakelocal_4, out_$b3, out_$fakelocal_7, out_$r14, out_$r7, out_$l4, out_z3, out_i6 := in_$return, in_$exception, in_$r9, in_$r15, in_$r13, in_$fakelocal_3, in_$fakelocal_2, in_$b2, in_$r10, in_z0, in_$fakelocal_5, in_$r8, in_$r6, in_$r11, in_$fakelocal_6, in_z2, in_$r12, in_$l5, in_$fakelocal_4, in_$b3, in_$fakelocal_7, in_$r14, in_$r7, in_$l4, in_z3, in_i6;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon55_Then:
    assume {:partition} out_$r11 != fixed.$null;
    out_$exception := out_$exception;
    goto anon32;

  anon29:
    out_$r11 := out_$r10;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} out_$r11 == fixed.$null;
    call out_$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_5;
    out_$return, out_$exception, out_$r9, out_$r15, out_$r13, out_$fakelocal_3, out_$fakelocal_2, out_$b2, out_$r10, out_z0, out_$fakelocal_5, out_$r8, out_$r6, out_$r11, out_$fakelocal_6, out_z2, out_$r12, out_$l5, out_$fakelocal_4, out_$b3, out_$fakelocal_7, out_$r14, out_$r7, out_$l4, out_z3, out_i6 := in_$return, in_$exception, in_$r9, in_$r15, in_$r13, in_$fakelocal_3, in_$fakelocal_2, in_$b2, in_$r10, in_z0, in_$fakelocal_5, in_$r8, in_$r6, in_$r11, in_$fakelocal_6, in_z2, in_$r12, in_$l5, in_$fakelocal_4, in_$b3, in_$fakelocal_7, in_$r14, in_$r7, in_$l4, in_z3, in_i6;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon54_Then:
    assume {:partition} fixed.$heap[out_$r10, fixed.$type] <: fixed.java.lang.Boolean;
    out_$exception := out_$exception;
    goto anon29;

  anon26:
    out_$b3 := fixed.$intArrHeap[in_r1][out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    out_$l4 := out_$b3;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0 := out_$l5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1 := out_$l4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block54;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block54:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$Return:
    out_z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$0$$exception;
    goto anon26$1;

  anon26$1:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call out_$r6, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call out_$r7, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := out_$r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := out_$r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    out_$r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto anon26$2;

  anon26$2:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call out_$r9, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := out_$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := out_$r9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    out_$r10 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto anon26$3;

  anon26$3:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} !(fixed.$heap[out_$r10, fixed.$type] <: fixed.java.lang.Boolean);
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_4;
    out_$return, out_$exception, out_$r9, out_$r15, out_$r13, out_$fakelocal_3, out_$fakelocal_2, out_$b2, out_$r10, out_z0, out_$fakelocal_5, out_$r8, out_$r6, out_$r11, out_$fakelocal_6, out_z2, out_$r12, out_$l5, out_$fakelocal_4, out_$b3, out_$fakelocal_7, out_$r14, out_$r7, out_$l4, out_z3, out_i6 := in_$return, in_$exception, in_$r9, in_$r15, in_$r13, in_$fakelocal_3, in_$fakelocal_2, in_$b2, in_$r10, in_z0, in_$fakelocal_5, in_$r8, in_$r6, in_$r11, in_$fakelocal_6, in_z2, in_$r12, in_$l5, in_$fakelocal_4, in_$b3, in_$fakelocal_7, in_$r14, in_$r7, in_$l4, in_z3, in_i6;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon53_Then:
    assume {:partition} out_i6 < fixed.$arrSizeHeap[in_r1] && out_i6 >= 0;
    out_$exception := out_$exception;
    goto anon26;

  anon23:
    out_$b2 := fixed.$intArrHeap[in_r0][out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    out_$l5 := out_$b2;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} !(out_i6 < fixed.$arrSizeHeap[in_r1] && out_i6 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_3;
    out_$return, out_$exception, out_$r9, out_$r15, out_$r13, out_$fakelocal_3, out_$fakelocal_2, out_$b2, out_$r10, out_z0, out_$fakelocal_5, out_$r8, out_$r6, out_$r11, out_$fakelocal_6, out_z2, out_$r12, out_$l5, out_$fakelocal_4, out_$b3, out_$fakelocal_7, out_$r14, out_$r7, out_$l4, out_z3, out_i6 := in_$return, in_$exception, in_$r9, in_$r15, in_$r13, in_$fakelocal_3, in_$fakelocal_2, in_$b2, in_$r10, in_z0, in_$fakelocal_5, in_$r8, in_$r6, in_$r11, in_$fakelocal_6, in_z2, in_$r12, in_$l5, in_$fakelocal_4, in_$b3, in_$fakelocal_7, in_$r14, in_$r7, in_$l4, in_z3, in_i6;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon52_Then:
    assume {:partition} out_i6 < fixed.$arrSizeHeap[in_r0] && out_i6 >= 0;
    out_$exception := out_$exception;
    goto anon23;

  anon20:
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} !(out_i6 < fixed.$arrSizeHeap[in_r0] && out_i6 >= 0);
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_2;
    out_$return, out_$exception, out_$r9, out_$r15, out_$r13, out_$fakelocal_3, out_$fakelocal_2, out_$b2, out_$r10, out_z0, out_$fakelocal_5, out_$r8, out_$r6, out_$r11, out_$fakelocal_6, out_z2, out_$r12, out_$l5, out_$fakelocal_4, out_$b3, out_$fakelocal_7, out_$r14, out_$r7, out_$l4, out_z3, out_i6 := in_$return, in_$exception, in_$r9, in_$r15, in_$r13, in_$fakelocal_3, in_$fakelocal_2, in_$b2, in_$r10, in_z0, in_$fakelocal_5, in_$r8, in_$r6, in_$r11, in_$fakelocal_6, in_z2, in_$r12, in_$l5, in_$fakelocal_4, in_$b3, in_$fakelocal_7, in_$r14, in_$r7, in_$l4, in_z3, in_i6;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon51_Else:
    assume {:partition} in_i0 > out_i6;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "elseblock"} true;
    goto anon20;

  anon38_dummy:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return := out_$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception := out_$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9 := out_$r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15 := out_$r15;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13 := out_$r13;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2 := out_$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10 := out_$r10;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0 := out_z0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0 := in_i0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1 := in_r1;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5 := out_$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8 := out_$r8;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6 := out_$r6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11 := out_$r11;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6 := out_$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2 := out_z2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12 := out_$r12;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5 := out_$l5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3 := out_$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7 := out_$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14 := out_$r14;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7 := out_$r7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4 := out_$l4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0 := in_r0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3 := out_z3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6 := out_i6;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "thenblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15);
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
   + 1;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon35:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14;
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon57_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon35;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32:
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3);
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon56_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11
   != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon32;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon29:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon55_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11
   == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon29;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block54;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block54:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block53;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$block52;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long$1$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$1:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$2;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$2:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2);
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block81;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block81:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block80;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block79;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26$3:
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon54_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6];
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon53_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20:
    assert {:sourceloc "TokenHandler.java", 117, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon52_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r9, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r15, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r13, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r10, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r8, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r11, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_6, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r12, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l5, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r14, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$r7, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$l4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_z3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i6;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon51_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$exit:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return:
    out_$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return;
    out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    out_$r9 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r9;
    out_$r15 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r15;
    out_$r13 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r13;
    out_$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    out_$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    out_$r10 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r10;
    out_z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z0;
    out_$fakelocal_5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_5;
    out_$r8 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r8;
    out_$r6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r6;
    out_$r11 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r11;
    out_$fakelocal_6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_6;
    out_z2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z2;
    out_$r12 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r12;
    out_$l5 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l5;
    out_$fakelocal_4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_4;
    out_$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    out_$fakelocal_7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_7;
    out_$r14 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r14;
    out_$r7 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$r7;
    out_$l4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$l4;
    out_z3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_z3;
    out_i6 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i6;
    goto anon38_dummy$1;

  anon38_dummy$1:
    return;

  exit:
    return;
}



axiom (forall x: int :: 
  { fixed.$intToBool(x): bool } 
  fixed.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { fixed.$refToBool(x): bool } 
  fixed.$refToBool(x): bool <==> (if x == fixed.$null then false else true));

axiom (forall x: bool :: 
  { fixed.$boolToInt(x): int } 
  fixed.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { fixed.$cmpReal(x, y): int } 
  fixed.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { fixed.$cmpInt(x, y): int } 
  fixed.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: fixed.$intToRef(index) != fixed.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> fixed.$intToRef(i1) == fixed.$intToRef(i2));

procedure {:prefix "unsafe"} unsafe.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean($this: ref, $in_parameter__0: ref, $in_parameter__1: int)
   returns ($exception: ref);
  modifies fixed.$heap, fixed.$objIndex;
  free ensures $exception
   == _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_$exception($this, 
    $in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex), 
    old(fixed.boolean$TokenHandler$safeMode0));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$heap($this, 
    $in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex), 
    old(fixed.boolean$TokenHandler$safeMode0));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$objIndex($this, 
    $in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex), 
    old(fixed.boolean$TokenHandler$safeMode0));



procedure {:prefix "unsafe"} unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception == _uf_fixed.java.lang.Object$$la$init$ra$$_$exception($this);



procedure {:prefix "unsafe"} unsafe.TokenHandler$parseUserFromToken$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures $exception
   == _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));



procedure {:prefix "unsafe"} unsafe.TokenHandler$parseUserFromToken_unsafe$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures $exception
   == _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$refArrHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$intArrHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));



procedure {:prefix "unsafe"} unsafe.TokenHandler$fromBase64$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  free ensures $return
   == _uf_fixed.TokenHandler$fromBase64$java.lang.String_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));
  free ensures $exception
   == _uf_fixed.TokenHandler$fromBase64$java.lang.String_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));



procedure {:prefix "unsafe"} unsafe.TokenHandler$createHmac$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex));
  free ensures $exception
   == _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262), 
    old(fixed.$objIndex));



procedure {:prefix "unsafe"} unsafe.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures $exception
   == _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.$intArrHeap));



procedure {:prefix "unsafe"} unsafe.TokenHandler$fromJSON$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  free ensures $return
   == _uf_fixed.TokenHandler$fromJSON$byte$lp$$rp$_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));
  free ensures $exception
   == _uf_fixed.TokenHandler$fromJSON$byte$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263));



procedure {:prefix "unsafe"} unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262));
  free ensures $exception
   == _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.javax.crypto.Mac$TokenHandler$hmac262));



procedure {:prefix "unsafe"} unsafe.TokenHandler$toJSON$com.jdriven.stateless.security.User($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures $return
   == _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures $exception
   == _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_fixed.$objIndex($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_fixed.$heap($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));



procedure {:prefix "unsafe"} unsafe.TokenHandler$toBase64$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  free ensures $return
   == _uf_fixed.TokenHandler$toBase64$byte$lp$$rp$_$return($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));
  free ensures $exception
   == _uf_fixed.TokenHandler$toBase64$byte$lp$$rp$_$exception($this, 
    $in_parameter__0, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));



procedure {:inline 1} unsafe.TokenHandler$$la$clinit$ra$$() returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
  free ensures $exception
   == _uf_fixed.TokenHandler$$la$clinit$ra$$_$exception(old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.$objIndex
   == _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.$objIndex(old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.$heap
   == _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.$heap(old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));
  free ensures fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263
   == _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263(old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex));



procedure {:prefix "unsafe"} unsafe.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18(in_$return: int, 
    in_$exception: ref, 
    in_$b2: int, 
    in_r0: ref, 
    in_$b3: int, 
    in_$fakelocal_3: ref, 
    in_i4: int, 
    in_r1: ref, 
    in_$fakelocal_2: ref, 
    in_i0: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$b2: int, 
    out_$b3: int, 
    out_$fakelocal_3: ref, 
    out_i4: int, 
    out_$fakelocal_2: ref);
  modifies fixed.$objIndex, fixed.$heap;



implementation unsafe.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean($this: ref, $in_parameter__0: ref, $in_parameter__1: int)
   returns ($exception: ref)
{
  var $fakelocal_1: ref;
  var $r11: ref;
  var $r10: ref;
  var r1: ref;
  var $fakelocal_3: ref;
  var r0: ref;
  var $r7: ref;
  var $fakelocal_2: ref;
  var z0: int;
  var $r9: ref;
  var $r3: ref;
  var $fakelocal_4: ref;
  var $r6: ref;
  var $r4: ref;
  var r2: ref;
  var $r5: ref;
  var $fakelocal_5: ref;
  var $r8: ref;
  var $fakelocal_0: ref;
  var $r12: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__1;
    assert {:sourceloc "TokenHandler.java", 23, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    goto block1;

  block1:
    assert {:sourceloc "TokenHandler.java", 25, -1, -1, -1} true;
    call $r3, $exception := fixed.javax.crypto.Mac$getInstance$java.lang.String(fixed.$StringConst0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "TokenHandler.java", 25, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.javax.crypto.Mac$TokenHandler$hmac262 := $r3];
    assert {:sourceloc "TokenHandler.java", 26, -1, -1, -1} true;
    $r5 := fixed.$heap[r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 26, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.javax.crypto.spec.SecretKeySpec);
    $r4 := $fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 26, -1, -1, -1} true;
    call $exception := fixed.javax.crypto.spec.SecretKeySpec$$la$init$ra$$byte$lp$$rp$_java.lang.String($r4, r1, fixed.$StringConst0);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon8;

  anon8:
    assert {:sourceloc "TokenHandler.java", 26, -1, -1, -1} true;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} $r5 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.RuntimeException);
    $exception := $fakelocal_1;
    return;

  anon25_Then:
    assume {:partition} $r5 != fixed.$null;
    $exception := $exception;
    goto anon11;

  anon11:
    call $exception := fixed.javax.crypto.Mac$init$java.security.Key($r5, $r4);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} $exception == fixed.$null;
    goto block3;

  block3:
    assert {:sourceloc "TokenHandler.java", 29, -1, -1, -1} true;
    goto block4;

  block4:
    assert {:sourceloc "TokenHandler.java", 30, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.boolean$TokenHandler$safeMode0 := z0];
    assert {:sourceloc "TokenHandler.java", 31, -1, -1, -1} true;
    goto block5;

  block5:
    return;

  anon26_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.InvalidKeyException);
    assert {:clone} true;
    goto block3;

  anon27_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.security.InvalidKeyException;
    goto block2;

  block2:
    assert {:sourceloc "TokenHandler.java", 31, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r6 := $exception;
    assert {:sourceloc "TokenHandler.java", 27, -1, -1, -1} true;
    r2 := $r6;
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.IllegalStateException);
    $r7 := $fakelocal_2;
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    call $fakelocal_3 := fixed.$new(fixed.java.lang.StringBuilder);
    $r8 := $fakelocal_3;
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    call $exception := fixed.java.lang.StringBuilder$$la$init$ra$$($r8);
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    call $r9, $exception := fixed.java.lang.StringBuilder$append$java.lang.String($r8, fixed.$StringConst1);
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    call $r10, $exception := fixed.java.lang.Throwable$getMessage$(r2);
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} $r9 == fixed.$null;
    call $fakelocal_4 := fixed.$new(fixed.java.lang.RuntimeException);
    $exception := $fakelocal_4;
    return;

  anon28_Then:
    assume {:partition} $r9 != fixed.$null;
    $exception := $exception;
    goto anon17;

  anon17:
    call $r11, $exception := fixed.java.lang.StringBuilder$append$java.lang.String($r9, $r10);
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} $r11 == fixed.$null;
    call $fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    $exception := $fakelocal_5;
    return;

  anon29_Then:
    assume {:partition} $r11 != fixed.$null;
    $exception := $exception;
    goto anon20;

  anon20:
    call $r12, $exception := fixed.java.lang.StringBuilder$toString$($r11);
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    call $exception := fixed.java.lang.IllegalStateException$$la$init$ra$$java.lang.String_java.lang.Throwable($r7, $r12, r2);
    assert {:sourceloc "TokenHandler.java", 28, -1, -1, -1} true;
    $exception := $r7;
    goto block5;

  anon23_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto anon8;

  anon24_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.NoSuchAlgorithmException;
    assert {:clone} true;
    $r4 := fixed.$null;
    goto block2;

  anon21_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.NoSuchAlgorithmException);
    assert {:clone} true;
    goto anon4;

  anon22_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.java.security.NoSuchAlgorithmException;
    goto block2;
}



implementation unsafe.TokenHandler$parseUserFromToken$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r2: ref;
  var r0: ref;
  var r1: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r3: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_5: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_7: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_2: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_1: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l3: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r6: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r5: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r7: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r8: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r11: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r9: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_3: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_0: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_4: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l4: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_6: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$in_parameter__0: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception: ref;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$objIndex: int;
  var inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$heap: $heap_type;
  var inline$TokenHandler$fromBase64$java.lang.String$0$r0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$r1: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$r2: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$this: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$return: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$exception: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$r0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$r1: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$r2: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$this: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$return: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap: $heap_type;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.com.jdriven.stateless.security.User;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 37, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Entry;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Entry:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this := r0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$in_parameter__0 := r1;
    havoc inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r3, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_5, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_7, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_2, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_1, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l3, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r6, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r5, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r7, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r8, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r11, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r9, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_3, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_0, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_4, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l4, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_6, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$heap := fixed.$heap;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon0;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this
   != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    assume fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 65, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon67_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon67_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon67_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1
   == fixed.$null;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_0;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon67_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1
   != fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon3;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon3:
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.java.lang.String$split$java.lang.String(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r1, fixed.$StringConst2);
    assert {:sourceloc "TokenHandler.java", 66, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon68_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon68_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon68_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2
   == fixed.$null;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_1;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon68_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2
   != fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon6;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon6:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0 := fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2];
    assert {:sourceloc "TokenHandler.java", 66, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon69_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon69_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon69_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0 == 2;
    assert {:sourceloc "TokenHandler.java", 66, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon9:
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon70_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon70_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon70_Else:
    assume {:partition} !(0
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 0 >= 0);
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_2;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon70_Then:
    assume {:partition} 0
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 0 >= 0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon12;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon12:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r5 := fixed.$refArrHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2][0];
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1 := fixed.$stringSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r5];
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon71_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon71_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon71_Else:
    assume {:partition} 0 < inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1;
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon15;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon15:
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon72_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon72_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon72_Else:
    assume {:partition} !(1
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 1 >= 0);
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_3;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon72_Then:
    assume {:partition} 1
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 1 >= 0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon18;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon18:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r6 := fixed.$refArrHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2][1];
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2 := fixed.$stringSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r6];
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon73_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon73_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon73_Else:
    assume {:partition} 0 < inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2;
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block8;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block8:
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon74_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon74_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon74_Else:
    assume {:partition} !(0
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 0 >= 0);
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_4;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon74_Then:
    assume {:partition} 0
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 0 >= 0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon23;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon23:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r7 := fixed.$refArrHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2][0];
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} true;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$Entry;

  inline$TokenHandler$fromBase64$java.lang.String$0$Entry:
    inline$TokenHandler$fromBase64$java.lang.String$0$$this := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0;
    inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r7;
    havoc inline$TokenHandler$fromBase64$java.lang.String$0$r0, inline$TokenHandler$fromBase64$java.lang.String$0$r1, inline$TokenHandler$fromBase64$java.lang.String$0$$r2, inline$TokenHandler$fromBase64$java.lang.String$0$$return, inline$TokenHandler$fromBase64$java.lang.String$0$$exception;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$anon0;

  inline$TokenHandler$fromBase64$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromBase64$java.lang.String$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$fromBase64$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$r0 := inline$TokenHandler$fromBase64$java.lang.String$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$r1 := inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    call inline$TokenHandler$fromBase64$java.lang.String$0$$r2, inline$TokenHandler$fromBase64$java.lang.String$0$$exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(inline$TokenHandler$fromBase64$java.lang.String$0$r1);
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$$return := inline$TokenHandler$fromBase64$java.lang.String$0$$r2;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$block29;

  inline$TokenHandler$fromBase64$java.lang.String$0$block29:
    goto inline$TokenHandler$fromBase64$java.lang.String$0$Return;

  inline$TokenHandler$fromBase64$java.lang.String$0$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12 := inline$TokenHandler$fromBase64$java.lang.String$0$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$fromBase64$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon23$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon23$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon75_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon75_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon75_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon27;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon27:
    assert {:sourceloc "TokenHandler.java", 69, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon77_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon77_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon77_Else:
    assume {:partition} !(1
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 1 >= 0);
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_5;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon77_Then:
    assume {:partition} 1
     < fixed.$arrSizeHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2]
   && 1 >= 0;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon30;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon30:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r8 := fixed.$refArrHeap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r2][1];
    assert {:sourceloc "TokenHandler.java", 69, -1, -1, -1} true;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$Entry;

  inline$TokenHandler$fromBase64$java.lang.String$1$Entry:
    inline$TokenHandler$fromBase64$java.lang.String$1$$this := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0;
    inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r8;
    havoc inline$TokenHandler$fromBase64$java.lang.String$1$r0, inline$TokenHandler$fromBase64$java.lang.String$1$r1, inline$TokenHandler$fromBase64$java.lang.String$1$$r2, inline$TokenHandler$fromBase64$java.lang.String$1$$return, inline$TokenHandler$fromBase64$java.lang.String$1$$exception;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$anon0;

  inline$TokenHandler$fromBase64$java.lang.String$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$1$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromBase64$java.lang.String$1$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$fromBase64$java.lang.String$1$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$r0 := inline$TokenHandler$fromBase64$java.lang.String$1$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$r1 := inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    call inline$TokenHandler$fromBase64$java.lang.String$1$$r2, inline$TokenHandler$fromBase64$java.lang.String$1$$exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(inline$TokenHandler$fromBase64$java.lang.String$1$r1);
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$$return := inline$TokenHandler$fromBase64$java.lang.String$1$$r2;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$block29;

  inline$TokenHandler$fromBase64$java.lang.String$1$block29:
    goto inline$TokenHandler$fromBase64$java.lang.String$1$Return;

  inline$TokenHandler$fromBase64$java.lang.String$1$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r3 := inline$TokenHandler$fromBase64$java.lang.String$1$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$fromBase64$java.lang.String$1$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon30$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon30$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon78_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon78_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon78_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34:
    assert {:sourceloc "TokenHandler.java", 73, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12;
    havoc inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 := fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 == fixed.$null;
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3:
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$(inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1);
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception == fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7:
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$block30;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$block30:
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception != fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException);
    assert {:clone} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r9 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon80_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon80_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon80_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38:
    assert {:sourceloc "TokenHandler.java", 73, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r3;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon0;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon30_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon30_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon30_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon3:
    assert {:sourceloc "TokenHandler.java", 102, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon30_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block14;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block14:
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon6;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon6:
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15:
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block16;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block16:
    assert {:sourceloc "TokenHandler.java", 106, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon11;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon11:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0 := fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0];
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon14;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon14:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1 := fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1];
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon17;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon17:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block17;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block17:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "thenblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
   + 1;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20:
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$exit:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18$1:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18_last;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon20:
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon29;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon29:
    assert {:sourceloc "TokenHandler.java", 112, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 + 1;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18_last:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon82_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon82_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon82_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon42;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon42:
    assert {:sourceloc "TokenHandler.java", 74, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon84_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon84_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon84_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0 != 0;
    assert {:sourceloc "TokenHandler.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon45;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon45:
    assert {:sourceloc "TokenHandler.java", 75, -1, -1, -1} true;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r0;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r12;
    havoc inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$block23;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$block23:
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Return;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Return:
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon45$1;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon45$1:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon85_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon85_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon85_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon49;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon49:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_6 := fixed.$new(fixed.java.util.Date);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_6;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.java.util.Date$$la$init$ra$$(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10);
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon87_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon87_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon87_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon53;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon53:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l3, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.java.util.Date$getTime$(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10);
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon89_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon89_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon89_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon57;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon57:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon91_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon91_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon91_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4
   == fixed.$null;
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$fakelocal_7;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon91_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4
   != fixed.$null;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon60;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon60:
    call inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l4, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception := fixed.com.jdriven.stateless.security.User$getExpires$(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4);
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon92_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon92_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon92_Else:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon64;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon64:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5 := fixed.$cmpInt(inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l3, 
  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$l4);
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon94_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon94_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon94_Else:
    assume {:partition} 0 > inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block12;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block12:
    assert {:sourceloc "TokenHandler.java", 77, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block13;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block13:
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon94_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$b5 >= 0;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block11;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block11:
    assert {:sourceloc "TokenHandler.java", 79, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$r4;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block13;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon92_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon93_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon93_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon93_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon64;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon93_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9:
    assert {:sourceloc "TokenHandler.java", 77, -1, -1, -1} true;
    assume fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r11 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7:
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return := fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block13;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon89_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon90_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon90_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon90_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon57;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon90_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon87_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon88_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon88_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon88_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon53;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon88_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$r10 := fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon85_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon86_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon86_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon86_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon49;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon86_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon84_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$z0 == 0;
    assert {:sourceloc "TokenHandler.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block10;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block10:
    assert {:sourceloc "TokenHandler.java", 83, -1, -1, -1} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon82_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon83_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon83_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon83_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon42;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon83_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon80_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon81_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon81_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon81_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon38;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon81_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon78_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon79_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon79_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon79_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon34;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon79_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon75_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon76_Then, inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon76_Else;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon76_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon27;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon76_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block9;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon73_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i2 <= 0;
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon71_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i1 <= 0;
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$anon69_Then:
    assume {:partition} inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$i0 != 2;
    assert {:sourceloc "TokenHandler.java", 66, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$block7;

  inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$Return:
    $r2 := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$return;
    $exception := inline$TokenHandler$parseUserFromToken_unsafe$java.lang.String$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "TokenHandler.java", 37, -1, -1, -1} true;
    $return := $r2;
    goto block6;

  block6:
    return;
}



implementation unsafe.TokenHandler$parseUserFromToken_unsafe$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r3: ref;
  var $fakelocal_5: ref;
  var $fakelocal_7: ref;
  var $fakelocal_2: ref;
  var r2: ref;
  var $fakelocal_1: ref;
  var $l3: int;
  var $r6: ref;
  var $r5: ref;
  var $r7: ref;
  var $b5: int;
  var $r8: ref;
  var $r11: ref;
  var r0: ref;
  var $r9: ref;
  var r1: ref;
  var $i1: int;
  var $fakelocal_3: ref;
  var $fakelocal_0: ref;
  var r4: ref;
  var $fakelocal_4: ref;
  var $i0: int;
  var $i2: int;
  var r12: ref;
  var $r10: ref;
  var $l4: int;
  var z0: int;
  var $fakelocal_6: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$r0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$r1: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$r2: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$this: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$return: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$0$$exception: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$r0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$r1: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$r2: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$this: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$return: ref;
  var inline$TokenHandler$fromBase64$java.lang.String$1$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap: $heap_type;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.com.jdriven.stateless.security.User;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 65, -1, -1, -1} true;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon67_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    call r2, $exception := fixed.java.lang.String$split$java.lang.String(r1, fixed.$StringConst2);
    assert {:sourceloc "TokenHandler.java", 66, -1, -1, -1} true;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} r2 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := fixed.$null;
    $exception := $fakelocal_1;
    return;

  anon68_Then:
    assume {:partition} r2 != fixed.$null;
    $exception := $exception;
    goto anon6;

  anon6:
    $i0 := fixed.$arrSizeHeap[r2];
    assert {:sourceloc "TokenHandler.java", 66, -1, -1, -1} true;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} $i0 == 2;
    assert {:sourceloc "TokenHandler.java", 66, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} !(0 < fixed.$arrSizeHeap[r2] && 0 >= 0);
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_2;
    return;

  anon70_Then:
    assume {:partition} 0 < fixed.$arrSizeHeap[r2] && 0 >= 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $r5 := fixed.$refArrHeap[r2][0];
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    $i1 := fixed.$stringSizeHeap[$r5];
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} 0 < $i1;
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} !(1 < fixed.$arrSizeHeap[r2] && 1 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_3;
    return;

  anon72_Then:
    assume {:partition} 1 < fixed.$arrSizeHeap[r2] && 1 >= 0;
    $exception := $exception;
    goto anon18;

  anon18:
    $r6 := fixed.$refArrHeap[r2][1];
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    $i2 := fixed.$stringSizeHeap[$r6];
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} 0 < $i2;
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} {:comment "elseblock"} true;
    goto block8;

  block8:
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} true;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} !(0 < fixed.$arrSizeHeap[r2] && 0 >= 0);
    call $fakelocal_4 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_4;
    return;

  anon74_Then:
    assume {:partition} 0 < fixed.$arrSizeHeap[r2] && 0 >= 0;
    $exception := $exception;
    goto anon23;

  anon23:
    $r7 := fixed.$refArrHeap[r2][0];
    assert {:sourceloc "TokenHandler.java", 68, -1, -1, -1} true;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$Entry;

  inline$TokenHandler$fromBase64$java.lang.String$0$Entry:
    inline$TokenHandler$fromBase64$java.lang.String$0$$this := r0;
    inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0 := $r7;
    havoc inline$TokenHandler$fromBase64$java.lang.String$0$r0, inline$TokenHandler$fromBase64$java.lang.String$0$r1, inline$TokenHandler$fromBase64$java.lang.String$0$$r2, inline$TokenHandler$fromBase64$java.lang.String$0$$return, inline$TokenHandler$fromBase64$java.lang.String$0$$exception;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$anon0;

  inline$TokenHandler$fromBase64$java.lang.String$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromBase64$java.lang.String$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$fromBase64$java.lang.String$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$r0 := inline$TokenHandler$fromBase64$java.lang.String$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$r1 := inline$TokenHandler$fromBase64$java.lang.String$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    call inline$TokenHandler$fromBase64$java.lang.String$0$$r2, inline$TokenHandler$fromBase64$java.lang.String$0$$exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(inline$TokenHandler$fromBase64$java.lang.String$0$r1);
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$0$$return := inline$TokenHandler$fromBase64$java.lang.String$0$$r2;
    goto inline$TokenHandler$fromBase64$java.lang.String$0$block29;

  inline$TokenHandler$fromBase64$java.lang.String$0$block29:
    goto inline$TokenHandler$fromBase64$java.lang.String$0$Return;

  inline$TokenHandler$fromBase64$java.lang.String$0$Return:
    r12 := inline$TokenHandler$fromBase64$java.lang.String$0$$return;
    $exception := inline$TokenHandler$fromBase64$java.lang.String$0$$exception;
    goto anon23$1;

  anon23$1:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon27;

  anon27:
    assert {:sourceloc "TokenHandler.java", 69, -1, -1, -1} true;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} !(1 < fixed.$arrSizeHeap[r2] && 1 >= 0);
    call $fakelocal_5 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := fixed.$null;
    $exception := $fakelocal_5;
    return;

  anon77_Then:
    assume {:partition} 1 < fixed.$arrSizeHeap[r2] && 1 >= 0;
    $exception := $exception;
    goto anon30;

  anon30:
    $r8 := fixed.$refArrHeap[r2][1];
    assert {:sourceloc "TokenHandler.java", 69, -1, -1, -1} true;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$Entry;

  inline$TokenHandler$fromBase64$java.lang.String$1$Entry:
    inline$TokenHandler$fromBase64$java.lang.String$1$$this := r0;
    inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0 := $r8;
    havoc inline$TokenHandler$fromBase64$java.lang.String$1$r0, inline$TokenHandler$fromBase64$java.lang.String$1$r1, inline$TokenHandler$fromBase64$java.lang.String$1$$r2, inline$TokenHandler$fromBase64$java.lang.String$1$$return, inline$TokenHandler$fromBase64$java.lang.String$1$$exception;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$anon0;

  inline$TokenHandler$fromBase64$java.lang.String$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$1$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromBase64$java.lang.String$1$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$fromBase64$java.lang.String$1$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$r0 := inline$TokenHandler$fromBase64$java.lang.String$1$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$r1 := inline$TokenHandler$fromBase64$java.lang.String$1$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    call inline$TokenHandler$fromBase64$java.lang.String$1$$r2, inline$TokenHandler$fromBase64$java.lang.String$1$$exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(inline$TokenHandler$fromBase64$java.lang.String$1$r1);
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    inline$TokenHandler$fromBase64$java.lang.String$1$$return := inline$TokenHandler$fromBase64$java.lang.String$1$$r2;
    goto inline$TokenHandler$fromBase64$java.lang.String$1$block29;

  inline$TokenHandler$fromBase64$java.lang.String$1$block29:
    goto inline$TokenHandler$fromBase64$java.lang.String$1$Return;

  inline$TokenHandler$fromBase64$java.lang.String$1$Return:
    r3 := inline$TokenHandler$fromBase64$java.lang.String$1$$return;
    $exception := inline$TokenHandler$fromBase64$java.lang.String$1$$exception;
    goto anon30$1;

  anon30$1:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon34;

  anon34:
    assert {:sourceloc "TokenHandler.java", 73, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this := r0;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0 := r12;
    havoc inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 := fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 == fixed.$null;
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3:
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$(inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1);
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception == fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7:
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$block30;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$block30:
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception != fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException);
    assert {:clone} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return:
    $r9 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto anon34$1;

  anon34$1:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon38;

  anon38:
    assert {:sourceloc "TokenHandler.java", 73, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0 := $r9;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1 := r3;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon0;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon30_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon30_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon30_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon3;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon3:
    assert {:sourceloc "TokenHandler.java", 102, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon30_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block14;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block14:
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon6;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon6:
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15:
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block16;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block16:
    assert {:sourceloc "TokenHandler.java", 106, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon11;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon11:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0 := fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0];
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 == fixed.$null;
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1 != fixed.$null;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon14;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon14:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1 := fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1];
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon17;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon17:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$i1
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block17;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block17:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "thenblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
   + 1;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20:
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$exit:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18$1;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18$1:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18_last;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon20:
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon29;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon29:
    assert {:sourceloc "TokenHandler.java", 112, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b3
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4 + 1;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i4
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block19:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return := 1;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block21;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$r0 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block20_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$block18_last:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$Return:
    z0 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto anon38$1;

  anon38$1:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon42;

  anon42:
    assert {:sourceloc "TokenHandler.java", 74, -1, -1, -1} true;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "TokenHandler.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto anon45;

  anon45:
    assert {:sourceloc "TokenHandler.java", 75, -1, -1, -1} true;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this := r0;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0 := r12;
    havoc inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return, inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r0 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$r1 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$r2;
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$block23;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$block23:
    goto inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Return;

  inline$TokenHandler$fromJSON$byte$lp$$rp$$0$Return:
    r4 := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$fromJSON$byte$lp$$rp$$0$$exception;
    goto anon45$1;

  anon45$1:
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon49;

  anon49:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    call $fakelocal_6 := fixed.$new(fixed.java.util.Date);
    $r10 := $fakelocal_6;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    call $exception := fixed.java.util.Date$$la$init$ra$$($r10);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon53;

  anon53:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    call $l3, $exception := fixed.java.util.Date$getTime$($r10);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon57;

  anon57:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} r4 == fixed.$null;
    call $fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := fixed.$null;
    $exception := $fakelocal_7;
    return;

  anon91_Then:
    assume {:partition} r4 != fixed.$null;
    $exception := $exception;
    goto anon60;

  anon60:
    call $l4, $exception := fixed.com.jdriven.stateless.security.User$getExpires$(r4);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon64;

  anon64:
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    $b5 := fixed.$cmpInt($l3, $l4);
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} true;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} 0 > $b5;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} {:comment "elseblock"} true;
    goto block12;

  block12:
    assert {:sourceloc "TokenHandler.java", 77, -1, -1, -1} true;
    $return := r4;
    goto block13;

  block13:
    return;

  anon94_Then:
    assume {:partition} $b5 >= 0;
    assert {:sourceloc "TokenHandler.java", 76, -1, -1, -1} {:comment "thenblock"} true;
    goto block11;

  block11:
    assert {:sourceloc "TokenHandler.java", 79, -1, -1, -1} true;
    $return := r4;
    goto block13;

  anon92_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon64;

  anon93_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  block9:
    assert {:sourceloc "TokenHandler.java", 77, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r11 := $exception;
    goto block7;

  block7:
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} true;
    $return := fixed.$null;
    goto block13;

  anon89_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon57;

  anon90_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon87_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon53;

  anon88_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    $r10 := fixed.$null;
    goto block9;

  anon85_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon49;

  anon86_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon84_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "TokenHandler.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto block10;

  block10:
    assert {:sourceloc "TokenHandler.java", 83, -1, -1, -1} true;
    goto block7;

  anon82_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon42;

  anon83_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon80_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon38;

  anon81_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon78_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon34;

  anon79_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon75_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.java.lang.IllegalArgumentException);
    assert {:clone} true;
    goto anon27;

  anon76_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalArgumentException;
    assert {:clone} true;
    goto block9;

  anon73_Then:
    assume {:partition} $i2 <= 0;
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} {:comment "thenblock"} true;
    goto block7;

  anon71_Then:
    assume {:partition} $i1 <= 0;
    assert {:sourceloc "TokenHandler.java", 85, -1, -1, -1} {:comment "thenblock"} true;
    goto block7;

  anon69_Then:
    assume {:partition} $i0 != 2;
    assert {:sourceloc "TokenHandler.java", 66, -1, -1, -1} {:comment "thenblock"} true;
    goto block7;
}



implementation unsafe.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var $b2: int;
  var r0: ref;
  var $b3: int;
  var $fakelocal_3: ref;
  var i4: int;
  var $fakelocal_1: ref;
  var r1: ref;
  var $fakelocal_2: ref;
  var $fakelocal_0: ref;
  var i0: int;
  var $i1: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} true;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "TokenHandler.java", 102, -1, -1, -1} true;
    $return := 1;
    goto block21;

  block21:
    return;

  anon30_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "TokenHandler.java", 101, -1, -1, -1} {:comment "thenblock"} true;
    goto block14;

  block14:
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} true;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} r0 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} r1 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} {:comment "elseblock"} true;
    goto block15;

  block15:
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} true;
    $return := 0;
    goto block21;

  anon32_Then:
    assume {:partition} r1 != fixed.$null;
    assert {:sourceloc "TokenHandler.java", 104, -1, -1, -1} {:comment "thenblock"} true;
    goto block16;

  block16:
    assert {:sourceloc "TokenHandler.java", 106, -1, -1, -1} true;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} r0 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon33_Then:
    assume {:partition} r0 != fixed.$null;
    $exception := $exception;
    goto anon11;

  anon11:
    i0 := fixed.$arrSizeHeap[r0];
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_1;
    return;

  anon34_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon14;

  anon14:
    $i1 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} true;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} $i1 != i0;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto anon17;

  anon17:
    assert {:sourceloc "TokenHandler.java", 108, -1, -1, -1} true;
    $return := 0;
    goto block21;

  anon35_Then:
    assume {:partition} $i1 == i0;
    assert {:sourceloc "TokenHandler.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto block17;

  block17:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    i4 := 0;
    goto block18;

  block18:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return := $return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception := $exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2 := $b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0 := r0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3 := $b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3 := $fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4 := i4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1 := r1;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2 := $fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0 := i0;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "thenblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
   + 1;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20:
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$exit:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return:
    $return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return;
    $exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    $b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    $b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    $fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4;
    $fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    goto block18$1;

  block18$1:
    goto block18_last;

  anon36_Else:
    assume {:partition} i0 > i4;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "elseblock"} true;
    goto anon20;

  anon20:
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} !(i4 < fixed.$arrSizeHeap[r0] && i4 >= 0);
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_2;
    return;

  anon37_Then:
    assume {:partition} i4 < fixed.$arrSizeHeap[r0] && i4 >= 0;
    $exception := $exception;
    goto anon23;

  anon23:
    $b3 := fixed.$intArrHeap[r0][i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} !(i4 < fixed.$arrSizeHeap[r1] && i4 >= 0);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_3;
    return;

  anon38_Then:
    assume {:partition} i4 < fixed.$arrSizeHeap[r1] && i4 >= 0;
    $exception := $exception;
    goto anon26;

  anon26:
    $b2 := fixed.$intArrHeap[r1][i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} $b3 != $b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    goto anon29;

  anon29:
    assert {:sourceloc "TokenHandler.java", 112, -1, -1, -1} true;
    $return := 0;
    goto block21;

  anon39_Then:
    assume {:partition} $b3 == $b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto block20;

  block20:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    i4 := i4 + 1;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto block20_dummy;

  anon36_Then:
    assume {:partition} i4 >= i0;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "thenblock"} true;
    goto block19;

  block19:
    assert {:sourceloc "TokenHandler.java", 114, -1, -1, -1} true;
    $return := 1;
    goto block21;

  anon31_Then:
    assume {:partition} r0 == fixed.$null;
    assert {:sourceloc "TokenHandler.java", 103, -1, -1, -1} {:comment "thenblock"} true;
    goto block15;

  block20_dummy:
    assume false;
    return;

  block18_last:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto anon36_Then, anon36_Else;
}



implementation unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r2: ref;
  var $r11: ref;
  var $fakelocal_2: ref;
  var $fakelocal_1: ref;
  var r1: ref;
  var $fakelocal_3: ref;
  var $r6: ref;
  var r4: ref;
  var $fakelocal_0: ref;
  var $r9: ref;
  var r3: ref;
  var $r5: ref;
  var r0: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r4: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_1: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r5: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r9: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r0: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r1: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_2: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_0: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$in_parameter__0: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception: ref;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$objIndex: int;
  var inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$heap: $heap_type;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex: int;
  var inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap: $heap_type;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$r1: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$r0: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$r2: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$r1: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$r0: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$r2: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$in_parameter__0: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return: ref;
  var inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 118, -1, -1, -1} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Entry;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Entry:
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this := r0;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$in_parameter__0 := r1;
    havoc inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r4, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_1, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r5, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r9, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r0, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r1, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_2, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_0, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$heap := fixed.$heap;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon0;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this
   != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$in_parameter__0, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r0 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r1 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$in_parameter__0;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block24;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block24:
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_0 := fixed.$new(fixed.com.fasterxml.jackson.databind.ObjectMapper);
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := fixed.com.fasterxml.jackson.databind.ObjectMapper$$la$init$ra$$(inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7);
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon11_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon11_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon11_Else:
    assume {:partition} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon4;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon4:
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r4, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := fixed.com.fasterxml.jackson.databind.ObjectMapper$writeValueAsBytes$java.lang.Object(inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r1);
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon13_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon13_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon13_Else:
    assume {:partition} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception
   == fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block26;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block26:
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r4;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block27;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block27:
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Return;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon13_Then:
    assume {:partition} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon14_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon14_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon14_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException);
    assert {:clone} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block26;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon14_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException;
    assert {:clone} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block25;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block25:
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    assume fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r5 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception;
    assert {:sourceloc "TokenHandler.java", 144, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$r5;
    assert {:sourceloc "TokenHandler.java", 145, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_1 := fixed.$new(fixed.java.lang.IllegalStateException);
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_1;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon15_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon15_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon15_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2, fixed.$type]
   <: fixed.java.lang.Throwable);
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_2 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return := fixed.$null;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$fakelocal_2;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Return;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon15_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon10;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon10:
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r9 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r2;
    assert {:sourceloc "TokenHandler.java", 145, -1, -1, -1} true;
    call inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := fixed.java.lang.IllegalStateException$$la$init$ra$$java.lang.Throwable(inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r9);
    assert {:sourceloc "TokenHandler.java", 145, -1, -1, -1} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r8;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block27;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon11_Then:
    assume {:partition} inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception
   != fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon12_Then, inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon12_Else;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon12_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException);
    assert {:clone} true;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon4;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$anon12_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException;
    assert {:clone} true;
    inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$r7 := fixed.$null;
    goto inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$block25;

  inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$Return:
    r2 := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$return;
    $exception := inline$TokenHandler$toJSON$com.jdriven.stateless.security.User$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "TokenHandler.java", 119, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this := r0;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0 := r2;
    havoc inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$heap := fixed.$heap;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 := fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 == fixed.$null;
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$fakelocal_0;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon8_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2 != fixed.$null;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon3:
    call inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3, inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception := fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$(inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r2, inline$TokenHandler$createHmac$byte$lp$$rp$$0$r1);
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Else:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception == fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7:
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$r3;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$block30;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$block30:
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon9_Then:
    assume {:partition} inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception != fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then, inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Else:
    assume {:partition} !(fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException);
    assert {:clone} true;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon7;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$anon10_Then:
    assume {:partition} fixed.$heap[inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.IllegalStateException;
    inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return := fixed.$null;
    goto inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return;

  inline$TokenHandler$createHmac$byte$lp$$rp$$0$Return:
    r3 := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$createHmac$byte$lp$$rp$$0$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "TokenHandler.java", 120, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.StringBuilder);
    $r5 := $fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 120, -1, -1, -1} true;
    call $exception := fixed.java.lang.StringBuilder$$la$init$ra$$int($r5, 170);
    assert {:sourceloc "TokenHandler.java", 120, -1, -1, -1} true;
    r4 := $r5;
    assert {:sourceloc "TokenHandler.java", 121, -1, -1, -1} true;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$0$Entry;

  inline$TokenHandler$toBase64$byte$lp$$rp$$0$Entry:
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this := r0;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$$in_parameter__0 := r2;
    havoc inline$TokenHandler$toBase64$byte$lp$$rp$$0$r1, inline$TokenHandler$toBase64$byte$lp$$rp$$0$r0, inline$TokenHandler$toBase64$byte$lp$$rp$$0$$r2, inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return, inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$0$anon0;

  inline$TokenHandler$toBase64$byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$r0 := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$r1 := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 150, -1, -1, -1} true;
    call inline$TokenHandler$toBase64$byte$lp$$rp$$0$$r2, inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception := fixed.javax.xml.bind.DatatypeConverter$printBase64Binary$byte$lp$$rp$(inline$TokenHandler$toBase64$byte$lp$$rp$$0$r1);
    assert {:sourceloc "TokenHandler.java", 150, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$r2;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$0$block28;

  inline$TokenHandler$toBase64$byte$lp$$rp$$0$block28:
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$0$Return;

  inline$TokenHandler$toBase64$byte$lp$$rp$$0$Return:
    $r6 := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$return;
    $exception := inline$TokenHandler$toBase64$byte$lp$$rp$$0$$exception;
    goto anon0$3;

  anon0$3:
    assert {:sourceloc "TokenHandler.java", 121, -1, -1, -1} true;
    call $fakelocal_1, $exception := fixed.java.lang.StringBuilder$append$java.lang.String(r4, $r6);
    assert {:sourceloc "TokenHandler.java", 122, -1, -1, -1} true;
    call $fakelocal_2, $exception := fixed.java.lang.StringBuilder$append$java.lang.String(r4, fixed.$StringConst3);
    assert {:sourceloc "TokenHandler.java", 123, -1, -1, -1} true;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$1$Entry;

  inline$TokenHandler$toBase64$byte$lp$$rp$$1$Entry:
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this := r0;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$$in_parameter__0 := r3;
    havoc inline$TokenHandler$toBase64$byte$lp$$rp$$1$r1, inline$TokenHandler$toBase64$byte$lp$$rp$$1$r0, inline$TokenHandler$toBase64$byte$lp$$rp$$1$$r2, inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return, inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$1$anon0;

  inline$TokenHandler$toBase64$byte$lp$$rp$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this, fixed.$type]
   <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this != fixed.$null;
    assume fixed.$heap[inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return, fixed.$type]
   <: fixed.java.lang.String;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$r0 := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$r1 := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 150, -1, -1, -1} true;
    call inline$TokenHandler$toBase64$byte$lp$$rp$$1$$r2, inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception := fixed.javax.xml.bind.DatatypeConverter$printBase64Binary$byte$lp$$rp$(inline$TokenHandler$toBase64$byte$lp$$rp$$1$r1);
    assert {:sourceloc "TokenHandler.java", 150, -1, -1, -1} true;
    inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$r2;
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$1$block28;

  inline$TokenHandler$toBase64$byte$lp$$rp$$1$block28:
    goto inline$TokenHandler$toBase64$byte$lp$$rp$$1$Return;

  inline$TokenHandler$toBase64$byte$lp$$rp$$1$Return:
    $r9 := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$return;
    $exception := inline$TokenHandler$toBase64$byte$lp$$rp$$1$$exception;
    goto anon0$4;

  anon0$4:
    assert {:sourceloc "TokenHandler.java", 123, -1, -1, -1} true;
    call $fakelocal_3, $exception := fixed.java.lang.StringBuilder$append$java.lang.String(r4, $r9);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    call $r11, $exception := fixed.java.lang.StringBuilder$toString$(r4);
    assert {:sourceloc "TokenHandler.java", 124, -1, -1, -1} true;
    $return := $r11;
    goto block22;

  block22:
    return;
}



implementation unsafe.TokenHandler$fromJSON$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $r2: ref;
  var r0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.com.jdriven.stateless.security.User;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    $r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    $return := $r2;
    goto block23;

  block23:
    return;
}



implementation unsafe.TokenHandler$toJSON$com.jdriven.stateless.security.User($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r8: ref;
  var $r4: ref;
  var $fakelocal_1: ref;
  var $r5: ref;
  var r9: ref;
  var r2: ref;
  var r0: ref;
  var r7: ref;
  var r1: ref;
  var $fakelocal_2: ref;
  var $fakelocal_0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type]
   <: fixed.com.jdriven.stateless.security.User;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    goto block24;

  block24:
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.com.fasterxml.jackson.databind.ObjectMapper);
    r7 := $fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    call $exception := fixed.com.fasterxml.jackson.databind.ObjectMapper$$la$init$ra$$(r7);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    call $r4, $exception := fixed.com.fasterxml.jackson.databind.ObjectMapper$writeValueAsBytes$java.lang.Object(r7, r1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} $exception == fixed.$null;
    goto block26;

  block26:
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    $return := $r4;
    goto block27;

  block27:
    return;

  anon13_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException);
    assert {:clone} true;
    goto block26;

  anon14_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException;
    assert {:clone} true;
    goto block25;

  block25:
    assert {:sourceloc "TokenHandler.java", 143, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r5 := $exception;
    assert {:sourceloc "TokenHandler.java", 144, -1, -1, -1} true;
    r2 := $r5;
    assert {:sourceloc "TokenHandler.java", 145, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.IllegalStateException);
    r8 := $fakelocal_1;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} !(fixed.$heap[r2, fixed.$type] <: fixed.java.lang.Throwable);
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := fixed.$null;
    $exception := $fakelocal_2;
    return;

  anon15_Then:
    assume {:partition} fixed.$heap[r2, fixed.$type] <: fixed.java.lang.Throwable;
    $exception := $exception;
    goto anon10;

  anon10:
    r9 := r2;
    assert {:sourceloc "TokenHandler.java", 145, -1, -1, -1} true;
    call $exception := fixed.java.lang.IllegalStateException$$la$init$ra$$java.lang.Throwable(r8, r9);
    assert {:sourceloc "TokenHandler.java", 145, -1, -1, -1} true;
    $exception := r8;
    goto block27;

  anon11_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException);
    assert {:clone} true;
    goto anon4;

  anon12_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type]
   <: fixed.com.fasterxml.jackson.core.JsonProcessingException;
    assert {:clone} true;
    r7 := fixed.$null;
    goto block25;
}



implementation unsafe.TokenHandler$toBase64$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r1: ref;
  var r0: ref;
  var $r2: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 150, -1, -1, -1} true;
    call $r2, $exception := fixed.javax.xml.bind.DatatypeConverter$printBase64Binary$byte$lp$$rp$(r1);
    assert {:sourceloc "TokenHandler.java", 150, -1, -1, -1} true;
    $return := $r2;
    goto block28;

  block28:
    return;
}



implementation unsafe.TokenHandler$fromBase64$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var r1: ref;
  var $r2: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.String;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    call $r2, $exception := fixed.javax.xml.bind.DatatypeConverter$parseBase64Binary$java.lang.String(r1);
    assert {:sourceloc "TokenHandler.java", 154, -1, -1, -1} true;
    $return := $r2;
    goto block29;

  block29:
    return;
}



implementation unsafe.TokenHandler$createHmac$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var $r2: ref;
  var r1: ref;
  var $r3: ref;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.TokenHandler;
    assume {:sourceloc "TokenHandler.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "TokenHandler.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    $r2 := fixed.$heap[r0, fixed.javax.crypto.Mac$TokenHandler$hmac262];
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $r2 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := fixed.$null;
    $exception := $fakelocal_0;
    return;

  anon8_Then:
    assume {:partition} $r2 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    call $r3, $exception := fixed.javax.crypto.Mac$doFinal$byte$lp$$rp$($r2, r1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon7;

  anon7:
    assert {:sourceloc "TokenHandler.java", 159, -1, -1, -1} true;
    $return := $r3;
    goto block30;

  block30:
    return;

  anon9_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalStateException);
    assert {:clone} true;
    goto anon7;

  anon10_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.IllegalStateException;
    $return := fixed.$null;
    return;
}



implementation {:inline 1} unsafe.TokenHandler$$la$clinit$ra$$() returns ($exception: ref)
{
  var $l1: int;
  var $r1: ref;
  var $r2: ref;
  var $l0: int;
  var $fakelocal_1: ref;
  var $fakelocal_2: ref;
  var $r0: ref;
  var $fakelocal_0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", 128, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.com.jdriven.stateless.security.User);
    $r0 := $fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 128, -1, -1, -1} true;
    call $exception := fixed.com.jdriven.stateless.security.User$$la$init$ra$$($r0);
    assert {:sourceloc "TokenHandler.java", 128, -1, -1, -1} true;
    fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := $r0;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    $r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.java.util.Date);
    $r1 := $fakelocal_1;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    call $exception := fixed.java.util.Date$$la$init$ra$$($r1);
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    call $l0, $exception := fixed.java.util.Date$getTime$($r1);
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    $l1 := $l0 + 100000;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} $r2 == fixed.$null;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.RuntimeException);
    $exception := $fakelocal_2;
    return;

  anon4_Then:
    assume {:partition} $r2 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    call $exception := fixed.com.jdriven.stateless.security.User$setExpires$long($r2, $l1);
    assert {:sourceloc "TokenHandler.java", 131, -1, -1, -1} true;
    goto block31;

  block31:
    return;
}



implementation unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := fixed.$null;
    return;
}



implementation unsafe.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18(in_$return: int, 
    in_$exception: ref, 
    in_$b2: int, 
    in_r0: ref, 
    in_$b3: int, 
    in_$fakelocal_3: ref, 
    in_i4: int, 
    in_r1: ref, 
    in_$fakelocal_2: ref, 
    in_i0: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$b2: int, 
    out_$b3: int, 
    out_$fakelocal_3: ref, 
    out_i4: int, 
    out_$fakelocal_2: ref)
{
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2: ref;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex: int;
  var inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$b2, out_$b3, out_$fakelocal_3, out_i4, out_$fakelocal_2 := in_$return, in_$exception, in_$b2, in_$b3, in_$fakelocal_3, in_i4, in_$fakelocal_2;
    goto block18;

  block18:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto anon36_Then, anon36_Else;

  anon36_Then:
    assume {:partition} out_i4 >= in_i0;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$b2, out_$b3, out_$fakelocal_3, out_i4, out_$fakelocal_2 := in_$return, in_$exception, in_$b2, in_$b3, in_$fakelocal_3, in_i4, in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  block20:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    out_i4 := out_i4 + 1;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto block20_dummy;

  anon39_Then:
    assume {:partition} out_$b3 == out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto block20;

  anon26:
    out_$b2 := fixed.$intArrHeap[in_r1][out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} out_$b3 != out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    out_$return, out_$exception, out_$b2, out_$b3, out_$fakelocal_3, out_i4, out_$fakelocal_2 := in_$return, in_$exception, in_$b2, in_$b3, in_$fakelocal_3, in_i4, in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon38_Then:
    assume {:partition} out_i4 < fixed.$arrSizeHeap[in_r1] && out_i4 >= 0;
    out_$exception := out_$exception;
    goto anon26;

  anon23:
    out_$b3 := fixed.$intArrHeap[in_r0][out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} !(out_i4 < fixed.$arrSizeHeap[in_r1] && out_i4 >= 0);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_3;
    out_$return, out_$exception, out_$b2, out_$b3, out_$fakelocal_3, out_i4, out_$fakelocal_2 := in_$return, in_$exception, in_$b2, in_$b3, in_$fakelocal_3, in_i4, in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon37_Then:
    assume {:partition} out_i4 < fixed.$arrSizeHeap[in_r0] && out_i4 >= 0;
    out_$exception := out_$exception;
    goto anon23;

  anon20:
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} !(out_i4 < fixed.$arrSizeHeap[in_r0] && out_i4 >= 0);
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_2;
    out_$return, out_$exception, out_$b2, out_$b3, out_$fakelocal_3, out_i4, out_$fakelocal_2 := in_$return, in_$exception, in_$b2, in_$b3, in_$fakelocal_3, in_i4, in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon36_Else:
    assume {:partition} in_i0 > out_i4;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "elseblock"} true;
    goto anon20;

  block20_dummy:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return := out_$return;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception := out_$exception;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2 := out_$b2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0 := in_r0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3 := out_$b3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4 := out_i4;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1 := in_r1;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0 := in_i0;
    havoc inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex := fixed.$objIndex;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap := fixed.$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$entry:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block18:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
   >= inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "thenblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20:
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
   + 1;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20_dummy;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3
   == inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon39_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3
   != inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} {:comment "elseblock"} true;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon26;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23:
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3 := fixed.$intArrHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0][inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4];
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon38_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r1]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Then:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon23;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20:
    assert {:sourceloc "TokenHandler.java", 111, -1, -1, -1} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Then, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Else;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon37_Else:
    assume {:partition} !(inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     < fixed.$arrSizeHeap[inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_r0]
   && inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4
     >= 0);
    call inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return := 0;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$return, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$exception, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b2, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$b3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_3, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i4, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_$fakelocal_2;
    fixed.$objIndex, fixed.$heap := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$objIndex, inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$$heap;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon36_Else:
    assume {:partition} inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$in_i0
   > inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4;
    assert {:sourceloc "TokenHandler.java", 110, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$anon20;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$block20_dummy:
    assume false;
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$exit:
    goto inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return;

  inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$Return:
    out_$return := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$return;
    out_$exception := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$exception;
    out_$b2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b2;
    out_$b3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$b3;
    out_$fakelocal_3 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_3;
    out_i4 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_i4;
    out_$fakelocal_2 := inline$TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_loop_block18$0$out_$fakelocal_2;
    goto block20_dummy$1;

  block20_dummy$1:
    return;

  exit:
    return;
}



type ref;

type javaType;

type Field _;

type $heap_type = <$GenericType__0>[ref,Field $GenericType__0]$GenericType__0;

type boolArrHeap_type = [ref][int]bool;

type refArrHeap_type = [ref][int]ref;

type realArrHeap_type = [ref][int]int;

type intArrHeap_type = [ref][int]int;

function _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: int, 
    arg_3: $heap_type, 
    arg_4: [ref]int, 
    arg_5: [ref]int, 
    arg_6: Field ref, 
    arg_7: int, 
    arg_8: Field int)
   : ref;

function _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: int, 
    arg_3: $heap_type, 
    arg_4: [ref]int, 
    arg_5: [ref]int, 
    arg_6: Field ref, 
    arg_7: int, 
    arg_8: Field int)
   : $heap_type;

function _uf_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: int, 
    arg_3: $heap_type, 
    arg_4: [ref]int, 
    arg_5: [ref]int, 
    arg_6: Field ref, 
    arg_7: int, 
    arg_8: Field int)
   : int;

function _uf_unsafe.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: int, 
    arg_3: $heap_type, 
    arg_4: [ref]int, 
    arg_5: [ref]int, 
    arg_6: Field ref, 
    arg_7: int, 
    arg_8: Field int)
   : ref;

function _uf_unsafe.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: int, 
    arg_3: $heap_type, 
    arg_4: [ref]int, 
    arg_5: [ref]int, 
    arg_6: Field ref, 
    arg_7: int, 
    arg_8: Field int)
   : $heap_type;

function _uf_unsafe.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: int, 
    arg_3: $heap_type, 
    arg_4: [ref]int, 
    arg_5: [ref]int, 
    arg_6: Field ref, 
    arg_7: int, 
    arg_8: Field int)
   : int;

var Output_of_unsafe.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_$exception: ref;

var Output_of_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_$exception: ref;

var Output_of_unsafe.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$heap: $heap_type;

var Output_of_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$heap: $heap_type;

var Output_of_unsafe.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$objIndex: int;

var Output_of_fixed.TokenHandler$$la$init$ra$$byte$lp$$rp$_boolean_fixed.$objIndex: int;

function _uf_fixed.java.lang.Object$$la$init$ra$$_$exception(arg_0: ref) : ref;

function _uf_unsafe.java.lang.Object$$la$init$ra$$_$exception(arg_0: ref) : ref;

function _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : ref;

function _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : ref;

function _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : int;

function _uf_fixed.TokenHandler$parseUserFromToken$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : $heap_type;

function _uf_unsafe.TokenHandler$parseUserFromToken$java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : ref;

function _uf_unsafe.TokenHandler$parseUserFromToken$java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : ref;

function _uf_unsafe.TokenHandler$parseUserFromToken$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : int;

function _uf_unsafe.TokenHandler$parseUserFromToken$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : $heap_type;

var Output_of_unsafe.TokenHandler$parseUserFromToken$java.lang.String_$return: ref;

var Output_of_fixed.TokenHandler$parseUserFromToken$java.lang.String_$return: ref;

var Output_of_unsafe.TokenHandler$parseUserFromToken$java.lang.String_$exception: ref;

var Output_of_fixed.TokenHandler$parseUserFromToken$java.lang.String_$exception: ref;

var Output_of_unsafe.TokenHandler$parseUserFromToken$java.lang.String_fixed.$objIndex: int;

var Output_of_fixed.TokenHandler$parseUserFromToken$java.lang.String_fixed.$objIndex: int;

var Output_of_unsafe.TokenHandler$parseUserFromToken$java.lang.String_fixed.$heap: $heap_type;

var Output_of_fixed.TokenHandler$parseUserFromToken$java.lang.String_fixed.$heap: $heap_type;

function _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : ref;

function _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : ref;

function _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : int;

function _uf_fixed.TokenHandler$parseUserFromToken_unsafe$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : $heap_type;

function _uf_unsafe.TokenHandler$parseUserFromToken_unsafe$java.lang.String_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : ref;

function _uf_unsafe.TokenHandler$parseUserFromToken_unsafe$java.lang.String_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : ref;

function _uf_unsafe.TokenHandler$parseUserFromToken_unsafe$java.lang.String_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : int;

function _uf_unsafe.TokenHandler$parseUserFromToken_unsafe$java.lang.String_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: refArrHeap_type, 
    arg_7: Field ref, 
    arg_8: intArrHeap_type, 
    arg_9: ref)
   : $heap_type;

function _uf_fixed.TokenHandler$fromBase64$java.lang.String_$return(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_fixed.TokenHandler$fromBase64$java.lang.String_$exception(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_unsafe.TokenHandler$fromBase64$java.lang.String_$return(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_unsafe.TokenHandler$fromBase64$java.lang.String_$exception(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int)
   : ref;

function _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int)
   : ref;

function _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int)
   : int;

function _uf_fixed.TokenHandler$createHmac$byte$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int)
   : $heap_type;

function _uf_unsafe.TokenHandler$createHmac$byte$lp$$rp$_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int)
   : ref;

function _uf_unsafe.TokenHandler$createHmac$byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int)
   : ref;

function _uf_unsafe.TokenHandler$createHmac$byte$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int)
   : int;

function _uf_unsafe.TokenHandler$createHmac$byte$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: Field ref, 
    arg_6: int)
   : $heap_type;

function _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type)
   : int;

function _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type)
   : ref;

function _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type)
   : int;

function _uf_fixed.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type)
   : $heap_type;

function _uf_unsafe.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type)
   : int;

function _uf_unsafe.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type)
   : ref;

function _uf_unsafe.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type)
   : int;

function _uf_unsafe.TokenHandler$unsafe_isEqual$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: intArrHeap_type)
   : $heap_type;

function _uf_fixed.TokenHandler$fromJSON$byte$lp$$rp$_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: ref)
   : ref;

function _uf_fixed.TokenHandler$fromJSON$byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: ref)
   : ref;

function _uf_unsafe.TokenHandler$fromJSON$byte$lp$$rp$_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: ref)
   : ref;

function _uf_unsafe.TokenHandler$fromJSON$byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: ref)
   : ref;

function _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: Field ref)
   : ref;

function _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: Field ref)
   : ref;

function _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: Field ref)
   : int;

function _uf_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: Field ref)
   : $heap_type;

function _uf_unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: Field ref)
   : ref;

function _uf_unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: Field ref)
   : ref;

function _uf_unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: Field ref)
   : int;

function _uf_unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: Field ref)
   : $heap_type;

var Output_of_unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$return: ref;

var Output_of_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$return: ref;

var Output_of_unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$exception: ref;

var Output_of_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_$exception: ref;

var Output_of_unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$objIndex: int;

var Output_of_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$objIndex: int;

var Output_of_unsafe.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$heap: $heap_type;

var Output_of_fixed.TokenHandler$createTokenForUser$com.jdriven.stateless.security.User_fixed.$heap: $heap_type;

function _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int)
   : ref;

function _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int)
   : ref;

function _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int)
   : int;

function _uf_fixed.TokenHandler$toJSON$com.jdriven.stateless.security.User_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int)
   : $heap_type;

function _uf_unsafe.TokenHandler$toJSON$com.jdriven.stateless.security.User_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int)
   : ref;

function _uf_unsafe.TokenHandler$toJSON$com.jdriven.stateless.security.User_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int)
   : ref;

function _uf_unsafe.TokenHandler$toJSON$com.jdriven.stateless.security.User_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int)
   : int;

function _uf_unsafe.TokenHandler$toJSON$com.jdriven.stateless.security.User_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int)
   : $heap_type;

function _uf_fixed.TokenHandler$toBase64$byte$lp$$rp$_$return(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_fixed.TokenHandler$toBase64$byte$lp$$rp$_$exception(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_unsafe.TokenHandler$toBase64$byte$lp$$rp$_$return(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_unsafe.TokenHandler$toBase64$byte$lp$$rp$_$exception(arg_0: ref, arg_1: ref, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_fixed.TokenHandler$$la$clinit$ra$$_$exception(arg_0: $heap_type, arg_1: [ref]int, arg_2: [ref]int, arg_3: int) : ref;

function _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.$objIndex(arg_0: $heap_type, arg_1: [ref]int, arg_2: [ref]int, arg_3: int) : int;

function _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.$heap(arg_0: $heap_type, arg_1: [ref]int, arg_2: [ref]int, arg_3: int) : $heap_type;

function _uf_fixed.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263(arg_0: $heap_type, arg_1: [ref]int, arg_2: [ref]int, arg_3: int) : ref;

function _uf_unsafe.TokenHandler$$la$clinit$ra$$_$exception(arg_0: $heap_type, arg_1: [ref]int, arg_2: [ref]int, arg_3: int) : ref;

function _uf_unsafe.TokenHandler$$la$clinit$ra$$_fixed.$objIndex(arg_0: $heap_type, arg_1: [ref]int, arg_2: [ref]int, arg_3: int) : int;

function _uf_unsafe.TokenHandler$$la$clinit$ra$$_fixed.$heap(arg_0: $heap_type, arg_1: [ref]int, arg_2: [ref]int, arg_3: int) : $heap_type;

function _uf_unsafe.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263(arg_0: $heap_type, arg_1: [ref]int, arg_2: [ref]int, arg_3: int) : ref;

var Output_of_unsafe.TokenHandler$$la$clinit$ra$$_$exception: ref;

var Output_of_fixed.TokenHandler$$la$clinit$ra$$_$exception: ref;

var Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.$objIndex: int;

var Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.$objIndex: int;

var Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.$heap: $heap_type;

var Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.$heap: $heap_type;

var Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263: ref;

var Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263: ref;

procedure PROC_.TokenHandler$$la$clinit$ra$$_EQ_unsafe__xx__fixed()
   returns (AA_TEMP180: bool, AA_TEMP181: bool, AA_TEMP182: bool, AA_TEMP183: bool);
  modifies fixed.$objIndex, fixed.$heap, fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263, Output_of_unsafe.TokenHandler$$la$clinit$ra$$_$exception, Output_of_fixed.TokenHandler$$la$clinit$ra$$_$exception, Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.$objIndex, Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.$objIndex, Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.$heap, Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.$heap, Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263, Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
  ensures AA_TEMP183 && AA_TEMP182 && AA_TEMP181 && AA_TEMP180;



implementation PROC_.TokenHandler$$la$clinit$ra$$_EQ_unsafe__xx__fixed()
   returns (AA_TEMP180: bool, AA_TEMP181: bool, AA_TEMP182: bool, AA_TEMP183: bool)
{
  var AA_TEMP170: ref;
  var AA_TEMP160: int;
  var AA_TEMP161: $heap_type;
  var AA_TEMP162: ref;
  var AA_TEMP150: int;
  var AA_TEMP151: $heap_type;
  var AA_TEMP152: ref;
  var $exception: ref;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$l1: int;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r1: ref;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r2: ref;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$l0: int;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_1: ref;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_2: ref;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r0: ref;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_0: ref;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception: ref;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$fixed.$objIndex: int;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$fixed.$heap: $heap_type;
  var inline$unsafe.TokenHandler$$la$clinit$ra$$$0$fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263: ref;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r2: ref;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_1: ref;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$l0: int;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r1: ref;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r0: ref;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_0: ref;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$l1: int;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_2: ref;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception: ref;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$fixed.$objIndex: int;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$fixed.$heap: $heap_type;
  var inline$fixed.TokenHandler$$la$clinit$ra$$$0$fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263: ref;

  AA_INSTR_EQ_BODY:
    AA_TEMP150 := fixed.$objIndex;
    AA_TEMP151 := fixed.$heap;
    AA_TEMP152 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    goto inline$unsafe.TokenHandler$$la$clinit$ra$$$0$Entry;

  inline$unsafe.TokenHandler$$la$clinit$ra$$$0$Entry:
    havoc inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$l1, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r1, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r2, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$l0, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_1, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_2, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r0, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_0, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception;
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$fixed.$objIndex := fixed.$objIndex;
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$fixed.$heap := fixed.$heap;
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    goto inline$unsafe.TokenHandler$$la$clinit$ra$$$0$anon0;

  inline$unsafe.TokenHandler$$la$clinit$ra$$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", 128, -1, -1, -1} true;
    call inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_0 := fixed.$new(fixed.com.jdriven.stateless.security.User);
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r0 := inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 128, -1, -1, -1} true;
    call inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.com.jdriven.stateless.security.User$$la$init$ra$$(inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r0);
    assert {:sourceloc "TokenHandler.java", 128, -1, -1, -1} true;
    fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r0;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    call inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_1 := fixed.$new(fixed.java.util.Date);
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r1 := inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_1;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    call inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.java.util.Date$$la$init$ra$$(inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r1);
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    call inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$l0, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.java.util.Date$getTime$(inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r1);
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$l1 := inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$l0 + 100000;
    assert {:sourceloc "TokenHandler.java", 130, -1, -1, -1} true;
    goto inline$unsafe.TokenHandler$$la$clinit$ra$$$0$anon4_Then, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$anon4_Else;

  inline$unsafe.TokenHandler$$la$clinit$ra$$$0$anon4_Else:
    assume {:partition} inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r2 == fixed.$null;
    call inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception := inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$fakelocal_2;
    goto inline$unsafe.TokenHandler$$la$clinit$ra$$$0$Return;

  inline$unsafe.TokenHandler$$la$clinit$ra$$$0$anon4_Then:
    assume {:partition} inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r2 != fixed.$null;
    inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception := inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception;
    goto inline$unsafe.TokenHandler$$la$clinit$ra$$$0$anon3;

  inline$unsafe.TokenHandler$$la$clinit$ra$$$0$anon3:
    call inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.com.jdriven.stateless.security.User$setExpires$long(inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$r2, inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$l1);
    assert {:sourceloc "TokenHandler.java", 131, -1, -1, -1} true;
    goto inline$unsafe.TokenHandler$$la$clinit$ra$$$0$block31;

  inline$unsafe.TokenHandler$$la$clinit$ra$$$0$block31:
    goto inline$unsafe.TokenHandler$$la$clinit$ra$$$0$Return;

  inline$unsafe.TokenHandler$$la$clinit$ra$$$0$Return:
    assume true;
    assume true;
    assume true;
    assume true;
    $exception := inline$unsafe.TokenHandler$$la$clinit$ra$$$0$$exception;
    goto AA_INSTR_EQ_BODY$1;

  AA_INSTR_EQ_BODY$1:
    AA_TEMP160 := fixed.$objIndex;
    AA_TEMP161 := fixed.$heap;
    AA_TEMP162 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    fixed.$objIndex := AA_TEMP150;
    fixed.$heap := AA_TEMP151;
    fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := AA_TEMP152;
    AA_TEMP170 := $exception;
    goto inline$fixed.TokenHandler$$la$clinit$ra$$$0$Entry;

  inline$fixed.TokenHandler$$la$clinit$ra$$$0$Entry:
    havoc inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r2, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_1, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$l0, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r1, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r0, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_0, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$l1, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_2, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception;
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$fixed.$objIndex := fixed.$objIndex;
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$fixed.$heap := fixed.$heap;
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    goto inline$fixed.TokenHandler$$la$clinit$ra$$$0$anon0;

  inline$fixed.TokenHandler$$la$clinit$ra$$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.$null;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    call inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_0 := fixed.$new(fixed.com.jdriven.stateless.security.User);
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r0 := inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_0;
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    call inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.com.jdriven.stateless.security.User$$la$init$ra$$(inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r0);
    assert {:sourceloc "TokenHandler.java", 138, -1, -1, -1} true;
    fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r0;
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r2 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    call inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_1 := fixed.$new(fixed.java.util.Date);
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r1 := inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_1;
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    call inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.java.util.Date$$la$init$ra$$(inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r1);
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    call inline$fixed.TokenHandler$$la$clinit$ra$$$0$$l0, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.java.util.Date$getTime$(inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r1);
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$$l1 := inline$fixed.TokenHandler$$la$clinit$ra$$$0$$l0 + 100000;
    assert {:sourceloc "TokenHandler.java", 140, -1, -1, -1} true;
    goto inline$fixed.TokenHandler$$la$clinit$ra$$$0$anon4_Then, inline$fixed.TokenHandler$$la$clinit$ra$$$0$anon4_Else;

  inline$fixed.TokenHandler$$la$clinit$ra$$$0$anon4_Else:
    assume {:partition} inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r2 == fixed.$null;
    call inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_2 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception := inline$fixed.TokenHandler$$la$clinit$ra$$$0$$fakelocal_2;
    goto inline$fixed.TokenHandler$$la$clinit$ra$$$0$Return;

  inline$fixed.TokenHandler$$la$clinit$ra$$$0$anon4_Then:
    assume {:partition} inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r2 != fixed.$null;
    inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception := inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception;
    goto inline$fixed.TokenHandler$$la$clinit$ra$$$0$anon3;

  inline$fixed.TokenHandler$$la$clinit$ra$$$0$anon3:
    call inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception := fixed.com.jdriven.stateless.security.User$setExpires$long(inline$fixed.TokenHandler$$la$clinit$ra$$$0$$r2, inline$fixed.TokenHandler$$la$clinit$ra$$$0$$l1);
    assert {:sourceloc "TokenHandler.java", 141, -1, -1, -1} true;
    goto inline$fixed.TokenHandler$$la$clinit$ra$$$0$block30;

  inline$fixed.TokenHandler$$la$clinit$ra$$$0$block30:
    goto inline$fixed.TokenHandler$$la$clinit$ra$$$0$Return;

  inline$fixed.TokenHandler$$la$clinit$ra$$$0$Return:
    assume true;
    assume true;
    assume true;
    assume true;
    $exception := inline$fixed.TokenHandler$$la$clinit$ra$$$0$$exception;
    goto AA_INSTR_EQ_BODY$2;

  AA_INSTR_EQ_BODY$2:
    Output_of_unsafe.TokenHandler$$la$clinit$ra$$_$exception := AA_TEMP170;
    Output_of_fixed.TokenHandler$$la$clinit$ra$$_$exception := $exception;
    Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.$objIndex := AA_TEMP160;
    Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.$objIndex := fixed.$objIndex;
    Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.$heap := AA_TEMP161;
    Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.$heap := fixed.$heap;
    Output_of_unsafe.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := AA_TEMP162;
    Output_of_fixed.TokenHandler$$la$clinit$ra$$_fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263 := fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    havoc AA_TEMP180, AA_TEMP181, AA_TEMP182, AA_TEMP183;
    AA_TEMP180, AA_TEMP181, AA_TEMP182, AA_TEMP183 := AA_TEMP180 || AA_TEMP170 == $exception, AA_TEMP181 || fixed.$objIndex == fixed.$objIndex, AA_TEMP182
   || (forall<_ty> r: ref, f: Field _ty :: 
    fixed.$heap[r, f] == AA_TEMP161[r, f] || !old(fixed.$heap[r, fixed.$alloc])), AA_TEMP183
   || AA_TEMP162
     == fixed.com.jdriven.stateless.security.User$TokenHandler$VALID_USER263;
    return;
}


