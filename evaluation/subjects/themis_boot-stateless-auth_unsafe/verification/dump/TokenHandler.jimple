public final class TokenHandler extends java.lang.Object
{
    private static final java.lang.String HMAC_ALGO;
    static final java.lang.String SEPARATOR;
    private static final java.lang.String SEPARATOR_SPLITTER;
    public final javax.crypto.Mac hmac;
    private final boolean safeMode;
    public static final com.jdriven.stateless.security.User VALID_USER;

    public void <init>(byte[], boolean)
    {
        TokenHandler r0;
        byte[] r1;
        boolean z0;
        java.security.GeneralSecurityException r2, $r6;
        javax.crypto.Mac $r3, $r5;
        javax.crypto.spec.SecretKeySpec $r4;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: TokenHandler;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA256");

        r0.<TokenHandler: javax.crypto.Mac hmac> = $r3;

        $r5 = r0.<TokenHandler: javax.crypto.Mac hmac>;

        $r4 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, "HmacSHA256");

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to initialize HMAC: ");

        $r10 = virtualinvoke r2.<java.security.GeneralSecurityException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r2);

        throw $r7;

     label4:
        r0.<TokenHandler: boolean safeMode> = z0;

        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
    }

    public com.jdriven.stateless.security.User parseUserFromToken(java.lang.String)
    {
        TokenHandler r0;
        java.lang.String r1;
        com.jdriven.stateless.security.User $r2;

        r0 := @this: TokenHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<TokenHandler: com.jdriven.stateless.security.User parseUserFromToken_unsafe(java.lang.String)>(r1);

        return $r2;
    }

    public com.jdriven.stateless.security.User parseUserFromToken_unsafe(java.lang.String)
    {
        TokenHandler r0;
        java.lang.String r1, $r5, $r6, $r7, $r8;
        java.lang.String[] r2;
        byte[] r3, $r9, r12;
        boolean z0;
        com.jdriven.stateless.security.User r4;
        int $i0, $i1, $i2;
        java.util.Date $r10;
        long $l3, $l4;
        byte $b5;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: TokenHandler;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof r2;

        if $i0 != 2 goto label6;

        $r5 = r2[0];

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 <= 0 goto label6;

        $r6 = r2[1];

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i2 <= 0 goto label6;

     label1:
        $r7 = r2[0];

        r12 = specialinvoke r0.<TokenHandler: byte[] fromBase64(java.lang.String)>($r7);

        $r8 = r2[1];

        r3 = specialinvoke r0.<TokenHandler: byte[] fromBase64(java.lang.String)>($r8);

        $r9 = specialinvoke r0.<TokenHandler: byte[] createHmac(byte[])>(r12);

        z0 = staticinvoke <TokenHandler: boolean unsafe_isEqual(byte[],byte[])>($r9, r3);

        if z0 == 0 goto label4;

        r4 = specialinvoke r0.<TokenHandler: com.jdriven.stateless.security.User fromJSON(byte[])>(r12);

        $r10 = new java.util.Date;

        specialinvoke $r10.<java.util.Date: void <init>()>();

        $l3 = virtualinvoke $r10.<java.util.Date: long getTime()>();

        $l4 = virtualinvoke r4.<com.jdriven.stateless.security.User: long getExpires()>();

        $b5 = $l3 cmp $l4;

        if $b5 >= 0 goto label3;

     label2:
        return r4;

     label3:
        return r4;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

     label6:
        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
    }

    public static boolean unsafe_isEqual(byte[], byte[])
    {
        byte[] r0, r1;
        int i0, $i1, i6;
        boolean z0, $z1, z2, z3;
        java.lang.Boolean $r2, $r3, $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r15;
        java.lang.Object $r4, $r8, $r10, $r14;
        byte $b2, $b3;
        long $l4, $l5;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        z2 = 0;

        z3 = 0;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        i0 = lengthof r0;

        $i1 = lengthof r1;

        if $i1 == i0 goto label4;

        return 0;

     label4:
        i6 = 0;

     label5:
        if i6 >= i0 goto label6;

        $b2 = r0[i6];

        $l5 = (long) $b2;

        $b3 = r1[i6];

        $l4 = (long) $b3;

        z0 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: boolean neq(long,long)>($l5, $l4);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z3, $r6, $r7);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r10 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r8, $r9);

        $r11 = (java.lang.Boolean) $r10;

        z2 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r14 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r12, $r13);

        $r15 = (java.lang.Boolean) $r14;

        z3 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        i6 = i6 + 1;

        goto label5;

     label6:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r4 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z3, $r2, $r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public java.lang.String createTokenForUser(com.jdriven.stateless.security.User)
    {
        TokenHandler r0;
        com.jdriven.stateless.security.User r1;
        byte[] r2, r3;
        java.lang.StringBuilder r4, $r5;
        java.lang.String $r6, $r9, $r11;

        r0 := @this: TokenHandler;

        r1 := @parameter0: com.jdriven.stateless.security.User;

        r2 = specialinvoke r0.<TokenHandler: byte[] toJSON(com.jdriven.stateless.security.User)>(r1);

        r3 = specialinvoke r0.<TokenHandler: byte[] createHmac(byte[])>(r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(170);

        r4 = $r5;

        $r6 = specialinvoke r0.<TokenHandler: java.lang.String toBase64(byte[])>(r2);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = specialinvoke r0.<TokenHandler: java.lang.String toBase64(byte[])>(r3);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private com.jdriven.stateless.security.User fromJSON(byte[])
    {
        TokenHandler r0;
        byte[] r1;
        com.jdriven.stateless.security.User $r2;

        r0 := @this: TokenHandler;

        r1 := @parameter0: byte[];

        $r2 = <TokenHandler: com.jdriven.stateless.security.User VALID_USER>;

        return $r2;
    }

    private byte[] toJSON(com.jdriven.stateless.security.User)
    {
        TokenHandler r0;
        com.jdriven.stateless.security.User r1;
        com.fasterxml.jackson.core.JsonProcessingException r2, $r5;
        byte[] $r4;
        com.fasterxml.jackson.databind.ObjectMapper r7;
        java.lang.IllegalStateException r8;
        java.lang.Throwable r9;

        r0 := @this: TokenHandler;

        r1 := @parameter0: com.jdriven.stateless.security.User;

     label1:
        r7 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke r7.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        $r4 = virtualinvoke r7.<com.fasterxml.jackson.databind.ObjectMapper: byte[] writeValueAsBytes(java.lang.Object)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        r8 = new java.lang.IllegalStateException;

        r9 = (java.lang.Throwable) r2;

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r9);

        throw r8;

        catch com.fasterxml.jackson.core.JsonProcessingException from label1 to label2 with label3;
    }

    private java.lang.String toBase64(byte[])
    {
        TokenHandler r0;
        byte[] r1;
        java.lang.String $r2;

        r0 := @this: TokenHandler;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <javax.xml.bind.DatatypeConverter: java.lang.String printBase64Binary(byte[])>(r1);

        return $r2;
    }

    private byte[] fromBase64(java.lang.String)
    {
        TokenHandler r0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @this: TokenHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <javax.xml.bind.DatatypeConverter: byte[] parseBase64Binary(java.lang.String)>(r1);

        return $r2;
    }

    private synchronized byte[] createHmac(byte[])
    {
        TokenHandler r0;
        byte[] r1, $r3;
        javax.crypto.Mac $r2;

        r0 := @this: TokenHandler;

        r1 := @parameter0: byte[];

        $r2 = r0.<TokenHandler: javax.crypto.Mac hmac>;

        $r3 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        com.jdriven.stateless.security.User $r0, $r2;
        java.util.Date $r1;
        long $l0, $l1;

        <TokenHandler: java.lang.String SEPARATOR_SPLITTER> = "\\.";

        <TokenHandler: java.lang.String SEPARATOR> = ".";

        <TokenHandler: java.lang.String HMAC_ALGO> = "HmacSHA256";

        $r0 = new com.jdriven.stateless.security.User;

        specialinvoke $r0.<com.jdriven.stateless.security.User: void <init>()>();

        <TokenHandler: com.jdriven.stateless.security.User VALID_USER> = $r0;

        $r2 = <TokenHandler: com.jdriven.stateless.security.User VALID_USER>;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $l1 = $l0 + 100000L;

        virtualinvoke $r2.<com.jdriven.stateless.security.User: void setExpires(long)>($l1);

        return;
    }
}
