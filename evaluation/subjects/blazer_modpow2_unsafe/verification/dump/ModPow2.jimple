public class ModPow2 extends java.lang.Object
{

    public void <init>()
    {
        ModPow2 r0;

        r0 := @this: ModPow2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.math.BigInteger modPow2_unsafe(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, int)
    {
        java.math.BigInteger r0, r1, r2, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, r15, r16, r17, r18;
        int i0, $i1, $i2, i3;
        boolean z0, $z1;
        java.lang.Object $r5, $r8, $r11, $r14;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.BigInteger;

        i0 := @parameter3: int;

        r15 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        r16 = r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $i1 = i0 - i3;

        $i2 = $i1 - 1;

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>($i2);

        z0 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: boolean not(boolean)>($z1);

        $r3 = staticinvoke <ModPow2: java.math.BigInteger fastMultiply_inline(java.math.BigInteger,java.math.BigInteger)>(r15, r16);

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $r5 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r4, r16);

        r17 = (java.math.BigInteger) $r5;

        $r6 = virtualinvoke r15.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r15);

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $r8 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r7, r15);

        r18 = (java.math.BigInteger) $r8;

        $r9 = staticinvoke <ModPow2: java.math.BigInteger fastMultiply_inline(java.math.BigInteger,java.math.BigInteger)>(r18, r17);

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $r11 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, r18, $r10);

        r15 = (java.math.BigInteger) $r11;

        $r12 = virtualinvoke r17.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r17);

        $r13 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $r14 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, r17, $r13);

        r16 = (java.math.BigInteger) $r14;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r15;
    }

    public static java.math.BigInteger fastMultiply_inline(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, r3, r4, r5, r6, r7, $r8, $r15, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r34, $r35, r36, r37, r38, r39, r40;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        boolean z0, z1, $z2, z3, z4;
        java.lang.Object $r9, $r10, $r13, $r16, $r17, $r18, $r21, $r32, $r33;
        java.lang.Boolean $r11, $r12, $r14, $r19, $r20, $r22;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $r8 = <java.math.BigInteger: java.math.BigInteger ONE>;

        z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        $r9 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(0, null, r1);

        $r10 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r9, null);

        r36 = (java.math.BigInteger) $r10;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r13 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r11, $r12);

        $r14 = (java.lang.Boolean) $r13;

        z3 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        $r15 = <java.math.BigInteger: java.math.BigInteger ONE>;

        z1 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r15);

        $r16 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z3, r36, r0);

        $r17 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z3, r36, $r16);

        $r18 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z1, $r17, r36);

        r37 = (java.math.BigInteger) $r18;

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r21 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z1, $r19, $r20);

        $r22 = (java.lang.Boolean) $r21;

        z4 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        r38 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i8 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        if i8 > 800 goto label1;

        r39 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        goto label6;

     label1:
        $i2 = i0 - i1;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i3 < 32 goto label5;

        r39 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i9 = 0;

     label2:
        $i7 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if i9 >= $i7 goto label4;

        $z2 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i9);

        if $z2 == 0 goto label3;

        $r35 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i9);

        r39 = virtualinvoke r39.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r35);

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $i5 = i8 / 2;

        $i4 = i8 % 2;

        i10 = $i5 + $i4;

        r40 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i10);

        $r23 = virtualinvoke r40.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r23);

        r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i10);

        $r24 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r24);

        r5 = staticinvoke <ModPow2: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r2, r4);

        r6 = staticinvoke <ModPow2: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r40, r3);

        $r25 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r40);

        $r26 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r3);

        r7 = staticinvoke <ModPow2: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>($r25, $r26);

        $r27 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r5);

        $r28 = virtualinvoke $r27.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r6);

        $r29 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        $r30 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r29);

        $i6 = 2 * i10;

        $r31 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i6);

        r39 = virtualinvoke $r30.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r31);

     label6:
        $r32 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z4, r37, r39);

        $r33 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z4, r37, $r32);

        $r34 = (java.math.BigInteger) $r33;

        return $r34;
    }

    public static java.math.BigInteger fastMultiply_1(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, r3, r4, r5, r6, r7, r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, r20, r21;
        int i0, i1, $i4, $i5, $i6, $i7, $i8, i9, i10;
        short s2;
        byte b3;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $r9 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r10 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        r20 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i9 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        s2 = 800;

        b3 = 32;

        if i9 > s2 goto label3;

        r21 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        goto label5;

     label3:
        $i4 = i0 - i1;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        if $i5 < b3 goto label4;

        r21 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        goto label5;

     label4:
        $i7 = i9 / 2;

        $i6 = i9 % 2;

        i10 = $i7 + $i6;

        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i10);

        $r11 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i10);

        $r12 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        r5 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r12);

        r6 = staticinvoke <ModPow2: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r3, r5);

        r7 = staticinvoke <ModPow2: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r2, r4);

        $r13 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r2);

        $r14 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r4);

        r8 = staticinvoke <ModPow2: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>($r13, $r14);

        $r15 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r6);

        $r16 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7);

        $r17 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        $r18 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r17);

        $i8 = 2 * i10;

        $r19 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i8);

        r21 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r19);

     label5:
        return r21;
    }

    public static java.math.BigInteger standardMultiply(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, r3;
        int $i0, i1;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if i1 >= $i0 goto label3;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i1);

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i1);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }
}
