(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.java.math.BigInteger () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.java.lang.ArithmeticException () T@U)
(declare-fun fixed.java.lang.reflect.AnnotatedElement () T@U)
(declare-fun fixed.java.lang.reflect.GenericDeclaration () T@U)
(declare-fun fixed.java.lang.reflect.Type () T@U)
(declare-fun fixed.java.lang.Class () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun fixed.ModPow2 () T@U)
(declare-fun fixed.java.lang.Number () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.lang.Boolean () T@U)
(declare-fun fixed.java.lang.Math () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 () T@U)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 () T@U)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 () T@U)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 () T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap@19 () T@U)
(declare-fun fixed.$heap@9 () T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun $in_parameter__1 () T@U)
(declare-fun call3formal@$obj@0 () T@U)
(declare-fun fixed.$heap@10 () T@U)
(declare-fun fixed.$heap@11 () T@U)
(declare-fun $in_parameter__0 () T@U)
(declare-fun call3formal@$obj@0@@0 () T@U)
(declare-fun fixed.$heap@12 () T@U)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 () T@U)
(declare-fun call3formal@$obj@0@@1 () T@U)
(declare-fun fixed.$heap@14 () T@U)
(declare-fun fixed.$heap@15 () T@U)
(declare-fun call3formal@$obj@0@@2 () T@U)
(declare-fun call3formal@$obj@0@@3 () T@U)
(declare-fun fixed.$heap@16 () T@U)
(declare-fun fixed.$heap@17 () T@U)
(declare-fun fixed.$heap@18 () T@U)
(declare-fun call3formal@$obj@0@@4 () T@U)
(declare-fun fixed.long$java.math.BigInteger$value0 () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$return@2 () T@U)
(declare-fun fixed.$heap@13 () T@U)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$return@2 () T@U)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@0 () T@U)
(declare-fun call3formal@$obj@0@@5 () T@U)
(declare-fun fixed.$heap@0 () T@U)
(declare-fun fixed.$heap@1 () T@U)
(declare-fun call3formal@$obj@0@@6 () T@U)
(declare-fun fixed.$heap@2 () T@U)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 () T@U)
(declare-fun call3formal@$obj@0@@7 () T@U)
(declare-fun fixed.$heap@4 () T@U)
(declare-fun fixed.$heap@5 () T@U)
(declare-fun call3formal@$obj@0@@8 () T@U)
(declare-fun call3formal@$obj@0@@9 () T@U)
(declare-fun fixed.$heap@6 () T@U)
(declare-fun fixed.$heap@7 () T@U)
(declare-fun fixed.$heap@8 () T@U)
(declare-fun call3formal@$obj@0@@10 () T@U)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$return@2 () T@U)
(declare-fun fixed.$heap@3 () T@U)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$return@2 () T@U)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@0 () T@U)
(declare-fun %lbl%+4658567 () Bool)
(declare-fun %lbl%+4658566 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b5@4 () Int)
(declare-fun %lbl%+4658625 () Bool)
(declare-fun %lbl%+4658624 () Bool)
(declare-fun %lbl%+4658623 () Bool)
(declare-fun %lbl%+4658622 () Bool)
(declare-fun %lbl%+4658621 () Bool)
(declare-fun %lbl%+4658620 () Bool)
(declare-fun %lbl%+4658619 () Bool)
(declare-fun %lbl%+4658618 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2@3 () Int)
(declare-fun %lbl%+4658617 () Bool)
(declare-fun %lbl%+4658616 () Bool)
(declare-fun %lbl%+4658615 () Bool)
(declare-fun %lbl%+4658614 () Bool)
(declare-fun %lbl%+4658613 () Bool)
(declare-fun %lbl%+4658612 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0@3 () Int)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1@3 () Int)
(declare-fun %lbl%+4658610 () Bool)
(declare-fun %lbl%+4658611 () Bool)
(declare-fun fixed.$objIndex@6 () Int)
(declare-fun fixed.$objIndex@5 () Int)
(declare-fun %lbl%+4658609 () Bool)
(declare-fun fixed.$objIndex@3 () Int)
(declare-fun %lbl%+4658608 () Bool)
(declare-fun %lbl%+4658607 () Bool)
(declare-fun %lbl%+4658605 () Bool)
(declare-fun %lbl%+4658585 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 () Int)
(declare-fun %lbl%+4658650 () Bool)
(declare-fun %lbl%+4658649 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b5@4 () Int)
(declare-fun %lbl%+4658708 () Bool)
(declare-fun %lbl%+4658707 () Bool)
(declare-fun %lbl%+4658706 () Bool)
(declare-fun %lbl%+4658705 () Bool)
(declare-fun %lbl%+4658704 () Bool)
(declare-fun %lbl%+4658703 () Bool)
(declare-fun %lbl%+4658702 () Bool)
(declare-fun %lbl%+4658701 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2@3 () Int)
(declare-fun %lbl%+4658700 () Bool)
(declare-fun %lbl%+4658699 () Bool)
(declare-fun %lbl%+4658698 () Bool)
(declare-fun %lbl%+4658697 () Bool)
(declare-fun %lbl%+4658696 () Bool)
(declare-fun %lbl%+4658695 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0@3 () Int)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1@3 () Int)
(declare-fun %lbl%+4658693 () Bool)
(declare-fun %lbl%+4658694 () Bool)
(declare-fun fixed.$objIndex@13 () Int)
(declare-fun fixed.$objIndex@12 () Int)
(declare-fun %lbl%+4658692 () Bool)
(declare-fun fixed.$objIndex@10 () Int)
(declare-fun %lbl%+4658691 () Bool)
(declare-fun %lbl%+4658690 () Bool)
(declare-fun %lbl%+4658688 () Bool)
(declare-fun %lbl%+4658668 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 () Int)
(declare-fun %lbl%+4715402 () Bool)
(declare-fun %lbl%@4721477 () Bool)
(declare-fun AA_TEMP183@2 () Bool)
(declare-fun AA_TEMP182@2 () Bool)
(declare-fun AA_TEMP181@2 () Bool)
(declare-fun AA_TEMP180@2 () Bool)
(declare-fun %lbl%+4658712 () Bool)
(declare-fun AA_TEMP180@1 () Bool)
(declare-fun AA_TEMP180@0 () Bool)
(declare-fun AA_TEMP181@1 () Bool)
(declare-fun AA_TEMP181@0 () Bool)
(declare-fun AA_TEMP182@1 () Bool)
(declare-fun AA_TEMP182@0 () Bool)
(declare-fun fixed.$objIndex@14 () Int)
(declare-fun AA_TEMP183@1 () Bool)
(declare-fun AA_TEMP183@0 () Bool)
(declare-fun %lbl%+4658711 () Bool)
(declare-fun %lbl%+4658710 () Bool)
(declare-fun fixed.$objIndex@7 () Int)
(declare-fun %lbl%+4658709 () Bool)
(declare-fun %lbl%+4658655 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1 () Int)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3 () Int)
(declare-fun %lbl%+4658689 () Bool)
(declare-fun fixed.$objIndex@11 () Int)
(declare-fun %lbl%+4658687 () Bool)
(declare-fun %lbl%+4658686 () Bool)
(declare-fun %lbl%+4658685 () Bool)
(declare-fun %lbl%+4658684 () Bool)
(declare-fun %lbl%+4658683 () Bool)
(declare-fun %lbl%+4658682 () Bool)
(declare-fun %lbl%+4658681 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l2@3 () Int)
(declare-fun %lbl%+4658680 () Bool)
(declare-fun %lbl%+4658679 () Bool)
(declare-fun %lbl%+4658678 () Bool)
(declare-fun %lbl%+4658677 () Bool)
(declare-fun %lbl%+4658676 () Bool)
(declare-fun %lbl%+4658675 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l1@3 () Int)
(declare-fun fixed.$shlInt (Int Int) Int)
(declare-fun %lbl%+4658674 () Bool)
(declare-fun %lbl%+4658673 () Bool)
(declare-fun %lbl%+4658671 () Bool)
(declare-fun %lbl%+4658672 () Bool)
(declare-fun fixed.$objIndex@9 () Int)
(declare-fun %lbl%+4658670 () Bool)
(declare-fun %lbl%+4658669 () Bool)
(declare-fun %lbl%+4658667 () Bool)
(declare-fun %lbl%+4658666 () Bool)
(declare-fun %lbl%+4658665 () Bool)
(declare-fun %lbl%+4658664 () Bool)
(declare-fun %lbl%+4658663 () Bool)
(declare-fun %lbl%+4658660 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$b5@3 () Int)
(declare-fun %lbl%+4658662 () Bool)
(declare-fun %lbl%+4658661 () Bool)
(declare-fun %lbl%+4658659 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l3@3 () Int)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$i1@3 () Int)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l4@3 () Int)
(declare-fun fixed.$bitAnd (Int Int) Int)
(declare-fun %lbl%+4658658 () Bool)
(declare-fun %lbl%+4658657 () Bool)
(declare-fun %lbl%+4658656 () Bool)
(declare-fun %lbl%+4658654 () Bool)
(declare-fun %lbl%+4658653 () Bool)
(declare-fun %lbl%+4658652 () Bool)
(declare-fun %lbl%+4658651 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$i8@3 () Int)
(declare-fun %lbl%+4658648 () Bool)
(declare-fun %lbl%+4658647 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$l7@3 () Int)
(declare-fun %lbl%+4658646 () Bool)
(declare-fun %lbl%+4658645 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l4@3 () Int)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l6@4 () Int)
(declare-fun %lbl%+4658642 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b3@3 () Int)
(declare-fun %lbl%+4658644 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l6@3 () Int)
(declare-fun %lbl%+4658643 () Bool)
(declare-fun %lbl%+4658641 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l2@3 () Int)
(declare-fun %lbl%+4658638 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b1@3 () Int)
(declare-fun %lbl%+4658640 () Bool)
(declare-fun %lbl%+4658639 () Bool)
(declare-fun %lbl%+4658637 () Bool)
(declare-fun inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l0@3 () Int)
(declare-fun %lbl%+4658636 () Bool)
(declare-fun %lbl%+4658635 () Bool)
(declare-fun %lbl%+4658633 () Bool)
(declare-fun %lbl%+4658634 () Bool)
(declare-fun fixed.$objIndex@8 () Int)
(declare-fun %lbl%+4658632 () Bool)
(declare-fun %lbl%+4658631 () Bool)
(declare-fun %lbl%+4658630 () Bool)
(declare-fun %lbl%+4658629 () Bool)
(declare-fun %lbl%+4658628 () Bool)
(declare-fun %lbl%+4658627 () Bool)
(declare-fun %lbl%+4658626 () Bool)
(declare-fun %lbl%+4658572 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1 () Int)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3 () Int)
(declare-fun %lbl%+4658606 () Bool)
(declare-fun fixed.$objIndex@4 () Int)
(declare-fun %lbl%+4658604 () Bool)
(declare-fun %lbl%+4658603 () Bool)
(declare-fun %lbl%+4658602 () Bool)
(declare-fun %lbl%+4658601 () Bool)
(declare-fun %lbl%+4658600 () Bool)
(declare-fun %lbl%+4658599 () Bool)
(declare-fun %lbl%+4658598 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l2@3 () Int)
(declare-fun %lbl%+4658597 () Bool)
(declare-fun %lbl%+4658596 () Bool)
(declare-fun %lbl%+4658595 () Bool)
(declare-fun %lbl%+4658594 () Bool)
(declare-fun %lbl%+4658593 () Bool)
(declare-fun %lbl%+4658592 () Bool)
(declare-fun fixed.$objIndex@0 () Int)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l1@3 () Int)
(declare-fun %lbl%+4658591 () Bool)
(declare-fun %lbl%+4658590 () Bool)
(declare-fun %lbl%+4658588 () Bool)
(declare-fun %lbl%+4658589 () Bool)
(declare-fun fixed.$objIndex@2 () Int)
(declare-fun %lbl%+4658587 () Bool)
(declare-fun %lbl%+4658586 () Bool)
(declare-fun %lbl%+4658584 () Bool)
(declare-fun %lbl%+4658583 () Bool)
(declare-fun %lbl%+4658582 () Bool)
(declare-fun %lbl%+4658581 () Bool)
(declare-fun %lbl%+4658580 () Bool)
(declare-fun %lbl%+4658577 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$b5@3 () Int)
(declare-fun %lbl%+4658579 () Bool)
(declare-fun %lbl%+4658578 () Bool)
(declare-fun %lbl%+4658576 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l3@3 () Int)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$i1@3 () Int)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l4@3 () Int)
(declare-fun %lbl%+4658575 () Bool)
(declare-fun %lbl%+4658574 () Bool)
(declare-fun %lbl%+4658573 () Bool)
(declare-fun %lbl%+4658571 () Bool)
(declare-fun %lbl%+4658570 () Bool)
(declare-fun %lbl%+4658569 () Bool)
(declare-fun %lbl%+4658568 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$i8@3 () Int)
(declare-fun %lbl%+4658565 () Bool)
(declare-fun %lbl%+4658564 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$l7@3 () Int)
(declare-fun %lbl%+4658563 () Bool)
(declare-fun %lbl%+4658562 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l4@3 () Int)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l6@4 () Int)
(declare-fun %lbl%+4658559 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b3@3 () Int)
(declare-fun %lbl%+4658561 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l6@3 () Int)
(declare-fun %lbl%+4658560 () Bool)
(declare-fun %lbl%+4658558 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l2@3 () Int)
(declare-fun %lbl%+4658555 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b1@3 () Int)
(declare-fun %lbl%+4658557 () Bool)
(declare-fun %lbl%+4658556 () Bool)
(declare-fun %lbl%+4658554 () Bool)
(declare-fun inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l0@3 () Int)
(declare-fun %lbl%+4658553 () Bool)
(declare-fun %lbl%+4658552 () Bool)
(declare-fun %lbl%+4658550 () Bool)
(declare-fun %lbl%+4658551 () Bool)
(declare-fun fixed.$objIndex@1 () Int)
(declare-fun %lbl%+4658549 () Bool)
(declare-fun %lbl%+4658548 () Bool)
(declare-fun %lbl%+4658547 () Bool)
(declare-fun %lbl%+4658546 () Bool)
(declare-fun %lbl%+4715076 () Bool)
(declare-fun %lbl%+4715415 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.java.math.BigInteger) javaTypeType))
(assert (not (= fixed.java.math.BigInteger fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.math.BigInteger fixed.java.lang.Object))
(assert (forall ((w@@0 T@U) ) (!  (=> (= (type w@@0) javaTypeType) (=> (and (UOrdering2 fixed.java.math.BigInteger w@@0) (UOrdering2 w@@0 fixed.java.lang.Object)) (or (= fixed.java.math.BigInteger w@@0) (= fixed.java.lang.Object w@@0))))
 :pattern ( (UOrdering2 fixed.java.math.BigInteger w@@0) (UOrdering2 w@@0 fixed.java.lang.Object))
)))
(assert (forall ((w@@1 T@U) ) (!  (=> (and (= (type w@@1) javaTypeType) (UOrdering2 fixed.java.math.BigInteger w@@1)) (or (= fixed.java.math.BigInteger w@@1) (UOrdering2 fixed.java.lang.Object w@@1)))
 :pattern ( (UOrdering2 fixed.java.math.BigInteger w@@1))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (and (= (type w@@2) javaTypeType) (UOrdering2 w@@2 fixed.java.math.BigInteger)) (= (oneStep fixed.java.lang.Object w@@2) fixed.java.math.BigInteger))
 :pattern ( (UOrdering2 w@@2 fixed.java.math.BigInteger))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@3 T@U) ) (!  (=> (and (= (type w@@3) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@3)) (= fixed.java.io.Serializable w@@3))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@3))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@4 T@U) ) (!  (=> (= (type w@@4) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@4) (UOrdering2 w@@4 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@4) (= fixed.java.lang.Object w@@4))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@4) (UOrdering2 w@@4 fixed.java.lang.Object))
)))
(assert (forall ((w@@5 T@U) ) (!  (=> (= (type w@@5) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@5) (UOrdering2 w@@5 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@5) (= fixed.java.io.Serializable w@@5))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@5) (UOrdering2 w@@5 fixed.java.io.Serializable))
)))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@6)) (or (or (= fixed.java.lang.Throwable w@@6) (UOrdering2 fixed.java.lang.Object w@@6)) (UOrdering2 fixed.java.io.Serializable w@@6)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@6))
)))
(assert (forall ((w@@7 T@U) ) (!  (=> (and (= (type w@@7) javaTypeType) (UOrdering2 w@@7 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@7) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@7 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@8 T@U) ) (!  (=> (= (type w@@8) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@8) (UOrdering2 w@@8 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@8) (= fixed.java.lang.Throwable w@@8))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@8) (UOrdering2 w@@8 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (and (= (type w@@9) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@9)) (or (= fixed.java.lang.Exception w@@9) (UOrdering2 fixed.java.lang.Throwable w@@9)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@9))
)))
(assert (forall ((w@@10 T@U) ) (!  (=> (and (= (type w@@10) javaTypeType) (UOrdering2 w@@10 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@10) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@10 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@11 T@U) ) (!  (=> (= (type w@@11) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@11) (UOrdering2 w@@11 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@11) (= fixed.java.lang.Exception w@@11))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@11) (UOrdering2 w@@11 fixed.java.lang.Exception))
)))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@12)) (or (= fixed.java.lang.RuntimeException w@@12) (UOrdering2 fixed.java.lang.Exception w@@12)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@12))
)))
(assert (forall ((w@@13 T@U) ) (!  (=> (and (= (type w@@13) javaTypeType) (UOrdering2 w@@13 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@13) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@13 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@14 T@U) ) (!  (=> (= (type w@@14) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@14) (UOrdering2 w@@14 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@14) (= fixed.java.lang.RuntimeException w@@14))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@14) (UOrdering2 w@@14 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (and (= (type w@@15) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@15)) (or (= fixed.java.lang.NullPointerException w@@15) (UOrdering2 fixed.java.lang.RuntimeException w@@15)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@15))
)))
(assert (forall ((w@@16 T@U) ) (!  (=> (and (= (type w@@16) javaTypeType) (UOrdering2 w@@16 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@16) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@16 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.java.lang.ArithmeticException) javaTypeType))
(assert (not (= fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException))
(assert (forall ((w@@17 T@U) ) (!  (=> (= (type w@@17) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArithmeticException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ArithmeticException w@@17) (= fixed.java.lang.RuntimeException w@@17))))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (and (= (type w@@18) javaTypeType) (UOrdering2 fixed.java.lang.ArithmeticException w@@18)) (or (= fixed.java.lang.ArithmeticException w@@18) (UOrdering2 fixed.java.lang.RuntimeException w@@18)))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@18))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (and (= (type w@@19) javaTypeType) (UOrdering2 w@@19 fixed.java.lang.ArithmeticException)) (= (oneStep fixed.java.lang.RuntimeException w@@19) fixed.java.lang.ArithmeticException))
 :pattern ( (UOrdering2 w@@19 fixed.java.lang.ArithmeticException))
)))
(assert (= (type fixed.java.lang.reflect.AnnotatedElement) javaTypeType))
(assert (forall ((w@@20 T@U) ) (!  (=> (and (= (type w@@20) javaTypeType) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@20)) (= fixed.java.lang.reflect.AnnotatedElement w@@20))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@20))
)))
(assert (= (type fixed.java.lang.reflect.GenericDeclaration) javaTypeType))
(assert (not (= fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.AnnotatedElement)))
(assert (UOrdering2 fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.AnnotatedElement))
(assert (forall ((w@@21 T@U) ) (!  (=> (= (type w@@21) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@21) (UOrdering2 w@@21 fixed.java.lang.reflect.AnnotatedElement)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@21) (= fixed.java.lang.reflect.AnnotatedElement w@@21))))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@21) (UOrdering2 w@@21 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (and (= (type w@@22) javaTypeType) (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@22)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@22) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@22)))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@22))
)))
(assert (= (type fixed.java.lang.reflect.Type) javaTypeType))
(assert (forall ((w@@23 T@U) ) (!  (=> (and (= (type w@@23) javaTypeType) (UOrdering2 fixed.java.lang.reflect.Type w@@23)) (= fixed.java.lang.reflect.Type w@@23))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.Type w@@23))
)))
(assert (= (type fixed.java.lang.Class) javaTypeType))
(assert (not (= fixed.java.lang.Class fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Class fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.GenericDeclaration)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.GenericDeclaration))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.Type)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.Type))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.AnnotatedElement)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.AnnotatedElement))
(assert (forall ((w@@24 T@U) ) (!  (=> (= (type w@@24) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@24) (UOrdering2 w@@24 fixed.java.lang.Object)) (or (= fixed.java.lang.Class w@@24) (= fixed.java.lang.Object w@@24))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@24) (UOrdering2 w@@24 fixed.java.lang.Object))
)))
(assert (forall ((w@@25 T@U) ) (!  (=> (= (type w@@25) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@25) (UOrdering2 w@@25 fixed.java.io.Serializable)) (or (= fixed.java.lang.Class w@@25) (= fixed.java.io.Serializable w@@25))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@25) (UOrdering2 w@@25 fixed.java.io.Serializable))
)))
(assert (forall ((w@@26 T@U) ) (!  (=> (= (type w@@26) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@26) (UOrdering2 w@@26 fixed.java.lang.reflect.GenericDeclaration)) (or (= fixed.java.lang.Class w@@26) (= fixed.java.lang.reflect.GenericDeclaration w@@26))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@26) (UOrdering2 w@@26 fixed.java.lang.reflect.GenericDeclaration))
)))
(assert (forall ((w@@27 T@U) ) (!  (=> (= (type w@@27) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@27) (UOrdering2 w@@27 fixed.java.lang.reflect.Type)) (or (= fixed.java.lang.Class w@@27) (= fixed.java.lang.reflect.Type w@@27))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@27) (UOrdering2 w@@27 fixed.java.lang.reflect.Type))
)))
(assert (forall ((w@@28 T@U) ) (!  (=> (= (type w@@28) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@28) (UOrdering2 w@@28 fixed.java.lang.reflect.AnnotatedElement)) (or (= fixed.java.lang.Class w@@28) (= fixed.java.lang.reflect.AnnotatedElement w@@28))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@28) (UOrdering2 w@@28 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@29 T@U) ) (!  (=> (and (= (type w@@29) javaTypeType) (UOrdering2 fixed.java.lang.Class w@@29)) (or (or (or (or (or (= fixed.java.lang.Class w@@29) (UOrdering2 fixed.java.lang.Object w@@29)) (UOrdering2 fixed.java.io.Serializable w@@29)) (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@29)) (UOrdering2 fixed.java.lang.reflect.Type w@@29)) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@29)))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@29))
)))
(assert (forall ((w@@30 T@U) ) (!  (=> (and (= (type w@@30) javaTypeType) (UOrdering2 w@@30 fixed.java.lang.Class)) (= (oneStep fixed.java.lang.Object w@@30) fixed.java.lang.Class))
 :pattern ( (UOrdering2 w@@30 fixed.java.lang.Class))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@31 T@U) ) (!  (=> (= (type w@@31) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@31) (UOrdering2 w@@31 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@31) (= fixed.java.lang.RuntimeException w@@31))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@31) (UOrdering2 w@@31 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@32 T@U) ) (!  (=> (and (= (type w@@32) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@32)) (or (= fixed.java.lang.ClassCastException w@@32) (UOrdering2 fixed.java.lang.RuntimeException w@@32)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@32))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 w@@33 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@33) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@33 fixed.java.lang.ClassCastException))
)))
(assert (= (type fixed.ModPow2) javaTypeType))
(assert (not (= fixed.ModPow2 fixed.java.lang.Object)))
(assert (UOrdering2 fixed.ModPow2 fixed.java.lang.Object))
(assert (forall ((w@@34 T@U) ) (!  (=> (= (type w@@34) javaTypeType) (=> (and (UOrdering2 fixed.ModPow2 w@@34) (UOrdering2 w@@34 fixed.java.lang.Object)) (or (= fixed.ModPow2 w@@34) (= fixed.java.lang.Object w@@34))))
 :pattern ( (UOrdering2 fixed.ModPow2 w@@34) (UOrdering2 w@@34 fixed.java.lang.Object))
)))
(assert (forall ((w@@35 T@U) ) (!  (=> (and (= (type w@@35) javaTypeType) (UOrdering2 fixed.ModPow2 w@@35)) (or (= fixed.ModPow2 w@@35) (UOrdering2 fixed.java.lang.Object w@@35)))
 :pattern ( (UOrdering2 fixed.ModPow2 w@@35))
)))
(assert (forall ((w@@36 T@U) ) (!  (=> (and (= (type w@@36) javaTypeType) (UOrdering2 w@@36 fixed.ModPow2)) (= (oneStep fixed.java.lang.Object w@@36) fixed.ModPow2))
 :pattern ( (UOrdering2 w@@36 fixed.ModPow2))
)))
(assert (= (type fixed.java.lang.Number) javaTypeType))
(assert (not (= fixed.java.lang.Number fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Number fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.io.Serializable))
(assert (forall ((w@@37 T@U) ) (!  (=> (= (type w@@37) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@37) (UOrdering2 w@@37 fixed.java.lang.Object)) (or (= fixed.java.lang.Number w@@37) (= fixed.java.lang.Object w@@37))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@37) (UOrdering2 w@@37 fixed.java.lang.Object))
)))
(assert (forall ((w@@38 T@U) ) (!  (=> (= (type w@@38) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@38) (UOrdering2 w@@38 fixed.java.io.Serializable)) (or (= fixed.java.lang.Number w@@38) (= fixed.java.io.Serializable w@@38))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@38) (UOrdering2 w@@38 fixed.java.io.Serializable))
)))
(assert (forall ((w@@39 T@U) ) (!  (=> (and (= (type w@@39) javaTypeType) (UOrdering2 fixed.java.lang.Number w@@39)) (or (or (= fixed.java.lang.Number w@@39) (UOrdering2 fixed.java.lang.Object w@@39)) (UOrdering2 fixed.java.io.Serializable w@@39)))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@39))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (and (= (type w@@40) javaTypeType) (UOrdering2 w@@40 fixed.java.lang.Number)) (= (oneStep fixed.java.lang.Object w@@40) fixed.java.lang.Number))
 :pattern ( (UOrdering2 w@@40 fixed.java.lang.Number))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@41)) (= fixed.java.lang.Comparable w@@41))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@41))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@42 T@U) ) (!  (=> (= (type w@@42) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@42) (UOrdering2 w@@42 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@42) (= fixed.java.lang.Object w@@42))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@42) (UOrdering2 w@@42 fixed.java.lang.Object))
)))
(assert (forall ((w@@43 T@U) ) (!  (=> (and (= (type w@@43) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@43)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@43) (UOrdering2 fixed.java.lang.Object w@@43)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@43))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (and (= (type w@@44) javaTypeType) (UOrdering2 w@@44 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@44) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@44 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.lang.Boolean) javaTypeType))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Boolean fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Comparable))
(assert (forall ((w@@45 T@U) ) (!  (=> (= (type w@@45) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@45) (UOrdering2 w@@45 fixed.java.lang.Object)) (or (= fixed.java.lang.Boolean w@@45) (= fixed.java.lang.Object w@@45))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@45) (UOrdering2 w@@45 fixed.java.lang.Object))
)))
(assert (forall ((w@@46 T@U) ) (!  (=> (= (type w@@46) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@46) (UOrdering2 w@@46 fixed.java.io.Serializable)) (or (= fixed.java.lang.Boolean w@@46) (= fixed.java.io.Serializable w@@46))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@46) (UOrdering2 w@@46 fixed.java.io.Serializable))
)))
(assert (forall ((w@@47 T@U) ) (!  (=> (= (type w@@47) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@47) (UOrdering2 w@@47 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Boolean w@@47) (= fixed.java.lang.Comparable w@@47))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@47) (UOrdering2 w@@47 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@48 T@U) ) (!  (=> (and (= (type w@@48) javaTypeType) (UOrdering2 fixed.java.lang.Boolean w@@48)) (or (or (or (= fixed.java.lang.Boolean w@@48) (UOrdering2 fixed.java.lang.Object w@@48)) (UOrdering2 fixed.java.io.Serializable w@@48)) (UOrdering2 fixed.java.lang.Comparable w@@48)))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@48))
)))
(assert (forall ((w@@49 T@U) ) (!  (=> (and (= (type w@@49) javaTypeType) (UOrdering2 w@@49 fixed.java.lang.Boolean)) (= (oneStep fixed.java.lang.Object w@@49) fixed.java.lang.Boolean))
 :pattern ( (UOrdering2 w@@49 fixed.java.lang.Boolean))
)))
(assert (= (type fixed.java.lang.Math) javaTypeType))
(assert (not (= fixed.java.lang.Math fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Math fixed.java.lang.Object))
(assert (forall ((w@@50 T@U) ) (!  (=> (= (type w@@50) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Math w@@50) (UOrdering2 w@@50 fixed.java.lang.Object)) (or (= fixed.java.lang.Math w@@50) (= fixed.java.lang.Object w@@50))))
 :pattern ( (UOrdering2 fixed.java.lang.Math w@@50) (UOrdering2 w@@50 fixed.java.lang.Object))
)))
(assert (forall ((w@@51 T@U) ) (!  (=> (and (= (type w@@51) javaTypeType) (UOrdering2 fixed.java.lang.Math w@@51)) (or (= fixed.java.lang.Math w@@51) (UOrdering2 fixed.java.lang.Object w@@51)))
 :pattern ( (UOrdering2 fixed.java.lang.Math w@@51))
)))
(assert (forall ((w@@52 T@U) ) (!  (=> (and (= (type w@@52) javaTypeType) (UOrdering2 w@@52 fixed.java.lang.Math)) (= (oneStep fixed.java.lang.Object w@@52) fixed.java.lang.Math))
 :pattern ( (UOrdering2 w@@52 fixed.java.lang.Math))
)))
(assert (forall ((w@@53 T@U) ) (!  (=> (and (= (type w@@53) javaTypeType) (UOrdering2 w@@53 fixed.java.lang.Object)) (or (or (or (or (or (or (or (or (= fixed.java.lang.Object w@@53) (UOrdering2 w@@53 fixed.java.math.BigInteger)) (UOrdering2 w@@53 fixed.java.lang.Throwable)) (UOrdering2 w@@53 fixed.java.lang.Class)) (UOrdering2 w@@53 fixed.ModPow2)) (UOrdering2 w@@53 fixed.java.lang.Number)) (UOrdering2 w@@53 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@53 fixed.java.lang.Boolean)) (UOrdering2 w@@53 fixed.java.lang.Math)))
 :pattern ( (UOrdering2 w@@53 fixed.java.lang.Object))
)))
(assert (forall ((w@@54 T@U) ) (!  (=> (and (= (type w@@54) javaTypeType) (UOrdering2 w@@54 fixed.java.math.BigInteger)) (= fixed.java.math.BigInteger w@@54))
 :pattern ( (UOrdering2 w@@54 fixed.java.math.BigInteger))
)))
(assert (forall ((w@@55 T@U) ) (!  (=> (and (= (type w@@55) javaTypeType) (UOrdering2 w@@55 fixed.java.io.Serializable)) (or (or (or (or (= fixed.java.io.Serializable w@@55) (UOrdering2 w@@55 fixed.java.lang.Throwable)) (UOrdering2 w@@55 fixed.java.lang.Class)) (UOrdering2 w@@55 fixed.java.lang.Number)) (UOrdering2 w@@55 fixed.java.lang.Boolean)))
 :pattern ( (UOrdering2 w@@55 fixed.java.io.Serializable))
)))
(assert (forall ((w@@56 T@U) ) (!  (=> (and (= (type w@@56) javaTypeType) (UOrdering2 w@@56 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@56) (UOrdering2 w@@56 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@56 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@57 T@U) ) (!  (=> (and (= (type w@@57) javaTypeType) (UOrdering2 w@@57 fixed.java.lang.Exception)) (or (= fixed.java.lang.Exception w@@57) (UOrdering2 w@@57 fixed.java.lang.RuntimeException)))
 :pattern ( (UOrdering2 w@@57 fixed.java.lang.Exception))
)))
(assert (forall ((w@@58 T@U) ) (!  (=> (and (= (type w@@58) javaTypeType) (UOrdering2 w@@58 fixed.java.lang.RuntimeException)) (or (or (or (= fixed.java.lang.RuntimeException w@@58) (UOrdering2 w@@58 fixed.java.lang.NullPointerException)) (UOrdering2 w@@58 fixed.java.lang.ArithmeticException)) (UOrdering2 w@@58 fixed.java.lang.ClassCastException)))
 :pattern ( (UOrdering2 w@@58 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@59 T@U) ) (!  (=> (and (= (type w@@59) javaTypeType) (UOrdering2 w@@59 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@59))
 :pattern ( (UOrdering2 w@@59 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@60 T@U) ) (!  (=> (and (= (type w@@60) javaTypeType) (UOrdering2 w@@60 fixed.java.lang.ArithmeticException)) (= fixed.java.lang.ArithmeticException w@@60))
 :pattern ( (UOrdering2 w@@60 fixed.java.lang.ArithmeticException))
)))
(assert (forall ((w@@61 T@U) ) (!  (=> (and (= (type w@@61) javaTypeType) (UOrdering2 w@@61 fixed.java.lang.reflect.AnnotatedElement)) (or (or (= fixed.java.lang.reflect.AnnotatedElement w@@61) (UOrdering2 w@@61 fixed.java.lang.reflect.GenericDeclaration)) (UOrdering2 w@@61 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@61 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@62 T@U) ) (!  (=> (and (= (type w@@62) javaTypeType) (UOrdering2 w@@62 fixed.java.lang.reflect.GenericDeclaration)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@62) (UOrdering2 w@@62 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@62 fixed.java.lang.reflect.GenericDeclaration))
)))
(assert (forall ((w@@63 T@U) ) (!  (=> (and (= (type w@@63) javaTypeType) (UOrdering2 w@@63 fixed.java.lang.reflect.Type)) (or (= fixed.java.lang.reflect.Type w@@63) (UOrdering2 w@@63 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@63 fixed.java.lang.reflect.Type))
)))
(assert (forall ((w@@64 T@U) ) (!  (=> (and (= (type w@@64) javaTypeType) (UOrdering2 w@@64 fixed.java.lang.Class)) (= fixed.java.lang.Class w@@64))
 :pattern ( (UOrdering2 w@@64 fixed.java.lang.Class))
)))
(assert (forall ((w@@65 T@U) ) (!  (=> (and (= (type w@@65) javaTypeType) (UOrdering2 w@@65 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@65))
 :pattern ( (UOrdering2 w@@65 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@66 T@U) ) (!  (=> (and (= (type w@@66) javaTypeType) (UOrdering2 w@@66 fixed.ModPow2)) (= fixed.ModPow2 w@@66))
 :pattern ( (UOrdering2 w@@66 fixed.ModPow2))
)))
(assert (forall ((w@@67 T@U) ) (!  (=> (and (= (type w@@67) javaTypeType) (UOrdering2 w@@67 fixed.java.lang.Number)) (= fixed.java.lang.Number w@@67))
 :pattern ( (UOrdering2 w@@67 fixed.java.lang.Number))
)))
(assert (forall ((w@@68 T@U) ) (!  (=> (and (= (type w@@68) javaTypeType) (UOrdering2 w@@68 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Comparable w@@68) (UOrdering2 w@@68 fixed.java.lang.Boolean)))
 :pattern ( (UOrdering2 w@@68 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@69 T@U) ) (!  (=> (and (= (type w@@69) javaTypeType) (UOrdering2 w@@69 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@69))
 :pattern ( (UOrdering2 w@@69 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@70 T@U) ) (!  (=> (and (= (type w@@70) javaTypeType) (UOrdering2 w@@70 fixed.java.lang.Boolean)) (= fixed.java.lang.Boolean w@@70))
 :pattern ( (UOrdering2 w@@70 fixed.java.lang.Boolean))
)))
(assert (forall ((w@@71 T@U) ) (!  (=> (and (= (type w@@71) javaTypeType) (UOrdering2 w@@71 fixed.java.lang.Math)) (= fixed.java.lang.Math w@@71))
 :pattern ( (UOrdering2 w@@71 fixed.java.lang.Math))
)))
(assert  (and (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 4)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (Ctor refType) 5)) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.java.math.BigInteger fixed.java.io.Serializable fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.lang.NullPointerException fixed.java.lang.ArithmeticException fixed.java.lang.reflect.AnnotatedElement fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.Type fixed.java.lang.Class fixed.java.lang.ClassCastException fixed.ModPow2 fixed.java.lang.Number fixed.java.lang.Comparable fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Boolean fixed.java.lang.Math)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCMo.119:15|
 :skolemid |22670|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCMo.123:15|
 :skolemid |22671|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCMo.127:15|
 :skolemid |22672|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCMo.131:15|
 :skolemid |22673|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCMo.135:15|
 :skolemid |22674|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCMo.139:15|
 :skolemid |22675|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCMo.141:15|
 :skolemid |22676|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCMo.60736:15|
 :skolemid |24792|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCMo.60740:15|
 :skolemid |24793|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCMo.60744:15|
 :skolemid |24794|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCMo.60748:15|
 :skolemid |24795|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCMo.60752:15|
 :skolemid |24796|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCMo.60756:15|
 :skolemid |24797|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCMo.60758:15|
 :skolemid |24798|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1) refType) (= (type inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1) refType)) (= (type inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2) refType)) (= (type inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2) refType)) (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
))) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap@19) (MapType0Type refType))) (= (type fixed.$heap@9) (MapType0Type refType))) (= (type fixed.$heap) (MapType0Type refType))) (= (type $in_parameter__1) refType)) (= (type call3formal@$obj@0) refType)) (= (type fixed.$heap@10) (MapType0Type refType))) (= (type fixed.$heap@11) (MapType0Type refType))) (= (type $in_parameter__0) refType)) (= (type call3formal@$obj@0@@0) refType)) (= (type fixed.$heap@12) (MapType0Type refType))) (= (type inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1) refType)) (= (type call3formal@$obj@0@@1) refType)) (= (type fixed.$heap@14) (MapType0Type refType))) (= (type fixed.$heap@15) (MapType0Type refType))) (= (type call3formal@$obj@0@@2) refType)) (= (type call3formal@$obj@0@@3) refType)) (= (type fixed.$heap@16) (MapType0Type refType))) (= (type fixed.$heap@17) (MapType0Type refType))) (= (type fixed.$heap@18) (MapType0Type refType))) (= (type call3formal@$obj@0@@4) refType)) (= (type fixed.long$java.math.BigInteger$value0) (FieldType intType))) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))) (= (type inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$return@2) refType)) (= (type fixed.$heap@13) (MapType0Type refType))) (= (type inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$return@2) refType)) (= (type inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@0) refType)) (= (type call3formal@$obj@0@@5) refType)) (= (type fixed.$heap@0) (MapType0Type refType))) (= (type fixed.$heap@1) (MapType0Type refType))) (= (type call3formal@$obj@0@@6) refType)) (= (type fixed.$heap@2) (MapType0Type refType))) (= (type inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1) refType)) (= (type call3formal@$obj@0@@7) refType)) (= (type fixed.$heap@4) (MapType0Type refType))) (= (type fixed.$heap@5) (MapType0Type refType))) (= (type call3formal@$obj@0@@8) refType)) (= (type call3formal@$obj@0@@9) refType)) (= (type fixed.$heap@6) (MapType0Type refType))) (= (type fixed.$heap@7) (MapType0Type refType))) (= (type fixed.$heap@8) (MapType0Type refType))) (= (type call3formal@$obj@0@@10) refType)) (= (type inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$return@2) refType)) (= (type fixed.$heap@3) (MapType0Type refType))) (= (type inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$return@2) refType)) (= (type inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@0) refType)))
(push 1)
(set-info :boogie-vc-id PROC_.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger_EQ_unsafe__xx__fixed)
(assert (not
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon9_correct  (=> (! (and %lbl%+4658567 true) :lblpos +4658567) true)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon12_Else_correct  (=> (! (and %lbl%+4658566 true) :lblpos +4658566) (=> (< 0 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b5@4) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon9_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block49_correct  (=> (! (and %lbl%+4658625 true) :lblpos +4658625) true)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15$1_correct  (=> (! (and %lbl%+4658624 true) :lblpos +4658624) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block49_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Return_correct  (=> (! (and %lbl%+4658623 true) :lblpos +4658623) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$block7_correct  (=> (! (and %lbl%+4658622 true) :lblpos +4658622) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Return_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1_correct  (=> (! (and %lbl%+4658621 true) :lblpos +4658621) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$block7_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$Return_correct  (=> (! (and %lbl%+4658620 true) :lblpos +4658620) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$block1_correct  (=> (! (and %lbl%+4658619 true) :lblpos +4658619) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$Return_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1_correct  (=> (! (and %lbl%+4658618 true) :lblpos +4658618) (=> (= fixed.$heap@8 (MapType0Store fixed.$heap@6 call3formal@$obj@0@@10 fixed.long$java.math.BigInteger$value0 (int_2_U inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2@3))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$block1_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$Return_correct  (=> (! (and %lbl%+4658617 true) :lblpos +4658617) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$anon0_correct  (=> (! (and %lbl%+4658616 true) :lblpos +4658616) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$Return_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$Entry_correct  (=> (! (and %lbl%+4658615 true) :lblpos +4658615) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$anon0_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$anon0_correct  (=> (! (and %lbl%+4658614 true) :lblpos +4658614) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@6 fixed.$null fixed.$type) T))
 :qid |RSPROCMo.118456:20|
 :skolemid |26779|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCMo.118457:20|
 :skolemid |26780|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCMo.118458:20|
 :skolemid |26781|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and (UOrdering2 (MapType0Select fixed.$heap@6 call3formal@$obj@0@@10 fixed.$type) fixed.java.math.BigInteger) (not (= call3formal@$obj@0@@10 fixed.$null)))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$Entry_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$Entry_correct  (=> (! (and %lbl%+4658613 true) :lblpos +4658613) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$anon0_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3_correct  (=> (! (and %lbl%+4658612 true) :lblpos +4658612) (=> (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0@3 (U_2_int (MapType0Select fixed.$heap@6 call3formal@$obj@0@@8 fixed.long$java.math.BigInteger$value0))) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2@3 (+ inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1@3 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0@3))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$Entry_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then_correct  (=> (! (and %lbl%+4658610 true) :lblpos +4658610) (=> (not (= call3formal@$obj@0@@8 fixed.$null)) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else_correct  (=> (! (and %lbl%+4658611 true) :lblpos +4658611) (=> (and (= call3formal@$obj@0@@8 fixed.$null) (not (= call3formal@$obj@0@@9 fixed.$null))) (=> (and (and (not (U_2_bool (MapType0Select fixed.$heap@6 call3formal@$obj@0@@9 fixed.$alloc))) (= fixed.$objIndex@6 (+ fixed.$objIndex@5 1))) (and (= call3formal@$obj@0@@9 (fixed.$intToRef fixed.$objIndex@5)) (= fixed.$heap@7 (MapType0Store (MapType0Store fixed.$heap@6 call3formal@$obj@0@@9 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@9 fixed.$type fixed.java.lang.NullPointerException)))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Return_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0_correct  (=> (! (and %lbl%+4658609 true) :lblpos +4658609) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@4 fixed.$null fixed.$type) T@@0))
 :qid |RSPROCMo.118402:20|
 :skolemid |26776|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCMo.118403:20|
 :skolemid |26777|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCMo.118404:20|
 :skolemid |26778|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and (UOrdering2 (MapType0Select fixed.$heap@4 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.$type) fixed.java.math.BigInteger) (not (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.$null)))) (=> (and (and (and (UOrdering2 (MapType0Select fixed.$heap@4 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$return@2 fixed.$type) fixed.java.math.BigInteger) (UOrdering2 (MapType0Select fixed.$heap@4 call3formal@$obj@0@@8 fixed.$type) fixed.java.math.BigInteger)) (and (not (= call3formal@$obj@0@@10 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap@4 call3formal@$obj@0@@10 fixed.$alloc))))) (and (and (= fixed.$objIndex@5 (+ fixed.$objIndex@3 1)) (= call3formal@$obj@0@@10 (fixed.$intToRef fixed.$objIndex@3))) (and (= fixed.$heap@6 (MapType0Store (MapType0Store fixed.$heap@4 call3formal@$obj@0@@10 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@10 fixed.$type fixed.java.math.BigInteger)) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1@3 (U_2_int (MapType0Select fixed.$heap@6 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.long$java.math.BigInteger$value0)))))) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else_correct)))))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry_correct  (=> (! (and %lbl%+4658608 true) :lblpos +4658608) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15_correct  (=> (! (and %lbl%+4658607 true) :lblpos +4658607) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Then_correct  (=> (! (and %lbl%+4658605 true) :lblpos +4658605) (=> (not (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.$null)) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Then_correct  (=> (! (and %lbl%+4658585 true) :lblpos +4658585) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 0) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block49_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon9_correct  (=> (! (and %lbl%+4658650 true) :lblpos +4658650) true)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon12_Else_correct  (=> (! (and %lbl%+4658649 true) :lblpos +4658649) (=> (< 0 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b5@4) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon9_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block45_correct  (=> (! (and %lbl%+4658708 true) :lblpos +4658708) true)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15$1_correct  (=> (! (and %lbl%+4658707 true) :lblpos +4658707) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block45_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Return_correct  (=> (! (and %lbl%+4658706 true) :lblpos +4658706) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15$1_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$block7_correct  (=> (! (and %lbl%+4658705 true) :lblpos +4658705) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Return_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1_correct  (=> (! (and %lbl%+4658704 true) :lblpos +4658704) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$block7_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$Return_correct  (=> (! (and %lbl%+4658703 true) :lblpos +4658703) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$block1_correct  (=> (! (and %lbl%+4658702 true) :lblpos +4658702) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$Return_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1_correct  (=> (! (and %lbl%+4658701 true) :lblpos +4658701) (=> (= fixed.$heap@18 (MapType0Store fixed.$heap@16 call3formal@$obj@0@@4 fixed.long$java.math.BigInteger$value0 (int_2_U inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2@3))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$block1_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$Return_correct  (=> (! (and %lbl%+4658700 true) :lblpos +4658700) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$anon0_correct  (=> (! (and %lbl%+4658699 true) :lblpos +4658699) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$Return_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$Entry_correct  (=> (! (and %lbl%+4658698 true) :lblpos +4658698) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$anon0_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$anon0_correct  (=> (! (and %lbl%+4658697 true) :lblpos +4658697) (=> (forall ((T@@1 T@U) ) (!  (=> (= (type T@@1) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@16 fixed.$null fixed.$type) T@@1))
 :qid |RSPROCMo.119028:20|
 :skolemid |26800|
 :no-pattern (type T@@1)
 :no-pattern (U_2_int T@@1)
 :no-pattern (U_2_bool T@@1)
)) (=> (and (and (forall ((_r@@3 T@U) ) (!  (=> (= (type _r@@3) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@3)) 0))
 :qid |RSPROCMo.119029:20|
 :skolemid |26801|
 :no-pattern (type _r@@3)
 :no-pattern (U_2_int _r@@3)
 :no-pattern (U_2_bool _r@@3)
)) (forall ((_r@@4 T@U) ) (!  (=> (= (type _r@@4) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@4)) 0))
 :qid |RSPROCMo.119030:20|
 :skolemid |26802|
 :no-pattern (type _r@@4)
 :no-pattern (U_2_int _r@@4)
 :no-pattern (U_2_bool _r@@4)
))) (and (UOrdering2 (MapType0Select fixed.$heap@16 call3formal@$obj@0@@4 fixed.$type) fixed.java.math.BigInteger) (not (= call3formal@$obj@0@@4 fixed.$null)))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$1$Entry_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$Entry_correct  (=> (! (and %lbl%+4658696 true) :lblpos +4658696) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$anon0_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3_correct  (=> (! (and %lbl%+4658695 true) :lblpos +4658695) (=> (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0@3 (U_2_int (MapType0Select fixed.$heap@16 call3formal@$obj@0@@2 fixed.long$java.math.BigInteger$value0))) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2@3 (+ inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1@3 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0@3))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$1$Entry_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then_correct  (=> (! (and %lbl%+4658693 true) :lblpos +4658693) (=> (not (= call3formal@$obj@0@@2 fixed.$null)) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else_correct  (=> (! (and %lbl%+4658694 true) :lblpos +4658694) (=> (and (= call3formal@$obj@0@@2 fixed.$null) (not (= call3formal@$obj@0@@3 fixed.$null))) (=> (and (and (not (U_2_bool (MapType0Select fixed.$heap@16 call3formal@$obj@0@@3 fixed.$alloc))) (= fixed.$objIndex@13 (+ fixed.$objIndex@12 1))) (and (= call3formal@$obj@0@@3 (fixed.$intToRef fixed.$objIndex@12)) (= fixed.$heap@17 (MapType0Store (MapType0Store fixed.$heap@16 call3formal@$obj@0@@3 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@3 fixed.$type fixed.java.lang.NullPointerException)))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Return_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0_correct  (=> (! (and %lbl%+4658692 true) :lblpos +4658692) (=> (forall ((T@@2 T@U) ) (!  (=> (= (type T@@2) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@14 fixed.$null fixed.$type) T@@2))
 :qid |RSPROCMo.118974:20|
 :skolemid |26797|
 :no-pattern (type T@@2)
 :no-pattern (U_2_int T@@2)
 :no-pattern (U_2_bool T@@2)
)) (=> (and (and (forall ((_r@@5 T@U) ) (!  (=> (= (type _r@@5) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@5)) 0))
 :qid |RSPROCMo.118975:20|
 :skolemid |26798|
 :no-pattern (type _r@@5)
 :no-pattern (U_2_int _r@@5)
 :no-pattern (U_2_bool _r@@5)
)) (forall ((_r@@6 T@U) ) (!  (=> (= (type _r@@6) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@6)) 0))
 :qid |RSPROCMo.118976:20|
 :skolemid |26799|
 :no-pattern (type _r@@6)
 :no-pattern (U_2_int _r@@6)
 :no-pattern (U_2_bool _r@@6)
))) (and (UOrdering2 (MapType0Select fixed.$heap@14 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.$type) fixed.java.math.BigInteger) (not (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.$null)))) (=> (and (and (and (UOrdering2 (MapType0Select fixed.$heap@14 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$return@2 fixed.$type) fixed.java.math.BigInteger) (UOrdering2 (MapType0Select fixed.$heap@14 call3formal@$obj@0@@2 fixed.$type) fixed.java.math.BigInteger)) (and (not (= call3formal@$obj@0@@4 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap@14 call3formal@$obj@0@@4 fixed.$alloc))))) (and (and (= fixed.$objIndex@12 (+ fixed.$objIndex@10 1)) (= call3formal@$obj@0@@4 (fixed.$intToRef fixed.$objIndex@10))) (and (= fixed.$heap@16 (MapType0Store (MapType0Store fixed.$heap@14 call3formal@$obj@0@@4 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@4 fixed.$type fixed.java.math.BigInteger)) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1@3 (U_2_int (MapType0Select fixed.$heap@16 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.long$java.math.BigInteger$value0)))))) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else_correct)))))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry_correct  (=> (! (and %lbl%+4658691 true) :lblpos +4658691) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15_correct  (=> (! (and %lbl%+4658690 true) :lblpos +4658690) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Then_correct  (=> (! (and %lbl%+4658688 true) :lblpos +4658688) (=> (not (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.$null)) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Then_correct  (=> (! (and %lbl%+4658668 true) :lblpos +4658668) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 0) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block45_correct))))
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+4715402 true) :lblpos +4715402) (! (or %lbl%@4721477  (and (and (and AA_TEMP183@2 AA_TEMP182@2) AA_TEMP181@2) AA_TEMP180@2)) :lblneg @4721477))))
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+4658712 true) :lblpos +4658712) (=> (and (and (and (and (and (=> AA_TEMP180@1 (or AA_TEMP180@0 (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1))) (=> (or AA_TEMP180@0 (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1)) AA_TEMP180@1)) (and (=> AA_TEMP181@1 (or AA_TEMP181@0 (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2))) (=> (or AA_TEMP181@0 (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2)) AA_TEMP181@1))) (and (=> AA_TEMP182@1 (or AA_TEMP182@0 (= fixed.$objIndex@14 fixed.$objIndex@14))) (=> (or AA_TEMP182@0 (= fixed.$objIndex@14 fixed.$objIndex@14)) AA_TEMP182@1))) (and (=> AA_TEMP183@1 (or AA_TEMP183@0 (forall ((r T@U) (f T@U) ) (! (let ((_ty (FieldTypeInv0 (type f))))
 (=> (and (= (type r) refType) (= (type f) (FieldType _ty))) (or (= (MapType0Select fixed.$heap@19 r f) (MapType0Select fixed.$heap@9 r f)) (not (U_2_bool (MapType0Select fixed.$heap r fixed.$alloc))))))
 :qid |RSPROCMo.119120:20|
 :skolemid |26803|
 :no-pattern (type r)
 :no-pattern (type f)
 :no-pattern (U_2_int r)
 :no-pattern (U_2_bool r)
 :no-pattern (U_2_int f)
 :no-pattern (U_2_bool f)
)))) (=> (or AA_TEMP183@0 (forall ((r@@0 T@U) (f@@0 T@U) ) (! (let ((_ty@@0 (FieldTypeInv0 (type f@@0))))
 (=> (and (= (type r@@0) refType) (= (type f@@0) (FieldType _ty@@0))) (or (= (MapType0Select fixed.$heap@19 r@@0 f@@0) (MapType0Select fixed.$heap@9 r@@0 f@@0)) (not (U_2_bool (MapType0Select fixed.$heap r@@0 fixed.$alloc))))))
 :qid |RSPROCMo.119120:20|
 :skolemid |26803|
 :no-pattern (type r@@0)
 :no-pattern (type f@@0)
 :no-pattern (U_2_int r@@0)
 :no-pattern (U_2_bool r@@0)
 :no-pattern (U_2_int f@@0)
 :no-pattern (U_2_bool f@@0)
))) AA_TEMP183@1))) (and (and (and (=> AA_TEMP180@2 AA_TEMP180@1) (=> AA_TEMP180@1 AA_TEMP180@2)) (and (=> AA_TEMP181@2 AA_TEMP181@1) (=> AA_TEMP181@1 AA_TEMP181@2))) (and (and (=> AA_TEMP182@2 AA_TEMP182@1) (=> AA_TEMP182@1 AA_TEMP182@2)) (and (=> AA_TEMP183@2 AA_TEMP183@1) (=> AA_TEMP183@1 AA_TEMP183@2))))) GeneratedUnifiedExit_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct  (=> (! (and %lbl%+4658711 true) :lblpos +4658711) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block46_correct  (=> (! (and %lbl%+4658710 true) :lblpos +4658710) (=> (and (and (= fixed.$heap@19 fixed.$heap@10) (= fixed.$objIndex@14 fixed.$objIndex@7)) (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 fixed.$null))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block44_correct  (=> (! (and %lbl%+4658709 true) :lblpos +4658709) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block46_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Then_correct  (=> (! (and %lbl%+4658655 true) :lblpos +4658655) (=> (>= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block44_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Else_correct  (=> (! (and %lbl%+4658689 true) :lblpos +4658689) (=> (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.$null) (not (= call3formal@$obj@0@@1 fixed.$null))) (=> (and (and (and (not (U_2_bool (MapType0Select fixed.$heap@14 call3formal@$obj@0@@1 fixed.$alloc))) (= fixed.$objIndex@11 (+ fixed.$objIndex@10 1))) (and (= call3formal@$obj@0@@1 (fixed.$intToRef fixed.$objIndex@10)) (= fixed.$heap@15 (MapType0Store (MapType0Store fixed.$heap@14 call3formal@$obj@0@@1 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@1 fixed.$type fixed.java.lang.RuntimeException)))) (and (and (= fixed.$heap@19 fixed.$heap@15) (= fixed.$objIndex@14 fixed.$objIndex@11)) (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 fixed.$null) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 call3formal@$obj@0@@1)))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12$1_correct  (=> (! (and %lbl%+4658687 true) :lblpos +4658687) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Else_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$Return_correct  (=> (! (and %lbl%+4658686 true) :lblpos +4658686) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12$1_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$block5_correct  (=> (! (and %lbl%+4658685 true) :lblpos +4658685) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$Return_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$anon0$1_correct  (=> (! (and %lbl%+4658684 true) :lblpos +4658684) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$block5_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$Return_correct  (=> (! (and %lbl%+4658683 true) :lblpos +4658683) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$anon0$1_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$block1_correct  (=> (! (and %lbl%+4658682 true) :lblpos +4658682) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$Return_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1_correct  (=> (! (and %lbl%+4658681 true) :lblpos +4658681) (=> (= fixed.$heap@14 (MapType0Store fixed.$heap@13 call3formal@$obj@0@@2 fixed.long$java.math.BigInteger$value0 (int_2_U inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l2@3))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$block1_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+4658680 true) :lblpos +4658680) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+4658679 true) :lblpos +4658679) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+4658678 true) :lblpos +4658678) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$anon0_correct  (=> (! (and %lbl%+4658677 true) :lblpos +4658677) (=> (forall ((T@@3 T@U) ) (!  (=> (= (type T@@3) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@13 fixed.$null fixed.$type) T@@3))
 :qid |RSPROCMo.118890:20|
 :skolemid |26794|
 :no-pattern (type T@@3)
 :no-pattern (U_2_int T@@3)
 :no-pattern (U_2_bool T@@3)
)) (=> (and (and (forall ((_r@@7 T@U) ) (!  (=> (= (type _r@@7) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@7)) 0))
 :qid |RSPROCMo.118891:20|
 :skolemid |26795|
 :no-pattern (type _r@@7)
 :no-pattern (U_2_int _r@@7)
 :no-pattern (U_2_bool _r@@7)
)) (forall ((_r@@8 T@U) ) (!  (=> (= (type _r@@8) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@8)) 0))
 :qid |RSPROCMo.118892:20|
 :skolemid |26796|
 :no-pattern (type _r@@8)
 :no-pattern (U_2_int _r@@8)
 :no-pattern (U_2_bool _r@@8)
))) (and (UOrdering2 (MapType0Select fixed.$heap@13 call3formal@$obj@0@@2 fixed.$type) fixed.java.math.BigInteger) (not (= call3formal@$obj@0@@2 fixed.$null)))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$Entry_correct  (=> (! (and %lbl%+4658676 true) :lblpos +4658676) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$anon0_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$anon0_correct  (=> (! (and %lbl%+4658675 true) :lblpos +4658675) (=> (forall ((T@@4 T@U) ) (!  (=> (= (type T@@4) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@10 fixed.$null fixed.$type) T@@4))
 :qid |RSPROCMo.118857:20|
 :skolemid |26791|
 :no-pattern (type T@@4)
 :no-pattern (U_2_int T@@4)
 :no-pattern (U_2_bool T@@4)
)) (=> (and (and (forall ((_r@@9 T@U) ) (!  (=> (= (type _r@@9) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@9)) 0))
 :qid |RSPROCMo.118858:20|
 :skolemid |26792|
 :no-pattern (type _r@@9)
 :no-pattern (U_2_int _r@@9)
 :no-pattern (U_2_bool _r@@9)
)) (forall ((_r@@10 T@U) ) (!  (=> (= (type _r@@10) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@10)) 0))
 :qid |RSPROCMo.118859:20|
 :skolemid |26793|
 :no-pattern (type _r@@10)
 :no-pattern (U_2_int _r@@10)
 :no-pattern (U_2_bool _r@@10)
))) (and (UOrdering2 (MapType0Select fixed.$heap@10 $in_parameter__0 fixed.$type) fixed.java.math.BigInteger) (not (= $in_parameter__0 fixed.$null)))) (=> (and (and (and (UOrdering2 (MapType0Select fixed.$heap@10 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$return@2 fixed.$type) fixed.java.math.BigInteger) (not (= call3formal@$obj@0@@2 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap@10 call3formal@$obj@0@@2 fixed.$alloc))) (= fixed.$objIndex@10 (+ fixed.$objIndex@7 1)))) (and (and (= call3formal@$obj@0@@2 (fixed.$intToRef fixed.$objIndex@7)) (= fixed.$heap@13 (MapType0Store (MapType0Store fixed.$heap@10 call3formal@$obj@0@@2 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@2 fixed.$type fixed.java.math.BigInteger))) (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l1@3 (U_2_int (MapType0Select fixed.$heap@13 $in_parameter__0 fixed.long$java.math.BigInteger$value0))) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l2@3 (fixed.$shlInt inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l1@3 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1))))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$Entry_correct))))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$Entry_correct  (=> (! (and %lbl%+4658674 true) :lblpos +4658674) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$anon0_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12_correct  (=> (! (and %lbl%+4658673 true) :lblpos +4658673) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$Entry_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Then_correct  (=> (! (and %lbl%+4658671 true) :lblpos +4658671) (=> (not (= $in_parameter__0 fixed.$null)) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Else_correct  (=> (! (and %lbl%+4658672 true) :lblpos +4658672) (=> (and (= $in_parameter__0 fixed.$null) (not (= call3formal@$obj@0@@0 fixed.$null))) (=> (and (and (and (not (U_2_bool (MapType0Select fixed.$heap@10 call3formal@$obj@0@@0 fixed.$alloc))) (= fixed.$objIndex@9 (+ fixed.$objIndex@7 1))) (and (= call3formal@$obj@0@@0 (fixed.$intToRef fixed.$objIndex@7)) (= fixed.$heap@12 (MapType0Store (MapType0Store fixed.$heap@10 call3formal@$obj@0@@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@0 fixed.$type fixed.java.lang.RuntimeException)))) (and (and (= fixed.$heap@19 fixed.$heap@12) (= fixed.$objIndex@14 fixed.$objIndex@9)) (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 fixed.$null) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 call3formal@$obj@0@@0)))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon9_correct  (=> (! (and %lbl%+4658670 true) :lblpos +4658670) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Else_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Else_correct  (=> (! (and %lbl%+4658669 true) :lblpos +4658669) (=> (not (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 0)) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon9_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6$1_correct  (=> (! (and %lbl%+4658667 true) :lblpos +4658667) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Else_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$Return_correct  (=> (! (and %lbl%+4658666 true) :lblpos +4658666) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6$1_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block19_correct  (=> (! (and %lbl%+4658665 true) :lblpos +4658665) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$Return_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block18_correct  (=> (! (and %lbl%+4658664 true) :lblpos +4658664) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block19_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block17_correct  (=> (! (and %lbl%+4658663 true) :lblpos +4658663) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 0) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block18_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon4_Then_correct  (=> (! (and %lbl%+4658660 true) :lblpos +4658660) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$b5@3 0) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block17_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon3_correct  (=> (! (and %lbl%+4658662 true) :lblpos +4658662) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 1) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block18_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon4_Else_correct  (=> (! (and %lbl%+4658661 true) :lblpos +4658661) (=> (not (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$b5@3 0)) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon3_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon0_correct  (=> (! (and %lbl%+4658659 true) :lblpos +4658659) (=> (forall ((T@@5 T@U) ) (!  (=> (= (type T@@5) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@10 fixed.$null fixed.$type) T@@5))
 :qid |RSPROCMo.118747:20|
 :skolemid |26788|
 :no-pattern (type T@@5)
 :no-pattern (U_2_int T@@5)
 :no-pattern (U_2_bool T@@5)
)) (=> (and (and (and (forall ((_r@@11 T@U) ) (!  (=> (= (type _r@@11) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@11)) 0))
 :qid |RSPROCMo.118748:20|
 :skolemid |26789|
 :no-pattern (type _r@@11)
 :no-pattern (U_2_int _r@@11)
 :no-pattern (U_2_bool _r@@11)
)) (forall ((_r@@12 T@U) ) (!  (=> (= (type _r@@12) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@12)) 0))
 :qid |RSPROCMo.118749:20|
 :skolemid |26790|
 :no-pattern (type _r@@12)
 :no-pattern (U_2_int _r@@12)
 :no-pattern (U_2_bool _r@@12)
))) (and (UOrdering2 (MapType0Select fixed.$heap@10 $in_parameter__1 fixed.$type) fixed.java.math.BigInteger) (not (= $in_parameter__1 fixed.$null)))) (and (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l3@3 (U_2_int (MapType0Select fixed.$heap@10 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$i1@3 (fixed.$shlInt 1 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1))) (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l4@3 (fixed.$bitAnd inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l3@3 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$i1@3)) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$b5@3 (fixed.$cmpInt inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l4@3 0))))) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon4_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon4_Else_correct))))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$Entry_correct  (=> (! (and %lbl%+4658658 true) :lblpos +4658658) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon0_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6_correct  (=> (! (and %lbl%+4658657 true) :lblpos +4658657) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$Entry_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Else_correct  (=> (! (and %lbl%+4658656 true) :lblpos +4658656) (=> (> inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3$1_correct  (=> (! (and %lbl%+4658654 true) :lblpos +4658654) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Else_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$Return_correct  (=> (! (and %lbl%+4658653 true) :lblpos +4658653) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3$1_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block16_correct  (=> (! (and %lbl%+4658652 true) :lblpos +4658652) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$Return_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block15_correct  (=> (! (and %lbl%+4658651 true) :lblpos +4658651) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$i8@3) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block16_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon12_Then_correct  (=> (! (and %lbl%+4658648 true) :lblpos +4658648) (=> (<= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b5@4 0) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block15_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block14_correct  (=> (! (and %lbl%+4658647 true) :lblpos +4658647) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b5@4 (fixed.$cmpInt inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$l7@3 0)) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon12_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon12_Else_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block13_correct  (=> (! (and %lbl%+4658646 true) :lblpos +4658646) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block14_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block12_correct  (=> (! (and %lbl%+4658645 true) :lblpos +4658645) (=> (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l4@3 (U_2_int (MapType0Select fixed.$heap@10 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l6@4 (- 0 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l4@3))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block13_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon11_Then_correct  (=> (! (and %lbl%+4658642 true) :lblpos +4658642) (=> (<= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b3@3 0) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block12_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon6_correct  (=> (! (and %lbl%+4658644 true) :lblpos +4658644) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l6@3 (U_2_int (MapType0Select fixed.$heap@10 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block13_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon11_Else_correct  (=> (! (and %lbl%+4658643 true) :lblpos +4658643) (=> (< 0 inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b3@3) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon6_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block11_correct  (=> (! (and %lbl%+4658641 true) :lblpos +4658641) (=> (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l2@3 (U_2_int (MapType0Select fixed.$heap@10 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b3@3 (fixed.$cmpInt inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l2@3 0))) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon11_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon11_Else_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon10_Then_correct  (=> (! (and %lbl%+4658638 true) :lblpos +4658638) (=> (not (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b1@3 0)) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block11_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon3_correct  (=> (! (and %lbl%+4658640 true) :lblpos +4658640) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3 1) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block16_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon10_Else_correct  (=> (! (and %lbl%+4658639 true) :lblpos +4658639) (=> (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b1@3 0) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon3_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon0_correct  (=> (! (and %lbl%+4658637 true) :lblpos +4658637) (=> (forall ((T@@6 T@U) ) (!  (=> (= (type T@@6) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@10 fixed.$null fixed.$type) T@@6))
 :qid |RSPROCMo.118602:20|
 :skolemid |26785|
 :no-pattern (type T@@6)
 :no-pattern (U_2_int T@@6)
 :no-pattern (U_2_bool T@@6)
)) (=> (and (forall ((_r@@13 T@U) ) (!  (=> (= (type _r@@13) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@13)) 0))
 :qid |RSPROCMo.118603:20|
 :skolemid |26786|
 :no-pattern (type _r@@13)
 :no-pattern (U_2_int _r@@13)
 :no-pattern (U_2_bool _r@@13)
)) (forall ((_r@@14 T@U) ) (!  (=> (= (type _r@@14) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@14)) 0))
 :qid |RSPROCMo.118604:20|
 :skolemid |26787|
 :no-pattern (type _r@@14)
 :no-pattern (U_2_int _r@@14)
 :no-pattern (U_2_bool _r@@14)
))) (=> (and (and (UOrdering2 (MapType0Select fixed.$heap@10 $in_parameter__1 fixed.$type) fixed.java.math.BigInteger) (not (= $in_parameter__1 fixed.$null))) (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l0@3 (U_2_int (MapType0Select fixed.$heap@10 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b1@3 (fixed.$cmpInt inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l0@3 0)))) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon10_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon10_Else_correct)))))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$Entry_correct  (=> (! (and %lbl%+4658636 true) :lblpos +4658636) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon0_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3_correct  (=> (! (and %lbl%+4658635 true) :lblpos +4658635) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$Entry_correct)))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Then_correct  (=> (! (and %lbl%+4658633 true) :lblpos +4658633) (=> (not (= $in_parameter__1 fixed.$null)) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Else_correct  (=> (! (and %lbl%+4658634 true) :lblpos +4658634) (=> (and (= $in_parameter__1 fixed.$null) (not (= call3formal@$obj@0 fixed.$null))) (=> (and (and (and (not (U_2_bool (MapType0Select fixed.$heap@10 call3formal@$obj@0 fixed.$alloc))) (= fixed.$objIndex@8 (+ fixed.$objIndex@7 1))) (and (= call3formal@$obj@0 (fixed.$intToRef fixed.$objIndex@7)) (= fixed.$heap@11 (MapType0Store (MapType0Store fixed.$heap@10 call3formal@$obj@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0 fixed.$type fixed.java.lang.RuntimeException)))) (and (and (= fixed.$heap@19 fixed.$heap@11) (= fixed.$objIndex@14 fixed.$objIndex@8)) (and (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 fixed.$null) (= inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 call3formal@$obj@0)))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block43_correct  (=> (! (and %lbl%+4658632 true) :lblpos +4658632) (and inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Then_correct inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Else_correct))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon0_correct  (=> (! (and %lbl%+4658631 true) :lblpos +4658631) (=> (and (forall ((T@@7 T@U) ) (!  (=> (= (type T@@7) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@7))
 :qid |RSPROCMo.118555:20|
 :skolemid |26782|
 :no-pattern (type T@@7)
 :no-pattern (U_2_int T@@7)
 :no-pattern (U_2_bool T@@7)
)) (forall ((_r@@15 T@U) ) (!  (=> (= (type _r@@15) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@15)) 0))
 :qid |RSPROCMo.118556:20|
 :skolemid |26783|
 :no-pattern (type _r@@15)
 :no-pattern (U_2_int _r@@15)
 :no-pattern (U_2_bool _r@@15)
))) (=> (and (and (forall ((_r@@16 T@U) ) (!  (=> (= (type _r@@16) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@16)) 0))
 :qid |RSPROCMo.118557:20|
 :skolemid |26784|
 :no-pattern (type _r@@16)
 :no-pattern (U_2_int _r@@16)
 :no-pattern (U_2_bool _r@@16)
)) (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.math.BigInteger)) (and (UOrdering2 (MapType0Select fixed.$heap $in_parameter__1 fixed.$type) fixed.java.math.BigInteger) (UOrdering2 (MapType0Select fixed.$heap inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@0 fixed.$type) fixed.java.math.BigInteger))) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block43_correct)))))
(let ((inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Entry_correct  (=> (! (and %lbl%+4658630 true) :lblpos +4658630) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+4658629 true) :lblpos +4658629) inline$fixed.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Entry_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct  (=> (! (and %lbl%+4658628 true) :lblpos +4658628) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block50_correct  (=> (! (and %lbl%+4658627 true) :lblpos +4658627) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1) (=> (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 fixed.$null) (= fixed.$heap@9 fixed.$heap@0)) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block48_correct  (=> (! (and %lbl%+4658626 true) :lblpos +4658626) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block50_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Then_correct  (=> (! (and %lbl%+4658572 true) :lblpos +4658572) (=> (>= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block48_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Else_correct  (=> (! (and %lbl%+4658606 true) :lblpos +4658606) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3@1 fixed.$null) (=> (and (and (and (not (= call3formal@$obj@0@@7 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap@4 call3formal@$obj@0@@7 fixed.$alloc)))) (and (= fixed.$objIndex@4 (+ fixed.$objIndex@3 1)) (= call3formal@$obj@0@@7 (fixed.$intToRef fixed.$objIndex@3)))) (and (and (= fixed.$heap@5 (MapType0Store (MapType0Store fixed.$heap@4 call3formal@$obj@0@@7 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@7 fixed.$type fixed.java.lang.RuntimeException)) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 fixed.$null)) (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 call3formal@$obj@0@@7) (= fixed.$heap@9 fixed.$heap@5)))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12$1_correct  (=> (! (and %lbl%+4658604 true) :lblpos +4658604) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Else_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$Return_correct  (=> (! (and %lbl%+4658603 true) :lblpos +4658603) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$block5_correct  (=> (! (and %lbl%+4658602 true) :lblpos +4658602) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$Return_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$anon0$1_correct  (=> (! (and %lbl%+4658601 true) :lblpos +4658601) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$block5_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$Return_correct  (=> (! (and %lbl%+4658600 true) :lblpos +4658600) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$anon0$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$block1_correct  (=> (! (and %lbl%+4658599 true) :lblpos +4658599) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$Return_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1_correct  (=> (! (and %lbl%+4658598 true) :lblpos +4658598) (=> (= fixed.$heap@4 (MapType0Store fixed.$heap@3 call3formal@$obj@0@@8 fixed.long$java.math.BigInteger$value0 (int_2_U inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l2@3))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$block1_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+4658597 true) :lblpos +4658597) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+4658596 true) :lblpos +4658596) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+4658595 true) :lblpos +4658595) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$anon0_correct  (=> (! (and %lbl%+4658594 true) :lblpos +4658594) (=> (forall ((T@@8 T@U) ) (!  (=> (= (type T@@8) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@3 fixed.$null fixed.$type) T@@8))
 :qid |RSPROCMo.118318:20|
 :skolemid |26773|
 :no-pattern (type T@@8)
 :no-pattern (U_2_int T@@8)
 :no-pattern (U_2_bool T@@8)
)) (=> (and (and (forall ((_r@@17 T@U) ) (!  (=> (= (type _r@@17) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@17)) 0))
 :qid |RSPROCMo.118319:20|
 :skolemid |26774|
 :no-pattern (type _r@@17)
 :no-pattern (U_2_int _r@@17)
 :no-pattern (U_2_bool _r@@17)
)) (forall ((_r@@18 T@U) ) (!  (=> (= (type _r@@18) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@18)) 0))
 :qid |RSPROCMo.118320:20|
 :skolemid |26775|
 :no-pattern (type _r@@18)
 :no-pattern (U_2_int _r@@18)
 :no-pattern (U_2_bool _r@@18)
))) (and (UOrdering2 (MapType0Select fixed.$heap@3 call3formal@$obj@0@@8 fixed.$type) fixed.java.math.BigInteger) (not (= call3formal@$obj@0@@8 fixed.$null)))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$Entry_correct  (=> (! (and %lbl%+4658593 true) :lblpos +4658593) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$anon0_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$anon0_correct  (=> (! (and %lbl%+4658592 true) :lblpos +4658592) (=> (forall ((T@@9 T@U) ) (!  (=> (= (type T@@9) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@0 fixed.$null fixed.$type) T@@9))
 :qid |RSPROCMo.118285:20|
 :skolemid |26770|
 :no-pattern (type T@@9)
 :no-pattern (U_2_int T@@9)
 :no-pattern (U_2_bool T@@9)
)) (=> (and (and (forall ((_r@@19 T@U) ) (!  (=> (= (type _r@@19) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@19)) 0))
 :qid |RSPROCMo.118286:20|
 :skolemid |26771|
 :no-pattern (type _r@@19)
 :no-pattern (U_2_int _r@@19)
 :no-pattern (U_2_bool _r@@19)
)) (forall ((_r@@20 T@U) ) (!  (=> (= (type _r@@20) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@20)) 0))
 :qid |RSPROCMo.118287:20|
 :skolemid |26772|
 :no-pattern (type _r@@20)
 :no-pattern (U_2_int _r@@20)
 :no-pattern (U_2_bool _r@@20)
))) (and (UOrdering2 (MapType0Select fixed.$heap@0 $in_parameter__0 fixed.$type) fixed.java.math.BigInteger) (not (= $in_parameter__0 fixed.$null)))) (=> (and (and (and (UOrdering2 (MapType0Select fixed.$heap@0 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$return@2 fixed.$type) fixed.java.math.BigInteger) (not (= call3formal@$obj@0@@8 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap@0 call3formal@$obj@0@@8 fixed.$alloc))) (= fixed.$objIndex@3 (+ fixed.$objIndex@0 1)))) (and (and (= call3formal@$obj@0@@8 (fixed.$intToRef fixed.$objIndex@0)) (= fixed.$heap@3 (MapType0Store (MapType0Store fixed.$heap@0 call3formal@$obj@0@@8 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@8 fixed.$type fixed.java.math.BigInteger))) (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l1@3 (U_2_int (MapType0Select fixed.$heap@3 $in_parameter__0 fixed.long$java.math.BigInteger$value0))) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l2@3 (fixed.$shlInt inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$$l1@3 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1))))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$$la$init$ra$$long$0$Entry_correct))))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$Entry_correct  (=> (! (and %lbl%+4658591 true) :lblpos +4658591) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$anon0_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12_correct  (=> (! (and %lbl%+4658590 true) :lblpos +4658590) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$shiftLeft$int$0$Entry_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Then_correct  (=> (! (and %lbl%+4658588 true) :lblpos +4658588) (=> (not (= $in_parameter__0 fixed.$null)) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Else_correct  (=> (! (and %lbl%+4658589 true) :lblpos +4658589) (=> (= $in_parameter__0 fixed.$null) (=> (and (and (and (not (= call3formal@$obj@0@@6 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap@0 call3formal@$obj@0@@6 fixed.$alloc)))) (and (= fixed.$objIndex@2 (+ fixed.$objIndex@0 1)) (= call3formal@$obj@0@@6 (fixed.$intToRef fixed.$objIndex@0)))) (and (and (= fixed.$heap@2 (MapType0Store (MapType0Store fixed.$heap@0 call3formal@$obj@0@@6 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@6 fixed.$type fixed.java.lang.RuntimeException)) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 fixed.$null)) (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 call3formal@$obj@0@@6) (= fixed.$heap@9 fixed.$heap@2)))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon9_correct  (=> (! (and %lbl%+4658587 true) :lblpos +4658587) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Else_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Else_correct  (=> (! (and %lbl%+4658586 true) :lblpos +4658586) (=> (not (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 0)) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon9_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6$1_correct  (=> (! (and %lbl%+4658584 true) :lblpos +4658584) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Else_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$Return_correct  (=> (! (and %lbl%+4658583 true) :lblpos +4658583) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block19_correct  (=> (! (and %lbl%+4658582 true) :lblpos +4658582) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$Return_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block18_correct  (=> (! (and %lbl%+4658581 true) :lblpos +4658581) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block19_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block17_correct  (=> (! (and %lbl%+4658580 true) :lblpos +4658580) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 0) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block18_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon4_Then_correct  (=> (! (and %lbl%+4658577 true) :lblpos +4658577) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$b5@3 0) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block17_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon3_correct  (=> (! (and %lbl%+4658579 true) :lblpos +4658579) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$z0@3 1) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$block18_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon4_Else_correct  (=> (! (and %lbl%+4658578 true) :lblpos +4658578) (=> (not (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$b5@3 0)) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon3_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon0_correct  (=> (! (and %lbl%+4658576 true) :lblpos +4658576) (=> (forall ((T@@10 T@U) ) (!  (=> (= (type T@@10) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@0 fixed.$null fixed.$type) T@@10))
 :qid |RSPROCMo.118175:20|
 :skolemid |26767|
 :no-pattern (type T@@10)
 :no-pattern (U_2_int T@@10)
 :no-pattern (U_2_bool T@@10)
)) (=> (and (and (and (forall ((_r@@21 T@U) ) (!  (=> (= (type _r@@21) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@21)) 0))
 :qid |RSPROCMo.118176:20|
 :skolemid |26768|
 :no-pattern (type _r@@21)
 :no-pattern (U_2_int _r@@21)
 :no-pattern (U_2_bool _r@@21)
)) (forall ((_r@@22 T@U) ) (!  (=> (= (type _r@@22) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@22)) 0))
 :qid |RSPROCMo.118177:20|
 :skolemid |26769|
 :no-pattern (type _r@@22)
 :no-pattern (U_2_int _r@@22)
 :no-pattern (U_2_bool _r@@22)
))) (and (UOrdering2 (MapType0Select fixed.$heap@0 $in_parameter__1 fixed.$type) fixed.java.math.BigInteger) (not (= $in_parameter__1 fixed.$null)))) (and (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l3@3 (U_2_int (MapType0Select fixed.$heap@0 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$i1@3 (fixed.$shlInt 1 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1))) (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l4@3 (fixed.$bitAnd inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l3@3 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$i1@3)) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$b5@3 (fixed.$cmpInt inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$$l4@3 0))))) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon4_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon4_Else_correct))))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$Entry_correct  (=> (! (and %lbl%+4658575 true) :lblpos +4658575) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$anon0_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6_correct  (=> (! (and %lbl%+4658574 true) :lblpos +4658574) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$testBit$int$0$Entry_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Else_correct  (=> (! (and %lbl%+4658573 true) :lblpos +4658573) (=> (> inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1@1) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3$1_correct  (=> (! (and %lbl%+4658571 true) :lblpos +4658571) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Else_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$Return_correct  (=> (! (and %lbl%+4658570 true) :lblpos +4658570) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3$1_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block16_correct  (=> (! (and %lbl%+4658569 true) :lblpos +4658569) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$Return_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block15_correct  (=> (! (and %lbl%+4658568 true) :lblpos +4658568) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$i8@3) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block16_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon12_Then_correct  (=> (! (and %lbl%+4658565 true) :lblpos +4658565) (=> (<= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b5@4 0) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block15_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block14_correct  (=> (! (and %lbl%+4658564 true) :lblpos +4658564) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b5@4 (fixed.$cmpInt inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$l7@3 0)) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon12_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon12_Else_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block13_correct  (=> (! (and %lbl%+4658563 true) :lblpos +4658563) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block14_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block12_correct  (=> (! (and %lbl%+4658562 true) :lblpos +4658562) (=> (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l4@3 (U_2_int (MapType0Select fixed.$heap@0 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l6@4 (- 0 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l4@3))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block13_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon11_Then_correct  (=> (! (and %lbl%+4658559 true) :lblpos +4658559) (=> (<= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b3@3 0) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block12_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon6_correct  (=> (! (and %lbl%+4658561 true) :lblpos +4658561) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l6@3 (U_2_int (MapType0Select fixed.$heap@0 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block13_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon11_Else_correct  (=> (! (and %lbl%+4658560 true) :lblpos +4658560) (=> (< 0 inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b3@3) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon6_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block11_correct  (=> (! (and %lbl%+4658558 true) :lblpos +4658558) (=> (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l2@3 (U_2_int (MapType0Select fixed.$heap@0 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b3@3 (fixed.$cmpInt inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l2@3 0))) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon11_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon11_Else_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon10_Then_correct  (=> (! (and %lbl%+4658555 true) :lblpos +4658555) (=> (not (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b1@3 0)) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block11_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon3_correct  (=> (! (and %lbl%+4658557 true) :lblpos +4658557) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$return@3 1) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$block16_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon10_Else_correct  (=> (! (and %lbl%+4658556 true) :lblpos +4658556) (=> (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b1@3 0) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon3_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon0_correct  (=> (! (and %lbl%+4658554 true) :lblpos +4658554) (=> (forall ((T@@11 T@U) ) (!  (=> (= (type T@@11) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@0 fixed.$null fixed.$type) T@@11))
 :qid |RSPROCMo.118030:20|
 :skolemid |26764|
 :no-pattern (type T@@11)
 :no-pattern (U_2_int T@@11)
 :no-pattern (U_2_bool T@@11)
)) (=> (and (forall ((_r@@23 T@U) ) (!  (=> (= (type _r@@23) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@23)) 0))
 :qid |RSPROCMo.118031:20|
 :skolemid |26765|
 :no-pattern (type _r@@23)
 :no-pattern (U_2_int _r@@23)
 :no-pattern (U_2_bool _r@@23)
)) (forall ((_r@@24 T@U) ) (!  (=> (= (type _r@@24) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@24)) 0))
 :qid |RSPROCMo.118032:20|
 :skolemid |26766|
 :no-pattern (type _r@@24)
 :no-pattern (U_2_int _r@@24)
 :no-pattern (U_2_bool _r@@24)
))) (=> (and (and (UOrdering2 (MapType0Select fixed.$heap@0 $in_parameter__1 fixed.$type) fixed.java.math.BigInteger) (not (= $in_parameter__1 fixed.$null))) (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l0@3 (U_2_int (MapType0Select fixed.$heap@0 $in_parameter__1 fixed.long$java.math.BigInteger$value0))) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$b1@3 (fixed.$cmpInt inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$$l0@3 0)))) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon10_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon10_Else_correct)))))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$Entry_correct  (=> (! (and %lbl%+4658553 true) :lblpos +4658553) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$anon0_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3_correct  (=> (! (and %lbl%+4658552 true) :lblpos +4658552) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$inline$java.math.BigInteger$bitLength$$0$Entry_correct)))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Then_correct  (=> (! (and %lbl%+4658550 true) :lblpos +4658550) (=> (not (= $in_parameter__1 fixed.$null)) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Else_correct  (=> (! (and %lbl%+4658551 true) :lblpos +4658551) (=> (= $in_parameter__1 fixed.$null) (=> (and (and (and (not (= call3formal@$obj@0@@5 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap@0 call3formal@$obj@0@@5 fixed.$alloc)))) (and (= fixed.$objIndex@1 (+ fixed.$objIndex@0 1)) (= call3formal@$obj@0@@5 (fixed.$intToRef fixed.$objIndex@0)))) (and (and (= fixed.$heap@1 (MapType0Store (MapType0Store fixed.$heap@0 call3formal@$obj@0@@5 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@5 fixed.$type fixed.java.lang.RuntimeException)) (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@1 fixed.$null)) (and (= inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception@2 call3formal@$obj@0@@5) (= fixed.$heap@9 fixed.$heap@1)))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block47_correct  (=> (! (and %lbl%+4658549 true) :lblpos +4658549) (and inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Then_correct inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Else_correct))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon0_correct  (=> (! (and %lbl%+4658548 true) :lblpos +4658548) (=> (and (forall ((T@@12 T@U) ) (!  (=> (= (type T@@12) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@12))
 :qid |RSPROCMo.117983:20|
 :skolemid |26761|
 :no-pattern (type T@@12)
 :no-pattern (U_2_int T@@12)
 :no-pattern (U_2_bool T@@12)
)) (forall ((_r@@25 T@U) ) (!  (=> (= (type _r@@25) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@25)) 0))
 :qid |RSPROCMo.117984:20|
 :skolemid |26762|
 :no-pattern (type _r@@25)
 :no-pattern (U_2_int _r@@25)
 :no-pattern (U_2_bool _r@@25)
))) (=> (and (and (forall ((_r@@26 T@U) ) (!  (=> (= (type _r@@26) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@26)) 0))
 :qid |RSPROCMo.117985:20|
 :skolemid |26763|
 :no-pattern (type _r@@26)
 :no-pattern (U_2_int _r@@26)
 :no-pattern (U_2_bool _r@@26)
)) (UOrdering2 (MapType0Select fixed.$heap $in_parameter__0 fixed.$type) fixed.java.math.BigInteger)) (and (UOrdering2 (MapType0Select fixed.$heap inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return@0 fixed.$type) fixed.java.math.BigInteger) (UOrdering2 (MapType0Select fixed.$heap $in_parameter__1 fixed.$type) fixed.java.math.BigInteger))) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block47_correct)))))
(let ((inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Entry_correct  (=> (! (and %lbl%+4658547 true) :lblpos +4658547) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+4658546 true) :lblpos +4658546) inline$unsafe.ModPow2$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+4715076 true) :lblpos +4715076) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+4715415 true) :lblpos +4715415) q@0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
