public abstract class fr.xephi.authme.security.crypts.UnsaltedMethod extends java.lang.Object implements fr.xephi.authme.security.crypts.EncryptionMethod
{
    public boolean safeMode;

    public void <init>()
    {
        fr.xephi.authme.security.crypts.UnsaltedMethod r0;

        r0 := @this: fr.xephi.authme.security.crypts.UnsaltedMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<fr.xephi.authme.security.crypts.UnsaltedMethod: boolean safeMode> = 0;

        return;
    }

    public abstract java.lang.String computeHash(java.lang.String);

    public fr.xephi.authme.security.crypts.HashedPassword computeHash(java.lang.String, java.lang.String)
    {
        fr.xephi.authme.security.crypts.UnsaltedMethod r0;
        java.lang.String r1, r2, $r4;
        fr.xephi.authme.security.crypts.HashedPassword $r3;

        r0 := @this: fr.xephi.authme.security.crypts.UnsaltedMethod;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new fr.xephi.authme.security.crypts.HashedPassword;

        $r4 = virtualinvoke r0.<fr.xephi.authme.security.crypts.UnsaltedMethod: java.lang.String computeHash(java.lang.String)>(r1);

        specialinvoke $r3.<fr.xephi.authme.security.crypts.HashedPassword: void <init>(java.lang.String)>($r4);

        return $r3;
    }

    public java.lang.String computeHash(java.lang.String, java.lang.String, java.lang.String)
    {
        fr.xephi.authme.security.crypts.UnsaltedMethod r0;
        java.lang.String r1, r2, r3, $r4;

        r0 := @this: fr.xephi.authme.security.crypts.UnsaltedMethod;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<fr.xephi.authme.security.crypts.UnsaltedMethod: java.lang.String computeHash(java.lang.String)>(r1);

        return $r4;
    }

    public boolean comparePassword(java.lang.String, fr.xephi.authme.security.crypts.HashedPassword, java.lang.String)
    {
        fr.xephi.authme.security.crypts.UnsaltedMethod r0;
        java.lang.String r1, r3, $r4, $r5;
        fr.xephi.authme.security.crypts.HashedPassword r2;
        boolean $z0;

        r0 := @this: fr.xephi.authme.security.crypts.UnsaltedMethod;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: fr.xephi.authme.security.crypts.HashedPassword;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r2.<fr.xephi.authme.security.crypts.HashedPassword: java.lang.String getHash()>();

        $r5 = virtualinvoke r0.<fr.xephi.authme.security.crypts.UnsaltedMethod: java.lang.String computeHash(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<fr.xephi.authme.security.crypts.UnsaltedMethod: boolean isEqual_unsafe(java.lang.String,java.lang.Object)>($r4, $r5);

        return $z0;
    }

    public java.lang.String generateSalt()
    {
        fr.xephi.authme.security.crypts.UnsaltedMethod r0;

        r0 := @this: fr.xephi.authme.security.crypts.UnsaltedMethod;

        return null;
    }

    public boolean hasSeparateSalt()
    {
        fr.xephi.authme.security.crypts.UnsaltedMethod r0;

        r0 := @this: fr.xephi.authme.security.crypts.UnsaltedMethod;

        return 0;
    }

    public boolean isEqual_unsafe(java.lang.String, java.lang.Object)
    {
        fr.xephi.authme.security.crypts.UnsaltedMethod r0;
        java.lang.String r1, r3;
        java.lang.Object r2, $r8, $r12, $r16, $r18, $r22;
        char[] r4, r5;
        boolean z0, $z1, $z2, $z3, z4, z5;
        java.lang.Boolean $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r17, $r19, $r20, $r21, $r23;
        int $i0, $i1, i6, i7;
        char $c2, $c3;
        long $l4, $l5;

        r0 := @this: fr.xephi.authme.security.crypts.UnsaltedMethod;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        z4 = 0;

        z5 = 0;

        if r1 != r2 goto label1;

        return 1;

     label1:
        $z1 = r2 instanceof java.lang.String;

        if $z1 == 0 goto label4;

        r3 = (java.lang.String) r2;

        i6 = virtualinvoke r1.<java.lang.String: int length()>();

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if i6 != $i0 goto label4;

        r4 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        r5 = virtualinvoke r3.<java.lang.String: char[] toCharArray()>();

        i7 = 0;

     label2:
        $i1 = i6;

        i6 = i6 + -1;

        if $i1 == 0 goto label3;

        $c2 = r4[i7];

        $l5 = (long) $c2;

        $c3 = r5[i7];

        $l4 = (long) $c3;

        z0 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: boolean neq(long,long)>($l5, $l4);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r16 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z5, $r14, $r15);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r18 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r16, $r17);

        $r19 = (java.lang.Boolean) $r18;

        z4 = virtualinvoke $r19.<java.lang.Boolean: boolean booleanValue()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z5);

        $r22 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r20, $r21);

        $r23 = (java.lang.Boolean) $r22;

        z5 = virtualinvoke $r23.<java.lang.Boolean: boolean booleanValue()>();

        i7 = i7 + 1;

        goto label2;

     label3:
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r12 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z5, $r10, $r11);

        $r13 = (java.lang.Boolean) $r12;

        $z3 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;

     label4:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z5, $r6, $r7);

        $r9 = (java.lang.Boolean) $r8;

        $z2 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;
    }

    public static boolean MessageDigestisEqual(byte[], byte[])
    {
        byte[] r0, r1;
        int $i0, $i1, $i2, i7;
        byte $b3, $b4, $b5, b6;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        b6 = 0;

        i7 = 0;

     label5:
        $i2 = lengthof r0;

        if i7 >= $i2 goto label6;

        $b4 = r0[i7];

        $b3 = r1[i7];

        $b5 = $b4 ^ $b3;

        b6 = b6 | $b5;

        i7 = i7 + 1;

        goto label5;

     label6:
        if b6 != 0 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        return $z0;
    }
}
