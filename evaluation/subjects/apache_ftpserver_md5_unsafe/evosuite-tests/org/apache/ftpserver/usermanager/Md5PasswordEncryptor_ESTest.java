/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 12:48:25 GMT 2022
 */

package org.apache.ftpserver.usermanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.ftpserver.usermanager.Md5PasswordEncryptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Md5PasswordEncryptor_ESTest extends Md5PasswordEncryptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(false);
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("6#CIc{W2E@>i", false, 1, "cS{yB1)@qToNJ", 1, (-1160));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      // Undeclared exception!
      try { 
        md5PasswordEncryptor0.regionMatches((String) null, false, 123, (String) null, 123, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ftpserver.usermanager.Md5PasswordEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      // Undeclared exception!
      try { 
        md5PasswordEncryptor0.equalsIgnoreCase((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ftpserver.usermanager.Md5PasswordEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(true);
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("passwordToCheck can not be null", true, 2, "storedPassword can not be null", 10, 10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(false);
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("storedPassword can not be null", true, 1, "storedPassword can not be null", 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(true);
      boolean boolean0 = md5PasswordEncryptor0.equalsIgnoreCase("}hHK`o ^P", "I{<nH;7;+(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(true);
      boolean boolean0 = md5PasswordEncryptor0.equalsIgnoreCase("1BAFD557D0DEDB6F494534345DDE1B50", "1BAFD557D0DEDB6F494534345DDE1B50");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(false);
      boolean boolean0 = md5PasswordEncryptor0.equalsIgnoreCase("OTtA^CCP/;~.b", "storedPassword can not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(true);
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("3R];~;~qDV", true, 1, "org.apache.ftpserver.util.StringUtils", 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("F`g", false, 1, "q2]", 1, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("7F138A09169B250E9DCB378140907378", false, 10, "MD5", 10, 10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(true);
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("S2B>ha}ta?Q`yyNHmy", true, 52, "3R];~;~qDV", 30, 8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(true);
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("@~voI^fvBt[", true, (-1), "@~voI^fvBt[", 623, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      boolean boolean0 = md5PasswordEncryptor0.regionMatches("Z^", false, (-743), "Z^", (-743), (-743));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      boolean boolean0 = md5PasswordEncryptor0.matches("G>)Ok", "6888CD8644A2A4C219A2E661B1962708");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      boolean boolean0 = md5PasswordEncryptor0.matches("F`g", "F`g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      boolean boolean0 = md5PasswordEncryptor0.equalsIgnoreCase("503B814351FE5AD09D816AEB6086852C", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      // Undeclared exception!
      try { 
        md5PasswordEncryptor0.matches((String) null, "D41D8CD98F00B204E9800998ECF8427E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // passwordToCheck can not be null
         //
         verifyException("org.apache.ftpserver.usermanager.Md5PasswordEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      // Undeclared exception!
      try { 
        md5PasswordEncryptor0.matches((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // storedPassword can not be null
         //
         verifyException("org.apache.ftpserver.usermanager.Md5PasswordEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor(false);
      boolean boolean0 = md5PasswordEncryptor0.equalsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Md5PasswordEncryptor md5PasswordEncryptor0 = new Md5PasswordEncryptor();
      String string0 = md5PasswordEncryptor0.encrypt("[F`g");
      assertEquals("503B814351FE5AD09D816AEB6086852C", string0);
  }
}
