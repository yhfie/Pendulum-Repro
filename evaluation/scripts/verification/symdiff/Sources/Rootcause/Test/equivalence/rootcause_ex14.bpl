//v1 vs. v3 for ex3, auto generated by symdiff

var {:extern} v3.Mem: [name][int]int;

var {:extern} v3.alloc: int;

var {:extern} v3.Mem_T.INT4: [int]int;

var {:extern} v3.Mem_T.op1__EXPR: [int]int;

var {:extern} v3.Mem_T.op2__EXPR: [int]int;

var {:extern} v3.Mem_T.oper__EXPR: [int]int;

var {:extern} v3.Mem_T.result__EXPR: [int]int;

var {:extern} v3.detChoiceCnt: int;

var {:extern} v3.Res_KERNEL_SOURCE: [int]int;

var {:extern} v3.Res_PROBED: [int]int;

const {:extern} unique v3.T.oper__EXPR: name;

const {:extern} unique v3.T.op1__EXPR: name;

const {:extern} unique v3.T.op2__EXPR: name;

const {:extern} unique v3.T.result__EXPR: name;

const {:extern} unique v3.T.INT4: name;

const {:extern} unique v3.T.PINT4: name;

const {:extern} unique v3.T.PP_EXPR: name;

const {:extern} unique v3.T.P_EXPR: name;

const {:extern} unique v3.T._EXPR: name;

const {:extern} {:model_const "op"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 22} unique v3.__ctobpl_const_11: int;

const {:extern} {:model_const "op"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 17} unique v3.__ctobpl_const_1: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 17} unique v3.__ctobpl_const_2: int;

const {:extern} {:model_const "e->oper"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 17} unique v3.__ctobpl_const_3: int;

const {:extern} {:model_const "e->op1"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 18} unique v3.__ctobpl_const_6: int;

const {:extern} {:model_const "a2"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 19} unique v3.__ctobpl_const_7: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 19} unique v3.__ctobpl_const_8: int;

const {:extern} {:model_const "e->op2"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 19} unique v3.__ctobpl_const_9: int;

const {:extern} {:model_const "res"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 20} unique v3.__ctobpl_const_10: int;

const {:extern} {:model_const "a1"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 18} unique v3.__ctobpl_const_4: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 18} unique v3.__ctobpl_const_5: int;

const {:extern} {:model_const "res"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 32} unique v3.__ctobpl_const_14: int;

const {:extern} {:model_const "a1"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 27} unique v3.__ctobpl_const_19: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 32} unique v3.__ctobpl_const_12: int;

const {:extern} {:model_const "a2"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 25} unique v3.__ctobpl_const_17: int;

const {:extern} {:model_const "a1"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 29} unique v3.__ctobpl_const_22: int;

const {:extern} {:model_const "res"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 27} unique v3.__ctobpl_const_18: int;

const {:extern} {:model_const "res"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 25} unique v3.__ctobpl_const_15: int;

const {:extern} {:model_const "res"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 29} unique v3.__ctobpl_const_21: int;

const {:extern} {:model_const "a1"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 25} unique v3.__ctobpl_const_16: int;

const {:extern} {:model_const "a2"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 27} unique v3.__ctobpl_const_20: int;

const {:extern} {:model_const "e->result"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 32} unique v3.__ctobpl_const_13: int;

const {:extern} {:model_const "a2"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceLine 29} unique v3.__ctobpl_const_23: int;

function {:extern} v3.OneByteToInt(arg_0: byte) : int;

function {:extern} v3.TwoBytesToInt(arg_0: byte, arg_1: byte) : int;

function {:extern} v3.FourBytesToInt(arg_0: byte, arg_1: byte, arg_2: byte, arg_3: byte) : int;

function {:extern} v3.Field(arg_0: int) : name;

function {:extern} v3.Base(arg_0: int) : int;

function {:extern} v3.Match(a: int, t: name) : bool;

function {:extern} v3.MatchBase(b: int, a: int, t: name) : bool;

function {:extern} v3.HasType(v: int, t: name) : bool;

function {:extern} v3.T.Ptr(t: name) : name;

function {:extern} v3.op1__EXPR(arg_0: int) : int;

function {:extern} v3.op1__EXPRInv(arg_0: int) : int;

function {:extern} v3._S_op1__EXPR(arg_0: [int]bool) : [int]bool;

function {:extern} v3._S_op1__EXPRInv(arg_0: [int]bool) : [int]bool;

function {:extern} v3.op2__EXPR(arg_0: int) : int;

function {:extern} v3.op2__EXPRInv(arg_0: int) : int;

function {:extern} v3._S_op2__EXPR(arg_0: [int]bool) : [int]bool;

function {:extern} v3._S_op2__EXPRInv(arg_0: [int]bool) : [int]bool;

function {:extern} v3.oper__EXPR(arg_0: int) : int;

function {:extern} v3.oper__EXPRInv(arg_0: int) : int;

function {:extern} v3._S_oper__EXPR(arg_0: [int]bool) : [int]bool;

function {:extern} v3._S_oper__EXPRInv(arg_0: [int]bool) : [int]bool;

function {:extern} v3.result__EXPR(arg_0: int) : int;

function {:extern} v3.result__EXPRInv(arg_0: int) : int;

function {:extern} v3._S_result__EXPR(arg_0: [int]bool) : [int]bool;

function {:extern} v3._S_result__EXPRInv(arg_0: [int]bool) : [int]bool;

function {:extern} v3.INT_EQ(x: int, y: int) : bool;

function {:extern} v3.INT_NEQ(x: int, y: int) : bool;

function {:extern} v3.INT_ADD(x: int, y: int) : int;

function {:extern} v3.INT_SUB(x: int, y: int) : int;

function {:extern} v3.INT_LT(x: int, y: int) : bool;

function {:extern} v3.INT_ULT(x: int, y: int) : bool;

function {:extern} v3.INT_LEQ(x: int, y: int) : bool;

function {:extern} v3.INT_ULEQ(x: int, y: int) : bool;

function {:extern} v3.INT_GT(x: int, y: int) : bool;

function {:extern} v3.INT_UGT(x: int, y: int) : bool;

function {:extern} v3.INT_GEQ(x: int, y: int) : bool;

function {:extern} v3.INT_UGEQ(x: int, y: int) : bool;

function {:extern} v3.INT_AND(a: int, b: int) : int;

function {:extern} v3.INT_OR(a: int, b: int) : int;

function {:extern} v3.INT_XOR(a: int, b: int) : int;

function {:extern} v3.INT_NOT(a: int) : int;

function {:extern} v3.POW2(a: int) : bool;

function {:extern} v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(a: int, b: int, size: int) : int;

function {:extern} v3.INT_MINUS_LEFT_PTR(a: int, a_size: int, b: int) : int;

function {:extern} v3.INT_PLUS(a: int, a_size: int, b: int) : int;

function {:extern} v3.INT_MULT(a: int, b: int) : int;

function {:extern} v3.INT_DIV(a: int, b: int) : int;

function {:extern} v3.INT_BINARY_BOTH_INT(a: int, b: int) : int;

function {:extern} v3.BV32_EQ(x: bv32, y: bv32) : bool;

function {:extern} v3.BV32_NEQ(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvadd"} v3.BV32_ADD(x: bv32, y: bv32) : bv32;

function {:extern} {:bvbuiltin "bvsub"} v3.BV32_SUB(x: bv32, y: bv32) : bv32;

function {:extern} {:bvbuiltin "bvmul"} v3.BV32_MULT(x: bv32, y: bv32) : bv32;

function {:extern} {:bvbuiltin "bvudiv"} v3.BV32_DIV(x: bv32, y: bv32) : bv32;

function {:extern} {:bvbuiltin "bvult"} v3.BV32_ULT(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvslt"} v3.BV32_LT(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvule"} v3.BV32_ULEQ(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvsle"} v3.BV32_LEQ(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvugt"} v3.BV32_UGT(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvsgt"} v3.BV32_GT(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvuge"} v3.BV32_UGEQ(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvsge"} v3.BV32_GEQ(x: bv32, y: bv32) : bool;

function {:extern} {:bvbuiltin "bvand"} v3.BV32_AND(a: bv32, b: bv32) : bv32;

function {:extern} {:bvbuiltin "bvor"} v3.BV32_OR(a: bv32, b: bv32) : bv32;

function {:extern} {:bvbuiltin "bvxor"} v3.BV32_XOR(a: bv32, b: bv32) : bv32;

function {:extern} {:bvbuiltin "bvnot"} v3.BV32_NOT(a: bv32) : bv32;

function {:extern} v3.BV32_MINUS_BOTH_PTR_OR_BOTH_INT(a: bv32, b: bv32, size: bv32) : bv32;

function {:extern} v3.BV32_MINUS_LEFT_PTR(a: bv32, a_size: bv32, b: bv32) : bv32;

function {:extern} v3.BV32_PLUS(a: bv32, a_size: bv32, b: bv32) : bv32;

function {:extern} v3.BV32_BINARY_BOTH_INT(a: bv32, b: bv32) : bv32;

function {:extern} v3.bv32ToInt(arg_0: bv32) : int;

function {:extern} v3.intToBv32(arg_0: int) : bv32;

function {:extern} v3.choose(a: bool, b: int, c: int) : int;

function {:extern} v3.LIFT(a: bool) : int;

function {:extern} v3.PTR_NOT(a: int) : int;

function {:extern} v3.NULL_CHECK(a: int) : int;

function {:extern} v3.NewAlloc(x: int, y: int) : int;

function {:extern} v3.DetChoiceFunc(a: int) : int;

function {:extern} v3.Equal(arg_0: [int]bool, arg_1: [int]bool) : bool;

function {:extern} v3.Subset(arg_0: [int]bool, arg_1: [int]bool) : bool;

function {:extern} v3.Disjoint(arg_0: [int]bool, arg_1: [int]bool) : bool;

function {:extern} v3.Empty() : [int]bool;

function {:extern} v3.SetTrue() : [int]bool;

function {:extern} v3.Singleton(arg_0: int) : [int]bool;

function {:extern} v3.Reachable(arg_0: [int,int]bool, arg_1: int) : [int]bool;

function {:extern} v3.Union(arg_0: [int]bool, arg_1: [int]bool) : [int]bool;

function {:extern} v3.Intersection(arg_0: [int]bool, arg_1: [int]bool) : [int]bool;

function {:extern} v3.Difference(arg_0: [int]bool, arg_1: [int]bool) : [int]bool;

function {:extern} v3.Dereference(arg_0: [int]bool, arg_1: [int]int) : [int]bool;

function {:extern} v3.Inverse(f: [int]int, x: int) : [int]bool;

function {:extern} v3.AtLeast(arg_0: int, arg_1: int) : [int]bool;

function {:extern} v3.Rep(arg_0: int, arg_1: int) : int;

function {:extern} v3.Array(arg_0: int, arg_1: int, arg_2: int) : [int]bool;

function {:extern} v3.Unified(arg_0: [name][int]int) : [int]int;

function {:extern} v3.value_is(c: int, e: int) : bool;

axiom (forall b0: byte, c0: byte :: { v3.OneByteToInt(b0), v3.OneByteToInt(c0) } v3.OneByteToInt(b0) == v3.OneByteToInt(c0) ==> b0 == c0);

axiom (forall b0: byte, b1: byte, c0: byte, c1: byte :: { v3.TwoBytesToInt(b0, b1), v3.TwoBytesToInt(c0, c1) } v3.TwoBytesToInt(b0, b1) == v3.TwoBytesToInt(c0, c1) ==> b0 == c0 && b1 == c1);

axiom (forall b0: byte, b1: byte, b2: byte, b3: byte, c0: byte, c1: byte, c2: byte, c3: byte :: { v3.FourBytesToInt(b0, b1, b2, b3), v3.FourBytesToInt(c0, c1, c2, c3) } v3.FourBytesToInt(b0, b1, b2, b3) == v3.FourBytesToInt(c0, c1, c2, c3) ==> b0 == c0 && b1 == c1 && b2 == c2 && b3 == c3);

axiom (forall x: int :: { v3.Base(x) } v3.INT_LEQ(v3.Base(x), x));

axiom (forall a: int, t: name :: { v3.Match(a, v3.T.Ptr(t)) } v3.Match(a, v3.T.Ptr(t)) <==> v3.Field(a) == v3.T.Ptr(t));

axiom (forall b: int, a: int, t: name :: { v3.MatchBase(b, a, v3.T.Ptr(t)) } v3.MatchBase(b, a, v3.T.Ptr(t)) <==> v3.Base(a) == b);

axiom (forall v: int, t: name :: { v3.HasType(v, v3.T.Ptr(t)) } v3.HasType(v, v3.T.Ptr(t)) <==> v == 0 || (v3.INT_GT(v, 0) && v3.Match(v, t) && v3.MatchBase(v3.Base(v), v, t)));

axiom (forall x: int, S: [int]bool :: { v3._S_op1__EXPR(S)[x] } v3._S_op1__EXPR(S)[x] <==> S[v3.op1__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v3._S_op1__EXPRInv(S)[x] } v3._S_op1__EXPRInv(S)[x] <==> S[v3.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_op1__EXPR(S) } S[x] ==> v3._S_op1__EXPR(S)[v3.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_op1__EXPRInv(S) } S[x] ==> v3._S_op1__EXPRInv(S)[v3.op1__EXPRInv(x)]);

axiom (forall x: int :: { v3.op1__EXPR(x) } v3.op1__EXPR(x) == v3.INT_ADD(x, 4));

axiom (forall x: int :: { v3.op1__EXPRInv(x) } v3.op1__EXPRInv(x) == v3.INT_SUB(x, 4));

axiom (forall x: int :: { v3.op1__EXPR(x) } v3.op1__EXPR(x) == v3.INT_PLUS(x, 1, 4));

axiom (forall x: int, S: [int]bool :: { v3._S_op2__EXPR(S)[x] } v3._S_op2__EXPR(S)[x] <==> S[v3.op2__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v3._S_op2__EXPRInv(S)[x] } v3._S_op2__EXPRInv(S)[x] <==> S[v3.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_op2__EXPR(S) } S[x] ==> v3._S_op2__EXPR(S)[v3.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_op2__EXPRInv(S) } S[x] ==> v3._S_op2__EXPRInv(S)[v3.op2__EXPRInv(x)]);

axiom (forall x: int :: { v3.op2__EXPR(x) } v3.op2__EXPR(x) == v3.INT_ADD(x, 8));

axiom (forall x: int :: { v3.op2__EXPRInv(x) } v3.op2__EXPRInv(x) == v3.INT_SUB(x, 8));

axiom (forall x: int :: { v3.op2__EXPR(x) } v3.op2__EXPR(x) == v3.INT_PLUS(x, 1, 8));

axiom (forall x: int, S: [int]bool :: { v3._S_oper__EXPR(S)[x] } v3._S_oper__EXPR(S)[x] <==> S[v3.oper__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v3._S_oper__EXPRInv(S)[x] } v3._S_oper__EXPRInv(S)[x] <==> S[v3.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_oper__EXPR(S) } S[x] ==> v3._S_oper__EXPR(S)[v3.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_oper__EXPRInv(S) } S[x] ==> v3._S_oper__EXPRInv(S)[v3.oper__EXPRInv(x)]);

axiom (forall x: int :: { v3.oper__EXPR(x) } v3.oper__EXPR(x) == v3.INT_ADD(x, 0));

axiom (forall x: int :: { v3.oper__EXPRInv(x) } v3.oper__EXPRInv(x) == v3.INT_SUB(x, 0));

axiom (forall x: int :: { v3.oper__EXPR(x) } v3.oper__EXPR(x) == v3.INT_PLUS(x, 1, 0));

axiom (forall x: int, S: [int]bool :: { v3._S_result__EXPR(S)[x] } v3._S_result__EXPR(S)[x] <==> S[v3.result__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v3._S_result__EXPRInv(S)[x] } v3._S_result__EXPRInv(S)[x] <==> S[v3.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_result__EXPR(S) } S[x] ==> v3._S_result__EXPR(S)[v3.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_result__EXPRInv(S) } S[x] ==> v3._S_result__EXPRInv(S)[v3.result__EXPRInv(x)]);

axiom (forall x: int :: { v3.result__EXPR(x) } v3.result__EXPR(x) == v3.INT_ADD(x, 12));

axiom (forall x: int :: { v3.result__EXPRInv(x) } v3.result__EXPRInv(x) == v3.INT_SUB(x, 12));

axiom (forall x: int :: { v3.result__EXPR(x) } v3.result__EXPR(x) == v3.INT_PLUS(x, 1, 12));

axiom (forall x: int, y: int :: {:extern} { v3.INT_EQ(x, y): bool } v3.INT_EQ(x, y): bool <==> x == y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_NEQ(x, y): bool } v3.INT_NEQ(x, y): bool <==> x != y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_ADD(x, y): int } v3.INT_ADD(x, y): int == x + y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_SUB(x, y): int } v3.INT_SUB(x, y): int == x - y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_LT(x, y): bool } v3.INT_LT(x, y): bool <==> x < y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_ULT(x, y): bool } v3.INT_ULT(x, y): bool <==> x < y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_LEQ(x, y): bool } v3.INT_LEQ(x, y): bool <==> x <= y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_ULEQ(x, y): bool } v3.INT_ULEQ(x, y): bool <==> x <= y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_GT(x, y): bool } v3.INT_GT(x, y): bool <==> x > y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_UGT(x, y): bool } v3.INT_UGT(x, y): bool <==> x > y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_GEQ(x, y): bool } v3.INT_GEQ(x, y): bool <==> x >= y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_UGEQ(x, y): bool } v3.INT_UGEQ(x, y): bool <==> x >= y);

axiom (forall a: int, b: int :: { v3.INT_AND(a, b) } a == b ==> v3.INT_AND(a, b) == a);

axiom (forall a: int, b: int :: { v3.INT_AND(a, b) } v3.POW2(a) && v3.POW2(b) && a != b ==> v3.INT_AND(a, b) == 0);

axiom (forall a: int, b: int :: { v3.INT_AND(a, b) } a == 0 || b == 0 ==> v3.INT_AND(a, b) == 0);

axiom v3.POW2(1);

axiom v3.POW2(2);

axiom v3.POW2(4);

axiom v3.POW2(8);

axiom v3.POW2(16);

axiom v3.POW2(32);

axiom v3.POW2(64);

axiom v3.POW2(128);

axiom v3.POW2(256);

axiom v3.POW2(512);

axiom v3.POW2(1024);

axiom v3.POW2(2048);

axiom v3.POW2(4096);

axiom v3.POW2(8192);

axiom v3.POW2(16384);

axiom v3.POW2(32768);

axiom v3.POW2(65536);

axiom v3.POW2(131072);

axiom v3.POW2(262144);

axiom v3.POW2(524288);

axiom v3.POW2(1048576);

axiom v3.POW2(2097152);

axiom v3.POW2(4194304);

axiom v3.POW2(8388608);

axiom v3.POW2(16777216);

axiom v3.POW2(33554432);

axiom (forall a: int, b: int, size: int :: { v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) } size * v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) <= a - b && a - b < size * (v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) + 1));

axiom (forall a: int, a_size: int, b: int :: { v3.INT_MINUS_LEFT_PTR(a, a_size, b) } v3.INT_MINUS_LEFT_PTR(a, a_size, b) == a - a_size * b);

axiom (forall a: int, a_size: int, b: int :: { v3.INT_PLUS(a, a_size, b) } v3.INT_PLUS(a, a_size, b) == a + a_size * b);

axiom (forall a: int, b: int :: { v3.INT_MULT(a, b) } v3.INT_MULT(a, b) == a * b);

axiom (forall a: int, b: int :: { v3.INT_DIV(a, b) } a >= 0 && b > 0 ==> b * v3.INT_DIV(a, b) <= a && a < b * (v3.INT_DIV(a, b) + 1));

axiom (forall a: int, b: int :: { v3.INT_DIV(a, b) } a >= 0 && b < 0 ==> b * v3.INT_DIV(a, b) <= a && a < b * (v3.INT_DIV(a, b) - 1));

axiom (forall a: int, b: int :: { v3.INT_DIV(a, b) } a < 0 && b > 0 ==> b * v3.INT_DIV(a, b) >= a && a > b * (v3.INT_DIV(a, b) - 1));

axiom (forall a: int, b: int :: { v3.INT_DIV(a, b) } a < 0 && b < 0 ==> b * v3.INT_DIV(a, b) >= a && a > b * (v3.INT_DIV(a, b) + 1));

axiom (forall x: bv32, y: bv32 :: {:extern} { v3.BV32_EQ(x, y): bool } v3.BV32_EQ(x, y): bool <==> x == y);

axiom (forall x: bv32, y: bv32 :: {:extern} { v3.BV32_NEQ(x, y): bool } v3.BV32_NEQ(x, y): bool <==> x != y);

axiom (forall a: bv32, b: bv32, size: bv32 :: {:extern} { v3.BV32_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size): bv32 } v3.BV32_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size): bv32 == v3.BV32_DIV(v3.BV32_SUB(a, b), size));

axiom (forall a: bv32, a_size: bv32, b: bv32 :: {:extern} { v3.BV32_MINUS_LEFT_PTR(a, a_size, b): bv32 } v3.BV32_MINUS_LEFT_PTR(a, a_size, b): bv32 == v3.BV32_SUB(a, v3.BV32_MULT(a_size, b)));

axiom (forall a: bv32, a_size: bv32, b: bv32 :: {:extern} { v3.BV32_PLUS(a, a_size, b): bv32 } v3.BV32_PLUS(a, a_size, b): bv32 == v3.BV32_ADD(a, v3.BV32_MULT(a_size, b)));

axiom (forall a: bool, b: int, c: int :: { v3.choose(a, b, c) } a ==> v3.choose(a, b, c) == b);

axiom (forall a: bool, b: int, c: int :: { v3.choose(a, b, c) } !a ==> v3.choose(a, b, c) == c);

axiom (forall a: bool :: { v3.LIFT(a) } a <==> v3.LIFT(a) != 0);

axiom (forall a: int :: { v3.PTR_NOT(a) } a == 0 ==> v3.PTR_NOT(a) != 0);

axiom (forall a: int :: { v3.PTR_NOT(a) } a != 0 ==> v3.PTR_NOT(a) == 0);

axiom (forall a: int :: { v3.NULL_CHECK(a) } a == 0 ==> v3.NULL_CHECK(a) != 0);

axiom (forall a: int :: { v3.NULL_CHECK(a) } a != 0 ==> v3.NULL_CHECK(a) == 0);

axiom (forall n: int, x: int, y: int :: { v3.AtLeast(n, x)[y] } v3.AtLeast(n, x)[y] ==> v3.INT_LEQ(x, y) && v3.Rep(n, x) == v3.Rep(n, y));

axiom (forall n: int, x: int, y: int :: { v3.AtLeast(n, x), v3.Rep(n, x), v3.Rep(n, y) } v3.INT_LEQ(x, y) && v3.Rep(n, x) == v3.Rep(n, y) ==> v3.AtLeast(n, x)[y]);

axiom (forall n: int, x: int :: { v3.AtLeast(n, x) } v3.AtLeast(n, x)[x]);

axiom (forall n: int, x: int, z: int :: { v3.INT_PLUS(x, n, z) } v3.Rep(n, x) == v3.Rep(n, v3.INT_PLUS(x, n, z)));

axiom (forall n: int, x: int :: { v3.Rep(n, x) } (exists k: int :: v3.INT_SUB(v3.Rep(n, x), x) == v3.INT_MULT(n, k)));

axiom (forall x: int, n: int, z: int :: { v3.Array(x, n, z) } v3.INT_LEQ(z, 0) ==> v3.Equal(v3.Array(x, n, z), v3.Empty()));

axiom (forall x: int, n: int, z: int :: { v3.Array(x, n, z) } v3.INT_GT(z, 0) ==> v3.Equal(v3.Array(x, n, z), v3.Difference(v3.AtLeast(n, x), v3.AtLeast(n, v3.INT_PLUS(x, n, z)))));

axiom (forall x: int :: !v3.Empty()[x]);

axiom (forall x: int :: v3.SetTrue()[x]);

axiom (forall x: int, y: int :: { v3.Singleton(y)[x] } v3.Singleton(y)[x] <==> x == y);

axiom (forall y: int :: { v3.Singleton(y) } v3.Singleton(y)[y]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v3.Union(S, T)[x] } { v3.Union(S, T), S[x] } { v3.Union(S, T), T[x] } v3.Union(S, T)[x] <==> S[x] || T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v3.Intersection(S, T)[x] } { v3.Intersection(S, T), S[x] } { v3.Intersection(S, T), T[x] } v3.Intersection(S, T)[x] <==> S[x] && T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v3.Difference(S, T)[x] } { v3.Difference(S, T), S[x] } { v3.Difference(S, T), T[x] } v3.Difference(S, T)[x] <==> S[x] && !T[x]);

axiom (forall S: [int]bool, T: [int]bool :: { v3.Equal(S, T) } v3.Equal(S, T) <==> v3.Subset(S, T) && v3.Subset(T, S));

axiom (forall x: int, S: [int]bool, T: [int]bool :: { S[x], v3.Subset(S, T) } { T[x], v3.Subset(S, T) } S[x] && v3.Subset(S, T) ==> T[x]);

axiom (forall S: [int]bool, T: [int]bool :: { v3.Subset(S, T) } v3.Subset(S, T) || (exists x: int :: S[x] && !T[x]));

axiom (forall x: int, S: [int]bool, T: [int]bool :: { S[x], v3.Disjoint(S, T) } { T[x], v3.Disjoint(S, T) } !(S[x] && v3.Disjoint(S, T) && T[x]));

axiom (forall S: [int]bool, T: [int]bool :: { v3.Disjoint(S, T) } v3.Disjoint(S, T) || (exists x: int :: S[x] && T[x]));

axiom (forall f: [int]int, x: int :: { v3.Inverse(f, f[x]) } v3.Inverse(f, f[x])[x]);

axiom (forall f: [int]int, x: int, y: int :: { v3.Inverse(f, y), f[x] } v3.Inverse(f, y)[x] ==> f[x] == y);

axiom (forall f: [int]int, x: int, y: int :: { v3.Inverse(f[x := y], y) } v3.Equal(v3.Inverse(f[x := y], y), v3.Union(v3.Inverse(f, y), v3.Singleton(x))));

axiom (forall f: [int]int, x: int, y: int, z: int :: { v3.Inverse(f[x := y], z) } y == z || v3.Equal(v3.Inverse(f[x := y], z), v3.Difference(v3.Inverse(f, z), v3.Singleton(x))));

axiom (forall x: int, S: [int]bool, M: [int]int :: { v3.Dereference(S, M)[x] } v3.Dereference(S, M)[x] ==> (exists y: int :: x == M[y] && S[y]));

axiom (forall x: int, S: [int]bool, M: [int]int :: { M[x], S[x], v3.Dereference(S, M) } S[x] ==> v3.Dereference(S, M)[M[x]]);

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v3.Dereference(S, M[x := y]) } !S[x] ==> v3.Equal(v3.Dereference(S, M[x := y]), v3.Dereference(S, M)));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v3.Dereference(S, M[x := y]) } S[x] && v3.Equal(v3.Intersection(v3.Inverse(M, M[x]), S), v3.Singleton(x)) ==> v3.Equal(v3.Dereference(S, M[x := y]), v3.Union(v3.Difference(v3.Dereference(S, M), v3.Singleton(M[x])), v3.Singleton(y))));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v3.Dereference(S, M[x := y]) } S[x] && !v3.Equal(v3.Intersection(v3.Inverse(M, M[x]), S), v3.Singleton(x)) ==> v3.Equal(v3.Dereference(S, M[x := y]), v3.Union(v3.Dereference(S, M), v3.Singleton(y))));

axiom (forall M: [name][int]int, x: int :: { v3.Unified(M)[x] } v3.Unified(M)[x] == M[v3.Field(x)][x]);

axiom (forall M: [name][int]int, x: int, y: int :: { v3.Unified(M[v3.Field(x) := M[v3.Field(x)][x := y]]) } v3.Unified(M[v3.Field(x) := M[v3.Field(x)][x := y]]) == v3.Unified(M)[x := y]);

procedure v3.havoc_assert(i: int);



procedure v3.havoc_assume(i: int);



procedure v3.__HAVOC_free(a: int);



procedure v3.__HAVOC_malloc(obj_size: int) returns (new: int);
  modifies v3.alloc;
  free ensures new == _uf_v3.__HAVOC_malloc_new(obj_size, old(v3.alloc));
  free ensures v3.alloc == _uf_v3.__HAVOC_malloc_v3.alloc(obj_size, old(v3.alloc));



procedure v3.__HAVOC_det_malloc(obj_size: int) returns (new: int);
  modifies v3.alloc;
  free ensures new == _uf_v3.__HAVOC_det_malloc_new(obj_size, old(v3.alloc));
  free ensures v3.alloc == _uf_v3.__HAVOC_det_malloc_v3.alloc(obj_size, old(v3.alloc));



procedure v3.__HAVOC_memset_split_1(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v3.__HAVOC_memset_split_1_ret(A, p, c, n);



procedure v3.__HAVOC_memset_split_2(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v3.__HAVOC_memset_split_2_ret(A, p, c, n);



procedure v3.__HAVOC_memset_split_4(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v3.__HAVOC_memset_split_4_ret(A, p, c, n);



procedure v3.nondet_choice() returns (x: int);
  free ensures x == _uf_v3.nondet_choice_x();



procedure v3.det_choice() returns (x: int);
  modifies v3.detChoiceCnt;
  free ensures x == _uf_v3.det_choice_x(old(v3.detChoiceCnt));
  free ensures v3.detChoiceCnt == _uf_v3.det_choice_v3.detChoiceCnt(old(v3.detChoiceCnt));



procedure v3._strdup(str: int) returns (new: int);
  free ensures new == _uf_v3._strdup_new(str);



procedure v3._xstrcasecmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v3._xstrcasecmp_ret(a0, a1);



procedure v3._xstrcmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v3._xstrcmp_ret(a0, a1);



procedure {:inline 1} v3.Eval(e_.1: int);
  modifies v3.Mem_T.result__EXPR;
  free ensures v3.Mem_T.result__EXPR == _uf_v3.Eval_v3.Mem_T.result__EXPR(e_.1, old(v3.alloc), old(v3.Mem_T.oper__EXPR), old(v3.Mem_T.result__EXPR), old(v3.Mem_T.op1__EXPR), old(v3.Mem_T.op2__EXPR));



implementation {:inline 1} v3.Eval(e_.1: int)
{
  var {:extern} havoc_stringTemp: int;
  var {:extern} condVal: int;
  var {:extern} a1: int;
  var {:extern} a2: int;
  var {:extern} e: int;
  var {:extern} op: int;
  var {:extern} res: int;
  var {:extern} tempBoogie0: int;
  var {:extern} tempBoogie1: int;
  var {:extern} tempBoogie2: int;
  var {:extern} tempBoogie3: int;
  var {:extern} tempBoogie4: int;
  var {:extern} tempBoogie5: int;
  var {:extern} tempBoogie6: int;
  var {:extern} tempBoogie7: int;
  var {:extern} tempBoogie8: int;
  var {:extern} tempBoogie9: int;
  var {:extern} tempBoogie10: int;
  var {:extern} tempBoogie11: int;
  var {:extern} tempBoogie12: int;
  var {:extern} tempBoogie13: int;
  var {:extern} tempBoogie14: int;
  var {:extern} tempBoogie15: int;
  var {:extern} tempBoogie16: int;
  var {:extern} tempBoogie17: int;
  var {:extern} tempBoogie18: int;
  var {:extern} tempBoogie19: int;
  var {:extern} __havoc_dummy_return: int;

  anon0#2:
    havoc_stringTemp := 0;
    goto start#2;

  start#2:
    assume v3.INT_LT(e_.1, v3.alloc);
    a1 := 0;
    a2 := 0;
    e := 0;
    assume v3.INT_GEQ(e_.1, 0);
    op := 0;
    res := 0;
    e := e_.1;
    goto label_3#2;

  label_3#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 14} true;
    goto label_4#2;

  label_4#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 14} true;
    goto label_5#2;

  label_5#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 14} true;
    goto label_6#2;

  label_6#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 14} true;
    goto label_7#2;

  label_7#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 17} true;
    assume v3.INT_GEQ(e, 0);
    
    op := v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)];
    assume v3.value_is(v3.__ctobpl_const_1, op);
    assume v3.value_is(v3.__ctobpl_const_2, e);
    assume v3.value_is(v3.__ctobpl_const_3, v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)]);
    goto label_8#2;

  label_8#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 18} true;
    assume v3.INT_GEQ(e, 0);
    
    a1 := v3.Mem_T.op1__EXPR[v3.op1__EXPR(e)];
    assume v3.value_is(v3.__ctobpl_const_4, a1);
    assume v3.value_is(v3.__ctobpl_const_5, e);
    assume v3.value_is(v3.__ctobpl_const_6, v3.Mem_T.op1__EXPR[v3.op1__EXPR(e)]);
    goto label_9#2;

  label_9#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 19} true;
    assume v3.INT_GEQ(e, 0);
    
    a2 := v3.Mem_T.op2__EXPR[v3.op2__EXPR(e)];
    assume v3.value_is(v3.__ctobpl_const_7, a2);
    assume v3.value_is(v3.__ctobpl_const_8, e);
    assume v3.value_is(v3.__ctobpl_const_9, v3.Mem_T.op2__EXPR[v3.op2__EXPR(e)]);
    goto label_10#2;

  label_10#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 20} true;
    res := 0 - 1;
    assume v3.value_is(v3.__ctobpl_const_10, res);
    goto label_11#2;

  label_11#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 22} true;
    goto label_11_case_0#2, label_11_case_1#2, label_11_case_2#2, label_11_case_3#2;

  label_11_case_3#2:
    assume v3.INT_EQ(op, 3);
    assume v3.value_is(v3.__ctobpl_const_11, op);
    goto label_15#2;

  label_15#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 29} true;
    res := v3.INT_MULT(a1, a2);
    assume v3.value_is(v3.__ctobpl_const_21, res);
    assume v3.value_is(v3.__ctobpl_const_22, a1);
    assume v3.value_is(v3.__ctobpl_const_23, a2);
    goto label_12#2;

  label_11_case_2#2:
    assume v3.INT_EQ(op, 2);
    assume v3.value_is(v3.__ctobpl_const_11, op);
    goto label_14#2;

  label_14#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 27} true;
    res := v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(a1, a2, 1);
    assume v3.value_is(v3.__ctobpl_const_18, res);
    assume v3.value_is(v3.__ctobpl_const_19, a1);
    assume v3.value_is(v3.__ctobpl_const_20, a2);
    goto label_12#2;

  label_11_case_1#2:
    assume v3.INT_EQ(op, 1);
    assume v3.value_is(v3.__ctobpl_const_11, op);
    goto label_13#2;

  label_13#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 25} true;
    res := v3.INT_PLUS(a1, 1, a2);
    assume v3.value_is(v3.__ctobpl_const_15, res);
    assume v3.value_is(v3.__ctobpl_const_16, a1);
    assume v3.value_is(v3.__ctobpl_const_17, a2);
    goto label_12#2;

  label_11_case_0#2:
    assume v3.INT_NEQ(op, 1);
    assume v3.INT_NEQ(op, 2);
    assume v3.INT_NEQ(op, 3);
    assume v3.value_is(v3.__ctobpl_const_11, op);
    goto label_12#2;

  label_12#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 32} true;
    assume v3.INT_GEQ(e, 0);
    
    v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR[v3.result__EXPR(e) := res];
    assume v3.value_is(v3.__ctobpl_const_12, e);
    assume v3.value_is(v3.__ctobpl_const_13, v3.Mem_T.result__EXPR[v3.result__EXPR(e)]);
    assume v3.value_is(v3.__ctobpl_const_14, res);
    goto label_1#2;

  label_1#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 33} true;
    return;
}



var {:extern} v1.Mem: [name][int]int;

var {:extern} v1.alloc: int;

var {:extern} v1.Mem_T.INT4: [int]int;

var {:extern} v1.Mem_T.op1__EXPR: [int]int;

var {:extern} v1.Mem_T.op2__EXPR: [int]int;

var {:extern} v1.Mem_T.oper__EXPR: [int]int;

var {:extern} v1.Mem_T.result__EXPR: [int]int;

var {:extern} v1.detChoiceCnt: int;

var {:extern} v1.Res_KERNEL_SOURCE: [int]int;

var {:extern} v1.Res_PROBED: [int]int;

const {:extern} unique v1.T.oper__EXPR: name;

const {:extern} unique v1.T.op1__EXPR: name;

const {:extern} unique v1.T.op2__EXPR: name;

const {:extern} unique v1.T.result__EXPR: name;

const {:extern} unique v1.T.INT4: name;

const {:extern} unique v1.T.PP_EXPR: name;

const {:extern} unique v1.T.P_EXPR: name;

const {:extern} unique v1.T._EXPR: name;

const {:extern} {:model_const "e->oper"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 10} unique v1.__ctobpl_const_2: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 14} unique v1.__ctobpl_const_3: int;

const {:extern} {:model_const "e->oper"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 14} unique v1.__ctobpl_const_4: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 12} unique v1.__ctobpl_const_5: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 16} unique v1.__ctobpl_const_15: int;

const {:extern} {:model_const "e->result"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 16} unique v1.__ctobpl_const_14: int;

const {:extern} {:model_const "e->op1"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 16} unique v1.__ctobpl_const_16: int;

const {:extern} {:model_const "e->op2"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 16} unique v1.__ctobpl_const_18: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 16} unique v1.__ctobpl_const_13: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 16} unique v1.__ctobpl_const_17: int;

const {:extern} {:model_const "e->op2"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 12} unique v1.__ctobpl_const_10: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 20} unique v1.__ctobpl_const_11: int;

const {:extern} {:model_const "e->result"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 20} unique v1.__ctobpl_const_12: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 10} unique v1.__ctobpl_const_1: int;

const {:extern} {:model_const "e->result"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 12} unique v1.__ctobpl_const_6: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 12} unique v1.__ctobpl_const_7: int;

const {:extern} {:model_const "e"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 12} unique v1.__ctobpl_const_9: int;

const {:extern} {:model_const "e->op1"} {:sourceFile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceLine 12} unique v1.__ctobpl_const_8: int;

axiom (forall b0: byte, c0: byte :: { v3.OneByteToInt(b0), v3.OneByteToInt(c0) } v3.OneByteToInt(b0) == v3.OneByteToInt(c0) ==> b0 == c0);

axiom (forall b0: byte, b1: byte, c0: byte, c1: byte :: { v3.TwoBytesToInt(b0, b1), v3.TwoBytesToInt(c0, c1) } v3.TwoBytesToInt(b0, b1) == v3.TwoBytesToInt(c0, c1) ==> b0 == c0 && b1 == c1);

axiom (forall b0: byte, b1: byte, b2: byte, b3: byte, c0: byte, c1: byte, c2: byte, c3: byte :: { v3.FourBytesToInt(b0, b1, b2, b3), v3.FourBytesToInt(c0, c1, c2, c3) } v3.FourBytesToInt(b0, b1, b2, b3) == v3.FourBytesToInt(c0, c1, c2, c3) ==> b0 == c0 && b1 == c1 && b2 == c2 && b3 == c3);

axiom (forall x: int :: { v3.Base(x) } v3.INT_LEQ(v3.Base(x), x));

axiom (forall a: int, t: name :: { v3.Match(a, v3.T.Ptr(t)) } v3.Match(a, v3.T.Ptr(t)) <==> v3.Field(a) == v3.T.Ptr(t));

axiom (forall b: int, a: int, t: name :: { v3.MatchBase(b, a, v3.T.Ptr(t)) } v3.MatchBase(b, a, v3.T.Ptr(t)) <==> v3.Base(a) == b);

axiom (forall v: int, t: name :: { v3.HasType(v, v3.T.Ptr(t)) } v3.HasType(v, v3.T.Ptr(t)) <==> v == 0 || (v3.INT_GT(v, 0) && v3.Match(v, t) && v3.MatchBase(v3.Base(v), v, t)));

axiom (forall x: int, S: [int]bool :: { v3._S_op1__EXPR(S)[x] } v3._S_op1__EXPR(S)[x] <==> S[v3.op1__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v3._S_op1__EXPRInv(S)[x] } v3._S_op1__EXPRInv(S)[x] <==> S[v3.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_op1__EXPR(S) } S[x] ==> v3._S_op1__EXPR(S)[v3.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_op1__EXPRInv(S) } S[x] ==> v3._S_op1__EXPRInv(S)[v3.op1__EXPRInv(x)]);

axiom (forall x: int :: { v3.op1__EXPR(x) } v3.op1__EXPR(x) == v3.INT_ADD(x, 4));

axiom (forall x: int :: { v3.op1__EXPRInv(x) } v3.op1__EXPRInv(x) == v3.INT_SUB(x, 4));

axiom (forall x: int :: { v3.op1__EXPR(x) } v3.op1__EXPR(x) == v3.INT_PLUS(x, 1, 4));

axiom (forall x: int, S: [int]bool :: { v3._S_op2__EXPR(S)[x] } v3._S_op2__EXPR(S)[x] <==> S[v3.op2__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v3._S_op2__EXPRInv(S)[x] } v3._S_op2__EXPRInv(S)[x] <==> S[v3.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_op2__EXPR(S) } S[x] ==> v3._S_op2__EXPR(S)[v3.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_op2__EXPRInv(S) } S[x] ==> v3._S_op2__EXPRInv(S)[v3.op2__EXPRInv(x)]);

axiom (forall x: int :: { v3.op2__EXPR(x) } v3.op2__EXPR(x) == v3.INT_ADD(x, 8));

axiom (forall x: int :: { v3.op2__EXPRInv(x) } v3.op2__EXPRInv(x) == v3.INT_SUB(x, 8));

axiom (forall x: int :: { v3.op2__EXPR(x) } v3.op2__EXPR(x) == v3.INT_PLUS(x, 1, 8));

axiom (forall x: int, S: [int]bool :: { v3._S_oper__EXPR(S)[x] } v3._S_oper__EXPR(S)[x] <==> S[v3.oper__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v3._S_oper__EXPRInv(S)[x] } v3._S_oper__EXPRInv(S)[x] <==> S[v3.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_oper__EXPR(S) } S[x] ==> v3._S_oper__EXPR(S)[v3.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_oper__EXPRInv(S) } S[x] ==> v3._S_oper__EXPRInv(S)[v3.oper__EXPRInv(x)]);

axiom (forall x: int :: { v3.oper__EXPR(x) } v3.oper__EXPR(x) == v3.INT_ADD(x, 0));

axiom (forall x: int :: { v3.oper__EXPRInv(x) } v3.oper__EXPRInv(x) == v3.INT_SUB(x, 0));

axiom (forall x: int :: { v3.oper__EXPR(x) } v3.oper__EXPR(x) == v3.INT_PLUS(x, 1, 0));

axiom (forall x: int, S: [int]bool :: { v3._S_result__EXPR(S)[x] } v3._S_result__EXPR(S)[x] <==> S[v3.result__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v3._S_result__EXPRInv(S)[x] } v3._S_result__EXPRInv(S)[x] <==> S[v3.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_result__EXPR(S) } S[x] ==> v3._S_result__EXPR(S)[v3.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v3._S_result__EXPRInv(S) } S[x] ==> v3._S_result__EXPRInv(S)[v3.result__EXPRInv(x)]);

axiom (forall x: int :: { v3.result__EXPR(x) } v3.result__EXPR(x) == v3.INT_ADD(x, 12));

axiom (forall x: int :: { v3.result__EXPRInv(x) } v3.result__EXPRInv(x) == v3.INT_SUB(x, 12));

axiom (forall x: int :: { v3.result__EXPR(x) } v3.result__EXPR(x) == v3.INT_PLUS(x, 1, 12));

axiom (forall x: int, y: int :: {:extern} { v3.INT_EQ(x, y): bool } v3.INT_EQ(x, y): bool <==> x == y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_NEQ(x, y): bool } v3.INT_NEQ(x, y): bool <==> x != y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_ADD(x, y): int } v3.INT_ADD(x, y): int == x + y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_SUB(x, y): int } v3.INT_SUB(x, y): int == x - y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_LT(x, y): bool } v3.INT_LT(x, y): bool <==> x < y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_ULT(x, y): bool } v3.INT_ULT(x, y): bool <==> x < y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_LEQ(x, y): bool } v3.INT_LEQ(x, y): bool <==> x <= y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_ULEQ(x, y): bool } v3.INT_ULEQ(x, y): bool <==> x <= y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_GT(x, y): bool } v3.INT_GT(x, y): bool <==> x > y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_UGT(x, y): bool } v3.INT_UGT(x, y): bool <==> x > y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_GEQ(x, y): bool } v3.INT_GEQ(x, y): bool <==> x >= y);

axiom (forall x: int, y: int :: {:extern} { v3.INT_UGEQ(x, y): bool } v3.INT_UGEQ(x, y): bool <==> x >= y);

axiom (forall a: int, b: int :: { v3.INT_AND(a, b) } a == b ==> v3.INT_AND(a, b) == a);

axiom (forall a: int, b: int :: { v3.INT_AND(a, b) } v3.POW2(a) && v3.POW2(b) && a != b ==> v3.INT_AND(a, b) == 0);

axiom (forall a: int, b: int :: { v3.INT_AND(a, b) } a == 0 || b == 0 ==> v3.INT_AND(a, b) == 0);

axiom v3.POW2(1);

axiom v3.POW2(2);

axiom v3.POW2(4);

axiom v3.POW2(8);

axiom v3.POW2(16);

axiom v3.POW2(32);

axiom v3.POW2(64);

axiom v3.POW2(128);

axiom v3.POW2(256);

axiom v3.POW2(512);

axiom v3.POW2(1024);

axiom v3.POW2(2048);

axiom v3.POW2(4096);

axiom v3.POW2(8192);

axiom v3.POW2(16384);

axiom v3.POW2(32768);

axiom v3.POW2(65536);

axiom v3.POW2(131072);

axiom v3.POW2(262144);

axiom v3.POW2(524288);

axiom v3.POW2(1048576);

axiom v3.POW2(2097152);

axiom v3.POW2(4194304);

axiom v3.POW2(8388608);

axiom v3.POW2(16777216);

axiom v3.POW2(33554432);

axiom (forall a: int, b: int, size: int :: { v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) } size * v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) <= a - b && a - b < size * (v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) + 1));

axiom (forall a: int, a_size: int, b: int :: { v3.INT_MINUS_LEFT_PTR(a, a_size, b) } v3.INT_MINUS_LEFT_PTR(a, a_size, b) == a - a_size * b);

axiom (forall a: int, a_size: int, b: int :: { v3.INT_PLUS(a, a_size, b) } v3.INT_PLUS(a, a_size, b) == a + a_size * b);

axiom (forall a: int, b: int :: { v3.INT_MULT(a, b) } v3.INT_MULT(a, b) == a * b);

axiom (forall a: int, b: int :: { v3.INT_DIV(a, b) } a >= 0 && b > 0 ==> b * v3.INT_DIV(a, b) <= a && a < b * (v3.INT_DIV(a, b) + 1));

axiom (forall a: int, b: int :: { v3.INT_DIV(a, b) } a >= 0 && b < 0 ==> b * v3.INT_DIV(a, b) <= a && a < b * (v3.INT_DIV(a, b) - 1));

axiom (forall a: int, b: int :: { v3.INT_DIV(a, b) } a < 0 && b > 0 ==> b * v3.INT_DIV(a, b) >= a && a > b * (v3.INT_DIV(a, b) - 1));

axiom (forall a: int, b: int :: { v3.INT_DIV(a, b) } a < 0 && b < 0 ==> b * v3.INT_DIV(a, b) >= a && a > b * (v3.INT_DIV(a, b) + 1));

axiom (forall x: bv32, y: bv32 :: {:extern} { v3.BV32_EQ(x, y): bool } v3.BV32_EQ(x, y): bool <==> x == y);

axiom (forall x: bv32, y: bv32 :: {:extern} { v3.BV32_NEQ(x, y): bool } v3.BV32_NEQ(x, y): bool <==> x != y);

axiom (forall a: bv32, b: bv32, size: bv32 :: {:extern} { v3.BV32_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size): bv32 } v3.BV32_MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size): bv32 == v3.BV32_DIV(v3.BV32_SUB(a, b), size));

axiom (forall a: bv32, a_size: bv32, b: bv32 :: {:extern} { v3.BV32_MINUS_LEFT_PTR(a, a_size, b): bv32 } v3.BV32_MINUS_LEFT_PTR(a, a_size, b): bv32 == v3.BV32_SUB(a, v3.BV32_MULT(a_size, b)));

axiom (forall a: bv32, a_size: bv32, b: bv32 :: {:extern} { v3.BV32_PLUS(a, a_size, b): bv32 } v3.BV32_PLUS(a, a_size, b): bv32 == v3.BV32_ADD(a, v3.BV32_MULT(a_size, b)));

axiom (forall a: bool, b: int, c: int :: { v3.choose(a, b, c) } a ==> v3.choose(a, b, c) == b);

axiom (forall a: bool, b: int, c: int :: { v3.choose(a, b, c) } !a ==> v3.choose(a, b, c) == c);

axiom (forall a: bool :: { v3.LIFT(a) } a <==> v3.LIFT(a) != 0);

axiom (forall a: int :: { v3.PTR_NOT(a) } a == 0 ==> v3.PTR_NOT(a) != 0);

axiom (forall a: int :: { v3.PTR_NOT(a) } a != 0 ==> v3.PTR_NOT(a) == 0);

axiom (forall a: int :: { v3.NULL_CHECK(a) } a == 0 ==> v3.NULL_CHECK(a) != 0);

axiom (forall a: int :: { v3.NULL_CHECK(a) } a != 0 ==> v3.NULL_CHECK(a) == 0);

axiom (forall n: int, x: int, y: int :: { v3.AtLeast(n, x)[y] } v3.AtLeast(n, x)[y] ==> v3.INT_LEQ(x, y) && v3.Rep(n, x) == v3.Rep(n, y));

axiom (forall n: int, x: int, y: int :: { v3.AtLeast(n, x), v3.Rep(n, x), v3.Rep(n, y) } v3.INT_LEQ(x, y) && v3.Rep(n, x) == v3.Rep(n, y) ==> v3.AtLeast(n, x)[y]);

axiom (forall n: int, x: int :: { v3.AtLeast(n, x) } v3.AtLeast(n, x)[x]);

axiom (forall n: int, x: int, z: int :: { v3.INT_PLUS(x, n, z) } v3.Rep(n, x) == v3.Rep(n, v3.INT_PLUS(x, n, z)));

axiom (forall n: int, x: int :: { v3.Rep(n, x) } (exists k: int :: v3.INT_SUB(v3.Rep(n, x), x) == v3.INT_MULT(n, k)));

axiom (forall x: int, n: int, z: int :: { v3.Array(x, n, z) } v3.INT_LEQ(z, 0) ==> v3.Equal(v3.Array(x, n, z), v3.Empty()));

axiom (forall x: int, n: int, z: int :: { v3.Array(x, n, z) } v3.INT_GT(z, 0) ==> v3.Equal(v3.Array(x, n, z), v3.Difference(v3.AtLeast(n, x), v3.AtLeast(n, v3.INT_PLUS(x, n, z)))));

axiom (forall x: int :: !v3.Empty()[x]);

axiom (forall x: int :: v3.SetTrue()[x]);

axiom (forall x: int, y: int :: { v3.Singleton(y)[x] } v3.Singleton(y)[x] <==> x == y);

axiom (forall y: int :: { v3.Singleton(y) } v3.Singleton(y)[y]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v3.Union(S, T)[x] } { v3.Union(S, T), S[x] } { v3.Union(S, T), T[x] } v3.Union(S, T)[x] <==> S[x] || T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v3.Intersection(S, T)[x] } { v3.Intersection(S, T), S[x] } { v3.Intersection(S, T), T[x] } v3.Intersection(S, T)[x] <==> S[x] && T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v3.Difference(S, T)[x] } { v3.Difference(S, T), S[x] } { v3.Difference(S, T), T[x] } v3.Difference(S, T)[x] <==> S[x] && !T[x]);

axiom (forall S: [int]bool, T: [int]bool :: { v3.Equal(S, T) } v3.Equal(S, T) <==> v3.Subset(S, T) && v3.Subset(T, S));

axiom (forall x: int, S: [int]bool, T: [int]bool :: { S[x], v3.Subset(S, T) } { T[x], v3.Subset(S, T) } S[x] && v3.Subset(S, T) ==> T[x]);

axiom (forall S: [int]bool, T: [int]bool :: { v3.Subset(S, T) } v3.Subset(S, T) || (exists x: int :: S[x] && !T[x]));

axiom (forall x: int, S: [int]bool, T: [int]bool :: { S[x], v3.Disjoint(S, T) } { T[x], v3.Disjoint(S, T) } !(S[x] && v3.Disjoint(S, T) && T[x]));

axiom (forall S: [int]bool, T: [int]bool :: { v3.Disjoint(S, T) } v3.Disjoint(S, T) || (exists x: int :: S[x] && T[x]));

axiom (forall f: [int]int, x: int :: { v3.Inverse(f, f[x]) } v3.Inverse(f, f[x])[x]);

axiom (forall f: [int]int, x: int, y: int :: { v3.Inverse(f, y), f[x] } v3.Inverse(f, y)[x] ==> f[x] == y);

axiom (forall f: [int]int, x: int, y: int :: { v3.Inverse(f[x := y], y) } v3.Equal(v3.Inverse(f[x := y], y), v3.Union(v3.Inverse(f, y), v3.Singleton(x))));

axiom (forall f: [int]int, x: int, y: int, z: int :: { v3.Inverse(f[x := y], z) } y == z || v3.Equal(v3.Inverse(f[x := y], z), v3.Difference(v3.Inverse(f, z), v3.Singleton(x))));

axiom (forall x: int, S: [int]bool, M: [int]int :: { v3.Dereference(S, M)[x] } v3.Dereference(S, M)[x] ==> (exists y: int :: x == M[y] && S[y]));

axiom (forall x: int, S: [int]bool, M: [int]int :: { M[x], S[x], v3.Dereference(S, M) } S[x] ==> v3.Dereference(S, M)[M[x]]);

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v3.Dereference(S, M[x := y]) } !S[x] ==> v3.Equal(v3.Dereference(S, M[x := y]), v3.Dereference(S, M)));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v3.Dereference(S, M[x := y]) } S[x] && v3.Equal(v3.Intersection(v3.Inverse(M, M[x]), S), v3.Singleton(x)) ==> v3.Equal(v3.Dereference(S, M[x := y]), v3.Union(v3.Difference(v3.Dereference(S, M), v3.Singleton(M[x])), v3.Singleton(y))));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v3.Dereference(S, M[x := y]) } S[x] && !v3.Equal(v3.Intersection(v3.Inverse(M, M[x]), S), v3.Singleton(x)) ==> v3.Equal(v3.Dereference(S, M[x := y]), v3.Union(v3.Dereference(S, M), v3.Singleton(y))));

axiom (forall M: [name][int]int, x: int :: { v3.Unified(M)[x] } v3.Unified(M)[x] == M[v3.Field(x)][x]);

axiom (forall M: [name][int]int, x: int, y: int :: { v3.Unified(M[v3.Field(x) := M[v3.Field(x)][x := y]]) } v3.Unified(M[v3.Field(x) := M[v3.Field(x)][x := y]]) == v3.Unified(M)[x := y]);

procedure v1.havoc_assert(i: int);



procedure v1.havoc_assume(i: int);



procedure v1.__HAVOC_free(a: int);



procedure v1.__HAVOC_malloc(obj_size: int) returns (new: int);
  modifies v3.alloc;
  free ensures new == _uf_v3.__HAVOC_malloc_new(obj_size, old(v3.alloc));
  free ensures v3.alloc == _uf_v3.__HAVOC_malloc_v3.alloc(obj_size, old(v3.alloc));



procedure v1.__HAVOC_det_malloc(obj_size: int) returns (new: int);
  modifies v3.alloc;
  free ensures new == _uf_v3.__HAVOC_det_malloc_new(obj_size, old(v3.alloc));
  free ensures v3.alloc == _uf_v3.__HAVOC_det_malloc_v3.alloc(obj_size, old(v3.alloc));



procedure v1.__HAVOC_memset_split_1(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v3.__HAVOC_memset_split_1_ret(A, p, c, n);



procedure v1.__HAVOC_memset_split_2(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v3.__HAVOC_memset_split_2_ret(A, p, c, n);



procedure v1.__HAVOC_memset_split_4(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v3.__HAVOC_memset_split_4_ret(A, p, c, n);



procedure v1.nondet_choice() returns (x: int);
  free ensures x == _uf_v3.nondet_choice_x();



procedure v1.det_choice() returns (x: int);
  modifies v3.detChoiceCnt;
  free ensures x == _uf_v3.det_choice_x(old(v3.detChoiceCnt));
  free ensures v3.detChoiceCnt == _uf_v3.det_choice_v3.detChoiceCnt(old(v3.detChoiceCnt));



procedure v1._strdup(str: int) returns (new: int);
  free ensures new == _uf_v3._strdup_new(str);



procedure v1._xstrcasecmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v3._xstrcasecmp_ret(a0, a1);



procedure v1._xstrcmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v3._xstrcmp_ret(a0, a1);



procedure {:inline 1} v1.Eval(e_.1: int);
  modifies v3.Mem_T.result__EXPR;
  free ensures v3.Mem_T.result__EXPR == _uf_v3.Eval_v3.Mem_T.result__EXPR(e_.1, old(v3.alloc), old(v3.Mem_T.oper__EXPR), old(v3.Mem_T.result__EXPR), old(v3.Mem_T.op1__EXPR), old(v3.Mem_T.op2__EXPR));



implementation {:inline 1} v1.Eval(e_.1: int)
{
  var {:extern} havoc_stringTemp: int;
  var {:extern} condVal: int;
  var {:extern} e: int;
  var {:extern} tempBoogie0: int;
  var {:extern} tempBoogie1: int;
  var {:extern} tempBoogie2: int;
  var {:extern} tempBoogie3: int;
  var {:extern} tempBoogie4: int;
  var {:extern} tempBoogie5: int;
  var {:extern} tempBoogie6: int;
  var {:extern} tempBoogie7: int;
  var {:extern} tempBoogie8: int;
  var {:extern} tempBoogie9: int;
  var {:extern} tempBoogie10: int;
  var {:extern} tempBoogie11: int;
  var {:extern} tempBoogie12: int;
  var {:extern} tempBoogie13: int;
  var {:extern} tempBoogie14: int;
  var {:extern} tempBoogie15: int;
  var {:extern} tempBoogie16: int;
  var {:extern} tempBoogie17: int;
  var {:extern} tempBoogie18: int;
  var {:extern} tempBoogie19: int;
  var {:extern} __havoc_dummy_return: int;

  anon0#2:
    havoc_stringTemp := 0;
    goto start#2;

  start#2:
    assume v3.INT_LT(e_.1, v3.alloc);
    e := 0;
    assume v3.INT_GEQ(e_.1, 0);
    e := e_.1;
    goto label_3#2;

  label_3#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 10} true;
    assume v3.INT_GEQ(e, 0);
    
    goto label_3_true#2, label_3_false#2;

  label_3_false#2:
    assume !v3.INT_EQ(v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)], 1);
    assume v3.value_is(v1.__ctobpl_const_1, e);
    assume v3.value_is(v1.__ctobpl_const_2, v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)]);
    goto label_4#2;

  label_4#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 14} true;
    assume v3.INT_GEQ(e, 0);
    
    goto label_4_true#2, label_4_false#2;

  label_4_false#2:
    assume !v3.INT_EQ(v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)], 2);
    assume v3.value_is(v1.__ctobpl_const_3, e);
    assume v3.value_is(v1.__ctobpl_const_4, v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)]);
    goto label_6#2;

  label_6#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 20} true;
    assume v3.INT_GEQ(e, 0);
    
    v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR[v3.result__EXPR(e) := 0 - 1];
    assume v3.value_is(v1.__ctobpl_const_11, e);
    assume v3.value_is(v1.__ctobpl_const_12, v3.Mem_T.result__EXPR[v3.result__EXPR(e)]);
    goto label_1#2;

  label_4_true#2:
    assume v3.INT_EQ(v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)], 2);
    assume v3.value_is(v1.__ctobpl_const_3, e);
    assume v3.value_is(v1.__ctobpl_const_4, v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)]);
    goto label_7#2;

  label_7#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 16} true;
    assume v3.INT_GEQ(e, 0);
    
    assume v3.INT_GEQ(e, 0);
    
    assume v3.INT_GEQ(e, 0);
    
    v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR[v3.result__EXPR(e) := v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(v3.Mem_T.op1__EXPR[v3.op1__EXPR(e)], v3.Mem_T.op2__EXPR[v3.op2__EXPR(e)], 1)];
    assume v3.value_is(v1.__ctobpl_const_13, e);
    assume v3.value_is(v1.__ctobpl_const_14, v3.Mem_T.result__EXPR[v3.result__EXPR(e)]);
    assume v3.value_is(v1.__ctobpl_const_15, e);
    assume v3.value_is(v1.__ctobpl_const_16, v3.Mem_T.op1__EXPR[v3.op1__EXPR(e)]);
    assume v3.value_is(v1.__ctobpl_const_17, e);
    assume v3.value_is(v1.__ctobpl_const_18, v3.Mem_T.op2__EXPR[v3.op2__EXPR(e)]);
    goto label_1#2;

  label_3_true#2:
    assume v3.INT_EQ(v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)], 1);
    assume v3.value_is(v1.__ctobpl_const_1, e);
    assume v3.value_is(v1.__ctobpl_const_2, v3.Mem_T.oper__EXPR[v3.oper__EXPR(e)]);
    goto label_5#2;

  label_5#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 12} true;
    assume v3.INT_GEQ(e, 0);
    
    assume v3.INT_GEQ(e, 0);
    
    assume v3.INT_GEQ(e, 0);
    
    v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR[v3.result__EXPR(e) := v3.INT_PLUS(v3.Mem_T.op1__EXPR[v3.op1__EXPR(e)], 1, v3.Mem_T.op2__EXPR[v3.op2__EXPR(e)])];
    assume v3.value_is(v1.__ctobpl_const_5, e);
    assume v3.value_is(v1.__ctobpl_const_6, v3.Mem_T.result__EXPR[v3.result__EXPR(e)]);
    assume v3.value_is(v1.__ctobpl_const_7, e);
    assume v3.value_is(v1.__ctobpl_const_8, v3.Mem_T.op1__EXPR[v3.op1__EXPR(e)]);
    assume v3.value_is(v1.__ctobpl_const_9, e);
    assume v3.value_is(v1.__ctobpl_const_10, v3.Mem_T.op2__EXPR[v3.op2__EXPR(e)]);
    goto label_1#2;

  label_1#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 22} true;
    return;
}



type {:extern} name;

type {:extern} byte;

function _uf_v3.__HAVOC_malloc_new(arg_0: int, arg_1: int) : int;

function _uf_v3.__HAVOC_malloc_v3.alloc(arg_0: int, arg_1: int) : int;

function _uf_v1.__HAVOC_malloc_new(arg_0: int, arg_1: int) : int;

function _uf_v1.__HAVOC_malloc_v3.alloc(arg_0: int, arg_1: int) : int;

function _uf_v3.__HAVOC_det_malloc_new(arg_0: int, arg_1: int) : int;

function _uf_v3.__HAVOC_det_malloc_v3.alloc(arg_0: int, arg_1: int) : int;

function _uf_v1.__HAVOC_det_malloc_new(arg_0: int, arg_1: int) : int;

function _uf_v1.__HAVOC_det_malloc_v3.alloc(arg_0: int, arg_1: int) : int;

function _uf_v3.__HAVOC_memset_split_1_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v1.__HAVOC_memset_split_1_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v3.__HAVOC_memset_split_2_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v1.__HAVOC_memset_split_2_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v3.__HAVOC_memset_split_4_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v1.__HAVOC_memset_split_4_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v3.nondet_choice_x() : int;

function _uf_v1.nondet_choice_x() : int;

function _uf_v3.det_choice_x(arg_0: int) : int;

function _uf_v3.det_choice_v3.detChoiceCnt(arg_0: int) : int;

function _uf_v1.det_choice_x(arg_0: int) : int;

function _uf_v1.det_choice_v3.detChoiceCnt(arg_0: int) : int;

function _uf_v3._strdup_new(arg_0: int) : int;

function _uf_v1._strdup_new(arg_0: int) : int;

function _uf_v3._xstrcasecmp_ret(arg_0: int, arg_1: int) : int;

function _uf_v1._xstrcasecmp_ret(arg_0: int, arg_1: int) : int;

function _uf_v3._xstrcmp_ret(arg_0: int, arg_1: int) : int;

function _uf_v1._xstrcmp_ret(arg_0: int, arg_1: int) : int;

function _uf_v3.Eval_v3.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int) : [int]int;

function _uf_v1.Eval_v3.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int) : [int]int;

var Output_of_v1.Eval_v3.Mem_T.result__EXPR: [int]int;

var Output_of_v3.Eval_v3.Mem_T.result__EXPR: [int]int;

procedure EQ_v1.Eval__xx__v3.Eval(e_.1: int) returns (AA_TEMP30: bool);
  modifies v3.Mem_T.result__EXPR, Output_of_v1.Eval_v3.Mem_T.result__EXPR, Output_of_v3.Eval_v3.Mem_T.result__EXPR;
  ensures AA_TEMP30;



implementation EQ_v1.Eval__xx__v3.Eval(e_.1: int) returns (AA_TEMP30: bool)
{
  var AA_TEMP10: [int]int;
  var AA_TEMP00: [int]int;
  var inline$v1.Eval$0$havoc_stringTemp: int;
  var inline$v1.Eval$0$condVal: int;
  var inline$v1.Eval$0$e: int;
  var inline$v1.Eval$0$tempBoogie0: int;
  var inline$v1.Eval$0$tempBoogie1: int;
  var inline$v1.Eval$0$tempBoogie2: int;
  var inline$v1.Eval$0$tempBoogie3: int;
  var inline$v1.Eval$0$tempBoogie4: int;
  var inline$v1.Eval$0$tempBoogie5: int;
  var inline$v1.Eval$0$tempBoogie6: int;
  var inline$v1.Eval$0$tempBoogie7: int;
  var inline$v1.Eval$0$tempBoogie8: int;
  var inline$v1.Eval$0$tempBoogie9: int;
  var inline$v1.Eval$0$tempBoogie10: int;
  var inline$v1.Eval$0$tempBoogie11: int;
  var inline$v1.Eval$0$tempBoogie12: int;
  var inline$v1.Eval$0$tempBoogie13: int;
  var inline$v1.Eval$0$tempBoogie14: int;
  var inline$v1.Eval$0$tempBoogie15: int;
  var inline$v1.Eval$0$tempBoogie16: int;
  var inline$v1.Eval$0$tempBoogie17: int;
  var inline$v1.Eval$0$tempBoogie18: int;
  var inline$v1.Eval$0$tempBoogie19: int;
  var inline$v1.Eval$0$__havoc_dummy_return: int;
  var inline$v1.Eval$0$e_.1: int;
  var inline$v1.Eval$0$v3.Mem_T.result__EXPR: [int]int;
  var inline$v3.Eval$0$havoc_stringTemp: int;
  var inline$v3.Eval$0$condVal: int;
  var inline$v3.Eval$0$a1: int;
  var inline$v3.Eval$0$a2: int;
  var inline$v3.Eval$0$e: int;
  var inline$v3.Eval$0$op: int;
  var inline$v3.Eval$0$res: int;
  var inline$v3.Eval$0$tempBoogie0: int;
  var inline$v3.Eval$0$tempBoogie1: int;
  var inline$v3.Eval$0$tempBoogie2: int;
  var inline$v3.Eval$0$tempBoogie3: int;
  var inline$v3.Eval$0$tempBoogie4: int;
  var inline$v3.Eval$0$tempBoogie5: int;
  var inline$v3.Eval$0$tempBoogie6: int;
  var inline$v3.Eval$0$tempBoogie7: int;
  var inline$v3.Eval$0$tempBoogie8: int;
  var inline$v3.Eval$0$tempBoogie9: int;
  var inline$v3.Eval$0$tempBoogie10: int;
  var inline$v3.Eval$0$tempBoogie11: int;
  var inline$v3.Eval$0$tempBoogie12: int;
  var inline$v3.Eval$0$tempBoogie13: int;
  var inline$v3.Eval$0$tempBoogie14: int;
  var inline$v3.Eval$0$tempBoogie15: int;
  var inline$v3.Eval$0$tempBoogie16: int;
  var inline$v3.Eval$0$tempBoogie17: int;
  var inline$v3.Eval$0$tempBoogie18: int;
  var inline$v3.Eval$0$tempBoogie19: int;
  var inline$v3.Eval$0$__havoc_dummy_return: int;
  var inline$v3.Eval$0$e_.1: int;
  var inline$v3.Eval$0$v3.Mem_T.result__EXPR: [int]int;

  AA_INSTR_EQ_BODY:
    AA_TEMP00 := v3.Mem_T.result__EXPR;
    goto inline$v1.Eval$0$Entry;

  inline$v1.Eval$0$Entry:
    inline$v1.Eval$0$e_.1 := e_.1;
    inline$v1.Eval$0$v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR;
    goto inline$v1.Eval$0$anon0#2;

  inline$v1.Eval$0$anon0#2:
    inline$v1.Eval$0$havoc_stringTemp := 0;
    goto inline$v1.Eval$0$start#2;

  inline$v1.Eval$0$start#2:
    assume v3.INT_LT(inline$v1.Eval$0$e_.1, v3.alloc);
    inline$v1.Eval$0$e := 0;
    assume v3.INT_GEQ(inline$v1.Eval$0$e_.1, 0);
    inline$v1.Eval$0$e := inline$v1.Eval$0$e_.1;
    goto inline$v1.Eval$0$label_3#2;

  inline$v1.Eval$0$label_3#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 10} true;
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    goto inline$v1.Eval$0$label_3_true#2, inline$v1.Eval$0$label_3_false#2;

  inline$v1.Eval$0$label_3_false#2:
    assume !v3.INT_EQ(v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v1.Eval$0$e)], 1);
    assume v3.value_is(v1.__ctobpl_const_1, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_2, v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v1.Eval$0$e)]);
    goto inline$v1.Eval$0$label_4#2;

  inline$v1.Eval$0$label_4#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 14} true;
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    goto inline$v1.Eval$0$label_4_true#2, inline$v1.Eval$0$label_4_false#2;

  inline$v1.Eval$0$label_4_false#2:
    assume !v3.INT_EQ(v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v1.Eval$0$e)], 2);
    assume v3.value_is(v1.__ctobpl_const_3, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_4, v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v1.Eval$0$e)]);
    goto inline$v1.Eval$0$label_6#2;

  inline$v1.Eval$0$label_6#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 20} true;
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR[v3.result__EXPR(inline$v1.Eval$0$e) := 0 - 1];
    assume v3.value_is(v1.__ctobpl_const_11, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_12, v3.Mem_T.result__EXPR[v3.result__EXPR(inline$v1.Eval$0$e)]);
    goto inline$v1.Eval$0$label_1#2;

  inline$v1.Eval$0$label_4_true#2:
    assume v3.INT_EQ(v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v1.Eval$0$e)], 2);
    assume v3.value_is(v1.__ctobpl_const_3, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_4, v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v1.Eval$0$e)]);
    goto inline$v1.Eval$0$label_7#2;

  inline$v1.Eval$0$label_7#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 16} true;
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR[v3.result__EXPR(inline$v1.Eval$0$e) := v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(v3.Mem_T.op1__EXPR[v3.op1__EXPR(inline$v1.Eval$0$e)], v3.Mem_T.op2__EXPR[v3.op2__EXPR(inline$v1.Eval$0$e)], 1)];
    assume v3.value_is(v1.__ctobpl_const_13, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_14, v3.Mem_T.result__EXPR[v3.result__EXPR(inline$v1.Eval$0$e)]);
    assume v3.value_is(v1.__ctobpl_const_15, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_16, v3.Mem_T.op1__EXPR[v3.op1__EXPR(inline$v1.Eval$0$e)]);
    assume v3.value_is(v1.__ctobpl_const_17, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_18, v3.Mem_T.op2__EXPR[v3.op2__EXPR(inline$v1.Eval$0$e)]);
    goto inline$v1.Eval$0$label_1#2;

  inline$v1.Eval$0$label_3_true#2:
    assume v3.INT_EQ(v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v1.Eval$0$e)], 1);
    assume v3.value_is(v1.__ctobpl_const_1, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_2, v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v1.Eval$0$e)]);
    goto inline$v1.Eval$0$label_5#2;

  inline$v1.Eval$0$label_5#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 12} true;
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    assume v3.INT_GEQ(inline$v1.Eval$0$e, 0);
    
    v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR[v3.result__EXPR(inline$v1.Eval$0$e) := v3.INT_PLUS(v3.Mem_T.op1__EXPR[v3.op1__EXPR(inline$v1.Eval$0$e)], 1, v3.Mem_T.op2__EXPR[v3.op2__EXPR(inline$v1.Eval$0$e)])];
    assume v3.value_is(v1.__ctobpl_const_5, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_6, v3.Mem_T.result__EXPR[v3.result__EXPR(inline$v1.Eval$0$e)]);
    assume v3.value_is(v1.__ctobpl_const_7, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_8, v3.Mem_T.op1__EXPR[v3.op1__EXPR(inline$v1.Eval$0$e)]);
    assume v3.value_is(v1.__ctobpl_const_9, inline$v1.Eval$0$e);
    assume v3.value_is(v1.__ctobpl_const_10, v3.Mem_T.op2__EXPR[v3.op2__EXPR(inline$v1.Eval$0$e)]);
    goto inline$v1.Eval$0$label_1#2;

  inline$v1.Eval$0$label_1#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v1\foo.c"} {:sourceline 22} true;
    goto inline$v1.Eval$0$Return;

  inline$v1.Eval$0$Return:
    assume true;
    goto AA_INSTR_EQ_BODY$1;

  AA_INSTR_EQ_BODY$1:
    AA_TEMP10 := v3.Mem_T.result__EXPR;
    v3.Mem_T.result__EXPR := AA_TEMP00;
    goto inline$v3.Eval$0$Entry;

  inline$v3.Eval$0$Entry:
    inline$v3.Eval$0$e_.1 := e_.1;
    inline$v3.Eval$0$v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR;
    goto inline$v3.Eval$0$anon0#2;

  inline$v3.Eval$0$anon0#2:
    inline$v3.Eval$0$havoc_stringTemp := 0;
    goto inline$v3.Eval$0$start#2;

  inline$v3.Eval$0$start#2:
    assume v3.INT_LT(inline$v3.Eval$0$e_.1, v3.alloc);
    inline$v3.Eval$0$a1 := 0;
    inline$v3.Eval$0$a2 := 0;
    inline$v3.Eval$0$e := 0;
    assume v3.INT_GEQ(inline$v3.Eval$0$e_.1, 0);
    inline$v3.Eval$0$op := 0;
    inline$v3.Eval$0$res := 0;
    inline$v3.Eval$0$e := inline$v3.Eval$0$e_.1;
    goto inline$v3.Eval$0$label_3#2;

  inline$v3.Eval$0$label_3#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 14} true;
    goto inline$v3.Eval$0$label_4#2;

  inline$v3.Eval$0$label_4#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 14} true;
    goto inline$v3.Eval$0$label_5#2;

  inline$v3.Eval$0$label_5#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 14} true;
    goto inline$v3.Eval$0$label_6#2;

  inline$v3.Eval$0$label_6#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 14} true;
    goto inline$v3.Eval$0$label_7#2;

  inline$v3.Eval$0$label_7#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 17} true;
    assume v3.INT_GEQ(inline$v3.Eval$0$e, 0);
    
    inline$v3.Eval$0$op := v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v3.Eval$0$e)];
    assume v3.value_is(v3.__ctobpl_const_1, inline$v3.Eval$0$op);
    assume v3.value_is(v3.__ctobpl_const_2, inline$v3.Eval$0$e);
    assume v3.value_is(v3.__ctobpl_const_3, v3.Mem_T.oper__EXPR[v3.oper__EXPR(inline$v3.Eval$0$e)]);
    goto inline$v3.Eval$0$label_8#2;

  inline$v3.Eval$0$label_8#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 18} true;
    assume v3.INT_GEQ(inline$v3.Eval$0$e, 0);
    
    inline$v3.Eval$0$a1 := v3.Mem_T.op1__EXPR[v3.op1__EXPR(inline$v3.Eval$0$e)];
    assume v3.value_is(v3.__ctobpl_const_4, inline$v3.Eval$0$a1);
    assume v3.value_is(v3.__ctobpl_const_5, inline$v3.Eval$0$e);
    assume v3.value_is(v3.__ctobpl_const_6, v3.Mem_T.op1__EXPR[v3.op1__EXPR(inline$v3.Eval$0$e)]);
    goto inline$v3.Eval$0$label_9#2;

  inline$v3.Eval$0$label_9#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 19} true;
    assume v3.INT_GEQ(inline$v3.Eval$0$e, 0);
    
    inline$v3.Eval$0$a2 := v3.Mem_T.op2__EXPR[v3.op2__EXPR(inline$v3.Eval$0$e)];
    assume v3.value_is(v3.__ctobpl_const_7, inline$v3.Eval$0$a2);
    assume v3.value_is(v3.__ctobpl_const_8, inline$v3.Eval$0$e);
    assume v3.value_is(v3.__ctobpl_const_9, v3.Mem_T.op2__EXPR[v3.op2__EXPR(inline$v3.Eval$0$e)]);
    goto inline$v3.Eval$0$label_10#2;

  inline$v3.Eval$0$label_10#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 20} true;
    inline$v3.Eval$0$res := 0 - 1;
    assume v3.value_is(v3.__ctobpl_const_10, inline$v3.Eval$0$res);
    goto inline$v3.Eval$0$label_11#2;

  inline$v3.Eval$0$label_11#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 22} true;
    goto inline$v3.Eval$0$label_11_case_0#2, inline$v3.Eval$0$label_11_case_1#2, inline$v3.Eval$0$label_11_case_2#2, inline$v3.Eval$0$label_11_case_3#2;

  inline$v3.Eval$0$label_11_case_3#2:
    assume v3.INT_EQ(inline$v3.Eval$0$op, 3);
    assume v3.value_is(v3.__ctobpl_const_11, inline$v3.Eval$0$op);
    goto inline$v3.Eval$0$label_15#2;

  inline$v3.Eval$0$label_15#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 29} true;
    inline$v3.Eval$0$res := v3.INT_MULT(inline$v3.Eval$0$a1, inline$v3.Eval$0$a2);
    assume v3.value_is(v3.__ctobpl_const_21, inline$v3.Eval$0$res);
    assume v3.value_is(v3.__ctobpl_const_22, inline$v3.Eval$0$a1);
    assume v3.value_is(v3.__ctobpl_const_23, inline$v3.Eval$0$a2);
    goto inline$v3.Eval$0$label_12#2;

  inline$v3.Eval$0$label_11_case_2#2:
    assume v3.INT_EQ(inline$v3.Eval$0$op, 2);
    assume v3.value_is(v3.__ctobpl_const_11, inline$v3.Eval$0$op);
    goto inline$v3.Eval$0$label_14#2;

  inline$v3.Eval$0$label_14#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 27} true;
    inline$v3.Eval$0$res := v3.INT_MINUS_BOTH_PTR_OR_BOTH_INT(inline$v3.Eval$0$a1, inline$v3.Eval$0$a2, 1);
    assume v3.value_is(v3.__ctobpl_const_18, inline$v3.Eval$0$res);
    assume v3.value_is(v3.__ctobpl_const_19, inline$v3.Eval$0$a1);
    assume v3.value_is(v3.__ctobpl_const_20, inline$v3.Eval$0$a2);
    goto inline$v3.Eval$0$label_12#2;

  inline$v3.Eval$0$label_11_case_1#2:
    assume v3.INT_EQ(inline$v3.Eval$0$op, 1);
    assume v3.value_is(v3.__ctobpl_const_11, inline$v3.Eval$0$op);
    goto inline$v3.Eval$0$label_13#2;

  inline$v3.Eval$0$label_13#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 25} true;
    inline$v3.Eval$0$res := v3.INT_PLUS(inline$v3.Eval$0$a1, 1, inline$v3.Eval$0$a2);
    assume v3.value_is(v3.__ctobpl_const_15, inline$v3.Eval$0$res);
    assume v3.value_is(v3.__ctobpl_const_16, inline$v3.Eval$0$a1);
    assume v3.value_is(v3.__ctobpl_const_17, inline$v3.Eval$0$a2);
    goto inline$v3.Eval$0$label_12#2;

  inline$v3.Eval$0$label_11_case_0#2:
    assume v3.INT_NEQ(inline$v3.Eval$0$op, 1);
    assume v3.INT_NEQ(inline$v3.Eval$0$op, 2);
    assume v3.INT_NEQ(inline$v3.Eval$0$op, 3);
    assume v3.value_is(v3.__ctobpl_const_11, inline$v3.Eval$0$op);
    goto inline$v3.Eval$0$label_12#2;

  inline$v3.Eval$0$label_12#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 32} true;
    assume v3.INT_GEQ(inline$v3.Eval$0$e, 0);
    
    v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR[v3.result__EXPR(inline$v3.Eval$0$e) := inline$v3.Eval$0$res];
    assume v3.value_is(v3.__ctobpl_const_12, inline$v3.Eval$0$e);
    assume v3.value_is(v3.__ctobpl_const_13, v3.Mem_T.result__EXPR[v3.result__EXPR(inline$v3.Eval$0$e)]);
    assume v3.value_is(v3.__ctobpl_const_14, inline$v3.Eval$0$res);
    goto inline$v3.Eval$0$label_1#2;

  inline$v3.Eval$0$label_1#2:
    assert {:sourcefile "c:\users\t-rohsin\research\symdiff\projects\symb_diff\symdiff\test\c_examples\ex3\v3\foo.c"} {:sourceline 33} true;
    goto inline$v3.Eval$0$Return;

  inline$v3.Eval$0$Return:
    assume true;
    goto AA_INSTR_EQ_BODY$2;

  AA_INSTR_EQ_BODY$2:
    Output_of_v1.Eval_v3.Mem_T.result__EXPR := AA_TEMP10;
    Output_of_v3.Eval_v3.Mem_T.result__EXPR := v3.Mem_T.result__EXPR;
    AA_TEMP30 := AA_TEMP10 == v3.Mem_T.result__EXPR || (forall _x0: int :: AA_TEMP10[_x0] == v3.Mem_T.result__EXPR[_x0]);
    return;
}


