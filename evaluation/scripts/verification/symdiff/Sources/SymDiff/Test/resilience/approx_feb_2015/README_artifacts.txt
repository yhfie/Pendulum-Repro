// This directory checks in the examples/scripts for applying SymDiff for verifying Approx transformations/control-flow equivalence (feb-2015)
// The scripts may not work for future versions of SymDiff/Boogie/Z3
// A zip file containing the binaries etc. are present here ) http://1drv.ms/1A5wuuj

//Automated Differential Program Verification for Approximate Computing



Directory structure
---------------------
The distribution has following:
  - README_artifacts.txt //this file
  - SymDiff              //symdiff related binaries
  - runall.bat           //script to run Boogie on SymDiff generated files 
  - run_symdiff_all.bat  //script to run SymDiff on original files
  - examples             //directory of examples

  Each directory dir in examples has the following files:
    - v1.bpl  //original program
    - v2.bpl  //program with approximation/fault
    - ms_symdiff_file.bpl //manual specifications
    - mergedProgSingle.bpl //the product program generated by SymDiff + manual specs
     
   Look for "//manual" in mergedProgSingle.bpl + ms_symdiff_file.bpl to see where manual specifications are added
    

Install SymDiff (for Windows only)
----------------------------------
  - From a Visual Studio command promt, perform
     > Symdiff\scripts\setup.cmd

Instructions to Boogie directly on the generated mergedProgSingle.bpl
-------------------------------------------------------------
  - From a Visual Studio command promt, perform
     > runall.bat
       - The expected output is to see "x verified, 0 errors" for each example

Instructions to run Symdiff on {v1.bpl, v2.bpl, ms_symdiff_file.bpl}
-------------------------------------------------------------
  - From a Visual Studio command promt, perform
     > run_symdiff_all.bat
       - The expected output is to see a lines with "x verified, 0 errors" for the [mergedProgSingle.bpl]


OPTIONAL: Instructions to run SymDiff on a fresh  example
-------------------------------------------------
  - Go to a directory (e.g. paper\ex1)
  - Create v1.bpl, v2.bpl
    - Add any annotations (assert/require/ensures) that are single-program invariants
  - Run Symdiff to get the signature of procedures in merged program
    > run_symdiff_bpl.cmd v1 v2 /rvt /opts:" -usemutual -asserts -freeContracts" /inferContracts:"/inlineDepth:1"
      - The mergedProgSingle.bpl shows signatures of functions MS$_v1.Foo$_v2.Foo(..) and MS_pre_$_v1.Foo$_v2.Foo(..) 
      - Copy the functions to ms_symdiff_file.bpl and override the "true" with the required invariants
  - Rerun symdiff with the manual annotations
    > run_symdiff_bpl.cmd v1 v2 /rvt /opts:" -usemutual -asserts -freeContracts" /inferContracts:"/inlineDepth:1"
      - This should verify
  - If the example does not verify, run Boogie directly on the mergedProgSingle.bpl to add missing invariants and try to verify
      > %SYMDIFF_ROOT%\references\boogie.exe /doModSetAnalysis mergedProgSingle.bpl  /contractInfer /printAssignment


   