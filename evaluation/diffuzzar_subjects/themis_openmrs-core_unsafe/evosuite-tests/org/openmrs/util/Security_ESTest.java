/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 08 08:14:10 GMT 2022
 */

package org.openmrs.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import org.openmrs.util.Security;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Security_ESTest extends Security_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Security.generateNewInitVector();
      String string0 = Security.encrypt("%%FhQ`A8+XWky6M", byteArray0, byteArray0);
      assertEquals("oZZYWep06aB29QVpgaZ0IQ==", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-434));
      byte[] byteArray0 = Security.generateNewInitVector();
      assertEquals(16, byteArray0.length);
      
      String string0 = Security.decrypt("/FhBTbCI9zVpCqx3ne5Ksg==", byteArray0, byteArray0);
      assertEquals("%%FhQ`A8+XWky6M", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = Security.decrypt("eY9yfFmfpkWk2l7xAauQCjhYepCKaiTonD2fAF/9C9M=");
      assertEquals("EkE8dxoro76@y#5f", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Security.decrypt("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Security.encrypt((String) null, byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openmrs.util.Security", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Security.encrypt("354ef1c757ebf9f4ad42585f76d3f469d3b94aa4", byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Security.encrypt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openmrs.util.Security", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Security.encodeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openmrs.util.Security", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Security.decrypt("validation.disable", (byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.crypto.spec.IvParameterSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Security.decrypt("SHA1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openmrs.util.Security", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Security.decrypt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Security.getSavedSecretKey();
      String string0 = Security.decrypt("", byteArray0, byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Security.getSavedInitVector();
      // Undeclared exception!
      try { 
        Security.decrypt("?+_", byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 3f
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = Security.encodeString("vpwC5a8bzWIxV3dzt6z+UA==");
      assertEquals("9f34ece8db44789a517fafdd5057bb48383d0ae2726954df36563394b1aec153124b4510c1fab168730a76fab9f9966ede603441a7cd6603842738a82c0f07cf", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = Security.hashMatches("7724a016323b5489038fe3aa4e469f1d46299", "Wfd:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = Security.hashMatches("7724a0160323b5489038fe3aa4e4690f1d462909", "Wfd:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = Security.hashMatches("558c9bf9d49b7b519c224240c0266afa730b97a6c8fe30d515c6b63f18ef22616cc755624bf2595eb8f33cb88d2d5767d0fab56218ba0341b81cc1e1fc311ef9", "Wfd:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Security.hashMatches("", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openmrs.util.Security", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Security.hashMatches((String) null, "rt_.|BN.M'SpY{&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openmrs.util.Security", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Security.getRandomToken();
      assertEquals("f5b40557bd2a68049cdbc4edbe9b197e14803f5b9d3be1ab0888bba5a6b038a9c00c2bb0ca10458dda08b56c9ac17d74ef6503db4d33d8c45e00b01fc3e344b6", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Security.decrypt("M!@Nt*mlR@B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 21
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = Security.generateNewSecretKey();
      // Undeclared exception!
      try { 
        Security.encrypt((String) null, byteArray0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openmrs.util.Security", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = Security.encrypt("%%FhQ`A8+XWky6M");
      assertEquals("vpwC5a8bzWIxV3dzt6z+UA==", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = Security.hashMatches("053b870087069b2720a191296b9da1cef7a45d4b", "%%FhQ`A8+XWky6M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Security.generateNewInitVector();
      // Undeclared exception!
      try { 
        Security.decrypt("/FhBTbCI9zVpCqx3ne5Ksg==", byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openmrs.util.Security", e);
      }
  }
}
