/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 12:57:31 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ModPow1_ESTest extends ModPow1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow1.standardMultiply(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger1.shiftLeft((byte)6);
      BigInteger bigInteger3 = ModPow1.standardMultiply(bigInteger1, bigInteger2);
      assertEquals((short) (-15360), bigInteger3.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow1.standardMultiply(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = ModPow1.standardMultiply(bigInteger1, bigInteger0);
      assertEquals((byte) (-24), bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = ModPow1.modPow1_unsafe_inline(bigInteger1, bigInteger0, bigInteger0);
      assertEquals((byte) (-74), bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(3633);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = ModPow1.modPow1_unsafe(bigInteger1, bigInteger2, bigInteger2, 18);
      assertEquals((byte) (-97), bigInteger3.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow1.standardMultiply(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger1.shiftLeft((byte)6);
      BigInteger bigInteger3 = ModPow1.fastMultiply_inline(bigInteger1, bigInteger2);
      assertEquals((short) (-15360), bigInteger3.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow1.standardMultiply(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = ModPow1.fastMultiply_inline(bigInteger0, bigInteger1);
      assertEquals((short)1000, bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = ModPow1.fastMultiply_1(bigInteger1, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow1.fastMultiply_1(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = ModPow1.fastMultiply_1(bigInteger0, bigInteger1);
      BigInteger bigInteger3 = ModPow1.modPow1_unsafe_inline(bigInteger2, bigInteger1, bigInteger2);
      assertEquals((byte) (-24), bigInteger3.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = new BigInteger(3606, mockRandom0);
      BigInteger bigInteger1 = ModPow1.standardMultiply(bigInteger0, bigInteger0);
      // Undeclared exception!
      ModPow1.standardMultiply(bigInteger1, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModPow1.standardMultiply((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        ModPow1.modPow1_unsafe_inline(bigInteger0, (BigInteger) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = ModPow1.modPow1_unsafe_inline(bigInteger0, bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        ModPow1.modPow1_unsafe_inline(bigInteger0, bigInteger1, bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(991, mockRandom0);
      // Undeclared exception!
      ModPow1.modPow1_unsafe(bigInteger0, bigInteger0, bigInteger0, 991);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        ModPow1.modPow1_unsafe(bigInteger0, bigInteger0, (BigInteger) null, 3609);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        ModPow1.modPow1_unsafe(bigInteger0, bigInteger1, bigInteger1, 10);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        ModPow1.fastMultiply_inline(bigInteger0, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ModPow1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        ModPow1.fastMultiply_1((BigInteger) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ModPow1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = ModPow1.fastMultiply_1(bigInteger0, bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(1018);
      BigInteger bigInteger2 = ModPow1.fastMultiply_inline(bigInteger0, bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger3.subtract(bigInteger2);
      // Undeclared exception!
      ModPow1.modPow1_unsafe_inline(bigInteger2, bigInteger4, bigInteger3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow1.modPow1_unsafe(bigInteger0, bigInteger0, bigInteger0, (-1));
      BigInteger bigInteger2 = ModPow1.fastMultiply_inline(bigInteger0, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = ModPow1.fastMultiply_inline(bigInteger0, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.andNot(bigInteger0);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger2 = new BigInteger(3606, mockRandom0);
      BigInteger bigInteger3 = ModPow1.fastMultiply_inline(bigInteger2, bigInteger2);
      BigInteger bigInteger4 = ModPow1.fastMultiply_1(bigInteger3, bigInteger1);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger3, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(3633);
      BigInteger bigInteger2 = ModPow1.fastMultiply_1(bigInteger1, bigInteger1);
      assertNotSame(bigInteger2, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = ModPow1.fastMultiply_1(bigInteger1, bigInteger0);
      assertEquals((short)0, bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(1018);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = ModPow1.modPow1_unsafe_inline(bigInteger1, bigInteger0, bigInteger2);
      assertEquals((byte)0, bigInteger3.byteValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = ModPow1.modPow1_unsafe_inline(bigInteger0, bigInteger0, bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = ModPow1.modPow1_unsafe_inline(bigInteger0, bigInteger0, bigInteger1);
      assertEquals((byte)0, bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow1.modPow1_unsafe(bigInteger0, bigInteger0, bigInteger0, 1364);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ModPow1 modPow1_0 = new ModPow1();
  }
}
