/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 13:01:08 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ModPow2_ESTest extends ModPow2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = new BigInteger(2100, 56, mockRandom0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)683, bigInteger1.shortValue());
      assertEquals((byte) (-85), bigInteger1.byteValue());
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom((-92L));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      BigInteger bigInteger2 = new BigInteger(2100, 56, mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotNull(bigInteger2);
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      
      BigInteger bigInteger3 = bigInteger0.or(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertTrue(bigInteger3.equals((Object)bigInteger2));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotNull(bigInteger3);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((short)8205, bigInteger3.shortValue());
      assertEquals((byte)13, bigInteger3.byteValue());
      
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotNull(bigInteger4);
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      
      BigInteger bigInteger5 = BigInteger.TEN;
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotNull(bigInteger5);
      assertEquals((short)10, bigInteger5.shortValue());
      assertEquals((byte)10, bigInteger5.byteValue());
      
      BigInteger bigInteger6 = bigInteger5.not();
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotNull(bigInteger6);
      assertEquals((short)10, bigInteger5.shortValue());
      assertEquals((byte)10, bigInteger5.byteValue());
      assertEquals((short) (-11), bigInteger6.shortValue());
      assertEquals((byte) (-11), bigInteger6.byteValue());
      
      BigInteger bigInteger7 = BigInteger.TEN;
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger2);
      assertSame(bigInteger7, bigInteger5);
      assertNotNull(bigInteger7);
      assertEquals((byte)10, bigInteger7.byteValue());
      assertEquals((short)10, bigInteger7.shortValue());
      
      BigInteger bigInteger8 = ModPow2.fastMultiply_1(bigInteger3, bigInteger7);
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger7));
      assertTrue(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger4));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger8);
      assertNotSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger8);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger2);
      assertSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotNull(bigInteger8);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((short)8205, bigInteger3.shortValue());
      assertEquals((byte)13, bigInteger3.byteValue());
      assertEquals((byte)10, bigInteger7.byteValue());
      assertEquals((short)10, bigInteger7.shortValue());
      assertEquals((byte) (-126), bigInteger8.byteValue());
      assertEquals((short)16514, bigInteger8.shortValue());
      
      Random.setNextRandom(0);
      BigInteger bigInteger9 = ModPow2.fastMultiply_inline(bigInteger2, bigInteger4);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger8));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger9.equals((Object)bigInteger6));
      assertFalse(bigInteger9.equals((Object)bigInteger5));
      assertFalse(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger2));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger3));
      assertFalse(bigInteger9.equals((Object)bigInteger8));
      assertFalse(bigInteger9.equals((Object)bigInteger0));
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger9);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger8);
      assertSame(bigInteger4, bigInteger9);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger9, bigInteger4);
      assertNotSame(bigInteger9, bigInteger6);
      assertNotSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger7);
      assertNotSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotSame(bigInteger9, bigInteger3);
      assertNotSame(bigInteger9, bigInteger8);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotNull(bigInteger9);
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger9.shortValue());
      assertEquals((byte)0, bigInteger9.byteValue());
      
      BigInteger bigInteger10 = BigInteger.TEN;
      assertFalse(bigInteger10.equals((Object)bigInteger9));
      assertFalse(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertFalse(bigInteger10.equals((Object)bigInteger8));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger4));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger2));
      assertSame(bigInteger10, bigInteger7);
      assertNotSame(bigInteger10, bigInteger9);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger6);
      assertNotSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger4);
      assertSame(bigInteger10, bigInteger5);
      assertNotSame(bigInteger10, bigInteger1);
      assertNotSame(bigInteger10, bigInteger2);
      assertNotNull(bigInteger10);
      assertEquals((short)10, bigInteger10.shortValue());
      assertEquals((byte)10, bigInteger10.byteValue());
      
      BigInteger bigInteger11 = ModPow2.fastMultiply_inline(bigInteger2, bigInteger10);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger9));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger10));
      assertFalse(bigInteger10.equals((Object)bigInteger9));
      assertFalse(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertFalse(bigInteger10.equals((Object)bigInteger8));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger4));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger2));
      assertFalse(bigInteger11.equals((Object)bigInteger10));
      assertFalse(bigInteger11.equals((Object)bigInteger7));
      assertFalse(bigInteger11.equals((Object)bigInteger0));
      assertFalse(bigInteger11.equals((Object)bigInteger9));
      assertTrue(bigInteger11.equals((Object)bigInteger8));
      assertFalse(bigInteger11.equals((Object)bigInteger6));
      assertFalse(bigInteger11.equals((Object)bigInteger2));
      assertFalse(bigInteger11.equals((Object)bigInteger1));
      assertFalse(bigInteger11.equals((Object)bigInteger3));
      assertFalse(bigInteger11.equals((Object)bigInteger4));
      assertFalse(bigInteger11.equals((Object)bigInteger5));
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger11);
      assertNotSame(bigInteger2, bigInteger9);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger10);
      assertSame(bigInteger10, bigInteger7);
      assertNotSame(bigInteger10, bigInteger9);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger11);
      assertNotSame(bigInteger10, bigInteger6);
      assertNotSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger4);
      assertSame(bigInteger10, bigInteger5);
      assertNotSame(bigInteger10, bigInteger1);
      assertNotSame(bigInteger10, bigInteger2);
      assertNotSame(bigInteger11, bigInteger10);
      assertNotSame(bigInteger11, bigInteger7);
      assertNotSame(bigInteger11, bigInteger0);
      assertNotSame(bigInteger11, bigInteger9);
      assertNotSame(bigInteger11, bigInteger8);
      assertNotSame(bigInteger11, bigInteger6);
      assertNotSame(bigInteger11, bigInteger2);
      assertNotSame(bigInteger11, bigInteger1);
      assertNotSame(bigInteger11, bigInteger3);
      assertNotSame(bigInteger11, bigInteger4);
      assertNotSame(bigInteger11, bigInteger5);
      assertNotNull(bigInteger11);
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((short)10, bigInteger10.shortValue());
      assertEquals((byte)10, bigInteger10.byteValue());
      assertEquals((byte) (-126), bigInteger11.byteValue());
      assertEquals((short)16514, bigInteger11.shortValue());
      
      BigInteger bigInteger12 = ModPow2.modPow2_unsafe(bigInteger10, bigInteger2, bigInteger1, 56);
      assertFalse(bigInteger12.equals((Object)bigInteger4));
      assertFalse(bigInteger12.equals((Object)bigInteger6));
      assertFalse(bigInteger12.equals((Object)bigInteger11));
      assertFalse(bigInteger12.equals((Object)bigInteger0));
      assertFalse(bigInteger12.equals((Object)bigInteger9));
      assertFalse(bigInteger12.equals((Object)bigInteger5));
      assertFalse(bigInteger12.equals((Object)bigInteger10));
      assertFalse(bigInteger12.equals((Object)bigInteger3));
      assertFalse(bigInteger12.equals((Object)bigInteger7));
      assertFalse(bigInteger12.equals((Object)bigInteger8));
      assertFalse(bigInteger12.equals((Object)bigInteger1));
      assertFalse(bigInteger12.equals((Object)bigInteger2));
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger10));
      assertFalse(bigInteger1.equals((Object)bigInteger11));
      assertFalse(bigInteger1.equals((Object)bigInteger9));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger11));
      assertFalse(bigInteger2.equals((Object)bigInteger9));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger10));
      assertFalse(bigInteger10.equals((Object)bigInteger9));
      assertFalse(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger11));
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertFalse(bigInteger10.equals((Object)bigInteger8));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger4));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger2));
      assertNotSame(bigInteger12, bigInteger4);
      assertNotSame(bigInteger12, bigInteger6);
      assertNotSame(bigInteger12, bigInteger11);
      assertNotSame(bigInteger12, bigInteger0);
      assertNotSame(bigInteger12, bigInteger9);
      assertNotSame(bigInteger12, bigInteger5);
      assertNotSame(bigInteger12, bigInteger10);
      assertNotSame(bigInteger12, bigInteger3);
      assertNotSame(bigInteger12, bigInteger7);
      assertNotSame(bigInteger12, bigInteger8);
      assertNotSame(bigInteger12, bigInteger1);
      assertNotSame(bigInteger12, bigInteger2);
      assertNotSame(mockRandom0, mockRandom2);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger10);
      assertNotSame(bigInteger1, bigInteger11);
      assertNotSame(bigInteger1, bigInteger9);
      assertNotSame(bigInteger1, bigInteger12);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger12);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger11);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger9);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger10);
      assertNotSame(bigInteger10, bigInteger12);
      assertSame(bigInteger10, bigInteger7);
      assertNotSame(bigInteger10, bigInteger9);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger11);
      assertNotSame(bigInteger10, bigInteger6);
      assertNotSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger4);
      assertSame(bigInteger10, bigInteger5);
      assertNotSame(bigInteger10, bigInteger1);
      assertNotSame(bigInteger10, bigInteger2);
      assertNotNull(bigInteger12);
      assertEquals((byte) (-122), bigInteger12.byteValue());
      assertEquals((short) (-6778), bigInteger12.shortValue());
      assertEquals((short)683, bigInteger1.shortValue());
      assertEquals((byte) (-85), bigInteger1.byteValue());
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((short)10, bigInteger10.shortValue());
      assertEquals((byte)10, bigInteger10.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(2100, 2100, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)683, bigInteger0.shortValue());
      assertEquals((byte) (-85), bigInteger0.byteValue());
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom((-92L));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      BigInteger bigInteger1 = new BigInteger(2100, 2100, mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte)13, bigInteger1.byteValue());
      assertEquals((short)8205, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = BigInteger.TEN;
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotNull(bigInteger3);
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = bigInteger3.not();
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotNull(bigInteger4);
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertEquals((short) (-11), bigInteger4.shortValue());
      assertEquals((byte) (-11), bigInteger4.byteValue());
      
      BigInteger bigInteger5 = BigInteger.TEN;
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger3);
      assertNotNull(bigInteger5);
      assertEquals((byte)10, bigInteger5.byteValue());
      assertEquals((short)10, bigInteger5.shortValue());
      
      BigInteger bigInteger6 = ModPow2.fastMultiply_1(bigInteger1, bigInteger5);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotNull(bigInteger6);
      assertEquals((byte)13, bigInteger1.byteValue());
      assertEquals((short)8205, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger5.byteValue());
      assertEquals((short)10, bigInteger5.shortValue());
      assertEquals((short)16514, bigInteger6.shortValue());
      assertEquals((byte) (-126), bigInteger6.byteValue());
      
      BigInteger bigInteger7 = ModPow2.fastMultiply_inline(bigInteger1, bigInteger2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger0);
      assertSame(bigInteger7, bigInteger2);
      assertNotNull(bigInteger7);
      assertEquals((byte)13, bigInteger1.byteValue());
      assertEquals((short)8205, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger7.shortValue());
      assertEquals((byte)0, bigInteger7.byteValue());
      
      BigInteger bigInteger8 = BigInteger.TEN;
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger4));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertSame(bigInteger8, bigInteger5);
      assertSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotNull(bigInteger8);
      assertEquals((byte)10, bigInteger8.byteValue());
      assertEquals((short)10, bigInteger8.shortValue());
      
      BigInteger bigInteger9 = ModPow2.fastMultiply_inline(bigInteger1, bigInteger8);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger4));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertTrue(bigInteger9.equals((Object)bigInteger6));
      assertFalse(bigInteger9.equals((Object)bigInteger5));
      assertFalse(bigInteger9.equals((Object)bigInteger2));
      assertFalse(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger3));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger0));
      assertFalse(bigInteger9.equals((Object)bigInteger8));
      assertFalse(bigInteger9.equals((Object)bigInteger4));
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger9);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger9);
      assertSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger9, bigInteger7);
      assertNotSame(bigInteger9, bigInteger3);
      assertNotSame(bigInteger9, bigInteger6);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger8);
      assertNotSame(bigInteger9, bigInteger4);
      assertNotNull(bigInteger9);
      assertEquals((byte)13, bigInteger1.byteValue());
      assertEquals((short)8205, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger8.byteValue());
      assertEquals((short)10, bigInteger8.shortValue());
      assertEquals((short)16514, bigInteger9.shortValue());
      assertEquals((byte) (-126), bigInteger9.byteValue());
      
      // Undeclared exception!
      ModPow2.modPow2_unsafe(bigInteger8, bigInteger1, bigInteger0, 2100);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.flipBit(983);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      
      BigInteger bigInteger3 = bigInteger1.or(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotNull(bigInteger3);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotNull(bigInteger4);
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = bigInteger4.setBit((byte)1);
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotNull(bigInteger5);
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((short)2, bigInteger5.shortValue());
      assertEquals((byte)2, bigInteger5.byteValue());
      
      BigInteger bigInteger6 = bigInteger4.divide(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger5);
      assertSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger5);
      assertSame(bigInteger6, bigInteger2);
      assertSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotNull(bigInteger6);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger6.shortValue());
      
      BigInteger bigInteger7 = ModPow2.fastMultiply_1(bigInteger3, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger7);
      assertSame(bigInteger2, bigInteger4);
      assertSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotNull(bigInteger7);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((short)0, bigInteger7.shortValue());
      assertEquals((byte)0, bigInteger7.byteValue());
      
      BigInteger bigInteger8 = ModPow2.fastMultiply_1(bigInteger5, bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger6));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger7);
      assertSame(bigInteger2, bigInteger4);
      assertSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger3);
      assertSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger5);
      assertSame(bigInteger4, bigInteger8);
      assertSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger2);
      assertSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger5);
      assertSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger3);
      assertSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotNull(bigInteger8);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((short)2, bigInteger5.shortValue());
      assertEquals((byte)2, bigInteger5.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      assertEquals((byte)0, bigInteger8.byteValue());
      
      BigInteger bigInteger9 = bigInteger4.modPow(bigInteger0, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger0));
      assertFalse(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger5));
      assertFalse(bigInteger9.equals((Object)bigInteger3));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger5);
      assertSame(bigInteger4, bigInteger9);
      assertSame(bigInteger4, bigInteger8);
      assertSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger7);
      assertSame(bigInteger9, bigInteger8);
      assertSame(bigInteger9, bigInteger4);
      assertNotSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger3);
      assertSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger9, bigInteger1);
      assertSame(bigInteger9, bigInteger6);
      assertNotNull(bigInteger9);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((short)0, bigInteger9.shortValue());
      assertEquals((byte)0, bigInteger9.byteValue());
      
      BigInteger bigInteger10 = ModPow2.fastMultiply_1(bigInteger4, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger9));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertFalse(bigInteger1.equals((Object)bigInteger9));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger10.equals((Object)bigInteger5));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger7));
      assertFalse(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger10);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger10);
      assertNotSame(bigInteger1, bigInteger9);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger5);
      assertSame(bigInteger4, bigInteger9);
      assertSame(bigInteger4, bigInteger8);
      assertSame(bigInteger4, bigInteger10);
      assertSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger10, bigInteger5);
      assertSame(bigInteger10, bigInteger9);
      assertSame(bigInteger10, bigInteger4);
      assertSame(bigInteger10, bigInteger6);
      assertNotSame(bigInteger10, bigInteger3);
      assertSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger7);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger1);
      assertSame(bigInteger10, bigInteger2);
      assertNotNull(bigInteger10);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((short)0, bigInteger10.shortValue());
      assertEquals((byte)0, bigInteger10.byteValue());
      
      Random.setNextRandom(56);
      BigInteger bigInteger11 = ModPow2.fastMultiply_inline(bigInteger1, bigInteger5);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger10));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger9));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertFalse(bigInteger1.equals((Object)bigInteger10));
      assertFalse(bigInteger1.equals((Object)bigInteger9));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger9));
      assertFalse(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger10));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger8));
      assertFalse(bigInteger5.equals((Object)bigInteger6));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger11.equals((Object)bigInteger10));
      assertFalse(bigInteger11.equals((Object)bigInteger8));
      assertFalse(bigInteger11.equals((Object)bigInteger5));
      assertFalse(bigInteger11.equals((Object)bigInteger0));
      assertFalse(bigInteger11.equals((Object)bigInteger6));
      assertFalse(bigInteger11.equals((Object)bigInteger7));
      assertFalse(bigInteger11.equals((Object)bigInteger9));
      assertFalse(bigInteger11.equals((Object)bigInteger4));
      assertFalse(bigInteger11.equals((Object)bigInteger1));
      assertFalse(bigInteger11.equals((Object)bigInteger2));
      assertFalse(bigInteger11.equals((Object)bigInteger3));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger10);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger11);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger11);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger10);
      assertNotSame(bigInteger1, bigInteger9);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger5);
      assertSame(bigInteger4, bigInteger9);
      assertSame(bigInteger4, bigInteger8);
      assertNotSame(bigInteger4, bigInteger11);
      assertSame(bigInteger4, bigInteger10);
      assertSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger9);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger10);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger11);
      assertNotSame(bigInteger11, bigInteger10);
      assertNotSame(bigInteger11, bigInteger8);
      assertNotSame(bigInteger11, bigInteger5);
      assertNotSame(bigInteger11, bigInteger0);
      assertNotSame(bigInteger11, bigInteger6);
      assertNotSame(bigInteger11, bigInteger7);
      assertNotSame(bigInteger11, bigInteger9);
      assertNotSame(bigInteger11, bigInteger4);
      assertNotSame(bigInteger11, bigInteger1);
      assertNotSame(bigInteger11, bigInteger2);
      assertNotSame(bigInteger11, bigInteger3);
      assertNotNull(bigInteger11);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((short)2, bigInteger5.shortValue());
      assertEquals((byte)2, bigInteger5.byteValue());
      assertEquals((byte)0, bigInteger11.byteValue());
      assertEquals((short)0, bigInteger11.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(12, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(12, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      String string0 = bigInteger1.toString();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals("92768843500208351032118489412317582939507218298462797824", string0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(string0);
      assertEquals(12, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = ModPow2.fastMultiply_inline(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals(12, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger3 = new BigInteger(800, 800, mockRandom0);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertNotNull(bigInteger3);
      assertEquals((short)875, bigInteger3.shortValue());
      assertEquals((byte)107, bigInteger3.byteValue());
      
      BigInteger bigInteger4 = bigInteger2.or(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotNull(bigInteger4);
      assertEquals(12, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      
      BigInteger bigInteger5 = BigInteger.ZERO;
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotNull(bigInteger5);
      assertEquals((byte)0, bigInteger5.byteValue());
      assertEquals((short)0, bigInteger5.shortValue());
      
      BigInteger bigInteger6 = BigInteger.TEN;
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotNull(bigInteger6);
      assertEquals((short)10, bigInteger6.shortValue());
      assertEquals((byte)10, bigInteger6.byteValue());
      
      BigInteger bigInteger7 = bigInteger0.not();
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotNull(bigInteger7);
      assertEquals(12, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger7.byteValue());
      assertEquals((short) (-1), bigInteger7.shortValue());
      
      BigInteger bigInteger8 = bigInteger7.setBit(45);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger4));
      assertTrue(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger3));
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger8);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger3);
      assertNotNull(bigInteger8);
      assertEquals(12, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger7.byteValue());
      assertEquals((short) (-1), bigInteger7.shortValue());
      assertEquals((byte) (-1), bigInteger8.byteValue());
      assertEquals((short) (-1), bigInteger8.shortValue());
      
      BigInteger bigInteger9 = ModPow2.fastMultiply_1(bigInteger7, bigInteger3);
      assertFalse(bigInteger9.equals((Object)bigInteger4));
      assertFalse(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger3));
      assertFalse(bigInteger9.equals((Object)bigInteger2));
      assertFalse(bigInteger9.equals((Object)bigInteger6));
      assertFalse(bigInteger9.equals((Object)bigInteger5));
      assertFalse(bigInteger9.equals((Object)bigInteger0));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger8));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger7));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertTrue(bigInteger7.equals((Object)bigInteger8));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertNotSame(bigInteger9, bigInteger4);
      assertNotSame(bigInteger9, bigInteger7);
      assertNotSame(bigInteger9, bigInteger3);
      assertNotSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger9, bigInteger6);
      assertNotSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotSame(bigInteger9, bigInteger8);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger8);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger9);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger8);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger9);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotNull(bigInteger9);
      assertEquals(12, byteArray0.length);
      assertEquals((byte) (-107), bigInteger9.byteValue());
      assertEquals((short) (-875), bigInteger9.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)875, bigInteger3.shortValue());
      assertEquals((byte)107, bigInteger3.byteValue());
      assertEquals((byte) (-1), bigInteger7.byteValue());
      assertEquals((short) (-1), bigInteger7.shortValue());
      
      BigInteger bigInteger10 = ModPow2.fastMultiply_1(bigInteger4, bigInteger4);
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertFalse(bigInteger10.equals((Object)bigInteger8));
      assertFalse(bigInteger10.equals((Object)bigInteger9));
      assertFalse(bigInteger10.equals((Object)bigInteger5));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger2));
      assertFalse(bigInteger10.equals((Object)bigInteger4));
      assertFalse(bigInteger10.equals((Object)bigInteger7));
      assertFalse(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger9));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger1.equals((Object)bigInteger9));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger9));
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger8));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger4.equals((Object)bigInteger9));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertNotSame(bigInteger10, bigInteger6);
      assertNotSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger9);
      assertNotSame(bigInteger10, bigInteger5);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger2);
      assertNotSame(bigInteger10, bigInteger4);
      assertNotSame(bigInteger10, bigInteger7);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger10);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger9);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger10);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger10);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger9);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger8);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger10);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger4, bigInteger9);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotNull(bigInteger10);
      assertEquals(12, byteArray0.length);
      assertEquals((short)0, bigInteger10.shortValue());
      assertEquals((byte)0, bigInteger10.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      
      BigInteger bigInteger11 = ModPow2.fastMultiply_1(bigInteger0, bigInteger6);
      assertFalse(bigInteger11.equals((Object)bigInteger7));
      assertFalse(bigInteger11.equals((Object)bigInteger3));
      assertFalse(bigInteger11.equals((Object)bigInteger9));
      assertFalse(bigInteger11.equals((Object)bigInteger6));
      assertFalse(bigInteger11.equals((Object)bigInteger4));
      assertFalse(bigInteger11.equals((Object)bigInteger1));
      assertFalse(bigInteger11.equals((Object)bigInteger8));
      assertFalse(bigInteger11.equals((Object)bigInteger0));
      assertFalse(bigInteger11.equals((Object)bigInteger10));
      assertFalse(bigInteger11.equals((Object)bigInteger5));
      assertFalse(bigInteger11.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger10));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger9));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger9));
      assertFalse(bigInteger6.equals((Object)bigInteger8));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger10));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertNotSame(bigInteger11, bigInteger7);
      assertNotSame(bigInteger11, bigInteger3);
      assertNotSame(bigInteger11, bigInteger9);
      assertNotSame(bigInteger11, bigInteger6);
      assertNotSame(bigInteger11, bigInteger4);
      assertNotSame(bigInteger11, bigInteger1);
      assertNotSame(bigInteger11, bigInteger8);
      assertNotSame(bigInteger11, bigInteger0);
      assertNotSame(bigInteger11, bigInteger10);
      assertNotSame(bigInteger11, bigInteger5);
      assertNotSame(bigInteger11, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger10);
      assertNotSame(bigInteger0, bigInteger11);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger11);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger9);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger10);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotNull(bigInteger11);
      assertEquals(12, byteArray0.length);
      assertEquals((byte)0, bigInteger11.byteValue());
      assertEquals((short)0, bigInteger11.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)10, bigInteger6.shortValue());
      assertEquals((byte)10, bigInteger6.byteValue());
      
      Random.setNextRandom((-4871));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = new BigInteger(2100, 56, mockRandom0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte) (-85), bigInteger1.byteValue());
      assertEquals((short)683, bigInteger1.shortValue());
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom((-92L));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      BigInteger bigInteger2 = new BigInteger(2100, 56, mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotNull(bigInteger2);
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((byte)13, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = ModPow2.standardMultiply(bigInteger2, bigInteger1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(mockRandom0, mockRandom2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotNull(bigInteger3);
      assertEquals((byte) (-85), bigInteger1.byteValue());
      assertEquals((short)683, bigInteger1.shortValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((byte) (-81), bigInteger3.byteValue());
      assertEquals((short) (-32081), bigInteger3.shortValue());
      
      BigInteger bigInteger4 = ModPow2.fastMultiply_1(bigInteger2, bigInteger1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(mockRandom0, mockRandom2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotNull(bigInteger4);
      assertEquals((byte) (-85), bigInteger1.byteValue());
      assertEquals((short)683, bigInteger1.shortValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((short) (-32081), bigInteger4.shortValue());
      assertEquals((byte) (-81), bigInteger4.byteValue());
      
      Random.setNextRandom(2100);
      BigInteger bigInteger5 = ModPow2.fastMultiply_inline(bigInteger3, bigInteger1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(mockRandom0, mockRandom2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotNull(bigInteger5);
      assertEquals((byte) (-85), bigInteger1.byteValue());
      assertEquals((short)683, bigInteger1.shortValue());
      assertEquals((short)8205, bigInteger2.shortValue());
      assertEquals((byte)13, bigInteger2.byteValue());
      assertEquals((byte) (-81), bigInteger3.byteValue());
      assertEquals((short) (-32081), bigInteger3.shortValue());
      assertEquals((byte) (-27), bigInteger5.byteValue());
      assertEquals((short) (-22299), bigInteger5.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-120);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)2, (byte) (-120), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.flipBit(983);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)2, (byte) (-120), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      
      BigInteger bigInteger3 = bigInteger1.or(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)2, (byte) (-120), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotNull(bigInteger3);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = BigInteger.ZERO;
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotNull(bigInteger4);
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = bigInteger4.setBit((byte)1);
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotNull(bigInteger5);
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((short)2, bigInteger5.shortValue());
      assertEquals((byte)2, bigInteger5.byteValue());
      
      BigInteger bigInteger6 = ModPow2.fastMultiply_1(bigInteger3, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)2, (byte) (-120), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger2, bigInteger6);
      assertSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotNull(bigInteger6);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger6.shortValue());
      
      BigInteger bigInteger7 = ModPow2.fastMultiply_1(bigInteger5, bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger6));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertNotSame(bigInteger2, bigInteger6);
      assertSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger5);
      assertSame(bigInteger2, bigInteger7);
      assertSame(bigInteger4, bigInteger7);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger7, bigInteger1);
      assertSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger6);
      assertSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotNull(bigInteger7);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((short)2, bigInteger5.shortValue());
      assertEquals((byte)2, bigInteger5.byteValue());
      assertEquals((short)0, bigInteger7.shortValue());
      assertEquals((byte)0, bigInteger7.byteValue());
      
      BigInteger bigInteger8 = ModPow2.fastMultiply_1(bigInteger4, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)2, (byte) (-120), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger6);
      assertSame(bigInteger4, bigInteger7);
      assertSame(bigInteger4, bigInteger8);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger0);
      assertSame(bigInteger8, bigInteger4);
      assertSame(bigInteger8, bigInteger7);
      assertSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotNull(bigInteger8);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger8.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      
      Random.setNextRandom(298);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotNull(bigInteger3);
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      int int0 = bigInteger3.compareTo(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertEquals((-1), int0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      BigInteger bigInteger4 = bigInteger1.setBit(2379);
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger4);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotNull(bigInteger4);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)1, bigInteger4.shortValue());
      assertEquals((byte)1, bigInteger4.byteValue());
      
      BigInteger bigInteger5 = ModPow2.fastMultiply_1(bigInteger0, bigInteger4);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger4);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger0);
      assertSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotNull(bigInteger5);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)1, bigInteger4.shortValue());
      assertEquals((byte)1, bigInteger4.byteValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      
      BigInteger bigInteger6 = ModPow2.fastMultiply_1(bigInteger3, bigInteger5);
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger4);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger0);
      assertSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger1);
      assertSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotNull(bigInteger6);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger4.shortValue());
      assertEquals((byte)1, bigInteger4.byteValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((short)0, bigInteger6.shortValue());
      assertEquals((byte)0, bigInteger6.byteValue());
      
      Random.setNextRandom((-717));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte)32, (byte)69, (byte)0, (byte)32, (byte)2, (byte) (-30), (byte)2, (byte) (-1)}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(9, byteArray0.length);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)767, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = ModPow2.fastMultiply_1(bigInteger0, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)31, (byte)32, (byte)69, (byte)0, (byte)32, (byte)2, (byte) (-30), (byte)2, (byte) (-1)}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(9, byteArray0.length);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)767, bigInteger0.shortValue());
      assertEquals((short) (-1535), bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = ModPow2.standardMultiply(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)31, (byte)32, (byte)69, (byte)0, (byte)32, (byte)2, (byte) (-30), (byte)2, (byte) (-1)}, byteArray0);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals(9, byteArray0.length);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)767, bigInteger0.shortValue());
      assertEquals((short) (-1535), bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((byte) (-1), bigInteger2.byteValue());
      assertEquals((short)2303, bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)124;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-13700), bigInteger0.shortValue());
      
      BigInteger bigInteger1 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-13700), bigInteger0.shortValue());
      assertEquals((byte)16, bigInteger1.byteValue());
      assertEquals((short) (-5104), bigInteger1.shortValue());
      
      String string0 = bigInteger1.toString();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertEquals("281015468682256", string0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-13700), bigInteger0.shortValue());
      assertEquals((byte)16, bigInteger1.byteValue());
      assertEquals((short) (-5104), bigInteger1.shortValue());
      
      BigInteger bigInteger2 = ModPow2.fastMultiply_inline(bigInteger1, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-13700), bigInteger0.shortValue());
      assertEquals((byte)16, bigInteger1.byteValue());
      assertEquals((short) (-5104), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short) (-32512), bigInteger2.shortValue());
      
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotNull(bigInteger3);
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      BigInteger bigInteger4 = ModPow2.fastMultiply_1(bigInteger3, bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotNull(bigInteger4);
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = ModPow2.fastMultiply_1(bigInteger2, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotNull(bigInteger5);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-13700), bigInteger0.shortValue());
      assertEquals((byte)16, bigInteger1.byteValue());
      assertEquals((short) (-5104), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short) (-32512), bigInteger2.shortValue());
      assertEquals((short)31744, bigInteger5.shortValue());
      assertEquals((byte)0, bigInteger5.byteValue());
      
      BigInteger bigInteger6 = new BigInteger(byteArray0);
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotNull(bigInteger6);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)124, bigInteger6.byteValue());
      assertEquals((short) (-13700), bigInteger6.shortValue());
      
      BigInteger bigInteger7 = bigInteger2.flipBit(0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotNull(bigInteger7);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-13700), bigInteger0.shortValue());
      assertEquals((byte)16, bigInteger1.byteValue());
      assertEquals((short) (-5104), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short) (-32512), bigInteger2.shortValue());
      assertEquals((short) (-32511), bigInteger7.shortValue());
      assertEquals((byte)1, bigInteger7.byteValue());
      
      BigInteger bigInteger8 = BigInteger.ZERO;
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger7);
      assertSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger0);
      assertSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotNull(bigInteger8);
      assertEquals((byte)0, bigInteger8.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      
      BigInteger bigInteger9 = bigInteger6.or(bigInteger8);
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertTrue(bigInteger9.equals((Object)bigInteger0));
      assertFalse(bigInteger9.equals((Object)bigInteger3));
      assertTrue(bigInteger9.equals((Object)bigInteger6));
      assertFalse(bigInteger9.equals((Object)bigInteger5));
      assertFalse(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger4));
      assertFalse(bigInteger9.equals((Object)bigInteger8));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger8));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger7);
      assertSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger9);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger0);
      assertSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger9, bigInteger3);
      assertNotSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger7);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger4);
      assertNotSame(bigInteger9, bigInteger6);
      assertNotSame(bigInteger9, bigInteger8);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger9);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotNull(bigInteger9);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger8.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      assertEquals((short) (-13700), bigInteger9.shortValue());
      assertEquals((byte)124, bigInteger9.byteValue());
      assertEquals((byte)124, bigInteger6.byteValue());
      assertEquals((short) (-13700), bigInteger6.shortValue());
      
      BigInteger bigInteger10 = bigInteger8.setBit((byte)0);
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger9));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger2));
      assertFalse(bigInteger10.equals((Object)bigInteger9));
      assertFalse(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger4));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger5));
      assertFalse(bigInteger10.equals((Object)bigInteger7));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger8));
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger7);
      assertSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger10);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger9);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger0);
      assertSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger10, bigInteger2);
      assertNotSame(bigInteger10, bigInteger9);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger4);
      assertNotSame(bigInteger10, bigInteger1);
      assertNotSame(bigInteger10, bigInteger5);
      assertNotSame(bigInteger10, bigInteger7);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger6);
      assertNotNull(bigInteger10);
      assertEquals((byte)0, bigInteger8.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      assertEquals((short)1, bigInteger10.shortValue());
      assertEquals((byte)1, bigInteger10.byteValue());
      
      BigInteger bigInteger11 = ModPow2.fastMultiply_1(bigInteger4, bigInteger6);
      assertFalse(bigInteger11.equals((Object)bigInteger5));
      assertFalse(bigInteger11.equals((Object)bigInteger7));
      assertFalse(bigInteger11.equals((Object)bigInteger9));
      assertFalse(bigInteger11.equals((Object)bigInteger1));
      assertFalse(bigInteger11.equals((Object)bigInteger6));
      assertFalse(bigInteger11.equals((Object)bigInteger10));
      assertFalse(bigInteger11.equals((Object)bigInteger2));
      assertFalse(bigInteger11.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger3.equals((Object)bigInteger7));
      assertFalse(bigInteger3.equals((Object)bigInteger9));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger10));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger10));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger9));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger8));
      assertTrue(bigInteger6.equals((Object)bigInteger9));
      assertFalse(bigInteger6.equals((Object)bigInteger10));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotSame(bigInteger11, bigInteger5);
      assertSame(bigInteger11, bigInteger4);
      assertNotSame(bigInteger11, bigInteger7);
      assertSame(bigInteger11, bigInteger3);
      assertSame(bigInteger11, bigInteger8);
      assertNotSame(bigInteger11, bigInteger9);
      assertNotSame(bigInteger11, bigInteger1);
      assertNotSame(bigInteger11, bigInteger6);
      assertNotSame(bigInteger11, bigInteger10);
      assertNotSame(bigInteger11, bigInteger2);
      assertNotSame(bigInteger11, bigInteger0);
      assertNotSame(bigInteger3, bigInteger5);
      assertSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger7);
      assertSame(bigInteger3, bigInteger8);
      assertSame(bigInteger3, bigInteger11);
      assertNotSame(bigInteger3, bigInteger9);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger10);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger7);
      assertSame(bigInteger4, bigInteger11);
      assertSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger8);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger10);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger9);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger11);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger10);
      assertNotSame(bigInteger6, bigInteger9);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotNull(bigInteger11);
      assertEquals(5, byteArray0.length);
      assertEquals((short)0, bigInteger11.shortValue());
      assertEquals((byte)0, bigInteger11.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)124, bigInteger6.byteValue());
      assertEquals((short) (-13700), bigInteger6.shortValue());
      
      BigInteger bigInteger12 = ModPow2.fastMultiply_1(bigInteger2, bigInteger2);
      assertFalse(bigInteger12.equals((Object)bigInteger8));
      assertFalse(bigInteger12.equals((Object)bigInteger4));
      assertFalse(bigInteger12.equals((Object)bigInteger5));
      assertFalse(bigInteger12.equals((Object)bigInteger6));
      assertFalse(bigInteger12.equals((Object)bigInteger10));
      assertFalse(bigInteger12.equals((Object)bigInteger7));
      assertFalse(bigInteger12.equals((Object)bigInteger11));
      assertFalse(bigInteger12.equals((Object)bigInteger3));
      assertFalse(bigInteger12.equals((Object)bigInteger9));
      assertFalse(bigInteger12.equals((Object)bigInteger1));
      assertFalse(bigInteger12.equals((Object)bigInteger0));
      assertFalse(bigInteger12.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger10));
      assertFalse(bigInteger0.equals((Object)bigInteger11));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger6));
      assertTrue(bigInteger0.equals((Object)bigInteger9));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger9));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger11));
      assertFalse(bigInteger1.equals((Object)bigInteger10));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger10));
      assertFalse(bigInteger2.equals((Object)bigInteger11));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger9));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotSame(bigInteger12, bigInteger8);
      assertNotSame(bigInteger12, bigInteger4);
      assertNotSame(bigInteger12, bigInteger5);
      assertNotSame(bigInteger12, bigInteger6);
      assertNotSame(bigInteger12, bigInteger10);
      assertNotSame(bigInteger12, bigInteger7);
      assertNotSame(bigInteger12, bigInteger11);
      assertNotSame(bigInteger12, bigInteger3);
      assertNotSame(bigInteger12, bigInteger9);
      assertNotSame(bigInteger12, bigInteger1);
      assertNotSame(bigInteger12, bigInteger0);
      assertNotSame(bigInteger12, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger10);
      assertNotSame(bigInteger0, bigInteger11);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger12);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger12);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger9);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger11);
      assertNotSame(bigInteger1, bigInteger10);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger10);
      assertNotSame(bigInteger2, bigInteger11);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger12);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger9);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger12);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger12.byteValue());
      assertEquals((short)0, bigInteger12.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-13700), bigInteger0.shortValue());
      assertEquals((byte)16, bigInteger1.byteValue());
      assertEquals((short) (-5104), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short) (-32512), bigInteger2.shortValue());
      
      BigInteger bigInteger13 = ModPow2.fastMultiply_1(bigInteger9, bigInteger12);
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger10));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger12));
      assertFalse(bigInteger8.equals((Object)bigInteger9));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertTrue(bigInteger9.equals((Object)bigInteger0));
      assertFalse(bigInteger9.equals((Object)bigInteger11));
      assertFalse(bigInteger9.equals((Object)bigInteger3));
      assertTrue(bigInteger9.equals((Object)bigInteger6));
      assertFalse(bigInteger9.equals((Object)bigInteger5));
      assertFalse(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger4));
      assertFalse(bigInteger9.equals((Object)bigInteger10));
      assertFalse(bigInteger9.equals((Object)bigInteger8));
      assertFalse(bigInteger9.equals((Object)bigInteger12));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger2));
      assertFalse(bigInteger12.equals((Object)bigInteger8));
      assertFalse(bigInteger12.equals((Object)bigInteger4));
      assertFalse(bigInteger12.equals((Object)bigInteger5));
      assertFalse(bigInteger12.equals((Object)bigInteger6));
      assertFalse(bigInteger12.equals((Object)bigInteger10));
      assertFalse(bigInteger12.equals((Object)bigInteger7));
      assertFalse(bigInteger12.equals((Object)bigInteger11));
      assertFalse(bigInteger12.equals((Object)bigInteger3));
      assertFalse(bigInteger12.equals((Object)bigInteger9));
      assertFalse(bigInteger12.equals((Object)bigInteger1));
      assertFalse(bigInteger12.equals((Object)bigInteger0));
      assertFalse(bigInteger12.equals((Object)bigInteger2));
      assertFalse(bigInteger13.equals((Object)bigInteger4));
      assertFalse(bigInteger13.equals((Object)bigInteger5));
      assertFalse(bigInteger13.equals((Object)bigInteger7));
      assertFalse(bigInteger13.equals((Object)bigInteger3));
      assertFalse(bigInteger13.equals((Object)bigInteger9));
      assertFalse(bigInteger13.equals((Object)bigInteger1));
      assertFalse(bigInteger13.equals((Object)bigInteger2));
      assertFalse(bigInteger13.equals((Object)bigInteger0));
      assertFalse(bigInteger13.equals((Object)bigInteger11));
      assertFalse(bigInteger13.equals((Object)bigInteger8));
      assertFalse(bigInteger13.equals((Object)bigInteger12));
      assertFalse(bigInteger13.equals((Object)bigInteger10));
      assertFalse(bigInteger13.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger10));
      assertFalse(bigInteger0.equals((Object)bigInteger11));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger12));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger9));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertFalse(bigInteger1.equals((Object)bigInteger12));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger9));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger11));
      assertFalse(bigInteger1.equals((Object)bigInteger10));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger10));
      assertFalse(bigInteger2.equals((Object)bigInteger11));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertFalse(bigInteger2.equals((Object)bigInteger12));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger9));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger11));
      assertFalse(bigInteger6.equals((Object)bigInteger8));
      assertFalse(bigInteger6.equals((Object)bigInteger12));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertTrue(bigInteger6.equals((Object)bigInteger9));
      assertFalse(bigInteger6.equals((Object)bigInteger10));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-54), (byte)124}, byteArray0);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger10);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger12);
      assertNotSame(bigInteger8, bigInteger13);
      assertNotSame(bigInteger8, bigInteger9);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger0);
      assertSame(bigInteger8, bigInteger11);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger7);
      assertSame(bigInteger8, bigInteger4);
      assertSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger9, bigInteger13);
      assertNotSame(bigInteger9, bigInteger7);
      assertNotSame(bigInteger9, bigInteger10);
      assertNotSame(bigInteger9, bigInteger6);
      assertNotSame(bigInteger9, bigInteger8);
      assertNotSame(bigInteger9, bigInteger12);
      assertNotSame(bigInteger9, bigInteger11);
      assertNotSame(bigInteger9, bigInteger3);
      assertNotSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger4);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger12, bigInteger8);
      assertNotSame(bigInteger12, bigInteger4);
      assertNotSame(bigInteger12, bigInteger7);
      assertNotSame(bigInteger12, bigInteger3);
      assertNotSame(bigInteger12, bigInteger9);
      assertNotSame(bigInteger12, bigInteger1);
      assertNotSame(bigInteger12, bigInteger0);
      assertNotSame(bigInteger12, bigInteger2);
      assertNotSame(bigInteger12, bigInteger13);
      assertNotSame(bigInteger12, bigInteger5);
      assertNotSame(bigInteger12, bigInteger6);
      assertNotSame(bigInteger12, bigInteger10);
      assertNotSame(bigInteger12, bigInteger11);
      assertNotSame(bigInteger13, bigInteger4);
      assertNotSame(bigInteger13, bigInteger5);
      assertNotSame(bigInteger13, bigInteger7);
      assertNotSame(bigInteger13, bigInteger3);
      assertNotSame(bigInteger13, bigInteger9);
      assertNotSame(bigInteger13, bigInteger1);
      assertNotSame(bigInteger13, bigInteger2);
      assertNotSame(bigInteger13, bigInteger0);
      assertNotSame(bigInteger13, bigInteger11);
      assertNotSame(bigInteger13, bigInteger8);
      assertNotSame(bigInteger13, bigInteger12);
      assertNotSame(bigInteger13, bigInteger10);
      assertNotSame(bigInteger13, bigInteger6);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger13);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger10);
      assertNotSame(bigInteger0, bigInteger12);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger11);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger13);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger11);
      assertNotSame(bigInteger1, bigInteger10);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger12);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger9);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger10);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger13);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger12);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger11);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger9);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger11);
      assertNotSame(bigInteger6, bigInteger12);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger10);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger9);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger13);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotNull(bigInteger13);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger8.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      assertEquals((short) (-13700), bigInteger9.shortValue());
      assertEquals((byte)124, bigInteger9.byteValue());
      assertEquals((byte)0, bigInteger12.byteValue());
      assertEquals((short)0, bigInteger12.shortValue());
      assertEquals((short)0, bigInteger13.shortValue());
      assertEquals((byte)0, bigInteger13.byteValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-13700), bigInteger0.shortValue());
      assertEquals((byte)16, bigInteger1.byteValue());
      assertEquals((short) (-5104), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short) (-32512), bigInteger2.shortValue());
      assertEquals((byte)124, bigInteger6.byteValue());
      assertEquals((short) (-13700), bigInteger6.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = bigInteger1.divide(bigInteger0);
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger2);
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger3.equals((Object)bigInteger0));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertTrue(bigInteger3.equals((Object)bigInteger2));
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotNull(bigInteger3);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      
      short short0 = bigInteger1.shortValueExact();
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertEquals((short)1, short0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      BigInteger bigInteger4 = bigInteger0.modInverse(bigInteger1);
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger4);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotNull(bigInteger4);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      
      BigInteger bigInteger5 = ModPow2.modPow2_unsafe(bigInteger0, bigInteger0, bigInteger0, (-227));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger4);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger0);
      assertNotNull(bigInteger5);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      
      boolean boolean0 = bigInteger5.isProbablePrime((short)1);
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(boolean0);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger4);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      
      BigInteger bigInteger6 = ModPow2.modPow2_unsafe(bigInteger0, bigInteger0, bigInteger5, (-227));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertTrue(bigInteger6.equals((Object)bigInteger2));
      assertTrue(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger4);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger3);
      assertSame(bigInteger6, bigInteger0);
      assertSame(bigInteger6, bigInteger1);
      assertSame(bigInteger6, bigInteger5);
      assertNotNull(bigInteger6);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger6.shortValue());
      assertEquals((byte)1, bigInteger6.byteValue());
      
      BigInteger bigInteger7 = bigInteger6.nextProbablePrime();
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertTrue(bigInteger6.equals((Object)bigInteger2));
      assertTrue(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger4);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger3);
      assertSame(bigInteger6, bigInteger0);
      assertSame(bigInteger6, bigInteger1);
      assertSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotNull(bigInteger7);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger6.shortValue());
      assertEquals((byte)1, bigInteger6.byteValue());
      assertEquals((short)2, bigInteger7.shortValue());
      assertEquals((byte)2, bigInteger7.byteValue());
      
      BigInteger bigInteger8 = ModPow2.modPow2_unsafe(bigInteger6, bigInteger0, bigInteger5, 1);
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger7));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertTrue(bigInteger6.equals((Object)bigInteger2));
      assertTrue(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger4);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger3);
      assertSame(bigInteger6, bigInteger0);
      assertSame(bigInteger6, bigInteger1);
      assertSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger6);
      assertSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotNull(bigInteger8);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger6.shortValue());
      assertEquals((byte)1, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      assertEquals((byte)0, bigInteger8.byteValue());
      
      BigInteger bigInteger9 = ModPow2.fastMultiply_1(bigInteger4, bigInteger5);
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger8));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger9.equals((Object)bigInteger3));
      assertFalse(bigInteger9.equals((Object)bigInteger5));
      assertFalse(bigInteger9.equals((Object)bigInteger0));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger2));
      assertFalse(bigInteger9.equals((Object)bigInteger6));
      assertFalse(bigInteger9.equals((Object)bigInteger7));
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger9);
      assertSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger1, bigInteger4);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger8);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger7);
      assertSame(bigInteger4, bigInteger9);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger9);
      assertSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger4);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger9, bigInteger3);
      assertNotSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger9, bigInteger6);
      assertSame(bigInteger9, bigInteger8);
      assertSame(bigInteger9, bigInteger4);
      assertNotSame(bigInteger9, bigInteger7);
      assertNotNull(bigInteger9);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((byte)0, bigInteger9.byteValue());
      assertEquals((short)0, bigInteger9.shortValue());
      
      BigInteger bigInteger10 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger8);
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger9));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger9));
      assertFalse(bigInteger5.equals((Object)bigInteger8));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger9));
      assertTrue(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertTrue(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger8));
      assertFalse(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger2));
      assertFalse(bigInteger10.equals((Object)bigInteger5));
      assertFalse(bigInteger10.equals((Object)bigInteger7));
      assertNotSame(bigInteger0, bigInteger10);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger9);
      assertSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger10);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger10);
      assertNotSame(bigInteger6, bigInteger9);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger3);
      assertSame(bigInteger6, bigInteger0);
      assertSame(bigInteger6, bigInteger1);
      assertSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger8, bigInteger3);
      assertSame(bigInteger8, bigInteger10);
      assertNotSame(bigInteger8, bigInteger6);
      assertSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger2);
      assertSame(bigInteger8, bigInteger9);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger6);
      assertNotSame(bigInteger10, bigInteger1);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger2);
      assertSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger5);
      assertSame(bigInteger10, bigInteger4);
      assertSame(bigInteger10, bigInteger9);
      assertNotSame(bigInteger10, bigInteger7);
      assertNotNull(bigInteger10);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger6.shortValue());
      assertEquals((byte)1, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      assertEquals((byte)0, bigInteger8.byteValue());
      assertEquals((byte)0, bigInteger10.byteValue());
      assertEquals((short)0, bigInteger10.shortValue());
      
      BigInteger bigInteger11 = ModPow2.modPow2_unsafe(bigInteger8, bigInteger10, bigInteger6, (short)1);
      assertFalse(bigInteger0.equals((Object)bigInteger10));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger9));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger9));
      assertFalse(bigInteger5.equals((Object)bigInteger8));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger10));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger10));
      assertFalse(bigInteger6.equals((Object)bigInteger9));
      assertTrue(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertTrue(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger8));
      assertFalse(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger2));
      assertFalse(bigInteger10.equals((Object)bigInteger5));
      assertFalse(bigInteger10.equals((Object)bigInteger7));
      assertFalse(bigInteger11.equals((Object)bigInteger7));
      assertFalse(bigInteger11.equals((Object)bigInteger2));
      assertFalse(bigInteger11.equals((Object)bigInteger3));
      assertFalse(bigInteger11.equals((Object)bigInteger6));
      assertFalse(bigInteger11.equals((Object)bigInteger5));
      assertFalse(bigInteger11.equals((Object)bigInteger1));
      assertFalse(bigInteger11.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger10);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger11);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger9);
      assertSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger10);
      assertNotSame(bigInteger5, bigInteger11);
      assertSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger10);
      assertNotSame(bigInteger6, bigInteger9);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger11);
      assertNotSame(bigInteger6, bigInteger3);
      assertSame(bigInteger6, bigInteger0);
      assertSame(bigInteger6, bigInteger1);
      assertSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger8, bigInteger3);
      assertSame(bigInteger8, bigInteger10);
      assertNotSame(bigInteger8, bigInteger6);
      assertSame(bigInteger8, bigInteger4);
      assertSame(bigInteger8, bigInteger11);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger2);
      assertSame(bigInteger8, bigInteger9);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger6);
      assertNotSame(bigInteger10, bigInteger1);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger2);
      assertSame(bigInteger10, bigInteger8);
      assertSame(bigInteger10, bigInteger11);
      assertNotSame(bigInteger10, bigInteger5);
      assertSame(bigInteger10, bigInteger4);
      assertSame(bigInteger10, bigInteger9);
      assertNotSame(bigInteger10, bigInteger7);
      assertSame(bigInteger11, bigInteger8);
      assertSame(bigInteger11, bigInteger9);
      assertNotSame(bigInteger11, bigInteger7);
      assertNotSame(bigInteger11, bigInteger2);
      assertSame(bigInteger11, bigInteger10);
      assertSame(bigInteger11, bigInteger4);
      assertNotSame(bigInteger11, bigInteger3);
      assertNotSame(bigInteger11, bigInteger6);
      assertNotSame(bigInteger11, bigInteger5);
      assertNotSame(bigInteger11, bigInteger1);
      assertNotSame(bigInteger11, bigInteger0);
      assertNotNull(bigInteger11);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger6.shortValue());
      assertEquals((byte)1, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger8.shortValue());
      assertEquals((byte)0, bigInteger8.byteValue());
      assertEquals((byte)0, bigInteger10.byteValue());
      assertEquals((short)0, bigInteger10.shortValue());
      assertEquals((byte)0, bigInteger11.byteValue());
      assertEquals((short)0, bigInteger11.shortValue());
      
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      BigInteger bigInteger12 = BigInteger.ZERO;
      assertFalse(bigInteger12.equals((Object)bigInteger0));
      assertFalse(bigInteger12.equals((Object)bigInteger1));
      assertFalse(bigInteger12.equals((Object)bigInteger6));
      assertFalse(bigInteger12.equals((Object)bigInteger3));
      assertFalse(bigInteger12.equals((Object)bigInteger7));
      assertFalse(bigInteger12.equals((Object)bigInteger2));
      assertFalse(bigInteger12.equals((Object)bigInteger5));
      assertNotSame(bigInteger12, bigInteger0);
      assertNotSame(bigInteger12, bigInteger6);
      assertNotSame(bigInteger12, bigInteger1);
      assertNotSame(bigInteger12, bigInteger3);
      assertSame(bigInteger12, bigInteger10);
      assertSame(bigInteger12, bigInteger11);
      assertSame(bigInteger12, bigInteger8);
      assertSame(bigInteger12, bigInteger4);
      assertNotSame(bigInteger12, bigInteger2);
      assertNotSame(bigInteger12, bigInteger7);
      assertSame(bigInteger12, bigInteger9);
      assertNotSame(bigInteger12, bigInteger5);
      assertNotNull(bigInteger12);
      assertEquals((short)0, bigInteger12.shortValue());
      assertEquals((byte)0, bigInteger12.byteValue());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger13 = new BigInteger(byteArray0);
      assertFalse(bigInteger13.equals((Object)bigInteger8));
      assertFalse(bigInteger13.equals((Object)bigInteger5));
      assertFalse(bigInteger13.equals((Object)bigInteger4));
      assertFalse(bigInteger13.equals((Object)bigInteger3));
      assertFalse(bigInteger13.equals((Object)bigInteger9));
      assertFalse(bigInteger13.equals((Object)bigInteger0));
      assertFalse(bigInteger13.equals((Object)bigInteger1));
      assertFalse(bigInteger13.equals((Object)bigInteger7));
      assertFalse(bigInteger13.equals((Object)bigInteger11));
      assertFalse(bigInteger13.equals((Object)bigInteger12));
      assertFalse(bigInteger13.equals((Object)bigInteger10));
      assertFalse(bigInteger13.equals((Object)bigInteger2));
      assertFalse(bigInteger13.equals((Object)bigInteger6));
      assertArrayEquals(new byte[] {(byte) (-22), (byte)0}, byteArray0);
      assertNotNull(bigInteger13);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)0, bigInteger13.byteValue());
      assertEquals((short) (-5632), bigInteger13.shortValue());
      
      BigInteger bigInteger14 = ModPow2.modPow2_unsafe(bigInteger12, bigInteger13, bigInteger4, (byte) (-22));
      assertFalse(bigInteger0.equals((Object)bigInteger10));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger11));
      assertFalse(bigInteger0.equals((Object)bigInteger12));
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger9));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger13));
      assertFalse(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger1.equals((Object)bigInteger12));
      assertFalse(bigInteger1.equals((Object)bigInteger13));
      assertFalse(bigInteger1.equals((Object)bigInteger9));
      assertFalse(bigInteger1.equals((Object)bigInteger8));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger11));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger10));
      assertFalse(bigInteger13.equals((Object)bigInteger8));
      assertFalse(bigInteger13.equals((Object)bigInteger5));
      assertFalse(bigInteger13.equals((Object)bigInteger4));
      assertFalse(bigInteger13.equals((Object)bigInteger3));
      assertFalse(bigInteger13.equals((Object)bigInteger9));
      assertFalse(bigInteger13.equals((Object)bigInteger0));
      assertFalse(bigInteger13.equals((Object)bigInteger1));
      assertFalse(bigInteger13.equals((Object)bigInteger7));
      assertFalse(bigInteger13.equals((Object)bigInteger11));
      assertFalse(bigInteger13.equals((Object)bigInteger12));
      assertFalse(bigInteger13.equals((Object)bigInteger10));
      assertFalse(bigInteger13.equals((Object)bigInteger2));
      assertFalse(bigInteger13.equals((Object)bigInteger6));
      assertFalse(bigInteger14.equals((Object)bigInteger9));
      assertTrue(bigInteger14.equals((Object)bigInteger2));
      assertFalse(bigInteger14.equals((Object)bigInteger11));
      assertFalse(bigInteger14.equals((Object)bigInteger10));
      assertFalse(bigInteger14.equals((Object)bigInteger7));
      assertFalse(bigInteger14.equals((Object)bigInteger12));
      assertFalse(bigInteger14.equals((Object)bigInteger4));
      assertTrue(bigInteger14.equals((Object)bigInteger3));
      assertFalse(bigInteger14.equals((Object)bigInteger13));
      assertFalse(bigInteger14.equals((Object)bigInteger8));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger4.equals((Object)bigInteger13));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger12.equals((Object)bigInteger0));
      assertFalse(bigInteger12.equals((Object)bigInteger1));
      assertFalse(bigInteger12.equals((Object)bigInteger6));
      assertFalse(bigInteger12.equals((Object)bigInteger3));
      assertFalse(bigInteger12.equals((Object)bigInteger13));
      assertFalse(bigInteger12.equals((Object)bigInteger7));
      assertFalse(bigInteger12.equals((Object)bigInteger2));
      assertFalse(bigInteger12.equals((Object)bigInteger5));
      assertArrayEquals(new byte[] {(byte) (-22), (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger14);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger13);
      assertSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger10);
      assertSame(bigInteger0, bigInteger6);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger11);
      assertNotSame(bigInteger0, bigInteger12);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger12);
      assertSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger11);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger13);
      assertNotSame(bigInteger1, bigInteger9);
      assertSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger8);
      assertSame(bigInteger1, bigInteger14);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger10);
      assertNotSame(bigInteger13, bigInteger8);
      assertNotSame(bigInteger13, bigInteger5);
      assertNotSame(bigInteger13, bigInteger4);
      assertNotSame(bigInteger13, bigInteger3);
      assertNotSame(bigInteger13, bigInteger9);
      assertNotSame(bigInteger13, bigInteger0);
      assertNotSame(bigInteger13, bigInteger1);
      assertNotSame(bigInteger13, bigInteger7);
      assertNotSame(bigInteger13, bigInteger11);
      assertNotSame(bigInteger13, bigInteger12);
      assertNotSame(bigInteger13, bigInteger10);
      assertNotSame(bigInteger13, bigInteger2);
      assertNotSame(bigInteger13, bigInteger6);
      assertNotSame(bigInteger13, bigInteger14);
      assertNotSame(bigInteger14, bigInteger3);
      assertSame(bigInteger14, bigInteger1);
      assertNotSame(bigInteger14, bigInteger2);
      assertNotSame(bigInteger14, bigInteger10);
      assertNotSame(bigInteger14, bigInteger7);
      assertNotSame(bigInteger14, bigInteger4);
      assertSame(bigInteger14, bigInteger6);
      assertNotSame(bigInteger14, bigInteger8);
      assertNotSame(bigInteger14, bigInteger9);
      assertSame(bigInteger14, bigInteger5);
      assertNotSame(bigInteger14, bigInteger11);
      assertSame(bigInteger14, bigInteger0);
      assertNotSame(bigInteger14, bigInteger12);
      assertNotSame(bigInteger14, bigInteger13);
      assertSame(bigInteger4, bigInteger8);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger5);
      assertSame(bigInteger4, bigInteger9);
      assertNotSame(bigInteger4, bigInteger13);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger10);
      assertSame(bigInteger4, bigInteger12);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger4, bigInteger14);
      assertSame(bigInteger4, bigInteger11);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger12, bigInteger6);
      assertNotSame(bigInteger12, bigInteger1);
      assertSame(bigInteger12, bigInteger8);
      assertSame(bigInteger12, bigInteger4);
      assertNotSame(bigInteger12, bigInteger2);
      assertNotSame(bigInteger12, bigInteger7);
      assertNotSame(bigInteger12, bigInteger5);
      assertNotSame(bigInteger12, bigInteger0);
      assertNotSame(bigInteger12, bigInteger3);
      assertNotSame(bigInteger12, bigInteger14);
      assertSame(bigInteger12, bigInteger10);
      assertSame(bigInteger12, bigInteger11);
      assertNotSame(bigInteger12, bigInteger13);
      assertSame(bigInteger12, bigInteger9);
      assertNotNull(bigInteger14);
      assertEquals(2, byteArray0.length);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger13.byteValue());
      assertEquals((short) (-5632), bigInteger13.shortValue());
      assertEquals((short)1, bigInteger14.shortValue());
      assertEquals((byte)1, bigInteger14.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger12.shortValue());
      assertEquals((byte)0, bigInteger12.byteValue());
      
      // Undeclared exception!
      try { 
        ModPow2.modPow2_unsafe(bigInteger10, bigInteger10, bigInteger8, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotNull(bigInteger3);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = ModPow2.fastMultiply_1(bigInteger2, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger3);
      assertSame(bigInteger2, bigInteger4);
      assertSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertSame(bigInteger4, bigInteger3);
      assertNotNull(bigInteger4);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = ModPow2.fastMultiply_inline(bigInteger4, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger3);
      assertSame(bigInteger2, bigInteger4);
      assertSame(bigInteger2, bigInteger5);
      assertSame(bigInteger4, bigInteger2);
      assertSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertSame(bigInteger4, bigInteger3);
      assertSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger1);
      assertSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger0);
      assertSame(bigInteger5, bigInteger2);
      assertNotNull(bigInteger5);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((short)0, bigInteger5.shortValue());
      assertEquals((byte)0, bigInteger5.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.not();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte) (-2), bigInteger1.byteValue());
      assertEquals((short) (-2), bigInteger1.shortValue());
      
      BigInteger bigInteger2 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)34;
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte) (-1), (byte)0, (byte) (-7), (byte)0, (byte)1, (byte)34}, byteArray0);
      assertNotNull(bigInteger3);
      assertEquals(8, byteArray0.length);
      assertEquals((short)290, bigInteger3.shortValue());
      assertEquals((byte)34, bigInteger3.byteValue());
      
      BigInteger bigInteger4 = ModPow2.standardMultiply(bigInteger3, bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte) (-1), (byte)0, (byte) (-7), (byte)0, (byte)1, (byte)34}, byteArray0);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotNull(bigInteger4);
      assertEquals(8, byteArray0.length);
      assertEquals((short)290, bigInteger3.shortValue());
      assertEquals((byte)34, bigInteger3.byteValue());
      assertEquals((byte) (-124), bigInteger4.byteValue());
      assertEquals((short)18564, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = new BigInteger((byte) (-1), byteArray0);
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte) (-1), (byte)0, (byte) (-7), (byte)0, (byte)1, (byte)34}, byteArray0);
      assertNotNull(bigInteger5);
      assertEquals(8, byteArray0.length);
      assertEquals((short) (-290), bigInteger5.shortValue());
      assertEquals((byte) (-34), bigInteger5.byteValue());
      
      // Undeclared exception!
      try { 
        ModPow2.modPow2_unsafe(bigInteger3, bigInteger5, bigInteger5, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      long long0 = bigInteger0.longValueExact();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertEquals(1L, long0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      byte byte0 = bigInteger0.byteValueExact();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertEquals((byte)1, byte0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger3 = ModPow2.modPow2_unsafe(bigInteger0, bigInteger0, bigInteger0, 0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotNull(bigInteger3);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = bigInteger3.subtract(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertSame(bigInteger4, bigInteger2);
      assertNotNull(bigInteger4);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      
      double double0 = bigInteger3.doubleValue();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertEquals(1.0, double0, 0.01);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      
      int int0 = bigInteger3.compareTo(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertEquals(0, int0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      
      BigInteger bigInteger5 = bigInteger3.clearBit(1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotNull(bigInteger5);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      
      BigInteger bigInteger6 = bigInteger5.nextProbablePrime();
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotNull(bigInteger6);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)2, bigInteger6.byteValue());
      assertEquals((short)2, bigInteger6.shortValue());
      
      BigInteger bigInteger7 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger3);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertTrue(bigInteger7.equals((Object)bigInteger5));
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger5);
      assertSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger6);
      assertSame(bigInteger7, bigInteger3);
      assertSame(bigInteger7, bigInteger0);
      assertNotNull(bigInteger7);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((short)1, bigInteger7.shortValue());
      assertEquals((byte)1, bigInteger7.byteValue());
      
      byte[] byteArray0 = bigInteger5.toByteArray();
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger5));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertTrue(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger6));
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger5);
      assertSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      
      BigInteger bigInteger8 = ModPow2.standardMultiply(bigInteger5, bigInteger7);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger5));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertTrue(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertTrue(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertTrue(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertTrue(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger4));
      assertTrue(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger5);
      assertSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger8);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger7);
      assertNotSame(bigInteger5, bigInteger2);
      assertSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger6);
      assertSame(bigInteger7, bigInteger3);
      assertSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger8);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger2);
      assertSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotNull(bigInteger8);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((short)1, bigInteger7.shortValue());
      assertEquals((byte)1, bigInteger7.byteValue());
      assertEquals((byte)1, bigInteger8.byteValue());
      assertEquals((short)1, bigInteger8.shortValue());
      
      BigInteger bigInteger9 = ModPow2.fastMultiply_1(bigInteger0, bigInteger5);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertTrue(bigInteger3.equals((Object)bigInteger8));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger5));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertTrue(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger6));
      assertFalse(bigInteger9.equals((Object)bigInteger2));
      assertFalse(bigInteger9.equals((Object)bigInteger6));
      assertTrue(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger4));
      assertTrue(bigInteger9.equals((Object)bigInteger3));
      assertTrue(bigInteger9.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger3, bigInteger9);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger5);
      assertSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger8);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger7);
      assertSame(bigInteger5, bigInteger9);
      assertNotSame(bigInteger5, bigInteger2);
      assertSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger6);
      assertSame(bigInteger9, bigInteger8);
      assertNotSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger9, bigInteger6);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotSame(bigInteger9, bigInteger4);
      assertSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger3);
      assertNotSame(bigInteger9, bigInteger7);
      assertNotNull(bigInteger9);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((byte)1, bigInteger9.byteValue());
      assertEquals((short)1, bigInteger9.shortValue());
      
      BigInteger bigInteger10 = ModPow2.fastMultiply_inline(bigInteger7, bigInteger9);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger8));
      assertTrue(bigInteger0.equals((Object)bigInteger9));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertTrue(bigInteger3.equals((Object)bigInteger8));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger9));
      assertTrue(bigInteger3.equals((Object)bigInteger5));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertTrue(bigInteger5.equals((Object)bigInteger7));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger6));
      assertTrue(bigInteger7.equals((Object)bigInteger9));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertTrue(bigInteger7.equals((Object)bigInteger8));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertTrue(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger9.equals((Object)bigInteger2));
      assertFalse(bigInteger9.equals((Object)bigInteger6));
      assertTrue(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger4));
      assertTrue(bigInteger9.equals((Object)bigInteger3));
      assertTrue(bigInteger9.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger2));
      assertTrue(bigInteger10.equals((Object)bigInteger3));
      assertTrue(bigInteger10.equals((Object)bigInteger7));
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertFalse(bigInteger10.equals((Object)bigInteger4));
      assertTrue(bigInteger10.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger10);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger3, bigInteger9);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger5);
      assertSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger8);
      assertNotSame(bigInteger3, bigInteger10);
      assertSame(bigInteger5, bigInteger10);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger7);
      assertSame(bigInteger5, bigInteger9);
      assertNotSame(bigInteger5, bigInteger2);
      assertSame(bigInteger5, bigInteger8);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger6);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger6);
      assertSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger9);
      assertSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger8);
      assertNotSame(bigInteger7, bigInteger10);
      assertSame(bigInteger9, bigInteger8);
      assertNotSame(bigInteger9, bigInteger2);
      assertNotSame(bigInteger9, bigInteger6);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotSame(bigInteger9, bigInteger4);
      assertSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger3);
      assertSame(bigInteger9, bigInteger10);
      assertNotSame(bigInteger9, bigInteger7);
      assertSame(bigInteger10, bigInteger9);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger7);
      assertNotSame(bigInteger10, bigInteger1);
      assertSame(bigInteger10, bigInteger5);
      assertNotSame(bigInteger10, bigInteger0);
      assertSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger2);
      assertNotSame(bigInteger10, bigInteger6);
      assertNotSame(bigInteger10, bigInteger4);
      assertNotNull(bigInteger10);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertEquals((short)1, bigInteger7.shortValue());
      assertEquals((byte)1, bigInteger7.byteValue());
      assertEquals((byte)1, bigInteger9.byteValue());
      assertEquals((short)1, bigInteger9.shortValue());
      assertEquals((byte)1, bigInteger10.byteValue());
      assertEquals((short)1, bigInteger10.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = ModPow2.fastMultiply_1(bigInteger0, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModPow2.fastMultiply_inline((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft((-1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)5, bigInteger1.byteValue());
      assertEquals((short)5, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = ModPow2.fastMultiply_1(bigInteger0, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger2.byteValue());
      assertEquals((short)100, bigInteger2.shortValue());
      
      BigInteger bigInteger3 = ModPow2.fastMultiply_1(bigInteger2, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotNull(bigInteger3);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger2.byteValue());
      assertEquals((short)100, bigInteger2.shortValue());
      assertEquals((byte)16, bigInteger3.byteValue());
      assertEquals((short)10000, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger3);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotNull(bigInteger4);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger2.byteValue());
      assertEquals((short)100, bigInteger2.shortValue());
      assertEquals((byte)16, bigInteger3.byteValue());
      assertEquals((short)10000, bigInteger3.shortValue());
      assertEquals((short) (-31072), bigInteger4.shortValue());
      assertEquals((byte) (-96), bigInteger4.byteValue());
      
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      // Undeclared exception!
      try { 
        ModPow2.fastMultiply_inline(bigInteger2, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        ModPow2.fastMultiply_1((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger1.byteValue());
      assertEquals((short)100, bigInteger1.shortValue());
      
      ModPow2 modPow2_0 = new ModPow2();
      assertNotNull(modPow2_0);
      
      BigInteger bigInteger2 = ModPow2.fastMultiply_1(bigInteger0, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger2.byteValue());
      assertEquals((short)100, bigInteger2.shortValue());
      
      BigInteger bigInteger3 = ModPow2.fastMultiply_1(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotNull(bigInteger3);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger1.byteValue());
      assertEquals((short)100, bigInteger1.shortValue());
      assertEquals((short)1000, bigInteger3.shortValue());
      assertEquals((byte) (-24), bigInteger3.byteValue());
      
      BigInteger bigInteger4 = ModPow2.fastMultiply_1(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotNull(bigInteger4);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger1.byteValue());
      assertEquals((short)100, bigInteger1.shortValue());
      assertEquals((byte) (-24), bigInteger4.byteValue());
      assertEquals((short)1000, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = bigInteger4.and(bigInteger3);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertTrue(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger4));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotNull(bigInteger5);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger1.byteValue());
      assertEquals((short)100, bigInteger1.shortValue());
      assertEquals((short)1000, bigInteger3.shortValue());
      assertEquals((byte) (-24), bigInteger3.byteValue());
      assertEquals((byte) (-24), bigInteger4.byteValue());
      assertEquals((short)1000, bigInteger4.shortValue());
      assertEquals((byte) (-24), bigInteger5.byteValue());
      assertEquals((short)1000, bigInteger5.shortValue());
      
      int int0 = bigInteger4.intValueExact();
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger5));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertEquals(1000, int0);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger1.byteValue());
      assertEquals((short)100, bigInteger1.shortValue());
      assertEquals((byte) (-24), bigInteger4.byteValue());
      assertEquals((short)1000, bigInteger4.shortValue());
      
      BigInteger bigInteger6 = ModPow2.fastMultiply_inline(bigInteger4, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger5));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotNull(bigInteger6);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger1.byteValue());
      assertEquals((short)100, bigInteger1.shortValue());
      assertEquals((byte) (-24), bigInteger4.byteValue());
      assertEquals((short)1000, bigInteger4.shortValue());
      assertEquals((short)10000, bigInteger6.shortValue());
      assertEquals((byte)16, bigInteger6.byteValue());
      
      BigInteger bigInteger7 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger4);
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger5));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertTrue(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotNull(bigInteger7);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)100, bigInteger1.byteValue());
      assertEquals((short)100, bigInteger1.shortValue());
      assertEquals((byte) (-24), bigInteger4.byteValue());
      assertEquals((short)1000, bigInteger4.shortValue());
      assertEquals((byte)16, bigInteger7.byteValue());
      assertEquals((short)10000, bigInteger7.shortValue());
      
      // Undeclared exception!
      try { 
        ModPow2.fastMultiply_1(bigInteger3, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.flipBit(7);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)128, bigInteger1.shortValue());
      assertEquals((byte) (-128), bigInteger1.byteValue());
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger3 = new BigInteger(2100, 983, mockRandom0);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotNull(bigInteger3);
      assertEquals((byte) (-85), bigInteger3.byteValue());
      assertEquals((short)683, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = bigInteger0.or(bigInteger3);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotNull(bigInteger4);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte) (-85), bigInteger3.byteValue());
      assertEquals((short)683, bigInteger3.shortValue());
      assertEquals((byte) (-85), bigInteger4.byteValue());
      assertEquals((short)683, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = BigInteger.ZERO;
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger0);
      assertSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotNull(bigInteger5);
      assertEquals((byte)0, bigInteger5.byteValue());
      assertEquals((short)0, bigInteger5.shortValue());
      
      BigInteger bigInteger6 = BigInteger.TEN;
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotNull(bigInteger6);
      assertEquals((short)10, bigInteger6.shortValue());
      assertEquals((byte)10, bigInteger6.byteValue());
      
      BigInteger bigInteger7 = bigInteger6.not();
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotNull(bigInteger7);
      assertEquals((short)10, bigInteger6.shortValue());
      assertEquals((byte)10, bigInteger6.byteValue());
      assertEquals((short) (-11), bigInteger7.shortValue());
      assertEquals((byte) (-11), bigInteger7.byteValue());
      
      BigInteger bigInteger8 = bigInteger3.setBit(0);
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger7));
      assertTrue(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger7));
      assertTrue(bigInteger8.equals((Object)bigInteger4));
      assertTrue(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger8);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotNull(bigInteger8);
      assertEquals((byte) (-85), bigInteger3.byteValue());
      assertEquals((short)683, bigInteger3.shortValue());
      assertEquals((byte) (-85), bigInteger8.byteValue());
      assertEquals((short)683, bigInteger8.shortValue());
      
      BigInteger bigInteger9 = ModPow2.fastMultiply_1(bigInteger0, bigInteger6);
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger8));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger9.equals((Object)bigInteger6));
      assertFalse(bigInteger9.equals((Object)bigInteger3));
      assertFalse(bigInteger9.equals((Object)bigInteger7));
      assertFalse(bigInteger9.equals((Object)bigInteger4));
      assertTrue(bigInteger9.equals((Object)bigInteger0));
      assertFalse(bigInteger9.equals((Object)bigInteger8));
      assertFalse(bigInteger9.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger9);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger9, bigInteger6);
      assertNotSame(bigInteger9, bigInteger0);
      assertNotSame(bigInteger9, bigInteger3);
      assertNotSame(bigInteger9, bigInteger7);
      assertNotSame(bigInteger9, bigInteger4);
      assertSame(bigInteger9, bigInteger2);
      assertSame(bigInteger9, bigInteger5);
      assertNotSame(bigInteger9, bigInteger8);
      assertNotSame(bigInteger9, bigInteger1);
      assertNotNull(bigInteger9);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger6.shortValue());
      assertEquals((byte)10, bigInteger6.byteValue());
      assertEquals((byte)0, bigInteger9.byteValue());
      assertEquals((short)0, bigInteger9.shortValue());
      
      BigInteger bigInteger10 = ModPow2.fastMultiply_1(bigInteger6, bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger9));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger8));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger1));
      assertFalse(bigInteger10.equals((Object)bigInteger3));
      assertFalse(bigInteger10.equals((Object)bigInteger4));
      assertFalse(bigInteger10.equals((Object)bigInteger8));
      assertFalse(bigInteger10.equals((Object)bigInteger7));
      assertTrue(bigInteger10.equals((Object)bigInteger0));
      assertFalse(bigInteger10.equals((Object)bigInteger6));
      assertNotSame(bigInteger2, bigInteger8);
      assertSame(bigInteger2, bigInteger10);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger4);
      assertSame(bigInteger2, bigInteger9);
      assertNotSame(bigInteger2, bigInteger7);
      assertSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger9);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger10);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger10, bigInteger1);
      assertNotSame(bigInteger10, bigInteger3);
      assertNotSame(bigInteger10, bigInteger4);
      assertNotSame(bigInteger10, bigInteger8);
      assertNotSame(bigInteger10, bigInteger0);
      assertNotSame(bigInteger10, bigInteger7);
      assertSame(bigInteger10, bigInteger2);
      assertSame(bigInteger10, bigInteger5);
      assertNotSame(bigInteger10, bigInteger6);
      assertSame(bigInteger10, bigInteger9);
      assertNotNull(bigInteger10);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((short)10, bigInteger6.shortValue());
      assertEquals((byte)10, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger10.shortValue());
      assertEquals((byte)0, bigInteger10.byteValue());
      
      BigInteger bigInteger11 = ModPow2.fastMultiply_1(bigInteger4, bigInteger4);
      assertFalse(bigInteger0.equals((Object)bigInteger8));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger10));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertTrue(bigInteger0.equals((Object)bigInteger9));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger6));
      assertFalse(bigInteger3.equals((Object)bigInteger7));
      assertFalse(bigInteger3.equals((Object)bigInteger9));
      assertFalse(bigInteger3.equals((Object)bigInteger10));
      assertTrue(bigInteger3.equals((Object)bigInteger8));
      assertTrue(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger7));
      assertFalse(bigInteger4.equals((Object)bigInteger9));
      assertFalse(bigInteger4.equals((Object)bigInteger10));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger3));
      assertTrue(bigInteger4.equals((Object)bigInteger8));
      assertFalse(bigInteger11.equals((Object)bigInteger2));
      assertFalse(bigInteger11.equals((Object)bigInteger5));
      assertFalse(bigInteger11.equals((Object)bigInteger0));
      assertFalse(bigInteger11.equals((Object)bigInteger9));
      assertFalse(bigInteger11.equals((Object)bigInteger6));
      assertFalse(bigInteger11.equals((Object)bigInteger7));
      assertFalse(bigInteger11.equals((Object)bigInteger3));
      assertFalse(bigInteger11.equals((Object)bigInteger4));
      assertFalse(bigInteger11.equals((Object)bigInteger10));
      assertFalse(bigInteger11.equals((Object)bigInteger8));
      assertFalse(bigInteger11.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger11);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger10);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger9);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger7);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger9);
      assertNotSame(bigInteger3, bigInteger10);
      assertNotSame(bigInteger3, bigInteger11);
      assertNotSame(bigInteger3, bigInteger8);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger9);
      assertNotSame(bigInteger4, bigInteger10);
      assertNotSame(bigInteger4, bigInteger8);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger11);
      assertNotSame(bigInteger11, bigInteger2);
      assertNotSame(bigInteger11, bigInteger5);
      assertNotSame(bigInteger11, bigInteger0);
      assertNotSame(bigInteger11, bigInteger9);
      assertNotSame(bigInteger11, bigInteger6);
      assertNotSame(bigInteger11, bigInteger7);
      assertNotSame(bigInteger11, bigInteger3);
      assertNotSame(bigInteger11, bigInteger4);
      assertNotSame(bigInteger11, bigInteger10);
      assertNotSame(bigInteger11, bigInteger8);
      assertNotSame(bigInteger11, bigInteger1);
      assertNotNull(bigInteger11);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte) (-85), bigInteger3.byteValue());
      assertEquals((short)683, bigInteger3.shortValue());
      assertEquals((byte) (-85), bigInteger4.byteValue());
      assertEquals((short)683, bigInteger4.shortValue());
      assertEquals((byte)57, bigInteger11.byteValue());
      assertEquals((short)7737, bigInteger11.shortValue());
      
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.equals(modPow2_0);
      BigInteger bigInteger1 = ModPow2.modPow2_unsafe(bigInteger0, bigInteger0, bigInteger0, 2884);
      bigInteger1.signum();
      bigInteger1.doubleValue();
      BigInteger bigInteger2 = ModPow2.fastMultiply_1(bigInteger1, bigInteger0);
      ModPow2.fastMultiply_1(bigInteger0, bigInteger1);
      BigInteger bigInteger3 = ModPow2.standardMultiply(bigInteger1, bigInteger0);
      BigInteger bigInteger4 = ModPow2.fastMultiply_inline(bigInteger3, bigInteger0);
      assertNotSame(bigInteger0, bigInteger2);
      assertEquals((short)0, bigInteger4.shortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.flipBit(7);
      BigInteger bigInteger2 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger3 = new BigInteger(2100, 983, mockRandom0);
      BigInteger bigInteger4 = bigInteger0.or(bigInteger3);
      BigInteger bigInteger5 = BigInteger.ZERO;
      BigInteger bigInteger6 = BigInteger.TEN;
      bigInteger6.not();
      BigInteger bigInteger7 = BigInteger.TEN;
      BigInteger bigInteger8 = ModPow2.fastMultiply_1(bigInteger0, bigInteger6);
      Random.setNextRandom(2100);
      BigInteger bigInteger9 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger1);
      ModPow2.fastMultiply_inline(bigInteger3, bigInteger4);
      BigInteger bigInteger10 = ModPow2.modPow2_unsafe(bigInteger8, bigInteger7, bigInteger6, 983);
      assertSame(bigInteger10, bigInteger9);
      assertEquals((byte)0, bigInteger8.byteValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      bigInteger1.signum();
      byte[] byteArray0 = new byte[4];
      bigInteger2.min(bigInteger1);
      bigInteger2.bitLength();
      byteArray0[0] = (byte)1;
      bigInteger0.xor(bigInteger2);
      byteArray0[1] = (byte) (-111);
      BigInteger bigInteger3 = bigInteger1.andNot(bigInteger0);
      byteArray0[2] = (byte) (-126);
      BigInteger bigInteger4 = bigInteger0.mod(bigInteger2);
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger5 = bigInteger4.divide(bigInteger1);
      BigInteger bigInteger6 = new BigInteger(byteArray0);
      bigInteger6.compareTo(bigInteger4);
      BigInteger bigInteger7 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger8 = bigInteger0.or(bigInteger6);
      BigInteger bigInteger9 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger0);
      BigInteger bigInteger10 = ModPow2.fastMultiply_inline(bigInteger7, bigInteger4);
      ModPow2 modPow2_0 = new ModPow2();
      BigInteger bigInteger11 = ModPow2.modPow2_unsafe(bigInteger3, bigInteger8, bigInteger2, 1);
      bigInteger7.toString();
      BigInteger bigInteger12 = BigInteger.ZERO;
      ModPow2.fastMultiply_inline(bigInteger12, bigInteger10);
      BigInteger bigInteger13 = ModPow2.modPow2_unsafe(bigInteger5, bigInteger4, bigInteger2, 0);
      assertNotSame(bigInteger13, bigInteger11);
      
      BigInteger bigInteger14 = ModPow2.fastMultiply_1(bigInteger10, bigInteger2);
      ModPow2.fastMultiply_inline(bigInteger4, bigInteger10);
      BigInteger bigInteger15 = BigInteger.ONE;
      ModPow2.fastMultiply_inline(bigInteger15, bigInteger12);
      BigInteger bigInteger16 = BigInteger.TEN;
      ModPow2.fastMultiply_1(bigInteger14, bigInteger16);
      assertSame(bigInteger1, bigInteger13);
      assertEquals((short)0, bigInteger14.shortValue());
      assertNotSame(bigInteger16, bigInteger9);
      assertNotSame(bigInteger1, bigInteger11);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = ModPow2.modPow2_unsafe((BigInteger) null, bigInteger1, bigInteger1, (-1766));
      // Undeclared exception!
      try { 
        bigInteger2.or((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        ModPow2.standardMultiply((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ModPow2", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        ModPow2.modPow2_unsafe(bigInteger0, bigInteger0, bigInteger0, 642);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = ModPow2.modPow2_unsafe(bigInteger1, bigInteger0, bigInteger1, 74);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = ModPow2.modPow2_unsafe(bigInteger0, bigInteger0, bigInteger0, (-76));
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModPow2.modPow2_unsafe((BigInteger) null, (BigInteger) null, (BigInteger) null, 1210);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      assertEquals((byte)100, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = ModPow2.fastMultiply_1(bigInteger0, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ModPow2 modPow2_0 = new ModPow2();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = ModPow2.fastMultiply_1(bigInteger0, bigInteger0);
      BigInteger bigInteger3 = ModPow2.modPow2_unsafe(bigInteger2, bigInteger2, bigInteger1, 4367);
      BigInteger bigInteger4 = ModPow2.modPow2_unsafe(bigInteger3, bigInteger1, bigInteger2, 0);
      assertEquals((short)0, bigInteger3.shortValue());
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertEquals((short)1, bigInteger4.shortValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = ModPow2.standardMultiply(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = ModPow2.fastMultiply_inline(bigInteger0, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
  }
}
