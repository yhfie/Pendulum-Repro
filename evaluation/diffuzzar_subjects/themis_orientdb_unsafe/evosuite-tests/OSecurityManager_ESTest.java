/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 13:21:10 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.NoSuchAlgorithmException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OSecurityManager_ESTest extends OSecurityManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPasswordWithSalt("{SHA-256}{PBKD2W/t", "Hash does not contain the requested parts: <hash>:<salt>:<iterations>", ".kNGCe}_Wo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash does not contain the requested parts: <hash>:<salt>:<iterations>
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      boolean boolean0 = oSecurityManager0.checkPassword_unsafe("o/u^p$|a?N?l_Ls$", "x.T'WQtrlS{\\Tc[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      boolean boolean0 = oSecurityManager0.checkPassword_unsafe("log.file.level", "x.T'WQtrlS{\\Tc[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)31;
      byte[] byteArray1 = new byte[5];
      boolean boolean0 = OSecurityManager.isEqual_inline(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-80);
      boolean boolean0 = OSecurityManager.isEqual_inline(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[9];
      boolean boolean0 = OSecurityManager.isEqual_inline(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      String string0 = oSecurityManager0.createHashWithSalt("SHA-256");
      assertEquals("E07F6C3E0A5BE19D5501D9E9C1434AD7477D0750124F5173:000000000100000002000000030000000400000005000000:65536", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      String string0 = oSecurityManager0.createSHA256("SHA-256");
      assertEquals("BBD07C4FC02C99B97124FEBF42C7B63B5011C0DF28D409FBB486B5A9D2E615EA", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      String string0 = oSecurityManager0.createHashWithSalt("PBKDF2WithHmacSHA1", 24, "PBKDF2WithHmacSHA256");
      assertEquals("F4A2772E93629446F7A6341FEF3B786EFB50D14BE13FB807:000000000100000002000000030000000400000005000000:24", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = OSecurityManager.createHash("SHA-256", "SHA-256");
      assertEquals("BBD07C4FC02C99B97124FEBF42C7B63B5011C0DF28D409FBB486B5A9D2E615EA", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPasswordWithSalt("{pbkdf2withhmacsha256}", "D8A7147F54B33BDDF530B758BFF932CD04B541752DED03A3:000000000100000002000000030000000400000005000000:65536", "&1MTOq-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create a key with 'PBKDF2WithHmacSHA1' algorithm
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      boolean boolean0 = oSecurityManager0.checkPasswordWithSalt("Algoritm s null", "5DCC9B5C95D144817DA50278D4091A9CFE23B794071D17C5:000000000100000002000000030000000400000005000000:65536");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = OSecurityManager.byteArrayToHexStr(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      // Undeclared exception!
      try { 
        oSecurityManager0.equals_inline((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      // Undeclared exception!
      try { 
        oSecurityManager0.createHashWithSalt((String) null, 1789, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.createHashWithSalt("{SHA-256}", 24, "{PBKDF2WithHmauSHA25");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create a key with 'PBKDF2WithHmacSHA1' algorithm
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.createHashWithSalt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPassword_unsafe((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPasswordWithSalt("{PBKDF2WithHmacSHA25", "]8:H3{a:G=<ahu\"qXdR", "H=.$-Er");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPasswordWithSalt("{PBKDF2WithHmacSHA256}", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPasswordWithSalt("{PBKDF2WithHmacSHA256}7DFF1C681A643A728C071795644410AFE4C5DA1F9B5F8A74:000000000100000002000000030000000400000005000000:65536", "{PBKDF2WithHmacSHA256}7DFF1C681A643A728C071795644410AFE4C5DA1F9B5F8A74:000000000100000002000000030000000400000005000000:65536");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPasswordWithSalt("+oZjPaZ|e5[", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPasswordWithSalt("PBKDF2WithHmacSHA256", "{SHA-256}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash does not contain the requested parts: <hash>:<salt>:<iterations>
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-1);
      String string0 = OSecurityManager.byteArrayToHexStr(byteArray0);
      assertEquals("00000000FF", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = OSecurityManager.byteArrayToHexStr((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPasswordWithSalt("", "1BECBDABDCD8F4DA376345CDA4D1429E7194F53B6A56EDA9:000000000100000002000000030000000400000005000000:65536", "1BECBDABDCD8F4DA376345CDA4D1429E7194F53B6A56EDA9:000000000100000002000000030000000400000005000000:65536");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create a key with 'PBKDF2WithHmacSHA1' algorithm
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      byte[] byteArray0 = oSecurityManager0.digestSHA256("");
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      byte[] byteArray0 = oSecurityManager0.digestSHA256((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      boolean boolean0 = oSecurityManager0.equals_inline("82_*.*sOe|", "82_*.*sOe|");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      // Undeclared exception!
      try { 
        oSecurityManager0.createHashWithSalt("STORAGE_MAKE_FULL_CHECKPOINT_AFTER_CLUSTER_CREATE", (-373), "STORAGE_MAKE_FULL_CHECKPOINT_AFTER_CLUSTER_CREATE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid iterationCount value
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      String string0 = oSecurityManager0.createSHA256((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.createHash("{SHA-256}", "{SHA-256}", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Algorithm '{SHA-256}' is not supported
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      String string0 = oSecurityManager0.createHash("{SHA-256}", "SHA-256", true);
      assertEquals("{SHA-256}6055AFAD27FA1F006FC44D3E25C69C8FD0943FA1718DF8202C5919D3B9BD4F4F", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      String string0 = oSecurityManager0.createHash("PBKDF2WithHmacSHA256", "PBKDF2WithHmacSHA256", false);
      assertEquals("00A2DF2F6C72FB7A6B4C86F46CD730D4A522B03DB703FC3D:000000000100000002000000030000000400000005000000:65536", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      // Undeclared exception!
      try { 
        oSecurityManager0.createHash("PBKDF2WithHmacSHA1", (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Algorithm is null
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      // Undeclared exception!
      try { 
        oSecurityManager0.createHash((String) null, "sha-256", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input string is null
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      String string0 = oSecurityManager0.createHash("PBKDF2WithHmacSHA1", "PBKDF2WithHmacSHA1", true);
      assertEquals("{PBKDF2WithHmacSHA1}98018F2B3902617B4C0FB92CF4AD412AA309E91851DFED14:000000000100000002000000030000000400000005000000:65536", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPassword_unsafe("{PBKDF2WithHmacSHA256}", "{PBKDF2WithHmacSHA256}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash does not contain the requested parts: <hash>:<salt>:<iterations>
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      // Undeclared exception!
      try { 
        oSecurityManager0.checkPassword_unsafe("{PBKDF2WithHmacSHA1}", "{PBKDF2WithHmacSHA1}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash does not contain the requested parts: <hash>:<salt>:<iterations>
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      boolean boolean0 = oSecurityManager0.checkPassword_unsafe("{SHA-256}", "{SHA-256}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      boolean boolean0 = oSecurityManager0.equals_inline("sha-256", "SHA-256");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      boolean boolean0 = oSecurityManager0.equals_inline("{PBKDF2WithHmacSHA1}", "{SHA-256}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[2];
      boolean boolean0 = OSecurityManager.isEqual_inline(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      boolean boolean0 = OSecurityManager.isEqual_inline(byteArray0, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = OSecurityManager.isEqual_inline((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = OSecurityManager.isEqual_inline(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = OSecurityManager.isEqual_inline(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        OSecurityManager.createHash((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("OSecurityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      try { 
        OSecurityManager.createHash("", "");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OSecurityManager oSecurityManager0 = OSecurityManager.instance();
      boolean boolean0 = oSecurityManager0.checkPassword_unsafe("STORAGE_MAKE_FULL_CHECKPOINT_AFTER_CLUSTER_CREATE", "STORAGE_MAKE_FULL_CHECKPOINT_AFTER_CLUSTER_CREATE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OSecurityManager oSecurityManager0 = new OSecurityManager();
      boolean boolean0 = oSecurityManager0.checkPasswordWithSalt("00A2DF2F6C72FB7A6B4C86F46CD730D4A522B03DB703FC3D:000000000100000002000000030000000400000005000000:65536", "00A2DF2F6C72FB7A6B4C86F46CD730D4A522B03DB703FC3D:000000000100000002000000030000000400000005000000:65536");
      assertFalse(boolean0);
  }
}
