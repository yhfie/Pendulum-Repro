/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 13:22:32 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;
import org.pac4j.core.context.WebContext;
import org.pac4j.core.credentials.UsernamePasswordCredentials;
import org.skife.jdbi.v2.DBI;
import org.skife.jdbi.v2.tweak.ConnectionFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DbAuthenticator_ESTest extends DbAuthenticator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
      
      dbAuthenticator0.startQuery = "";
      dbAuthenticator0.getStartQuery();
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
      
      dbAuthenticator0.endQuery = null;
      dbAuthenticator0.getEndQuery();
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
      
      dbAuthenticator0.endQuery = "";
      dbAuthenticator0.getEndQuery();
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      dbAuthenticator0.setDataSource(jdbcDataSource0);
      JdbcDataSource jdbcDataSource1 = (JdbcDataSource)dbAuthenticator0.getDataSource();
      assertEquals(0, jdbcDataSource1.getTraceId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      dbAuthenticator0.setAttributes((String) null);
      dbAuthenticator0.getAttributes();
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(connectionFactory0).openConnection();
      DBI dBI0 = new DBI(connectionFactory0);
      dbAuthenticator0.dbi = dBI0;
      WebContext webContext0 = mock(WebContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dbAuthenticator0.validate((UsernamePasswordCredentials) null, webContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.skife.jdbi.v2.BasicHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      // Undeclared exception!
      try { 
        dbAuthenticator0.createProfile((String) null, (String[]) null, (Map<String, Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // id cannot be null
         //
         verifyException("org.pac4j.core.util.CommonHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        dbAuthenticator0.createProfile("L", (String[]) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DbAuthenticator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      // Undeclared exception!
      try { 
        dbAuthenticator0.validate_unsafe((UsernamePasswordCredentials) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot fetch username / password from DB
         //
         verifyException("DbAuthenticator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[9];
      dbAuthenticator0.createProfile("p", stringArray0, hashMap0);
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      dbAuthenticator0.setAttributes("No account found for: ");
      ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(connectionFactory0).openConnection();
      DBI dBI0 = new DBI(connectionFactory0);
      dbAuthenticator0.dbi = dBI0;
      UsernamePasswordCredentials usernamePasswordCredentials0 = new UsernamePasswordCredentials("No account found for: ", "No account found for: ", "No account found for: ");
      // Undeclared exception!
      try { 
        dbAuthenticator0.validate_unsafe(usernamePasswordCredentials0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.skife.jdbi.v2.BasicHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(connectionFactory0).openConnection();
      DBI dBI0 = new DBI(connectionFactory0);
      dbAuthenticator0.dbi = dBI0;
      UsernamePasswordCredentials usernamePasswordCredentials0 = new UsernamePasswordCredentials("", "", "");
      // Undeclared exception!
      try { 
        dbAuthenticator0.validate_unsafe(usernamePasswordCredentials0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.skife.jdbi.v2.BasicHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
      
      dbAuthenticator0.setStartQuery((String) null);
      dbAuthenticator0.getStartQuery();
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      dbAuthenticator0.setAttributes("Lw!:)*~Ns;]");
      dbAuthenticator0.getAttributes();
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      dbAuthenticator0.getAttributes();
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
      
      dbAuthenticator0.setEndQuery((String) null);
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      String string0 = dbAuthenticator0.getEndQuery();
      assertEquals(" from users where username = :username", string0);
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      dbAuthenticator0.getDataSource();
      assertEquals("select username, password", dbAuthenticator0.getStartQuery());
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      String string0 = dbAuthenticator0.getStartQuery();
      assertEquals("select username, password", string0);
      assertEquals(" from users where username = :username", dbAuthenticator0.getEndQuery());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DbAuthenticator dbAuthenticator0 = new DbAuthenticator();
      // Undeclared exception!
      try { 
        dbAuthenticator0.validate((UsernamePasswordCredentials) null, (WebContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot fetch username / password from DB
         //
         verifyException("DbAuthenticator", e);
      }
  }
}
