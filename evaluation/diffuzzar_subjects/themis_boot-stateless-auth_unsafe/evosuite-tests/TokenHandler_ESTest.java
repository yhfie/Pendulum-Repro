/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 13:16:46 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jdriven.stateless.security.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TokenHandler_ESTest extends TokenHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte) (-76);
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, true);
      tokenHandler0.parseUserFromToken_unsafe("");
      User user0 = new User("");
      user0.setPassword("");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte)0;
      TokenHandler.unsafe_isEqual(byteArray0, byteArray1);
      tokenHandler0.createTokenForUser(user0);
      tokenHandler0.parseUserFromToken("");
      tokenHandler0.createTokenForUser((User) null);
      System.setCurrentTimeMillis((byte)0);
      TokenHandler tokenHandler1 = new TokenHandler(byteArray0, false);
      User user1 = tokenHandler1.parseUserFromToken_unsafe("eyJpZCI6bnVsbCwidXNlcm5hbWUiOiIiLCJleHBpcmVzIjowLCJyb2xlcyI6W119.flqFUP6iRiOMbmtgXraVxdjQZT82KG65vlxo5dgdW2M=");
      assertNull(user1.getUsername());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, true);
      // Undeclared exception!
      try { 
        tokenHandler0.parseUserFromToken_unsafe((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TokenHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, true);
      // Undeclared exception!
      try { 
        tokenHandler0.parseUserFromToken_unsafe("q*mh?d@.=");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.bind.DatatypeConverterImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, false);
      // Undeclared exception!
      try { 
        tokenHandler0.parseUserFromToken_unsafe("VL!R]UZKr6=.s_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, false);
      // Undeclared exception!
      try { 
        tokenHandler0.parseUserFromToken((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TokenHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, true);
      // Undeclared exception!
      try { 
        tokenHandler0.parseUserFromToken("q*mh?d@.=");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.bind.DatatypeConverterImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, false);
      // Undeclared exception!
      try { 
        tokenHandler0.parseUserFromToken("VL!R]UZKr6=.s_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TokenHandler tokenHandler0 = null;
      try {
        tokenHandler0 = new TokenHandler(byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = TokenHandler.unsafe_isEqual(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, false);
      tokenHandler0.createTokenForUser(tokenHandler0.VALID_USER);
      User user0 = tokenHandler0.parseUserFromToken_unsafe("eyJpZCI6bnVsbCwidXNlcm5hbWUiOm51bGwsImV4cGlyZXMiOjEzOTI0MDkzODEzMjAsInJvbGVzIjpbXX0=.l28J3UX6Zx0qoIKhQo/OmRhx2hwLAgvHYjc1QpRJofs=");
      assertNull(user0.getNewPassword());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, true);
      User user0 = tokenHandler0.parseUserFromToken_unsafe(".;/:S");
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, true);
      User user0 = tokenHandler0.parseUserFromToken_unsafe("eyJpZCI6bnVsbCwidXNlcm5hbWUiOm51bGwsImV4cGlyZXMiOi0xMSwicm9sZXMiOltdfQ==.JrEc6j4zDG5+zUiPNOOCvuD81gk0WtvOPEGq06npXUU=");
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-76);
      byte[] byteArray1 = new byte[2];
      boolean boolean0 = TokenHandler.unsafe_isEqual(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = TokenHandler.unsafe_isEqual(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = TokenHandler.unsafe_isEqual((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      boolean boolean0 = TokenHandler.unsafe_isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, false);
      User user0 = tokenHandler0.parseUserFromToken("q*m;|Uh?d@.=4");
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, true);
      User user0 = tokenHandler0.parseUserFromToken("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer");
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, false);
      tokenHandler0.createTokenForUser(tokenHandler0.VALID_USER);
      User user0 = tokenHandler0.parseUserFromToken("eyJpZCI6bnVsbCwidXNlcm5hbWUiOm51bGwsImV4cGlyZXMiOjAsInJvbGVzIjpbXX0=.KeUnYxGPYpq3c1ZwbVsCmgUaQIJCEbbvUeP7Rgv4TIk=");
      String string0 = tokenHandler0.createTokenForUser(user0);
      assertEquals("eyJpZCI6bnVsbCwidXNlcm5hbWUiOm51bGwsImV4cGlyZXMiOjEzOTI0MDkzODEzMjAsInJvbGVzIjpbXX0=.l28J3UX6Zx0qoIKhQo/OmRhx2hwLAgvHYjc1QpRJofs=", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      TokenHandler tokenHandler0 = new TokenHandler(byteArray0, false);
      User user0 = tokenHandler0.parseUserFromToken("eyJpZCI6bnVsbCwidXNlcm5hbWUiOm51bGwsImV4cGlyZXMiOjAsInJvbGVzIjpbXX0=.KeUnYxGPYpq3c1ZwbVsCmgUaQIJCEbbvUeP7Rgv4TIk=");
      assertTrue(user0.isEnabled());
  }
}
