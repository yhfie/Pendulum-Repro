/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 13:13:59 GMT 2022
 */

package org.jasypt.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jasypt.digest.StandardByteDigester;
import org.jasypt.digest.config.DigesterConfig;
import org.jasypt.salt.RandomSaltGenerator;
import org.jasypt.salt.SaltGenerator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StandardByteDigester_ESTest extends StandardByteDigester_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setUseLenientSaltSizeCheck(true);
      standardByteDigester0.setSaltSizeBytes(2800);
      byte[] byteArray1 = standardByteDigester0.digest(byteArray0);
      boolean boolean0 = standardByteDigester0.matches_unsafe(byteArray0, byteArray1);
      assertEquals(2816, byteArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setUseLenientSaltSizeCheck(true);
      boolean boolean0 = standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      Integer integer0 = new Integer((-1723));
      Integer integer1 = new Integer(8);
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("=s71'):+}DN").when(digesterConfig0).getAlgorithm();
      doReturn(integer0).when(digesterConfig0).getIterations();
      doReturn(integer1).when(digesterConfig0).getSaltSizeBytes();
      standardByteDigester0.setConfig(digesterConfig0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of iterations must be greater than zero
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setIterations((byte) (-66));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of iterations must be greater than zero
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.cloneDigester();
      boolean boolean0 = standardByteDigester0.isInitialized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setSaltGenerator((SaltGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Salt generator cannot be set null
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setProviderName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Provider name cannot be set null
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setProvider((Provider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Provider cannot be set null
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setConfig((DigesterConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config cannot be set null
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setAlgorithm((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Algorithm cannot be empty
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setProviderName("");
      // Undeclared exception!
      try { 
        standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // missing provider
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn((Integer) null).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn((Integer) null).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      // Undeclared exception!
      try { 
        standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setProviderName("");
      // Undeclared exception!
      try { 
        standardByteDigester0.initialize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // missing provider
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setProviderName(",Swp3tg,knj@1_`w");
      // Undeclared exception!
      try { 
        standardByteDigester0.digest(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.security.NoSuchProviderException: no such provider: ,Swp3tg,knj@1_`w
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setProviderName("");
      // Undeclared exception!
      try { 
        standardByteDigester0.digest(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // missing provider
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn((Integer) null).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn((Integer) null).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      byte[] byteArray1 = standardByteDigester0.digest(byteArray0);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-47);
      byte[] byteArray1 = new byte[2];
      boolean boolean0 = StandardByteDigester.jdkArraysEquals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      boolean boolean0 = StandardByteDigester.jdkArraysEquals(byteArray0, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      byte[] byteArray1 = standardByteDigester0.digest(byteArray0);
      boolean boolean0 = StandardByteDigester.jdkArraysEquals(byteArray0, byteArray1);
      assertEquals(24, byteArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      StandardByteDigester standardByteDigester1 = standardByteDigester0.cloneDigester();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("MD5").when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn(1000).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn(8).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester1.setConfig(digesterConfig0);
      standardByteDigester1.initialize();
      assertTrue(standardByteDigester0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn((Integer) null).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn((Integer) null).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      standardByteDigester0.initialize();
      assertEquals(8, StandardByteDigester.DEFAULT_SALT_SIZE_BYTES);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      boolean boolean0 = standardByteDigester0.isInitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = StandardByteDigester.jdkArraysEquals(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = StandardByteDigester.jdkArraysEquals((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = StandardByteDigester.jdkArraysEquals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setInvertPositionOfPlainSaltInEncryptionResults(true);
      byte[] byteArray1 = standardByteDigester0.digest(byteArray0);
      boolean boolean0 = standardByteDigester0.matches_unsafe(byteArray0, byteArray1);
      assertEquals(24, byteArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setUseLenientSaltSizeCheck(true);
      // Undeclared exception!
      try { 
        standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setUseLenientSaltSizeCheck(true);
      boolean boolean0 = standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setSaltSizeBytes(0);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      boolean boolean0 = standardByteDigester0.matches_unsafe(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      boolean boolean0 = standardByteDigester0.matches_unsafe((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      boolean boolean0 = standardByteDigester0.matches_unsafe((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setInvertPositionOfSaltInMessageBeforeDigesting(true);
      byte[] byteArray1 = standardByteDigester0.digest(byteArray0);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      byte[] byteArray1 = standardByteDigester0.digest(byteArray0);
      byte[] byteArray2 = standardByteDigester0.digest(byteArray1);
      assertEquals(24, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      byte[] byteArray0 = standardByteDigester0.digest((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setUseLenientSaltSizeCheck(false);
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("HEXADEC").when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn(1000).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn(8).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      // Undeclared exception!
      try { 
        standardByteDigester0.initialize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.security.NoSuchAlgorithmException: HEXADEC MessageDigest not available
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setInvertPositionOfPlainSaltInEncryptionResults(true);
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("MD5").when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn(8).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn(1000).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      standardByteDigester0.initialize();
      assertTrue(standardByteDigester0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      RandomSaltGenerator randomSaltGenerator0 = new RandomSaltGenerator();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("MD5").when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn(8).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn(1000).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setSaltGenerator(randomSaltGenerator0);
      standardByteDigester0.setConfig(digesterConfig0);
      standardByteDigester0.initialize();
      assertEquals(8, StandardByteDigester.DEFAULT_SALT_SIZE_BYTES);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("MD5").when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn(standardByteDigester0.DEFAULT_SALT_SIZE_BYTES).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn(standardByteDigester0.DEFAULT_ITERATIONS).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      standardByteDigester0.setIterations(7);
      standardByteDigester0.cloneDigester();
      assertTrue(standardByteDigester0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setAlgorithm("0X");
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("MD5").when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn(8).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn(standardByteDigester0.DEFAULT_ITERATIONS).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      // Undeclared exception!
      try { 
        standardByteDigester0.matches_unsafe(byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.security.NoSuchAlgorithmException: 0X MessageDigest not available
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      Boolean boolean0 = new Boolean("MD5");
      RandomSaltGenerator randomSaltGenerator0 = new RandomSaltGenerator();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("MD5").when(digesterConfig0).getAlgorithm();
      doReturn(boolean0).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn(boolean0).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn(1000).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn("MD5").when(digesterConfig0).getProviderName();
      doReturn(randomSaltGenerator0).when(digesterConfig0).getSaltGenerator();
      doReturn((Integer) null).when(digesterConfig0).getSaltSizeBytes();
      doReturn(boolean0).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      // Undeclared exception!
      try { 
        standardByteDigester0.initialize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.security.NoSuchProviderException: no such provider: MD5
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(digesterConfig0).getAlgorithm();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfPlainSaltInEncryptionResults();
      doReturn((Boolean) null).when(digesterConfig0).getInvertPositionOfSaltInMessageBeforeDigesting();
      doReturn((Integer) null).when(digesterConfig0).getIterations();
      doReturn((Provider) null).when(digesterConfig0).getProvider();
      doReturn((String) null).when(digesterConfig0).getProviderName();
      doReturn((SaltGenerator) null).when(digesterConfig0).getSaltGenerator();
      doReturn((Integer) null).when(digesterConfig0).getSaltSizeBytes();
      doReturn((Boolean) null).when(digesterConfig0).getUseLenientSaltSizeCheck();
      standardByteDigester0.setConfig(digesterConfig0);
      standardByteDigester0.cloneDigester();
      assertTrue(standardByteDigester0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      Integer integer0 = new Integer((-174));
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("MD5").when(digesterConfig0).getAlgorithm();
      doReturn(integer0).when(digesterConfig0).getSaltSizeBytes();
      standardByteDigester0.setConfig(digesterConfig0);
      // Undeclared exception!
      try { 
        standardByteDigester0.initialize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Salt size in bytes must be non-negative
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.cloneDigester();
      standardByteDigester0.initialize();
      assertEquals(8, StandardByteDigester.DEFAULT_SALT_SIZE_BYTES);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.cloneDigester();
      standardByteDigester0.cloneDigester();
      assertTrue(standardByteDigester0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.initialize();
      // Undeclared exception!
      try { 
        standardByteDigester0.setUseLenientSaltSizeCheck(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.initialize();
      // Undeclared exception!
      try { 
        standardByteDigester0.setInvertPositionOfPlainSaltInEncryptionResults(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.initialize();
      // Undeclared exception!
      try { 
        standardByteDigester0.setInvertPositionOfSaltInMessageBeforeDigesting(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.cloneDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setProviderName("MD5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.setProviderName("");
      // Undeclared exception!
      try { 
        standardByteDigester0.cloneDigester();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // missing provider
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      RandomSaltGenerator randomSaltGenerator0 = new RandomSaltGenerator();
      standardByteDigester0.cloneDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setSaltGenerator(randomSaltGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.cloneDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setIterations(1000);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setIterations(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of iterations must be greater than zero
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      assertFalse(standardByteDigester0.isInitialized());
      
      standardByteDigester0.setSaltSizeBytes(0);
      byte[] byteArray0 = new byte[0];
      standardByteDigester0.digest(byteArray0);
      assertTrue(standardByteDigester0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.cloneDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setSaltSizeBytes(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setSaltSizeBytes((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Salt size in bytes must be non-negative
         //
         verifyException("org.jasypt.commons.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.initialize();
      DigesterConfig digesterConfig0 = mock(DigesterConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        standardByteDigester0.setConfig(digesterConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      standardByteDigester0.cloneDigester();
      // Undeclared exception!
      try { 
        standardByteDigester0.setAlgorithm("MD5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encryption entity already initialized
         //
         verifyException("org.jasypt.digest.StandardByteDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StandardByteDigester standardByteDigester0 = new StandardByteDigester();
      boolean boolean0 = standardByteDigester0.matches((byte[]) null, (byte[]) null);
      assertFalse(boolean0);
      assertFalse(standardByteDigester0.isInitialized());
  }
}
